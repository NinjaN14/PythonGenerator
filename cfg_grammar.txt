# This is for Python 2.7. Alternator has lowest precedence.

single_input -> NEWLINE
single_input -> simple_stmt
single_input -> compound_stmt NEWLINE

#file_input: (NEWLINE | stmt)* ENDMARKER
file_input -> ENDMARKER
file_input -> newline_or_stmt_plus ENDMARKER
newline_or_stmt_plus -> newline_or_stmt newline_or_stmt_plus
newline_or_stmt_plus -> newline_or_stmt
newline_or_stmt -> NEWLINE
newline_or_stmt -> stmt

#eval_input: testlist NEWLINE* ENDMARKER
eval_input -> testlist ENDMARKER
eval_input -> testlist newline_plus ENDMARKER
newline_plus -> NEWLINE newline_plus
newline_plus -> NEWLINE

decorator -> '@' dotted_name '(' arglist ')' NEWLINE
decorator -> '@' dotted_name '(' ')' NEWLINE
decorator -> '@' dotted_name NEWLINE
decorators -> decorator
decorators -> decorators decorator
decorated -> decorators classdef
decorated -> decorators funcdef
funcdef -> 'def' NAME parameters ':' suite

parameters -> '(' varargslist ')'
parameters -> '(' ')'

# varargslist: ((fpdef ['=' test] ',')* ('*' NAME [',' '**' NAME] | '**' NAME) | fpdef ['=' test] (',' fpdef ['=' test])* [','])
varargslist -> varargslist1
varargslist -> varargslist2
varargslist1 -> varargslist12
varargslist1 -> varargslist11 varargslist12
varargslist11 -> fpdef ','
varargslist11 -> fpdef ',' varargslist11
varargslist11 -> fpdef '=' test ','
varargslist11 -> fpdef '=' test ',' varargslist11
varargslist12 -> '*' NAME ',' '**' NAME
varargslist12 -> '*' NAME
varargslist12 -> '**' NAME
varargslist2 -> fpdef
varargslist2 -> fpdef ','
varargslist2 -> fpdef varargslist22
varargslist2 -> fpdef varargslist22 ','
varargslist2 -> fpdef '=' test
varargslist2 -> fpdef '=' test ','
varargslist2 -> fpdef '=' test varargslist22
varargslist2 -> fpdef '=' test varargslist22 ','
varargslist22 -> ',' fpdef '=' test
varargslist22 -> ',' fpdef '=' test varargslist22
varargslist22 -> ',' fpdef
varargslist22 -> ',' fpdef varargslist22

#fpdef: NAME | '(' fplist ')'
fpdef -> NAME
fpdef -> '(' fplist ')'

#fplist: fpdef (',' fpdef)* [',']
fplist -> fpdef comma_fpdef_plus ','
fplist -> fpdef ','
fplist -> fpdef comma_fpdef_plus
fplist -> fpdef
comma_fpdef_plus -> ',' fpdef
comma_fpdef_plus -> ',' fpdef comma_fpdef_plus

stmt -> simple_stmt
stmt -> compound_stmt

#simple_stmt: small_stmt (';' small_stmt)* [';'] NEWLINE
simple_stmt -> small_stmt NEWLINE
simple_stmt -> small_stmt ';' NEWLINE
simple_stmt -> small_stmt semi_small_stmt_plus NEWLINE
simple_stmt -> small_stmt semi_small_stmt_plus ';' NEWLINE
semi_small_stmt_plus -> ';' small_stmt
semi_small_stmt_plus -> ';' small_stmt semi_small_stmt_plus

small_stmt -> expr_stmt | print_stmt  | del_stmt | pass_stmt | flow_stmt | import_stmt | global_stmt | exec_stmt | assert_stmt

# expr_stmt: testlist (augassign (yield_expr|testlist) | ('=' (yield_expr|testlist))*)
expr_stmt -> testlist expr_stmt1
expr_stmt -> testlist expr_stmt2
expr_stmt -> testlist
expr_stmt1 -> augassign yield_expr
expr_stmt1 -> augassign testlist
expr_stmt2 -> '=' yield_expr
expr_stmt2 -> '=' yield_expr expr_stmt2
expr_stmt2 -> '=' testlist
expr_stmt2 -> '=' testlist expr_stmt2

augassign -> '+='
augassign -> '-='
augassign -> '*='
augassign -> '/='
augassign -> '%='
augassign -> '&='
augassign -> '|='
augassign -> '^='
augassign -> '<<='
augassign -> '>>='
augassign -> '**='
augassign -> '//='

# print_stmt: 'print' ( [ test (',' test)* [','] ] | '>>' test [ (',' test)+ [','] ] )
print_stmt -> 'print'
print_stmt -> 'print' test ','
print_stmt -> 'print' test
print_stmt -> 'print' test comma_test_plus ','
print_stmt -> 'print' test comma_test_plus
print_stmt -> '>>' test
print_stmt -> '>>' test comma_test_plus
print_stmt -> '>>' test comma_test_plus ','
comma_test_plus -> ',' test
comma_test_plus -> ',' test comma_test_plus

del_stmt -> 'del' exprlist
pass_stmt -> 'pass'
flow_stmt -> break_stmt | continue_stmt | return_stmt | raise_stmt | yield_stmt
break_stmt -> 'break'
continue_stmt -> 'continue'
return_stmt -> 'return' testlist
return_stmt -> 'return'
yield_stmt -> yield_expr

#raise_stmt: 'raise' [test [',' test [',' test]]]
raise_stmt -> 'raise'
raise_stmt -> 'raise' test
raise_stmt -> 'raise' test ',' test
raise_stmt -> 'raise' test ',' test ',' test

import_stmt -> import_name | import_from
import_name -> 'import' dotted_as_names

#import_from: ('from' ('.'* dotted_name | '.'+) 'import' ('*' | '(' import_as_names ')' | import_as_names))
import_from -> 'from' from_import_agent 'import' from_importee
from_importee -> '*'
from_importee -> '(' import_as_names ')'
from_importee -> import_as_names
from_import_agent -> dotted_name
from_import_agent -> dot_plus dotted_name
from_import_agent -> dot_plus
dot_plus -> '.' dot_plus
dot_plus -> '.'

import_as_name -> NAME
import_as_name -> NAME 'as' NAME
dotted_as_name -> dotted_name
dotted_as_name -> dotted_name 'as' NAME

#import_as_names: import_as_name (',' import_as_name)* [',']
import_as_names -> import_as_name ','
import_as_names -> import_as_name cian_plus ','
import_as_names -> import_as_name
import_as_names -> import_as_name cian_plus
cian_plus -> ',' import_as_name
cian_plus -> cian_plus ',' import_as_name

#dotted_as_names: dotted_as_name (',' dotted_as_name)*
dotted_as_names -> dotted_as_name
dotted_as_names -> dotted_as_name cdan_plus
cdan_plus -> ',' dotted_as_name
cdan_plus -> cdan_plus ',' dotted_as_name

#dotted_name: NAME ('.' NAME)*
dotted_name -> NAME
dotted_name -> NAME dot_name_plus
dot_name_plus -> '.' NAME
dot_name_plus -> dot_name_plus '.' NAME

#global_stmt: 'global' NAME (',' NAME)*
global_stmt -> 'global' NAME
global_stmt -> 'global' NAME comma_name_plus
comma_name_plus -> ',' NAME
comma_name_plus -> comma_name_plus ',' NAME

#exec_stmt: 'exec' expr ['in' test [',' test]]
exec_stmt -> 'exec' expr
exec_stmt -> 'exec' expr 'in' test
exec_stmt -> 'exec' expr 'in' test ',' test

#assert_stmt: 'assert' test [',' test]
assert_stmt -> 'assert' test
assert_stmt -> 'assert' test ',' test

compound_stmt -> if_stmt | while_stmt | for_stmt | try_stmt | with_stmt | funcdef | classdef | decorated

#if_stmt: 'if' test ':' suite ('elif' test ':' suite)* ['else' ':' suite]
if_stmt -> 'if' test ':' suite elif_test_suite 'else' ':' suite
if_stmt -> 'if' test ':' suite 'else' ':' suite
if_stmt -> 'if' test ':' suite elif_test_suite
if_stmt -> 'if' test ':' suite
elif_test_suite -> 'elif' test ':' suite
elif_test_suite -> 'elif' test ':' suite elif_test_suite

while_stmt -> 'while' test ':' suite 'else' ':' suite
while_stmt -> 'while' test ':' suite

for_stmt -> 'for' exprlist 'in' testlist ':' suite 'else' ':' suite
for_stmt -> 'for' exprlist 'in' testlist ':' suite

# try_stmt: ('try' ':' suite ((except_clause ':' suite)+ ['else' ':' suite] ['finally' ':' suite] | 'finally' ':' suite))
try_stmt -> 'try' ':' suite tryee
tryee -> tryee1
tryee -> 'finally' ':' suite
tryee1 -> ex_clause_suite_plus 'else' ':' suite 'finally' ':' suite
tryee1 -> ex_clause_suite_plus 'else' ':' suite
tryee1 -> ex_clause_suite_plus 'finally' ':' suite
tryee1 -> ex_clause_suite_plus
ex_clause_suite_plus -> except_clause ':' suite
ex_clause_suite_plus -> ex_clause_suite_plus except_clause ':' suite

# with_stmt: 'with' with_item (',' with_item)*  ':' suite
with_stmt -> 'with' with_item comma_with_item_plus ':' suite
with_stmt -> 'with' with_item ':' suite
comma_with_item_plus -> ',' with_item
comma_with_item_plus -> ',' with_item comma_with_item_star

with_item -> test 'as' expr
with_item -> test

# except_clause: 'except' [test [('as' | ',') test]]
except_clause -> 'except' test 'as' test
except_clause -> 'except' test ',' test
except_clause -> 'except' test
except_clause -> 'except'

suite -> simple_stmt | NEWLINE INDENT stmt_plus DEDENT
stmt_plus -> stmt
stmt_plus -> stmt stmt_plus

# testlist_safe: old_test [(',' old_test)+ [',']]
testlist_safe -> old_test cold_test_plus ','
testlist_safe -> old_test cold_test_plus
testlist_safe -> old_test

cold_test_plus -> ',' old_test
cold_test_plus -> ',' old_test cold_test_plus
old_test -> or_test | old_lambdef
old_lambdef -> 'lambda' varargslist ':' old_test
old_lambdef -> 'lambda' ':' old_test

test -> or_test 'if' or_test 'else' test
test -> or_test
test -> lambdef

#or_test: and_test ('or' and_test)*
or_test -> and_test orand_test_plus
or_test -> and_test
orand_test_plus -> 'or' and_test
orand_test_plus -> 'or' and_test orand_test_plus

#and_test: not_test ('and' not_test)*
and_test -> not_test andnot_test_plus
and_test -> not_test
andnot_test_plus -> 'and' not_test
andnot_test_plus -> 'and' not_test andnot_test_plus

not_test -> 'not' not_test
not_test -> comparison

#comparison: expr (comp_op expr)*
comparison -> expr comp_op_expr_plus
comparison -> expr
comp_op_expr_plus -> comp_op expr
comp_op_expr_plus -> comp_op expr comp_op_expr_plus

comp_op -> '<'|'>'|'=='|'>='|'<='|'<>'|'!='|'in'|'not' 'in'|'is'|'is' 'not'

#expr: xor_expr ('|' xor_expr)*
expr -> xor_expr pipe_xor_expr_plus
expr -> xor_expr
pipe_xor_expr_plus -> '|' xor expr
pipe_xor_expr_plus -> '|' xor expr pipe_xor_expr_plus

#xor_expr: and_expr ('^' and_expr)*
xor_expr -> and_expr hat_and_expr_plus
xor_expr -> and_expr 
hat_and_expr_plus -> '^' and_expr
hat_and_expr_plus -> '^' and_expr hat_and_expr_plus

#and_expr: shift_expr ('&' shift_expr)*
and_expr -> shift_expr amp_shift_expr_plus
and_expr -> shift_expr
amp_shift_expr_plus -> '&' shift_expr
amp_shift_expr_plus -> '&' shift_expr amp_shift_expr_plus

#shift_expr: arith_expr (('<<'|'>>') arith_expr)*
shift_expr -> arith_expr doubles_arith_expr_plus
shift_expr -> arith_expr
doubles_arith_expr_plus -> '<<' arith_expr
doubles_arith_expr_plus -> '<<' arith_expr doubles_arith_expr_plus
doubles_arith_expr_plus -> '>>' arith_expr
doubles_arith_expr_plus -> '>>' arith_expr doubles_arith_expr_plus

#arith_expr: term (('+'|'-') term)*
arith_expr -> term pm_term_plus
arith_expr -> term 
pm_term_plus -> '+' term
pm_term_plus -> '+' term pm_term_plus
pm_term_plus -> '-' term
pm_term_plus -> '-' term pm_term_plus

#term: factor (('*'|'/'|'%'|'//') factor)*
term -> factor times_factor_plus
term -> factor
times_factor_plus -> times_factor factor
times_factor_plus -> times_factor factor times_factor_plus
times_factor -> '*'|'/'|'%'|'//'

factor -> '+' factor | power
factor -> '-' factor | power
factor -> '~' factor | power

#power: atom trailer* ['**' factor]
power -> atom trailer_plus '**' factor
power -> atom '**' factor
power -> atom trailer_plus
power -> atom
trailer_plus -> trailer
trailer_plus -> trailer trailer_star

atom -> '(' testlist_comp ')'
atom -> '(' yield_expr ')'
atom -> '(' ')'
atom -> '[' listmaker ']'
atom -> '[' ']'
atom -> '{' dictorsetmaker '}'
atom -> '{' '}'
atom -> '`' testlist1 '`'
atom -> NAME
atom -> NUMBER
atom -> string_plus
string_plus -> STRING
string_plus -> STRING string_plus

#listmaker: test ( list_for | (',' test)* [','] )
listmaker -> test list_for 
listmaker -> test comma_test_plus ','
listmaker -> test ','
listmaker -> test comma_test_plus
listmaker -> test

#testlist_comp: test ( comp_for | (',' test)* [','] )
testlist_comp -> test comp_for
testlist_comp -> test comma_test_plus ','
testlist_comp -> test ','
testlist_comp -> test comma_test_plus
testlist_comp -> test

lambdef -> 'lambda' varargslist ':' test
lambdef -> 'lambda' ':' test

trailer -> '(' arglist ')'
trailer -> '(' ')'
trailer -> '[' subscriptlist ']'
trailer -> '.' NAME

#subscriptlist: subscript (',' subscript)* [',']
subscriptlist -> subscript comma_subscript_plus ','
subscriptlist -> subscript ','
subscriptlist -> subscript comma_subscript_plus
subscriptlist -> subscript
comma_subscript_plus -> ',' subscript
comma_subscript_plus -> ',' subscript comma_subscript_plus

#subscript: '.' '.' '.' | test | [test] ':' [test] [sliceop]
subscript -> '.' '.' '.' 
subscript -> test
subscript -> test ':' sliceop
subscript -> ':' sliceop
subscript -> test ':' test sliceop
subscript -> ':' test sliceop
subscript -> test ':' test
subscript -> ':' test
subscript -> test ':'
subscript -> ':'

sliceop -> ':' test
sliceop -> ':'

#exprlist: expr (',' expr)* [',']
exprlist -> expr comma_expr_plus ','
exprlist -> expr ','
exprlist -> expr comma_expr_plus
exprlist -> expr
comma_expr_plus -> ',' expr
comma_expr_plus -> ',' expr comma_expr_plus

#testlist: test (',' test)* [',']
testlist -> test comma_test_plus ','
testlist -> test ','
testlist -> test comma_test_plus
testlist -> test

#dictorsetmaker: ( (test ':' test (comp_for | (',' test ':' test)* [','])) | (test (comp_for | (',' test)* [','])) )
dictorsetmaker -> dictorsetmaker1
dictorsetmaker -> dictorsetmaker2
dictorsetmaker1 -> test ':' test dictorsetmaker12
dictorsetmaker1 -> test ':' test
dictorsetmaker2 -> test dictorsetmaker22
dictorsetmaker2 -> test
dictorsetmaker12 -> comp_for
dictorsetmaker12 -> comma_testCtest_plus ','
dictorsetmaker12 -> ','
dictorsetmaker12 -> comma_testCtest_plus
comma_testCtest_plus -> ',' test ':' test
comma_testCtest_plus -> ',' test ':' test comma_testCtest_plus
dictorsetmaker22 -> comp_for
dictorsetmaker22 -> comma_test_plus ','
dictorsetmaker22 -> ','
dictorsetmaker22 -> comma_test_plus

classdef -> 'class' NAME '(' testlist ')' ':' suite
classdef -> 'class' NAME '(' ')' ':' suite
classdef -> 'class' NAME ':' suite

#arglist: (argument ',')* (argument [','] |'*' test (',' argument)* [',' '**' test] |'**' test)
arglist -> arg_comma_plus arglist2
arglist -> arglist2
arglist2 -> arglist21
arglist2 -> arglist22
arglist2 -> arglist23
arglist21 -> argument ','
arglist21 -> argument
arglist22 -> '*' test comma_arg_plus ',' '**' test
arglist22 -> '*' test ',' '**' test
arglist22 -> '*' test comma_arg_plus 
arglist22 -> '*' test 
arglist23 -> '**' test
arg_comma_plus -> argument ','
arg_comma_plus -> argument ',' arg_comma_plus
comma_arg_plus -> ',' argument
comma_arg_plus -> ',' argument comma_arg_star

argument -> test comp_for
argument -> test
argument -> test '=' test

list_iter -> list_for | list_if
list_for -> 'for' exprlist 'in' testlist_safe list_iter
list_for -> 'for' exprlist 'in' testlist_safe

list_if -> 'if' old_test list_iter
list_if -> 'if' old_test

comp_iter -> comp_for | comp_if
comp_for -> 'for' exprlist 'in' or_test comp_iter
comp_for -> 'for' exprlist 'in' or_test
comp_if -> 'if' old_test comp_iter
comp_if -> 'if' old_test

testlist1 -> test comma_test_star

yield_expr -> 'yield' testlist
yield_expr -> 'yield'

NAME -> 'func'
NAME -> 'x'
ENDMARKER -> '<<EOF>>'
NEWLINE -> '<<NEWLINE>>'
NEWLINE -> '<<NEWLINE>>'
NUMBER -> '11'
STRING -> '"cat"'
INDENT -> '<<INDENT>>'
DEDENT -> '<<DEDENT>>'