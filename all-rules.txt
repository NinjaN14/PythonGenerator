{"List -> [('elts', ['Str']), ('ctx', 'Load')]": 80, "If -> [('test', 'Num'), ('body', ['Assign', 'Expr']), ('orelse', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Return']), ('decorator_list', [])]": 1, "Compare -> [('left', 'Call'), ('ops', ['Gt']), ('comparators', ['Name'])]": 2, "Assign -> [('targets', ['Tuple']), ('value', 'ListComp')]": 7, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'If', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'For', 'For', 'Assign']), ('decorator_list', [])]": 1, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'Expr']), ('orelse', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Str']), ('keywords', []), ('starargs', 'Name'), ('kwargs', 'NoneType')]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Name', 'Call', 'Name', 'Call', 'Call', 'Call', 'Name', 'Call'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'Return']), ('decorator_list', [])]": 2, "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'If', 'Return']), ('decorator_list', [])]": 2, "Assert -> [('test', 'UnaryOp'), ('msg', 'Str')]": 4, "Call -> [('func', 'Attribute'), ('args', ['Str', 'Call']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 3, "If -> [('test', 'Call'), ('body', ['Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'If', 'Expr', 'Assign', 'If', 'Return']), ('orelse', ['Expr', 'Return'])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'If', 'Assign', 'Assign', 'Assign']), ('orelse', ['Assign', 'Assign', 'Assign', 'Assign'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 6, "ExceptHandler -> [('type', 'Attribute'), ('name', 'Name'), ('body', ['If', 'Print'])]": 1, "ImportFrom -> [('module', 'str'), ('names', ['alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias']), ('level', 'int')]": 3, "If -> [('test', 'Compare'), ('body', ['Expr']), ('orelse', ['If'])]": 22, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'If', 'For', 'If']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Print', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Str', 'Str', 'Str', 'Call', 'Call', 'Call', 'Str'])]": 1, "Tuple -> [('elts', ['Attribute', 'Attribute']), ('ctx', 'Load')]": 52, "TryExcept -> [('body', ['ImportFrom', 'Expr']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Lambda', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr']), ('decorator_list', [])]": 5, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['If', 'If', 'If', 'If']), ('orelse', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'If']), ('orelse', [])]": 1, "BinOp -> [('left', 'Name'), ('op', 'Pow'), ('right', 'Num')]": 10, "For -> [('target', 'Name'), ('iter', 'BinOp'), ('body', ['Assign']), ('orelse', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'AugAssign']), ('orelse', [])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'str'), ('defaults', ['Name', 'List', 'Name', 'Str'])]": 2, "Call -> [('func', 'Name'), ('args', ['Str', 'Str', 'Str', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 4, "If -> [('test', 'Call'), ('body', ['Expr']), ('orelse', [])]": 42, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str'])]": 5, "BinOp -> [('left', 'Num'), ('op', 'Div'), ('right', 'UnaryOp')]": 1, "Call -> [('func', 'Attribute'), ('args', ['BinOp', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 309, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Num', 'BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'If']), ('orelse', [])]": 1, "AugAssign -> [('target', 'Name'), ('op', 'Sub'), ('value', 'Call')]": 4, "TryExcept -> [('body', ['ImportFrom', 'ImportFrom']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 1, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'ClassDef', 'ClassDef'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'If', 'Return']), ('decorator_list', [])]": 2, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Name']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "AugAssign -> [('target', 'Name'), ('op', 'Add'), ('value', 'List')]": 2, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('orelse', [])]": 1, "If -> [('test', 'Subscript'), ('body', ['Assign']), ('orelse', ['Assign'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Assign', 'For', 'Expr']), ('decorator_list', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Name', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 114, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Print', 'If']), ('orelse', [])]": 3, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'If', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'If']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'For', 'Print']), ('orelse', [])]": 1, "If -> [('test', 'UnaryOp'), ('body', ['For']), ('orelse', ['Expr'])]": 1, "If -> [('test', 'BoolOp'), ('body', ['ImportFrom', 'Assign', 'Assign', 'For']), ('orelse', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'List', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 12, "Tuple -> [('elts', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('ctx', 'Store')]": 2, "BinOp -> [('left', 'Subscript'), ('op', 'Add'), ('right', 'Name')]": 4, "Tuple -> [('elts', ['Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num']), ('ctx', 'Load')]": 1, "If -> [('test', 'BoolOp'), ('body', ['Assign', 'If', 'If']), ('orelse', [])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'str'), ('defaults', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 6, "While -> [('test', 'BoolOp'), ('body', ['Expr', 'Expr', 'Assign']), ('orelse', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Str', 'Str', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "GtE -> <NULL>": 42, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'If', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'For', 'Return']), ('decorator_list', [])]": 2, "List -> [('elts', ['Tuple', 'Tuple', 'Tuple']), ('ctx', 'Load')]": 4, "If -> [('test', 'Call'), ('body', ['TryExcept']), ('orelse', [])]": 5, "Tuple -> [('elts', ['Call', 'Call', 'Call', 'Call']), ('ctx', 'Load')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'TryExcept']), ('decorator_list', [])]": 1, "TryExcept -> [('body', ['Assign', 'Assign']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 7, "If -> [('test', 'Compare'), ('body', ['Assign']), ('orelse', ['Expr', 'Break'])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['List'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Dict']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 14, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Expr']), ('decorator_list', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Continue']), ('orelse', [])]": 22, "ExceptHandler -> [('type', 'Name'), ('name', 'Name'), ('body', ['Print'])]": 2, "Call -> [('func', 'Attribute'), ('args', ['Name', 'List']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 21, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Call', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 3, "ExtSlice -> [('dims', ['Slice', 'Slice', 'Slice'])]": 4, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Num', 'Str', 'Tuple', 'Tuple']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Attribute', 'Attribute', 'Attribute', 'BinOp', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Call -> [('func', 'Attribute'), ('args', ['Num', 'Str', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 3, "If -> [('test', 'UnaryOp'), ('body', ['Expr', 'Return']), ('orelse', ['Expr', 'Return'])]": 1, "If -> [('test', 'Compare'), ('body', ['ImportFrom']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'If', 'Assign', 'Return']), ('decorator_list', [])]": 1, "While -> [('test', 'Name'), ('body', ['If', 'Assign', 'TryExcept', 'Expr']), ('orelse', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Num', 'Name', 'Tuple', 'Num', 'Num', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "arguments -> [('args', ['Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Num', 'Num'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Expr', 'For', 'If', 'Expr', 'Expr', 'Assign', 'Expr', 'If']), ('decorator_list', ['Name'])]": 1, "arguments -> [('args', ['Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Str', 'Name'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'If', 'For', 'Raise']), ('decorator_list', [])]": 1, "While -> [('test', 'Compare'), ('body', ['Expr']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'For']), ('decorator_list', [])]": 10, "Tuple -> [('elts', ['Subscript', 'Subscript']), ('ctx', 'Load')]": 11, "Call -> [('func', 'Name'), ('args', ['Subscript', 'Subscript', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "While -> [('test', 'Num'), ('body', ['Assign', 'Assign', 'If']), ('orelse', [])]": 1, "BinOp -> [('left', 'Call'), ('op', 'Div'), ('right', 'Num')]": 14, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'If', 'If', 'If']), ('decorator_list', [])]": 1, "BoolOp -> [('op', 'And'), ('values', ['Compare', 'Call'])]": 10, "Tuple -> [('elts', ['Tuple', 'Tuple']), ('ctx', 'Store')]": 1, "Tuple -> [('elts', ['Name', 'Tuple']), ('ctx', 'Load')]": 1, "Compare -> [('left', 'Subscript'), ('ops', ['NotIn']), ('comparators', ['Str'])]": 2, "If -> [('test', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('orelse', ['If'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 11, "comprehension -> [('target', 'Name'), ('iter', 'Name'), ('ifs', ['Compare'])]": 5, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'ClassDef']), ('decorator_list', [])]": 1, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'Import', 'Import', 'Assign', 'ImportFrom', 'Expr', 'Delete', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'If'])]": 1, "UnaryOp -> [('op', 'Not'), ('operand', 'Name')]": 155, "List -> [('elts', ['Dict', 'Dict', 'Dict', 'Dict']), ('ctx', 'Load')]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'Return']), ('decorator_list', ['Name'])]": 1, "Module -> [('body', ['Import', 'Assign', 'Expr', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'Import', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Expr', 'Assign', 'Assign', 'Assign', 'Print', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'While'])]": 1, "BinOp -> [('left', 'Attribute'), ('op', 'Add'), ('right', 'Num')]": 17, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'Assign', 'FunctionDef']), ('decorator_list', [])]": 1, "If -> [('test', 'Attribute'), ('body', ['Expr', 'Expr', 'Expr', 'Expr']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'FunctionDef', 'Return']), ('decorator_list', [])]": 2, "Compare -> [('left', 'Attribute'), ('ops', ['In']), ('comparators', ['Attribute'])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef']), ('decorator_list', [])]": 1, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'ImportFrom', 'Import', 'Import', 'ClassDef'])]": 1, "BinOp -> [('left', 'Call'), ('op', 'Mod'), ('right', 'Subscript')]": 1, "Call -> [('func', 'Attribute'), ('args', ['Num']), ('keywords', ['keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "BoolOp -> [('op', 'Or'), ('values', ['Name', 'Str'])]": 5, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'While', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Return']), ('decorator_list', [])]": 17, "List -> [('elts', ['Num', 'Num', 'Num', 'Attribute']), ('ctx', 'Load')]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Str', 'Call', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "TryFinally -> [('body', ['TryExcept']), ('finalbody', ['Expr', 'Expr', 'If'])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'str'), ('defaults', ['Attribute', 'Str'])]": 2, "Tuple -> [('elts', ['Num', 'Num', 'BinOp']), ('ctx', 'Load')]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'Return']), ('decorator_list', [])]": 1, "Call -> [('func', 'Name'), ('args', ['BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 137, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Print', 'For', 'Return', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Print']), ('decorator_list', [])]": 1, "Tuple -> [('elts', ['Name', 'BinOp', 'BinOp', 'BinOp']), ('ctx', 'Load')]": 2, "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Expr']), ('orelse', [])]": 1, "Compare -> [('left', 'Name'), ('ops', ['In']), ('comparators', ['Attribute'])]": 21, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Expr', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'For', 'Assign']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign']), ('decorator_list', ['Call'])]": 1, "UnaryOp -> [('op', 'USub'), ('operand', 'Name')]": 17, "If -> [('test', 'Num'), ('body', ['Assign', 'Assign', 'Assign', 'For', 'Expr']), ('orelse', [])]": 1, "List -> [('elts', ['Num', 'Num', 'Num', 'Num', 'Num', 'Num']), ('ctx', 'Load')]": 7, "Compare -> [('left', 'Str'), ('ops', ['NotIn']), ('comparators', ['Attribute'])]": 4, "With -> [('context_expr', 'Call'), ('optional_vars', 'NoneType'), ('body', ['Return'])]": 1, "If -> [('test', 'UnaryOp'), ('body', ['Assign']), ('orelse', ['Assign', 'For'])]": 1, "BinOp -> [('left', 'BinOp'), ('op', 'BitAnd'), ('right', 'Compare')]": 1, "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['Assign', 'If']), ('orelse', [])]": 6, "Subscript -> [('value', 'Name'), ('slice', 'ExtSlice'), ('ctx', 'Load')]": 62, "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'Expr', 'Return']), ('orelse', [])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['BinOp', 'Str'])]": 1, "While -> [('test', 'Compare'), ('body', ['If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign']), ('orelse', [])]": 1, "Eq -> <NULL>": 559, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr']), ('decorator_list', [])]": 98, "Print -> [('dest', 'NoneType'), ('values', ['Name', 'Str', 'Name']), ('nl', 'bool')]": 1, "If -> [('test', 'Compare'), ('body', ['Expr', 'Expr', 'Expr', 'If', 'Return']), ('orelse', [])]": 1, "If -> [('test', 'Attribute'), ('body', ['Assign', 'Assign', 'If', 'For']), ('orelse', [])]": 1, "TryExcept -> [('body', ['Expr', 'Expr']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 3, "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['Assign', 'Assign'])]": 1, "Dict -> [('keys', ['Str']), ('values', ['Name'])]": 10, "Compare -> [('left', 'Num'), ('ops', ['LtE', 'LtE']), ('comparators', ['Name', 'Num'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Expr']), ('decorator_list', [])]": 6, "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign', 'Expr', 'For']), ('orelse', [])]": 1, "alias -> [('name', 'str'), ('asname', 'NoneType')]": 1417, "If -> [('test', 'Compare'), ('body', ['Assign', 'Break']), ('orelse', [])]": 1, "Tuple -> [('elts', ['BinOp', 'BinOp', 'BinOp']), ('ctx', 'Load')]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'Name')]": 2, "For -> [('target', 'Name'), ('iter', 'List'), ('body', ['For', 'FunctionDef', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr']), ('orelse', [])]": 1, "If -> [('test', 'Name'), ('body', ['Assign', 'If']), ('orelse', [])]": 4, "List -> [('elts', ['List', 'List']), ('ctx', 'Load')]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'FunctionDef']), ('decorator_list', [])]": 14, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Attribute']), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Call', 'Name', 'Name', 'Name', 'Name'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Print']), ('decorator_list', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Call -> [('func', 'Subscript'), ('args', ['Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Name', 'Name']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 3, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Str', 'BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['Continue'])]": 3, "Dict -> [('keys', ['Str', 'Str']), ('values', ['Attribute', 'BinOp'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'For', 'For', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr']), ('decorator_list', ['Name', 'Name', 'Name'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 2, "FloorDiv -> <NULL>": 3, "List -> [('elts', ['Name', 'Name', 'Name', 'Name', 'Num']), ('ctx', 'Load')]": 2, "If -> [('test', 'Call'), ('body', ['For', 'Return']), ('orelse', [])]": 1, "List -> [('elts', ['Name', 'Name', 'Name', 'Name', 'Name']), ('ctx', 'Load')]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]": 1, "ImportFrom -> [('module', 'str'), ('names', ['alias', 'alias', 'alias', 'alias', 'alias', 'alias']), ('level', 'int')]": 3, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "Subscript -> [('value', 'Subscript'), ('slice', 'Slice'), ('ctx', 'Load')]": 2, "If -> [('test', 'Call'), ('body', ['AugAssign']), ('orelse', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'For', 'Assign']), ('orelse', ['Assign'])]": 1, "Call -> [('func', 'Attribute'), ('args', []), ('keywords', []), ('starargs', 'Name'), ('kwargs', 'NoneType')]": 5, "BinOp -> [('left', 'Call'), ('op', 'Pow'), ('right', 'Num')]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Attribute', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 14, "IfExp -> [('test', 'Attribute'), ('body', 'Str'), ('orelse', 'Str')]": 1, "Dict -> [('keys', ['BinOp']), ('values', ['Name'])]": 4, "Call -> [('func', 'Name'), ('args', ['Attribute', 'Attribute', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 3, "Slice -> [('lower', 'Name'), ('upper', 'Name'), ('step', 'NoneType')]": 32, "While -> [('test', 'Name'), ('body', ['Assign', 'Expr', 'If']), ('orelse', [])]": 1, "List -> [('elts', ['Dict', 'Dict', 'Dict']), ('ctx', 'Load')]": 2, "If -> [('test', 'Subscript'), ('body', ['Continue']), ('orelse', [])]": 1, "Print -> [('dest', 'NoneType'), ('values', ['Attribute']), ('nl', 'bool')]": 3, "If -> [('test', 'BoolOp'), ('body', ['If', 'Assign']), ('orelse', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Str', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'Name')]": 2, "BoolOp -> [('op', 'And'), ('values', ['Compare', 'Str'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assert', 'Assign', 'Assign', 'Assign', 'For']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 32, "Call -> [('func', 'Name'), ('args', ['Tuple', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "TryExcept -> [('body', ['Expr', 'Assign', 'Expr', 'Expr']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Subscript', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 4, "BinOp -> [('left', 'Str'), ('op', 'Add'), ('right', 'BinOp')]": 2, "Tuple -> [('elts', ['Attribute', 'Call']), ('ctx', 'Load')]": 5, "comprehension -> [('target', 'Tuple'), ('iter', 'Name'), ('ifs', [])]": 9, "If -> [('test', 'UnaryOp'), ('body', ['Expr', 'Expr', 'Return']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Pass']), ('decorator_list', [])]": 4, "While -> [('test', 'Num'), ('body', ['Expr', 'Assign', 'If']), ('orelse', [])]": 1, "Lambda -> [('args', 'arguments'), ('body', 'UnaryOp')]": 2, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name'])]": 6, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 76, "If -> [('test', 'BoolOp'), ('body', ['Continue']), ('orelse', ['If'])]": 1, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['If', 'Expr']), ('orelse', [])]": 2, "If -> [('test', 'Name'), ('body', ['For']), ('orelse', [])]": 3, "Assign -> [('targets', ['Tuple']), ('value', 'Attribute')]": 8, "ClassDef -> [('name', 'str'), ('bases', []), ('body', ['Expr', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "BoolOp -> [('op', 'Or'), ('values', ['Call', 'Compare'])]": 3, "Tuple -> [('elts', ['Name', 'Str', 'Str']), ('ctx', 'Load')]": 9, "TryFinally -> [('body', ['TryExcept', 'Expr']), ('finalbody', ['If', 'Expr'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "List -> [('elts', ['Call', 'Call', 'Call', 'Call', 'Name']), ('ctx', 'Load')]": 1, "BoolOp -> [('op', 'And'), ('values', ['Compare', 'BoolOp'])]": 2, "For -> [('target', 'Name'), ('iter', 'Tuple'), ('body', ['Assign']), ('orelse', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Break']), ('orelse', ['If'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "If -> [('test', 'Name'), ('body', ['Assign', 'Assign']), ('orelse', ['If'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'If', 'AugAssign', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'TryExcept', 'Assign', 'If', 'Return']), ('decorator_list', [])]": 1, "BinOp -> [('left', 'Compare'), ('op', 'BitAnd'), ('right', 'Compare')]": 4, "Call -> [('func', 'Attribute'), ('args', ['BinOp', 'Subscript', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "Call -> [('func', 'Attribute'), ('args', ['Tuple', 'Num', 'Num', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Call -> [('func', 'Name'), ('args', ['Name', 'Dict']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'Call')]": 1, "Index -> [('value', 'UnaryOp')]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign']), ('decorator_list', [])]": 2, "While -> [('test', 'BoolOp'), ('body', ['If', 'Assign']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Expr']), ('decorator_list', ['Name'])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str'])]": 2, "Call -> [('func', 'Name'), ('args', ['Subscript', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Assign']), ('orelse', [])]": 9, "ClassDef -> [('name', 'str'), ('bases', []), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'If', 'Return']), ('decorator_list', [])]": 1, "BinOp -> [('left', 'Attribute'), ('op', 'Div'), ('right', 'BinOp')]": 4, "If -> [('test', 'Call'), ('body', ['Assign', 'If', 'Assign', 'If']), ('orelse', [])]": 1, "If -> [('test', 'Name'), ('body', ['Assign']), ('orelse', ['Raise'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'If', 'If', 'If', 'If', 'Raise']), ('decorator_list', [])]": 1, "BinOp -> [('left', 'Call'), ('op', 'Mod'), ('right', 'Dict')]": 3, "If -> [('test', 'Name'), ('body', ['Assign', 'If', 'Expr']), ('orelse', [])]": 1, "BoolOp -> [('op', 'Or'), ('values', ['Name', 'Num'])]": 1, "Tuple -> [('elts', ['Subscript', 'Name']), ('ctx', 'Load')]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Expr', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'For']), ('decorator_list', [])]": 3, "If -> [('test', 'Compare'), ('body', ['Assign', 'Return']), ('orelse', ['Return'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Assert', 'Assign', 'Expr', 'If', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assert', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'If', 'If']), ('decorator_list', ['Attribute'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Print', 'Assign', 'Expr', 'Print']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'For']), ('decorator_list', [])]": 1, "If -> [('test', 'BoolOp'), ('body', ['Print']), ('orelse', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'If', 'Expr']), ('orelse', [])]": 1, "If -> [('test', 'Name'), ('body', ['Return']), ('orelse', [])]": 6, "GeneratorExp -> [('elt', 'Attribute'), ('generators', ['comprehension'])]": 4, "BinOp -> [('left', 'Attribute'), ('op', 'Mult'), ('right', 'Name')]": 6, "ClassDef -> [('name', 'str'), ('bases', []), ('body', ['Assign', 'FunctionDef']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'If']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Continue']), ('orelse', ['Assign', 'AugAssign'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Call']), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'Name'), ('kwargs', 'Name')]": 1, "BinOp -> [('left', 'List'), ('op', 'Mult'), ('right', 'BinOp')]": 2, "If -> [('test', 'UnaryOp'), ('body', ['Continue']), ('orelse', [])]": 14, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name']), ('keywords', []), ('starargs', 'Name'), ('kwargs', 'NoneType')]": 1, "Call -> [('func', 'Name'), ('args', ['Attribute', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 38, "List -> [('elts', ['Attribute', 'Attribute']), ('ctx', 'Load')]": 6, "Module -> [('body', ['Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'TryExcept', 'TryExcept', 'TryExcept', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]": 1, "NotIn -> <NULL>": 52, "BoolOp -> [('op', 'And'), ('values', ['UnaryOp', 'BoolOp'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'For', 'Assign', 'Assign', 'Assign', 'While', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Print', 'Assign', 'For', 'Print', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'Assign', 'If', 'Print', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 1, "BinOp -> [('left', 'Call'), ('op', 'Mult'), ('right', 'Name')]": 18, "List -> [('elts', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('ctx', 'Load')]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['While']), ('decorator_list', [])]": 4, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]": 1, "Dict -> [('keys', []), ('values', [])]": 116, "BinOp -> [('left', 'Str'), ('op', 'Mod'), ('right', 'Name')]": 166, "comprehension -> [('target', 'Tuple'), ('iter', 'Call'), ('ifs', ['Name'])]": 1, "TryExcept -> [('body', ['Assign', 'Assign', 'Expr']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 1, "ExceptHandler -> [('type', 'Name'), ('name', 'Tuple'), ('body', ['Raise'])]": 1, "ListComp -> [('elt', 'Attribute'), ('generators', ['comprehension'])]": 21, "Call -> [('func', 'Attribute'), ('args', ['UnaryOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'ImportFrom', 'Assign', 'Assign', 'If', 'Assign', 'Return']), ('decorator_list', [])]": 1, "Tuple -> [('elts', ['BinOp', 'Num', 'Num']), ('ctx', 'Load')]": 3, "Assign -> [('targets', ['Name']), ('value', 'Dict')]": 167, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 12, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Expr', 'Expr', 'If', 'If']), ('decorator_list', [])]": 1, "Compare -> [('left', 'Subscript'), ('ops', ['GtE']), ('comparators', ['Tuple'])]": 2, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name']), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 3, "Call -> [('func', 'Name'), ('args', ['Attribute', 'UnaryOp', 'Call', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Return -> [('value', 'Subscript')]": 40, "Call -> [('func', 'Name'), ('args', ['Call', 'Attribute', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "BoolOp -> [('op', 'Or'), ('values', ['Name', 'Attribute'])]": 6, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Expr', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['TryFinally']), ('decorator_list', [])]": 3, "BoolOp -> [('op', 'And'), ('values', ['Call', 'Str'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'If', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'If', 'Return']), ('decorator_list', [])]": 1, "TryExcept -> [('body', ['Assign', 'If', 'Assign', 'For', 'If', 'If']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['BinOp', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 4, "comprehension -> [('target', 'Tuple'), ('iter', 'Attribute'), ('ifs', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'TryFinally']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'Call')]": 4, "Call -> [('func', 'Name'), ('args', ['Name', 'Name', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 9, "ClassDef -> [('name', 'str'), ('bases', []), ('body', ['Expr', 'Assign', 'Assign']), ('decorator_list', [])]": 2, "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['Call', 'Num', 'Num'])]": 5, "Call -> [('func', 'Attribute'), ('args', ['Str']), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "If -> [('test', 'Compare'), ('body', ['TryExcept']), ('orelse', [])]": 9, "If -> [('test', 'Compare'), ('body', ['Expr', 'Continue']), ('orelse', [])]": 7, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Return']), ('decorator_list', ['Name'])]": 40, "Call -> [('func', 'Attribute'), ('args', ['Str', 'Str', 'Name', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Str', 'Str', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr']), ('decorator_list', ['Name'])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'For', 'Expr', 'Assign', 'For', 'For']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr']), ('decorator_list', [])]": 24, "Tuple -> [('elts', ['Num', 'BinOp']), ('ctx', 'Load')]": 2, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Name', 'Call', 'Name', 'Name', 'Call'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 5, "Assign -> [('targets', ['Name']), ('value', 'ListComp')]": 76, "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['BinOp', 'BinOp', 'BinOp'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'If']), ('decorator_list', [])]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "BinOp -> [('left', 'Str'), ('op', 'Add'), ('right', 'Subscript')]": 1, "Call -> [('func', 'Name'), ('args', ['Subscript', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Name', 'Attribute', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "BinOp -> [('left', 'Attribute'), ('op', 'Add'), ('right', 'Attribute')]": 10, "List -> [('elts', ['Num', 'Num', 'Num', 'Num', 'Num']), ('ctx', 'Load')]": 14, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'If', 'Assign', 'For', 'If', 'Expr', 'Expr', 'Expr', 'If', 'Assign', 'Expr', 'Expr', 'AugAssign', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign']), ('orelse', ['Break'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Subscript']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 5, "If -> [('test', 'Call'), ('body', ['Expr', 'Expr', 'Expr', 'Expr', 'If', 'Raise']), ('orelse', ['Assign', 'Assign', 'Assign', 'Assign', 'If'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "BinOp -> [('left', 'UnaryOp'), ('op', 'Mult'), ('right', 'Name')]": 1, "Compare -> [('left', 'Attribute'), ('ops', ['GtE']), ('comparators', ['Num'])]": 1, "Tuple -> [('elts', ['Name', 'Name', 'Name', 'Name']), ('ctx', 'Store')]": 13, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Return']), ('decorator_list', [])]": 12, "Yield -> [('value', 'Str')]": 2, "If -> [('test', 'BoolOp'), ('body', ['Expr', 'Expr', 'Return']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 4, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'For']), ('decorator_list', [])]": 3, "Call -> [('func', 'Name'), ('args', ['Name', 'Name', 'Name']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 6, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Raise']), ('decorator_list', [])]": 26, "If -> [('test', 'Call'), ('body', ['Assign', 'TryExcept', 'Assign', 'AugAssign', 'Assign', 'Return']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'TryExcept']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'Name')]": 3, "Tuple -> [('elts', ['Dict', 'Dict', 'Dict', 'Dict', 'Dict']), ('ctx', 'Load')]": 1, "List -> [('elts', ['Name', 'Name', 'Name', 'BinOp', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Name']), ('ctx', 'Load')]": 1, "For -> [('target', 'Tuple'), ('iter', 'Tuple'), ('body', ['Expr']), ('orelse', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Name']), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Lambda']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 15, "If -> [('test', 'Call'), ('body', ['AugAssign']), ('orelse', ['AugAssign'])]": 1, "For -> [('target', 'Name'), ('iter', 'Subscript'), ('body', ['Assign', 'Assign', 'If']), ('orelse', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Str', 'Str', 'Str', 'List']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assert', 'Assert', 'Assert', 'Assert']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'If', 'Expr']), ('decorator_list', [])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Name', 'Name', 'Name'])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'FunctionDef', 'FunctionDef']), ('decorator_list', ['Call'])]": 1, "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Import', 'ClassDef', 'ClassDef', 'ClassDef'])]": 1, "Assign -> [('targets', ['Attribute']), ('value', 'Subscript')]": 17, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 9, "Call -> [('func', 'Name'), ('args', ['BinOp', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['Import', 'Assign'])]": 1, "If -> [('test', 'Subscript'), ('body', ['Expr', 'Expr', 'Expr']), ('orelse', [])]": 2, "If -> [('test', 'Call'), ('body', ['Print', 'Expr']), ('orelse', ['Print'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'If', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'If']), ('decorator_list', [])]": 1, "Return -> [('value', 'NoneType')]": 61, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Assign']), ('orelse', [])]": 1, "Break -> <NULL>": 38, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'If', 'Assign', 'Assign', 'For']), ('decorator_list', [])]": 1, "Tuple -> [('elts', ['Subscript', 'Subscript', 'Subscript', 'Subscript']), ('ctx', 'Load')]": 2, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'If']), ('orelse', [])]": 5, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Attribute', 'Lambda', 'Name', 'Name', 'Subscript', 'Subscript', 'Subscript', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "Call -> [('func', 'Attribute'), ('args', ['Str', 'Attribute']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 2, "Subscript -> [('value', 'Call'), ('slice', 'Slice'), ('ctx', 'Load')]": 11, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'If']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Expr', 'Expr']), ('orelse', ['Raise'])]": 2, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['AugAssign', 'If']), ('orelse', [])]": 1, "For -> [('target', 'Name'), ('iter', 'List'), ('body', ['Expr', 'Assign', 'Expr']), ('orelse', [])]": 2, "If -> [('test', 'Attribute'), ('body', ['Assign', 'For', 'For', 'Assign', 'If', 'Assign', 'Assign', 'If']), ('orelse', ['Assign'])]": 1, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Expr', 'Expr']), ('orelse', [])]": 6, "List -> [('elts', ['Name', 'Name', 'Name', 'Name']), ('ctx', 'Load')]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Print', 'If']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'Assign', 'For', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Expr']), ('orelse', ['Expr', 'AugAssign'])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Tuple', 'Name', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Tuple -> [('elts', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('ctx', 'Load')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'Expr', 'Assign', 'Assign', 'If']), ('decorator_list', [])]": 1, "If -> [('test', 'Attribute'), ('body', ['Assign', 'Assign', 'Expr']), ('orelse', ['Assign'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'While', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'For', 'Expr', 'Assign']), ('decorator_list', [])]": 1, "If -> [('test', 'Attribute'), ('body', ['Expr', 'Assign', 'If']), ('orelse', ['Expr'])]": 1, "Load -> <NULL>": 56910, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'TryExcept']), ('decorator_list', [])]": 1, "If -> [('test', 'UnaryOp'), ('body', ['Raise']), ('orelse', ['If'])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('orelse', [])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Str', 'Str', 'Str', 'Call', 'Str'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'If', 'FunctionDef', 'Assign', 'If', 'Expr', 'Return']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['BinOp', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "arguments -> [('args', []), ('vararg', 'NoneType'), ('kwarg', 'str'), ('defaults', [])]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'FunctionDef', 'FunctionDef', 'If'])]": 1, "BinOp -> [('left', 'Name'), ('op', 'Mult'), ('right', 'Num')]": 30, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Tuple']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 10, "TryFinally -> [('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'If', 'Expr']), ('finalbody', ['Assign', 'Expr'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'Expr', 'If', 'Assign', 'Assign', 'For']), ('decorator_list', [])]": 1, "Dict -> [('keys', ['Str', 'Str']), ('values', ['Name', 'Str'])]": 25, "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'If', 'Expr']), ('orelse', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'ListComp', 'Call', 'Attribute', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Compare -> [('left', 'Attribute'), ('ops', ['Gt']), ('comparators', ['BinOp'])]": 3, "Call -> [('func', 'Name'), ('args', ['Str', 'Name', 'Call', 'Call', 'Call', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "If -> [('test', 'Attribute'), ('body', ['Assign', 'Assign', 'Expr']), ('orelse', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', []), ('body', ['Expr', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Expr', 'AugAssign', 'Break']), ('orelse', [])]": 1, "If -> [('test', 'Call'), ('body', ['Assign', 'Expr', 'Assign', 'Assign', 'TryExcept']), ('orelse', ['Assign'])]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Expr']), ('orelse', [])]": 4, "BoolOp -> [('op', 'Or'), ('values', ['Attribute', 'Name'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'TryExcept', 'For', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Str', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 9, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign']), ('decorator_list', [])]": 1, "If -> [('test', 'Call'), ('body', ['Expr', 'Assign']), ('orelse', [])]": 1, "If -> [('test', 'BoolOp'), ('body', ['For']), ('orelse', ['If'])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 16, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Attribute', 'Name', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "Call -> [('func', 'Attribute'), ('args', ['Call', 'Str', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 5, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Expr', 'Assign', 'Assign', 'Assign']), ('orelse', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Expr', 'Return']), ('orelse', [])]": 14, "Call -> [('func', 'Name'), ('args', ['Call', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 4, "UnaryOp -> [('op', 'Not'), ('operand', 'BoolOp')]": 9, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr']), ('decorator_list', ['Name', 'Name', 'Name'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Return', 'Return']), ('decorator_list', [])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Str'])]": 5, "BinOp -> [('left', 'Str'), ('op', 'Mod'), ('right', 'Str')]": 2, "Call -> [('func', 'Name'), ('args', ['Call', 'Subscript']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['FunctionDef', 'Expr']), ('decorator_list', [])]": 1, "If -> [('test', 'Num'), ('body', ['Assign', 'Assign', 'Assign', 'Assign']), ('orelse', [])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Tuple'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Name', 'Name', 'Name', 'List']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'If', 'If', 'Expr', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'FunctionDef', 'Assign', 'Print', 'If', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 1, "BinOp -> [('left', 'Call'), ('op', 'BitAnd'), ('right', 'Call')]": 1, "Call -> [('func', 'Attribute'), ('args', ['Tuple', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "If -> [('test', 'Name'), ('body', ['Return']), ('orelse', ['Return'])]": 3, "Assert -> [('test', 'Call'), ('msg', 'Name')]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'Assign', 'If', 'If', 'Return']), ('decorator_list', [])]": 1, "Subscript -> [('value', 'Subscript'), ('slice', 'Index'), ('ctx', 'Store')]": 28, "Call -> [('func', 'Attribute'), ('args', ['Str', 'Name', 'List']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['Str', 'Str', 'Str'])]": 3, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'TryExcept', 'TryExcept', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'ClassDef'])]": 1, "If -> [('test', 'Name'), ('body', ['Assign', 'Assign']), ('orelse', ['Assign', 'Assign', 'Assign'])]": 1, "BinOp -> [('left', 'BinOp'), ('op', 'Mult'), ('right', 'Name')]": 14, "Call -> [('func', 'Attribute'), ('args', ['Call', 'Str', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Call -> [('func', 'Attribute'), ('args', ['Call', 'Call', 'Name', 'Tuple']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "If -> [('test', 'Compare'), ('body', ['Assign']), ('orelse', ['Assign'])]": 32, "If -> [('test', 'Compare'), ('body', ['Return']), ('orelse', ['If'])]": 11, "Call -> [('func', 'Name'), ('args', ['Str', 'Str', 'BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 4, "If -> [('test', 'Call'), ('body', ['Expr', 'Assign', 'Expr']), ('orelse', [])]": 1, "TryExcept -> [('body', ['Assign', 'Expr']), ('handlers', ['ExceptHandler']), ('orelse', ['Expr'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 7, "For -> [('target', 'Name'), ('iter', 'List'), ('body', ['For']), ('orelse', [])]": 29, "Slice -> [('lower', 'NoneType'), ('upper', 'Subscript'), ('step', 'NoneType')]": 4, "Call -> [('func', 'Name'), ('args', ['Str', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Pass']), ('orelse', [])]": 1, "Tuple -> [('elts', ['Str', 'BinOp']), ('ctx', 'Load')]": 2, "Return -> [('value', 'Attribute')]": 76, "For -> [('target', 'Tuple'), ('iter', 'Name'), ('body', ['Assign', 'Expr', 'Expr', 'If', 'AugAssign', 'Expr', 'Expr']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign']), ('decorator_list', [])]": 3, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr']), ('orelse', [])]": 1, "BoolOp -> [('op', 'And'), ('values', ['Compare', 'UnaryOp'])]": 9, "Call -> [('func', 'Name'), ('args', ['BoolOp', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Call -> [('func', 'Name'), ('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "While -> [('test', 'Compare'), ('body', ['AugAssign']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Call', 'Call', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['If', 'If']), ('orelse', [])]": 2, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Attribute']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Tuple', 'BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'If', 'Expr']), ('decorator_list', [])]": 1, "Tuple -> [('elts', ['Attribute', 'Name']), ('ctx', 'Load')]": 22, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Expr']), ('orelse', [])]": 10, "If -> [('test', 'Attribute'), ('body', ['Assign', 'Expr']), ('orelse', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'If', 'Assign', 'If', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'FunctionDef', 'Assign', 'Expr', 'Expr', 'Assign', 'FunctionDef', 'For', 'Assign', 'Expr', 'Expr', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'UnaryOp'), ('body', ['Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr']), ('orelse', [])]": 1, "ExceptHandler -> [('type', 'Name'), ('name', 'Name'), ('body', ['Expr', 'Continue'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 7, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'FunctionDef', 'ClassDef', 'ClassDef']), ('decorator_list', [])]": 5, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'TryExcept', 'Return']), ('decorator_list', ['Call'])]": 1, "Dict -> [('keys', ['Str']), ('values', ['List'])]": 5, "Call -> [('func', 'Name'), ('args', ['Name']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'Name')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'If', 'For', 'Expr', 'Assign', 'While', 'Expr', 'Return', 'Expr']), ('decorator_list', ['Attribute'])]": 1, "Call -> [('func', 'Name'), ('args', ['Call', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 12, "keyword -> [('arg', 'str'), ('value', 'BoolOp')]": 2, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'List', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "If -> [('test', 'Call'), ('body', ['Assign', 'Return']), ('orelse', ['Return'])]": 1, "List -> [('elts', ['Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num']), ('ctx', 'Load')]": 1, "Call -> [('func', 'Attribute'), ('args', ['Str', 'Str', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "For -> [('target', 'Name'), ('iter', 'List'), ('body', ['Assign', 'Expr', 'Assign', 'Assign', 'If', 'For']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'TryExcept']), ('decorator_list', ['Name'])]": 7, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Num']), ('keywords', ['keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "ExceptHandler -> [('type', 'NoneType'), ('name', 'NoneType'), ('body', ['Pass'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'If']), ('decorator_list', [])]": 3, "Call -> [('func', 'Name'), ('args', ['Name', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'Name')]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'Assign', 'If', 'Assign', 'Expr']), ('orelse', [])]": 2, "IfExp -> [('test', 'Compare'), ('body', 'Name'), ('orelse', 'Name')]": 2, "Compare -> [('left', 'Name'), ('ops', ['Eq', 'Eq']), ('comparators', ['Name', 'Name'])]": 1, "Attribute -> [('value', 'Subscript'), ('attr', 'str'), ('ctx', 'Load')]": 125, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assert']), ('orelse', [])]": 1, "Tuple -> [('elts', ['Num', 'Num', 'Call', 'Call']), ('ctx', 'Load')]": 1, "Lambda -> [('args', 'arguments'), ('body', 'Tuple')]": 2, "Tuple -> [('elts', ['Str', 'Str']), ('ctx', 'Load')]": 58, "BoolOp -> [('op', 'Or'), ('values', ['Name', 'Name', 'Name'])]": 1, "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['Print', 'Return'])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Str', 'Str', 'Str', 'Call', 'Str', 'Str', 'Str'])]": 2, "Call -> [('func', 'Name'), ('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Compare -> [('left', 'BinOp'), ('ops', ['GtE']), ('comparators', ['Name'])]": 1, "Subscript -> [('value', 'Subscript'), ('slice', 'Index'), ('ctx', 'Del')]": 1, "Call -> [('func', 'Attribute'), ('args', ['ListComp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 27, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 14, "If -> [('test', 'UnaryOp'), ('body', ['Raise', 'Return']), ('orelse', [])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name']), ('vararg', 'str'), ('kwarg', 'str'), ('defaults', ['Call', 'Call'])]": 1, "If -> [('test', 'Call'), ('body', ['Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'If', 'If', 'Assign', 'If', 'If', 'If', 'If', 'Assign', 'For', 'Expr', 'If', 'Expr', 'Expr', 'Expr', 'Print', 'Assign', 'Print', 'Expr', 'Print']), ('orelse', ['Assign', 'Assign', 'For', 'Expr'])]": 1, "Subscript -> [('value', 'Dict'), ('slice', 'Index'), ('ctx', 'Load')]": 3, "Call -> [('func', 'Attribute'), ('args', ['Compare', 'BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Attribute', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 6, "Call -> [('func', 'Name'), ('args', ['Str', 'Str', 'Str', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'Attribute')]": 2, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Name', 'Num', 'Name', 'Name'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'For', 'Expr', 'Assign', 'Assign']), ('decorator_list', [])]": 1, "Compare -> [('left', 'Call'), ('ops', ['LtE']), ('comparators', ['Call'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'Return']), ('decorator_list', ['Name'])]": 1, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'Assign']), ('orelse', [])]": 2, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'Expr', 'Expr']), ('orelse', [])]": 1, "BinOp -> [('left', 'Call'), ('op', 'Add'), ('right', 'Call')]": 21, "Dict -> [('keys', ['Str']), ('values', ['Str'])]": 36, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'Assign', 'Expr', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Assert', 'Assert', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'If', 'Assign', 'For', 'Assign', 'Assign', 'Expr', 'Expr', 'Return']), ('decorator_list', ['Attribute'])]": 1, "If -> [('test', 'Attribute'), ('body', ['If']), ('orelse', [])]": 2, "Dict -> [('keys', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('values', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str'])]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['If', 'Expr']), ('orelse', [])]": 1, "comprehension -> [('target', 'Name'), ('iter', 'List'), ('ifs', [])]": 2, "If -> [('test', 'Call'), ('body', ['For']), ('orelse', ['Assign', 'Expr'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'If', 'If', 'Expr']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assert', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', []), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'Call')]": 7, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'For', 'Return']), ('decorator_list', [])]": 2, "BinOp -> [('left', 'Name'), ('op', 'Add'), ('right', 'Attribute')]": 7, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'If', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'For', 'If', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Expr', 'Return']), ('decorator_list', [])]": 1, "Return -> [('value', 'IfExp')]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 2, "Compare -> [('left', 'Subscript'), ('ops', ['NotEq']), ('comparators', ['Str'])]": 3, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Lambda']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'TryFinally']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 2, "IfExp -> [('test', 'Call'), ('body', 'Str'), ('orelse', 'Str')]": 1, "Call -> [('func', 'Name'), ('args', []), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "List -> [('elts', ['Tuple', 'Tuple', 'Name']), ('ctx', 'Load')]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['If', 'If', 'If', 'If', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'If', 'Assign', 'Expr']), ('orelse', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Subscript', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['TryExcept', 'Expr', 'Expr', 'Assign', 'Assign', 'TryFinally']), ('decorator_list', [])]": 1, "comprehension -> [('target', 'Name'), ('iter', 'Call'), ('ifs', ['Name'])]": 1, "Slice -> [('lower', 'Num'), ('upper', 'Call'), ('step', 'NoneType')]": 1, "Dict -> [('keys', ['Str']), ('values', ['Dict'])]": 6, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'For']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Expr', 'Expr', 'Assign', 'Expr']), ('orelse', [])]": 1, "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'Expr']), ('orelse', [])]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'Assign', 'For', 'Return']), ('decorator_list', [])]": 1, "Compare -> [('left', 'Subscript'), ('ops', ['LtE']), ('comparators', ['Name'])]": 2, "If -> [('test', 'BoolOp'), ('body', ['Break']), ('orelse', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Return']), ('decorator_list', ['Name'])]": 4, "ClassDef -> [('name', 'str'), ('bases', ['Name', 'Name']), ('body', ['Expr', 'Assign']), ('decorator_list', [])]": 7, "Call -> [('func', 'Name'), ('args', []), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'Name')]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'For', 'For', 'Return']), ('decorator_list', [])]": 1, "BoolOp -> [('op', 'Or'), ('values', ['Compare', 'UnaryOp'])]": 3, "BoolOp -> [('op', 'And'), ('values', ['Name', 'Attribute', 'Compare'])]": 1, "Compare -> [('left', 'Attribute'), ('ops', ['NotIn']), ('comparators', ['List'])]": 2, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Attribute', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "Call -> [('func', 'Attribute'), ('args', ['Lambda', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Import -> [('names', ['alias', 'alias', 'alias', 'alias', 'alias'])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'If', 'Assign', 'If']), ('orelse', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assert']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "Compare -> [('left', 'Attribute'), ('ops', ['Eq']), ('comparators', ['Name'])]": 47, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'If', 'If']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'For', 'Expr']), ('decorator_list', [])]": 1, "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'Import', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'ClassDef', 'ClassDef', 'Expr', 'Expr', 'ImportFrom', 'Expr', 'Assign', 'Assign'])]": 1, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['If', 'Assign', 'If']), ('orelse', [])]": 1, "If -> [('test', 'UnaryOp'), ('body', ['Assign']), ('orelse', ['If'])]": 1, "Dict -> [('keys', ['Call']), ('values', ['List'])]": 1, "Call -> [('func', 'Name'), ('args', ['Attribute', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 35, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If']), ('decorator_list', [])]": 4, "BinOp -> [('left', 'Name'), ('op', 'Add'), ('right', 'List')]": 3, "If -> [('test', 'Call'), ('body', ['Assign', 'Assign', 'If']), ('orelse', [])]": 1, "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['Expr', 'Return'])]": 1, "Call -> [('func', 'Name'), ('args', ['Str', 'Attribute', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'str'), ('defaults', ['Name', 'Name', 'Name', 'Name'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'FunctionDef', 'Assign', 'If', 'For', 'Return']), ('decorator_list', [])]": 1, "Param -> <NULL>": 4023, "While -> [('test', 'Name'), ('body', ['Assign', 'If', 'Assert', 'Assign', 'Assert', 'For']), ('orelse', [])]": 1, "BinOp -> [('left', 'Num'), ('op', 'Pow'), ('right', 'Num')]": 5, "If -> [('test', 'Name'), ('body', ['Expr']), ('orelse', ['Assign', 'Expr'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Num']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "If -> [('test', 'BoolOp'), ('body', ['If']), ('orelse', ['Assign'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['TryExcept']), ('decorator_list', [])]": 14, "Call -> [('func', 'Name'), ('args', ['Name', 'Attribute', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', [])]": 3, "Print -> [('dest', 'NoneType'), ('values', ['Call', 'Str']), ('nl', 'bool')]": 1, "If -> [('test', 'BoolOp'), ('body', ['Return']), ('orelse', [])]": 16, "Call -> [('func', 'Name'), ('args', ['Str', 'Name', 'Call', 'Call', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Call -> [('func', 'Attribute'), ('args', ['Call', 'Dict']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 29, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Expr', 'Assign', 'Assign']), ('orelse', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'Call'), ('body', ['If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('orelse', ['If'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'For', 'Expr', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "AugAssign -> [('target', 'Name'), ('op', 'Add'), ('value', 'Num')]": 19, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'If', 'If', 'If', 'If']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'If', 'If', 'Assign', 'For', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'BoolOp'), ('body', ['AugAssign']), ('orelse', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'For', 'Assign']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'If', 'Expr', 'If', 'Assign', 'TryExcept', 'Return']), ('decorator_list', [])]": 1, "Call -> [('func', 'Name'), ('args', ['List']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 11, "Call -> [('func', 'Attribute'), ('args', ['Attribute']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 7, "BoolOp -> [('op', 'And'), ('values', ['BoolOp', 'Compare'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Subscript', 'Subscript', 'Name', 'Name', 'List', 'Tuple', 'Num', 'Name', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Call -> [('func', 'Attribute'), ('args', ['Call', 'BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 20, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Tuple', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 4, "If -> [('test', 'UnaryOp'), ('body', ['For', 'Return']), ('orelse', ['Return'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'Assign', 'Expr', 'Return']), ('decorator_list', ['Name'])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'For']), ('orelse', [])]": 1, "Invert -> <NULL>": 2, "BinOp -> [('left', 'Name'), ('op', 'Mod'), ('right', 'Call')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Attribute', 'Str', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Call -> [('func', 'Name'), ('args', ['Name', 'Name', 'Name']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 4, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "Compare -> [('left', 'Subscript'), ('ops', ['Eq']), ('comparators', ['Str'])]": 28, "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['If']), ('orelse', [])]": 12, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'Assign', 'Assign', 'FunctionDef']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Num']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Expr', 'Expr']), ('orelse', ['Expr', 'Expr'])]": 1, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['AugAssign']), ('orelse', [])]": 2, "Tuple -> [('elts', ['Call', 'Call', 'Name']), ('ctx', 'Load')]": 3, "Call -> [('func', 'Attribute'), ('args', ['List', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "arguments -> [('args', ['Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Attribute'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'If', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['TryExcept']), ('orelse', [])]": 2, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Expr', 'Expr', 'Expr', 'Return']), ('orelse', [])]": 1, "List -> [('elts', ['Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num']), ('ctx', 'Load')]": 4, "If -> [('test', 'Name'), ('body', ['Assign', 'If']), ('orelse', ['Expr'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Call', 'Num', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 4, "Call -> [('func', 'Name'), ('args', ['Name', 'Str', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 3, "Compare -> [('left', 'Call'), ('ops', ['Eq']), ('comparators', ['Attribute'])]": 6, "Tuple -> [('elts', ['BoolOp', 'Call', 'Attribute']), ('ctx', 'Load')]": 1, "Call -> [('func', 'Attribute'), ('args', ['Str', 'Str', 'Subscript', 'Str', 'Attribute', 'BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "If -> [('test', 'Attribute'), ('body', ['Expr']), ('orelse', ['Assign', 'If', 'If'])]": 1, "If -> [('test', 'Call'), ('body', ['Continue']), ('orelse', [])]": 5, "Call -> [('func', 'Name'), ('args', ['Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'While', 'While', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'If', 'Return']), ('decorator_list', [])]": 1, "Assign -> [('targets', ['Tuple']), ('value', 'GeneratorExp')]": 1, "Compare -> [('left', 'Name'), ('ops', ['Gt']), ('comparators', ['Num'])]": 17, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Tuple', 'Tuple', 'Tuple']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "BinOp -> [('left', 'Subscript'), ('op', 'Sub'), ('right', 'Call')]": 1, "arguments -> [('args', ['Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'str'), ('defaults', ['Str', 'Dict'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['List', 'List', 'List']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "If -> [('test', 'Name'), ('body', ['Assign', 'Expr', 'FunctionDef', 'For', 'For', 'Expr', 'If']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'For', 'For', 'For', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Raise']), ('orelse', ['If'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Print', 'For', 'Print']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'BinOp']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "ExceptHandler -> [('type', 'NoneType'), ('name', 'NoneType'), ('body', ['Expr', 'Raise'])]": 1, "If -> [('test', 'Call'), ('body', ['TryExcept', 'If']), ('orelse', [])]": 1, "Assign -> [('targets', ['Name', 'Name', 'Name']), ('value', 'Str')]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Num', 'Num', 'Name'])]": 1, "BoolOp -> [('op', 'And'), ('values', ['Compare', 'Attribute', 'UnaryOp'])]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'Import', 'Assign', 'FunctionDef', 'ClassDef', 'FunctionDef', 'FunctionDef', 'Import', 'Assign', 'Delete', 'ClassDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'If'])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'If', 'ImportFrom', 'Assign', 'Assign', 'Return']), ('orelse', ['If'])]": 1, "Subscript -> [('value', 'Attribute'), ('slice', 'Index'), ('ctx', 'Store')]": 87, "BinOp -> [('left', 'BinOp'), ('op', 'BitOr'), ('right', 'Call')]": 1, "If -> [('test', 'BoolOp'), ('body', ['Assign', 'If', 'If', 'If']), ('orelse', [])]": 1, "If -> [('test', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'If']), ('orelse', [])]": 2, "Tuple -> [('elts', ['Str', 'Tuple']), ('ctx', 'Load')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "List -> [('elts', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('ctx', 'Load')]": 1, "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'AugAssign']), ('orelse', [])]": 2, "If -> [('test', 'Name'), ('body', ['Expr', 'Expr', 'For', 'FunctionDef', 'Expr', 'Expr', 'Expr']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assert', 'If']), ('decorator_list', [])]": 1, "TryFinally -> [('body', ['Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'If', 'If', 'Expr']), ('finalbody', ['Expr'])]": 1, "If -> [('test', 'Compare'), ('body', ['Expr']), ('orelse', ['Expr'])]": 14, "Slice -> [('lower', 'Num'), ('upper', 'UnaryOp'), ('step', 'NoneType')]": 1, "Compare -> [('left', 'Call'), ('ops', ['Eq']), ('comparators', ['Str'])]": 17, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Call', 'Call', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Tuple -> [('elts', ['Str', 'Attribute']), ('ctx', 'Load')]": 7, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['If', 'If', 'Assign', 'If', 'If', 'If']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'While', 'Assign', 'Return']), ('decorator_list', [])]": 1, "ExceptHandler -> [('type', 'Tuple'), ('name', 'NoneType'), ('body', ['Pass'])]": 2, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Name', 'Name', 'Call', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'For', 'Assign', 'For', 'If', 'For']), ('orelse', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['If', 'Assign', 'If']), ('orelse', [])]": 1, "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'ClassDef'])]": 1, "Assert -> [('test', 'Call'), ('msg', 'Str')]": 2, "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'If', 'If']), ('orelse', ['Print', 'Assign', 'If', 'If'])]": 1, "Pow -> <NULL>": 73, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str']), ('values', ['Str', 'Str', 'Str', 'Str'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'For', 'If']), ('decorator_list', ['Name', 'Name'])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'If', 'Return']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Tuple', 'Name', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'If']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'If', 'If', 'Assign', 'If', 'Assign']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['Expr', 'Expr', 'If']), ('orelse', [])]": 1, "Add -> <NULL>": 714, "While -> [('test', 'Name'), ('body', ['If', 'Assign', 'If']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'Expr']), ('decorator_list', [])]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "UnaryOp -> [('op', 'Not'), ('operand', 'Attribute')]": 48, "Compare -> [('left', 'Name'), ('ops', ['Eq']), ('comparators', ['Tuple'])]": 1, "TryExcept -> [('body', ['Return']), ('handlers', ['ExceptHandler', 'ExceptHandler']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Return']), ('decorator_list', [])]": 62, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['For', 'For', 'AugAssign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Assign', 'Assign', 'For', 'If', 'If']), ('orelse', [])]": 1, "Compare -> [('left', 'Num'), ('ops', ['LtE']), ('comparators', ['Subscript'])]": 2, "BoolOp -> [('op', 'Or'), ('values', ['BoolOp', 'BoolOp'])]": 1, "Compare -> [('left', 'Call'), ('ops', ['LtE']), ('comparators', ['Num'])]": 2, "BinOp -> [('left', 'Name'), ('op', 'Div'), ('right', 'IfExp')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "If -> [('test', 'BoolOp'), ('body', ['Delete']), ('orelse', ['If'])]": 1, "BinOp -> [('left', 'Subscript'), ('op', 'Add'), ('right', 'BinOp')]": 5, "ExceptHandler -> [('type', 'Name'), ('name', 'Name'), ('body', ['Return'])]": 8, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Assign', 'If']), ('orelse', [])]": 5, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef']), ('decorator_list', [])]": 1, "If -> [('test', 'Attribute'), ('body', ['Assign', 'Assign', 'Expr']), ('orelse', ['Assign', 'Expr'])]": 1, "Compare -> [('left', 'Call'), ('ops', ['Gt']), ('comparators', ['Num'])]": 27, "Tuple -> [('elts', ['Attribute', 'Attribute', 'Attribute']), ('ctx', 'Load')]": 6, "Call -> [('func', 'Attribute'), ('args', ['Num', 'Num', 'Num', 'Num', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "Assign -> [('targets', ['Name']), ('value', 'List')]": 273, "ClassDef -> [('name', 'str'), ('bases', []), ('body', ['Expr', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 3, "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign', 'Assign']), ('orelse', [])]": 1, "IfExp -> [('test', 'Compare'), ('body', 'Name'), ('orelse', 'Num')]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign']), ('orelse', ['Raise'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 61, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Attribute', 'Name', 'Attribute', 'Name', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Return']), ('decorator_list', [])]": 1, "Tuple -> [('elts', ['Subscript', 'Subscript', 'Subscript']), ('ctx', 'Load')]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'If', 'If', 'If', 'Return']), ('decorator_list', [])]": 1, "LShift -> <NULL>": 11, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'For', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'TryFinally']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['If', 'Assign', 'If', 'Assign', 'TryExcept']), ('orelse', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Expr', 'Assign']), ('decorator_list', [])]": 1, "BinOp -> [('left', 'Num'), ('op', 'Sub'), ('right', 'Call')]": 2, "Call -> [('func', 'Attribute'), ('args', ['List', 'Attribute', 'Num', 'Num', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "Compare -> [('left', 'Name'), ('ops', ['GtE']), ('comparators', ['Num'])]": 17, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'For']), ('decorator_list', [])]": 1, "TryExcept -> [('body', ['If', 'Assign', 'If']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 1, "arguments -> [('args', ['Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', [])]": 1082, "Tuple -> [('elts', ['BinOp', 'Subscript']), ('ctx', 'Load')]": 1, "BinOp -> [('left', 'Subscript'), ('op', 'Div'), ('right', 'Num')]": 14, "Slice -> [('lower', 'Name'), ('upper', 'NoneType'), ('step', 'NoneType')]": 5, "Compare -> [('left', 'Subscript'), ('ops', ['Eq']), ('comparators', ['Num'])]": 9, "Subscript -> [('value', 'Attribute'), ('slice', 'Index'), ('ctx', 'Del')]": 12, "arguments -> [('args', ['Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Name'])]": 3, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import'])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str'])]": 3, "While -> [('test', 'BoolOp'), ('body', ['Assign']), ('orelse', [])]": 2, "BinOp -> [('left', 'List'), ('op', 'Add'), ('right', 'Name')]": 5, "Attribute -> [('value', 'Call'), ('attr', 'str'), ('ctx', 'Load')]": 569, "BinOp -> [('left', 'Subscript'), ('op', 'Div'), ('right', 'Name')]": 2, "While -> [('test', 'Attribute'), ('body', ['Assign', 'For', 'While']), ('orelse', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 13, "Call -> [('func', 'Attribute'), ('args', []), ('keywords', []), ('starargs', 'Call'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'If', 'If', 'Return']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Str']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 6, "If -> [('test', 'Call'), ('body', ['Return']), ('orelse', ['If'])]": 6, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'If', 'Return']), ('decorator_list', ['Call'])]": 1, "If -> [('test', 'Name'), ('body', ['Assign', 'Expr', 'Expr']), ('orelse', [])]": 1, "If -> [('test', 'BoolOp'), ('body', ['Assign', 'For', 'Expr', 'Expr']), ('orelse', [])]": 2, "Call -> [('func', 'Attribute'), ('args', ['Subscript', 'Name']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'Return']), ('decorator_list', [])]": 2, "If -> [('test', 'Name'), ('body', ['AugAssign']), ('orelse', [])]": 10, "ImportFrom -> [('module', 'str'), ('names', ['alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias']), ('level', 'int')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'AugAssign', 'AugAssign', 'AugAssign', 'AugAssign', 'Assign', 'AugAssign', 'AugAssign', 'AugAssign', 'AugAssign', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'Name'), ('body', ['Break']), ('orelse', [])]": 2, "Tuple -> [('elts', ['Name', 'List', 'Name', 'List']), ('ctx', 'Load')]": 1, "Call -> [('func', 'Attribute'), ('args', ['Call', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 15, "If -> [('test', 'Compare'), ('body', ['If']), ('orelse', ['Assert'])]": 1, "Compare -> [('left', 'Attribute'), ('ops', ['Lt']), ('comparators', ['Name'])]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ClassDef', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "If -> [('test', 'Call'), ('body', ['Assign']), ('orelse', ['Expr', 'Assign'])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign']), ('orelse', ['Expr'])]": 1, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['If', 'If', 'If', 'If', 'TryExcept', 'If']), ('orelse', [])]": 1, "TryFinally -> [('body', ['Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr']), ('finalbody', ['Expr', 'Expr'])]": 1, "ExceptHandler -> [('type', 'Tuple'), ('name', 'Name'), ('body', ['Return'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'Assign', 'If', 'Assign', 'For', 'If', 'For', 'If', 'Return']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'BinOp']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Attribute', 'Attribute', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Call -> [('func', 'Attribute'), ('args', ['List', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 13, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['With']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Expr', 'Return']), ('decorator_list', [])]": 1, "Compare -> [('left', 'Num'), ('ops', ['LtE']), ('comparators', ['Name'])]": 4, "Call -> [('func', 'Attribute'), ('args', ['Call', 'Num', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Num'])]": 1, "If -> [('test', 'Call'), ('body', ['Assign', 'Assign']), ('orelse', ['Assign'])]": 2, "TryExcept -> [('body', ['Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'If', 'Assign', 'If', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'If', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'If', 'For', 'Return']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Name', 'ListComp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign', 'Assign', 'Assign']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['With']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign']), ('decorator_list', [])]": 1, "If -> [('test', 'Attribute'), ('body', ['Assign']), ('orelse', ['Assign', 'Assign', 'Assign'])]": 1, "TryExcept -> [('body', ['Print', 'Assign', 'Print']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 1, "Yield -> [('value', 'BinOp')]": 2, "If -> [('test', 'Attribute'), ('body', ['For']), ('orelse', [])]": 2, "If -> [('test', 'UnaryOp'), ('body', ['If', 'If']), ('orelse', [])]": 2, "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['Expr', 'If']), ('orelse', [])]": 1, "Print -> [('dest', 'NoneType'), ('values', ['BinOp', 'Str', 'Subscript']), ('nl', 'bool')]": 1, "Index -> [('value', 'BinOp')]": 30, "BoolOp -> [('op', 'And'), ('values', ['Attribute', 'Call'])]": 6, "TryExcept -> [('body', ['Assign', 'If', 'Assign', 'If', 'Assign', 'Assign', 'Expr']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 1, "Dict -> [('keys', ['BinOp', 'BinOp']), ('values', ['Name', 'Name'])]": 2, "If -> [('test', 'BoolOp'), ('body', ['Expr', 'Return']), ('orelse', ['If'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'Assign', 'TryExcept', 'For', 'Expr']), ('decorator_list', [])]": 1, "arguments -> [('args', ['Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', [])]": 481, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Subscript', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 4, "If -> [('test', 'Name'), ('body', ['FunctionDef', 'Assign', 'Expr', 'Expr', 'Expr']), ('orelse', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Num', 'Str', 'Tuple']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 6, "IfExp -> [('test', 'Compare'), ('body', 'Name'), ('orelse', 'Call')]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'For', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Call']), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'Name'), ('kwargs', 'Name')]": 3, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'TryExcept', 'TryExcept', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'FunctionDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'FunctionDef', 'FunctionDef'])]": 1, "For -> [('target', 'Tuple'), ('iter', 'Attribute'), ('body', ['Expr']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 3, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'Return']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'ImportFrom', 'Assign', 'Expr', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'If', 'Assign', 'Assign', 'Return']), ('decorator_list', ['Name'])]": 1, "List -> [('elts', ['Call', 'Call']), ('ctx', 'Load')]": 10, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]": 1, "Dict -> [('keys', ['Str']), ('values', ['Tuple'])]": 2, "Call -> [('func', 'Name'), ('args', ['ListComp', 'List']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "List -> [('elts', ['Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute']), ('ctx', 'Load')]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 42, "If -> [('test', 'Compare'), ('body', ['Delete', 'If']), ('orelse', [])]": 1, "TryExcept -> [('body', ['If', 'If']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 1, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'Expr', 'Expr']), ('orelse', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Expr', 'For', 'If']), ('orelse', [])]": 1, "If -> [('test', 'Compare'), ('body', ['If', 'Expr']), ('orelse', [])]": 1, "Print -> [('dest', 'NoneType'), ('values', ['Str', 'Name', 'Str', 'Name', 'Str', 'Subscript']), ('nl', 'bool')]": 1, "Compare -> [('left', 'Call'), ('ops', ['GtE']), ('comparators', ['Call'])]": 1, "LtE -> <NULL>": 40, "ExceptHandler -> [('type', 'Name'), ('name', 'Name'), ('body', ['AugAssign', 'Raise'])]": 1, "If -> [('test', 'Compare'), ('body', ['If', 'TryExcept', 'Expr']), ('orelse', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['Assign', 'For']), ('orelse', [])]": 1, "BoolOp -> [('op', 'And'), ('values', ['Compare', 'UnaryOp', 'Compare'])]": 1, "For -> [('target', 'Tuple'), ('iter', 'Name'), ('body', ['Expr', 'If']), ('orelse', [])]": 1, "Compare -> [('left', 'Call'), ('ops', ['Eq']), ('comparators', ['Tuple'])]": 4, "For -> [('target', 'Name'), ('iter', 'Tuple'), ('body', ['If']), ('orelse', [])]": 3, "Call -> [('func', 'Name'), ('args', ['Str', 'Str', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 75, "Call -> [('func', 'Attribute'), ('args', ['Str']), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "If -> [('test', 'Name'), ('body', ['If']), ('orelse', ['Expr'])]": 2, "Call -> [('func', 'Attribute'), ('args', ['Name']), ('keywords', []), ('starargs', 'Name'), ('kwargs', 'Name')]": 17, "BinOp -> [('left', 'Subscript'), ('op', 'Add'), ('right', 'List')]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Str', 'Str', 'Str', 'Call', 'Str', 'Str'])]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['If']), ('orelse', [])]": 38, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['TryExcept']), ('orelse', [])]": 2, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Str', 'Str', 'Str', 'Call', 'Str', 'Str', 'Str', 'Str', 'Str'])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'For', 'If', 'Expr']), ('orelse', ['Expr'])]": 1, "Compare -> [('left', 'Tuple'), ('ops', ['In']), ('comparators', ['Attribute'])]": 1, "If -> [('test', 'BoolOp'), ('body', ['Assign', 'If']), ('orelse', ['Assign', 'Assign'])]": 1, "BinOp -> [('left', 'Subscript'), ('op', 'Mult'), ('right', 'Name')]": 4, "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign']), ('orelse', ['Assign', 'Assign'])]": 3, "Print -> [('dest', 'NoneType'), ('values', ['Name']), ('nl', 'bool')]": 24, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'For']), ('decorator_list', [])]": 1, "BinOp -> [('left', 'BinOp'), ('op', 'Div'), ('right', 'Name')]": 8, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Attribute', 'Name', 'Attribute', 'Attribute', 'Attribute', 'Attribute'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Name', 'Num', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "If -> [('test', 'Compare'), ('body', ['If']), ('orelse', ['Expr'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'BinOp']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'For', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Dict', 'Attribute', 'Attribute', 'Attribute', 'Attribute'])]": 1, "If -> [('test', 'Compare'), ('body', ['Return']), ('orelse', ['AugAssign'])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Return']), ('orelse', ['If'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'AugAssign', 'Return']), ('decorator_list', [])]": 1, "comprehension -> [('target', 'Tuple'), ('iter', 'Name'), ('ifs', ['Compare'])]": 1, "Tuple -> [('elts', ['Name', 'Subscript']), ('ctx', 'Load')]": 3, "If -> [('test', 'BoolOp'), ('body', ['Expr']), ('orelse', ['Expr'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'If', 'Expr', 'Expr', 'Return']), ('decorator_list', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Expr', 'Assign', 'ClassDef', 'ClassDef', 'FunctionDef', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "If -> [('test', 'Call'), ('body', ['If', 'If', 'Assign', 'Return']), ('orelse', [])]": 1, "TryExcept -> [('body', ['Expr', 'Break']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 1, "BinOp -> [('left', 'Attribute'), ('op', 'Sub'), ('right', 'Attribute')]": 4, "Call -> [('func', 'Name'), ('args', ['Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'Attribute')]": 1, "Tuple -> [('elts', ['Num']), ('ctx', 'Load')]": 8, "Name -> [('id', 'str'), ('ctx', 'Param')]": 4023, "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'Assign', 'Expr', 'Assign']), ('orelse', [])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num'])]": 1, "List -> [('elts', ['Subscript']), ('ctx', 'Load')]": 8, "If -> [('test', 'Name'), ('body', ['Expr']), ('orelse', ['Expr'])]": 8, "For -> [('target', 'Name'), ('iter', 'Tuple'), ('body', ['Assign', 'Assign', 'Expr', 'Expr', 'Expr']), ('orelse', [])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Str', 'Name', 'Name', 'Name'])]": 1, "BinOp -> [('left', 'Name'), ('op', 'Div'), ('right', 'Num')]": 24, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Num', 'Call', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'Expr']), ('decorator_list', [])]": 2, "List -> [('elts', ['Str', 'Str', 'Name']), ('ctx', 'Load')]": 7, "arguments -> [('args', ['Name']), ('vararg', 'str'), ('kwarg', 'NoneType'), ('defaults', [])]": 7, "Call -> [('func', 'Name'), ('args', ['Call']), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 5, "Dict -> [('keys', ['Str', 'Str']), ('values', ['Num', 'Name'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Tuple', 'Tuple', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 5, "BinOp -> [('left', 'Name'), ('op', 'Mod'), ('right', 'Attribute')]": 5, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Expr', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "Print -> [('dest', 'NoneType'), ('values', ['Str', 'Name', 'Str']), ('nl', 'bool')]": 1, "BinOp -> [('left', 'BinOp'), ('op', 'BitAnd'), ('right', 'Num')]": 2, "Gt -> <NULL>": 85, "BinOp -> [('left', 'Num'), ('op', 'Add'), ('right', 'BinOp')]": 8, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'ImportFrom', 'Assign', 'If', 'Assign', 'Assign', 'For', 'If', 'Return']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Call']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Assign -> [('targets', ['Attribute']), ('value', 'Str')]": 97, "Index -> [('value', 'Attribute')]": 33, "TryExcept -> [('body', ['ImportFrom']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 11, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call'])]": 1, "List -> [('elts', ['List', 'List', 'List']), ('ctx', 'Load')]": 2, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'Assign', 'Assign'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Call', 'Call', 'Tuple', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "While -> [('test', 'Call'), ('body', ['Assign', 'Assert', 'Expr', 'Assign']), ('orelse', [])]": 1, "For -> [('target', 'Tuple'), ('iter', 'Name'), ('body', ['Assign', 'If', 'For']), ('orelse', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Attribute', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 15, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'Name')]": 1, "For -> [('target', 'Name'), ('iter', 'ListComp'), ('body', ['Expr', 'Expr']), ('orelse', [])]": 1, "If -> [('test', 'BoolOp'), ('body', ['Delete']), ('orelse', [])]": 7, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'If'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'For', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Return']), ('decorator_list', [])]": 1, "List -> [('elts', ['Attribute', 'Name', 'Name']), ('ctx', 'Load')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['TryExcept', 'If', 'Return']), ('decorator_list', [])]": 1, "Assign -> [('targets', ['Name', 'Name']), ('value', 'Name')]": 2, "BinOp -> [('left', 'Attribute'), ('op', 'Sub'), ('right', 'Name')]": 4, "If -> [('test', 'UnaryOp'), ('body', ['Return']), ('orelse', ['Expr', 'Assign'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'Assign', 'Assign', 'If', 'Return']), ('decorator_list', [])]": 1, "TryExcept -> [('body', ['Import']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 5, "List -> [('elts', ['Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple']), ('ctx', 'Load')]": 1, "Call -> [('func', 'Name'), ('args', ['Call', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name']), ('vararg', 'str'), ('kwarg', 'str'), ('defaults', ['Name'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Num', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr']), ('orelse', [])]": 1, "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'ClassDef', 'FunctionDef'])]": 1, "Call -> [('func', 'Call'), ('args', ['Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'Name')]": 1, "arguments -> [('args', ['Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Num'])]": 1, "Compare -> [('left', 'Call'), ('ops', ['GtE']), ('comparators', ['Num'])]": 5, "Call -> [('func', 'Attribute'), ('args', ['BinOp']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Assign -> [('targets', ['Attribute']), ('value', 'Call')]": 246, "Subscript -> [('value', 'Name'), ('slice', 'Slice'), ('ctx', 'Load')]": 153, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Str', 'Name'])]": 2, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['For', 'For', 'For', 'Return']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 13, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'TryExcept', 'Assign', 'If', 'Assign', 'If', 'If', 'TryExcept', 'Assign', 'FunctionDef', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'If', 'If', 'If', 'If', 'If', 'If', 'FunctionDef', 'If', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Num', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'TryExcept', 'For']), ('orelse', [])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'str'), ('defaults', ['List', 'Name', 'Name'])]": 1, "Dict -> [('keys', ['Name']), ('values', ['Str'])]": 5, "Tuple -> [('elts', ['Str', 'Num', 'Str', 'Str']), ('ctx', 'Load')]": 3, "If -> [('test', 'Compare'), ('body', ['If', 'If']), ('orelse', [])]": 3, "If -> [('test', 'Name'), ('body', ['TryExcept']), ('orelse', [])]": 3, "Subscript -> [('value', 'Subscript'), ('slice', 'Index'), ('ctx', 'Load')]": 49, "Tuple -> [('elts', ['Name', 'Str', 'Tuple']), ('ctx', 'Load')]": 3, "Compare -> [('left', 'Call'), ('ops', ['Is']), ('comparators', ['Name'])]": 5, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Expr', 'Print', 'For', 'Print']), ('decorator_list', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name', 'Name', 'Name']), ('body', ['Expr', 'FunctionDef']), ('decorator_list', [])]": 2, "BinOp -> [('left', 'Num'), ('op', 'Div'), ('right', 'Name')]": 4, "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['Expr', 'Expr', 'If', 'If', 'If']), ('orelse', [])]": 1, "If -> [('test', 'UnaryOp'), ('body', ['Expr']), ('orelse', ['Assign', 'If', 'If'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Str', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'If'])]": 1, "Call -> [('func', 'Name'), ('args', ['Lambda', 'List']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str']), ('values', ['Num', 'Call', 'Num', 'Call'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Call', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 69, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]": 2, "Slice -> [('lower', 'BinOp'), ('upper', 'NoneType'), ('step', 'NoneType')]": 11, "If -> [('test', 'Name'), ('body', ['Expr']), ('orelse', ['Expr', 'Return'])]": 1, "For -> [('target', 'Name'), ('iter', 'List'), ('body', ['Assign', 'Assign', 'Expr']), ('orelse', [])]": 1, "Tuple -> [('elts', ['Num', 'Str', 'Str', 'Num', 'Str', 'Num']), ('ctx', 'Load')]": 1, "BinOp -> [('left', 'Num'), ('op', 'Mult'), ('right', 'Subscript')]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ClassDef', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "For -> [('target', 'Tuple'), ('iter', 'Subscript'), ('body', ['Assign', 'Assign', 'Expr', 'Expr']), ('orelse', [])]": 1, "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]": 1, "BinOp -> [('left', 'Attribute'), ('op', 'Mult'), ('right', 'BinOp')]": 2, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['If', 'Expr', 'AugAssign']), ('orelse', [])]": 1, "If -> [('test', 'UnaryOp'), ('body', ['For', 'For', 'For', 'For']), ('orelse', [])]": 1, "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]": 1, "Call -> [('func', 'Name'), ('args', ['Str']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 3, "Assign -> [('targets', ['Subscript']), ('value', 'IfExp')]": 2, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 2, "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['Assign', 'For', 'If']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'TryFinally']), ('decorator_list', ['Name'])]": 2, "Num -> [('n', 'float')]": 542, "If -> [('test', 'Compare'), ('body', ['Assign', 'For', 'Assign']), ('orelse', ['If'])]": 1, "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'Expr', 'Expr', 'Assign']), ('orelse', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Attribute']), ('keywords', []), ('starargs', 'Name'), ('kwargs', 'NoneType')]": 2, "Call -> [('func', 'Attribute'), ('args', ['Call', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 3, "For -> [('target', 'Name'), ('iter', 'Tuple'), ('body', ['Expr']), ('orelse', [])]": 3, "If -> [('test', 'Call'), ('body', ['Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'If', 'If']), ('orelse', ['Expr'])]": 1, "List -> [('elts', ['Tuple', 'Tuple']), ('ctx', 'Load')]": 9, "ListComp -> [('elt', 'Dict'), ('generators', ['comprehension'])]": 1, "BinOp -> [('left', 'List'), ('op', 'Add'), ('right', 'Call')]": 2, "Tuple -> [('elts', ['Attribute', 'Name', 'Attribute']), ('ctx', 'Load')]": 1, "Assign -> [('targets', ['Subscript']), ('value', 'Str')]": 33, "BoolOp -> [('op', 'Or'), ('values', ['Attribute', 'Attribute'])]": 7, "If -> [('test', 'Call'), ('body', ['Expr']), ('orelse', ['If'])]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'If']), ('orelse', [])]": 11, "Dict -> [('keys', ['Name']), ('values', ['Name'])]": 1, "Expr -> [('value', 'ListComp')]": 3, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'TryExcept', 'FunctionDef', 'If'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'For']), ('decorator_list', ['Name', 'Name'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Name', 'Subscript']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ClassDef', 'FunctionDef', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'For', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'str'), ('defaults', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 4, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Name', 'BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 4, "Call -> [('func', 'Name'), ('args', ['Tuple']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 2, "And -> <NULL>": 222, "Call -> [('func', 'Name'), ('args', ['Subscript']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Call -> [('func', 'Name'), ('args', ['Str', 'Dict', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 3, "Call -> [('func', 'Attribute'), ('args', ['Str']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 8, "Call -> [('func', 'Attribute'), ('args', ['BinOp', 'Attribute', 'BinOp', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['FunctionDef', 'ClassDef', 'ClassDef']), ('decorator_list', [])]": 2, "BoolOp -> [('op', 'Or'), ('values', ['UnaryOp', 'UnaryOp'])]": 5, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Pass']), ('decorator_list', [])]": 4, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str']), ('values', ['Attribute', 'Attribute', 'Name', 'Str'])]": 1, "Slice -> [('lower', 'NoneType'), ('upper', 'BinOp'), ('step', 'NoneType')]": 3, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Str', 'Name', 'Name'])]": 3, "If -> [('test', 'Compare'), ('body', ['Assign']), ('orelse', [])]": 151, "Index -> [('value', 'Compare')]": 4, "IfExp -> [('test', 'Compare'), ('body', 'Attribute'), ('orelse', 'Attribute')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'If', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'For', 'Return']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'For', 'Raise']), ('decorator_list', [])]": 1, "Compare -> [('left', 'Subscript'), ('ops', ['Eq']), ('comparators', ['Attribute'])]": 3, "Slice -> [('lower', 'BinOp'), ('upper', 'BinOp'), ('step', 'NoneType')]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'ImportFrom', 'Expr']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Return']), ('orelse', ['Assign', 'Assign', 'If'])]": 1, "BinOp -> [('left', 'BinOp'), ('op', 'Add'), ('right', 'Call')]": 26, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "If -> [('test', 'Call'), ('body', ['Assign', 'Assign', 'Expr']), ('orelse', ['Expr'])]": 1, "While -> [('test', 'Num'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'AugAssign']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 2, "Compare -> [('left', 'Call'), ('ops', ['Gt']), ('comparators', ['Call'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Name', 'BinOp']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "While -> [('test', 'Name'), ('body', ['Expr', 'Assign']), ('orelse', [])]": 2, "Store -> <NULL>": 9860, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "IfExp -> [('test', 'Compare'), ('body', 'Str'), ('orelse', 'Str')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'TryFinally']), ('decorator_list', [])]": 1, "If -> [('test', 'Name'), ('body', ['Assign', 'Assign', 'Assign']), ('orelse', [])]": 5, "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'Assign', 'Assign', 'If', 'FunctionDef', 'Expr', 'FunctionDef', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'ClassDef', 'Assign', 'Assign', 'Expr'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Num', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "Call -> [('func', 'Name'), ('args', ['Name', 'Name', 'Attribute', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Subscript']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 3, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "BitOr -> <NULL>": 27, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name']), ('keywords', ['keyword']), ('starargs', 'Name'), ('kwargs', 'Name')]": 1, "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign', 'Assign', 'Expr']), ('orelse', ['Pass'])]": 1, "If -> [('test', 'Name'), ('body', ['Assign', 'Assign']), ('orelse', ['Assign', 'Assign'])]": 4, "If -> [('test', 'Name'), ('body', ['Expr']), ('orelse', [])]": 64, "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'Assign']), ('orelse', ['If'])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'List'), ('body', ['Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'For']), ('orelse', [])]": 1, "If -> [('test', 'Num'), ('body', ['Assign', 'Expr', 'Expr', 'Assign']), ('orelse', [])]": 1, "Compare -> [('left', 'BinOp'), ('ops', ['LtE']), ('comparators', ['Num'])]": 3, "Compare -> [('left', 'Attribute'), ('ops', ['Eq']), ('comparators', ['Str'])]": 35, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'For', 'Return']), ('decorator_list', [])]": 1, "Compare -> [('left', 'Subscript'), ('ops', ['Eq']), ('comparators', ['Name'])]": 16, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Print', 'Assign', 'For', 'For', 'Assign', 'Expr', 'Assign', 'For', 'If', 'Expr']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Str', 'BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Compare -> [('left', 'Name'), ('ops', ['NotEq']), ('comparators', ['Str'])]": 8, "If -> [('test', 'Compare'), ('body', ['Assign']), ('orelse', ['Raise'])]": 2, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Attribute', 'Attribute', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 2, "Call -> [('func', 'Call'), ('args', ['Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'If', 'FunctionDef', 'Assign', 'FunctionDef', 'Assign', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "Compare -> [('left', 'Call'), ('ops', ['Eq']), ('comparators', ['Name'])]": 30, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'Attribute'), ('body', ['Return']), ('orelse', [])]": 5, "If -> [('test', 'Call'), ('body', ['Expr']), ('orelse', ['Expr'])]": 13, "arguments -> [('args', ['Name', 'Name']), ('vararg', 'str'), ('kwarg', 'NoneType'), ('defaults', [])]": 4, "TryExcept -> [('body', ['Assign', 'Assign', 'Assign', 'Expr']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Call', 'Call', 'Call', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Call -> [('func', 'Attribute'), ('args', ['Str', 'Str']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'ImportFrom', 'ClassDef', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Expr', 'If']), ('orelse', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Num', 'Num']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Call -> [('func', 'Attribute'), ('args', []), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'Name')]": 1, "BinOp -> [('left', 'Subscript'), ('op', 'Add'), ('right', 'Call')]": 1, "Call -> [('func', 'Attribute'), ('args', ['BinOp']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'Name')]": 4, "While -> [('test', 'Compare'), ('body', ['Assign', 'If', 'If', 'AugAssign']), ('orelse', [])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['Name', 'Name', 'Call'])]": 2, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute'])]": 1, "ClassDef -> [('name', 'str'), ('bases', []), ('body', ['FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 3, "Call -> [('func', 'Attribute'), ('args', ['Str', 'BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 16, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'For']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Num', 'Num', 'Num', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 3, "TryExcept -> [('body', ['Assign', 'Assign', 'Return']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 8, "Call -> [('func', 'Name'), ('args', ['Tuple']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 12, "Call -> [('func', 'Attribute'), ('args', ['Num', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 11, "If -> [('test', 'Compare'), ('body', ['ImportFrom']), ('orelse', ['ImportFrom'])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Str', 'Str', 'Str', 'Call', 'BinOp'])]": 1, "Call -> [('func', 'Name'), ('args', ['Dict']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 33, "Subscript -> [('value', 'Name'), ('slice', 'Index'), ('ctx', 'Store')]": 295, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Name', 'Call', 'Name', 'Name', 'Call', 'Call']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Call -> [('func', 'Attribute'), ('args', ['Str', 'Str', 'Str']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "ExceptHandler -> [('type', 'Name'), ('name', 'Name'), ('body', ['Assign'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Expr', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'If']), ('decorator_list', [])]": 1, "BinOp -> [('left', 'Subscript'), ('op', 'Pow'), ('right', 'Num')]": 19, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'TryExcept', 'For', 'Return']), ('decorator_list', [])]": 1, "ListComp -> [('elt', 'Call'), ('generators', ['comprehension'])]": 77, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'For', 'For', 'If', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'Return']), ('decorator_list', ['Name', 'Call'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Attribute', 'Num', 'Num', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "For -> [('target', 'Tuple'), ('iter', 'Attribute'), ('body', ['Assign', 'If']), ('orelse', [])]": 1, "BoolOp -> [('op', 'Or'), ('values', ['UnaryOp', 'Compare'])]": 4, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'Import', 'Import', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'FunctionDef', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'FunctionDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'Assign', 'FunctionDef', 'Assign', 'FunctionDef', 'Assign', 'FunctionDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'Assign'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'For', 'Expr']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Print', 'Assign', 'Assign', 'Assign', 'Assign']), ('orelse', [])]": 1, "If -> [('test', 'Call'), ('body', ['Assign', 'Assign', 'Pass']), ('orelse', ['Assign', 'Pass'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "Subscript -> [('value', 'List'), ('slice', 'Index'), ('ctx', 'Load')]": 3, "IfExp -> [('test', 'Name'), ('body', 'Call'), ('orelse', 'Str')]": 1, "Call -> [('func', 'Name'), ('args', ['Lambda']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 17, "Call -> [('func', 'Attribute'), ('args', ['Name']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'Name')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'TryExcept', 'Assign', 'If', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Num', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 41, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'Return']), ('decorator_list', [])]": 11, "If -> [('test', 'Name'), ('body', ['Expr', 'Return']), ('orelse', [])]": 1, "BinOp -> [('left', 'Name'), ('op', 'Mult'), ('right', 'Attribute')]": 3, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'For', 'Expr']), ('decorator_list', [])]": 4, "Call -> [('func', 'Attribute'), ('args', ['Call', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 29, "If -> [('test', 'Compare'), ('body', ['Assign', 'Expr']), ('orelse', ['If'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Tuple', 'Tuple', 'Tuple']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "ExtSlice -> [('dims', ['Slice', 'Slice'])]": 19, "If -> [('test', 'UnaryOp'), ('body', ['Expr', 'Return']), ('orelse', [])]": 11, "BinOp -> [('left', 'Num'), ('op', 'Sub'), ('right', 'Name')]": 6, "Compare -> [('left', 'Attribute'), ('ops', ['Is']), ('comparators', ['Name'])]": 25, "Module -> [('body', ['Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'Import', 'ImportFrom', 'If', 'FunctionDef', 'ClassDef', 'FunctionDef', 'Assign', 'ClassDef', 'ClassDef', 'Assign'])]": 1, "While -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign']), ('orelse', [])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Str', 'Str', 'Str', 'Call', 'Str', 'Call', 'Str', 'Str'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'Import', 'Assign', 'Assign', 'If', 'If', 'If', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'Call'), ('body', ['Assign', 'Assign', 'Assign']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If']), ('decorator_list', [])]": 19, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['If', 'Assign', 'TryExcept', 'If', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Expr', 'Expr']), ('orelse', [])]": 1, "ImportFrom -> [('module', 'str'), ('names', ['alias', 'alias', 'alias', 'alias']), ('level', 'int')]": 12, "Call -> [('func', 'Attribute'), ('args', ['Tuple', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "BinOp -> [('left', 'Name'), ('op', 'Mod'), ('right', 'Num')]": 6, "If -> [('test', 'Call'), ('body', ['Continue']), ('orelse', ['Assign', 'Assign', 'Assign', 'If'])]": 1, "Dict -> [('keys', ['Str', 'Str']), ('values', ['Call', 'Call'])]": 3, "Call -> [('func', 'Name'), ('args', ['Str', 'Name']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 3, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 7, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'If', 'Expr', 'Expr', 'If']), ('decorator_list', [])]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'Assign', 'ClassDef', 'ClassDef'])]": 1, "Compare -> [('left', 'Attribute'), ('ops', ['In']), ('comparators', ['Name'])]": 10, "Call -> [('func', 'Attribute'), ('args', ['BinOp', 'Subscript']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Str', 'Name']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "BoolOp -> [('op', 'And'), ('values', ['Call', 'UnaryOp', 'Compare'])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'If', 'If', 'FunctionDef', 'Assign', 'Expr', 'Expr', 'Expr']), ('orelse', [])]": 1, "TryExcept -> [('body', ['Assign', 'Assign', 'Assign', 'If', 'Return']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 1, "While -> [('test', 'UnaryOp'), ('body', ['Assign', 'For', 'Expr']), ('orelse', [])]": 1, "BoolOp -> [('op', 'Or'), ('values', ['Subscript', 'Str'])]": 1, "If -> [('test', 'Name'), ('body', ['If', 'Assign', 'Assign', 'Expr']), ('orelse', ['Expr'])]": 1, "Call -> [('func', 'Name'), ('args', ['Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 936, "Compare -> [('left', 'Attribute'), ('ops', ['NotEq']), ('comparators', ['Num'])]": 2, "Tuple -> [('elts', ['Call', 'BinOp']), ('ctx', 'Load')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['TryExcept', 'Assign', 'Expr', 'If', 'Expr']), ('decorator_list', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Name']), ('keywords', []), ('starargs', 'Name'), ('kwargs', 'Name')]": 3, "ListComp -> [('elt', 'Call'), ('generators', ['comprehension', 'comprehension'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Subscript', 'Subscript', 'Subscript']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['FunctionDef']), ('decorator_list', [])]": 17, "If -> [('test', 'Call'), ('body', ['Assign', 'Expr']), ('orelse', ['If'])]": 1, "If -> [('test', 'Compare'), ('body', ['Return']), ('orelse', ['Return'])]": 11, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Tuple', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'While', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'If', 'Return']), ('decorator_list', [])]": 1, "Lambda -> [('args', 'arguments'), ('body', 'List')]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Return']), ('decorator_list', [])]": 2, "Call -> [('func', 'Name'), ('args', ['Call']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 5, "If -> [('test', 'Attribute'), ('body', ['Assign', 'If', 'Assign']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Assign', 'If', 'If']), ('decorator_list', [])]": 1, "BinOp -> [('left', 'BinOp'), ('op', 'Pow'), ('right', 'BinOp')]": 1, "Call -> [('func', 'Attribute'), ('args', ['List', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "Tuple -> [('elts', ['Str', 'Name']), ('ctx', 'Load')]": 17, "Compare -> [('left', 'Subscript'), ('ops', ['LtE']), ('comparators', ['Attribute'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Num', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Expr']), ('orelse', [])]": 42, "Call -> [('func', 'Attribute'), ('args', ['Name']), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "Not -> <NULL>": 422, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Lambda']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 9, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Subscript', 'Subscript', 'Subscript', 'Name', 'Name', 'Name'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'List', 'Lambda']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 16, "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['AugAssign']), ('orelse', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Num', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 4, "Call -> [('func', 'Attribute'), ('args', ['Call', 'Call', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Num', 'Num'])]": 1, "Slice -> [('lower', 'BinOp'), ('upper', 'Name'), ('step', 'NoneType')]": 3, "For -> [('target', 'Tuple'), ('iter', 'Attribute'), ('body', ['Assign', 'For']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'For', 'For', 'If', 'Assign', 'FunctionDef', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'For']), ('decorator_list', [])]": 1, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'Assign']), ('orelse', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Str', 'Attribute', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr']), ('orelse', [])]": 1, "Compare -> [('left', 'Call'), ('ops', ['NotEq']), ('comparators', ['Num'])]": 9, "If -> [('test', 'Call'), ('body', ['Assign', 'For', 'Return']), ('orelse', [])]": 1, "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'If', 'Assign', 'Assign', 'If']), ('orelse', [])]": 1, "List -> [('elts', ['Name', 'Name', 'Name', 'Call', 'Call']), ('ctx', 'Load')]": 1, "Call -> [('func', 'Attribute'), ('args', ['Attribute']), ('keywords', ['keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Assign -> [('targets', ['Name']), ('value', 'Attribute')]": 282, "comprehension -> [('target', 'Tuple'), ('iter', 'Subscript'), ('ifs', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Call', 'Name', 'Tuple', 'Name', 'Attribute', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'Assign', 'Assign', 'For', 'Return']), ('decorator_list', [])]": 1, "arguments -> [('args', ['Name', 'Name']), ('vararg', 'str'), ('kwarg', 'str'), ('defaults', [])]": 4, "Tuple -> [('elts', ['Name', 'Name', 'Name', 'Name']), ('ctx', 'Load')]": 15, "BitXor -> <NULL>": 2, "Return -> [('value', 'Name')]": 484, "If -> [('test', 'Compare'), ('body', ['Expr']), ('orelse', ['Raise'])]": 5, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['If', 'Expr', 'Expr']), ('orelse', [])]": 1, "BinOp -> [('left', 'Attribute'), ('op', 'Mod'), ('right', 'Name')]": 3, "Tuple -> [('elts', ['Name', 'Name', 'Name', 'Name', 'Name']), ('ctx', 'Store')]": 10, "Call -> [('func', 'Name'), ('args', []), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 420, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Str', 'Str', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name'])]": 1, "Call -> [('func', 'Name'), ('args', ['Str', 'Subscript']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "For -> [('target', 'Tuple'), ('iter', 'Name'), ('body', ['Expr']), ('orelse', [])]": 4, "Call -> [('func', 'Name'), ('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "If -> [('test', 'Compare'), ('body', ['Pass']), ('orelse', ['Raise'])]": 2, "Dict -> [('keys', ['Str', 'Str']), ('values', ['Str', 'Name'])]": 4, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign']), ('orelse', [])]": 8, "comprehension -> [('target', 'Name'), ('iter', 'Call'), ('ifs', ['Compare'])]": 3, "BinOp -> [('left', 'Call'), ('op', 'Mod'), ('right', 'Attribute')]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign']), ('decorator_list', [])]": 1, "If -> [('test', 'Num'), ('body', ['Expr', 'Expr']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'If', 'Expr', 'Expr', 'Assign', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'Expr', 'Expr', 'TryExcept']), ('decorator_list', [])]": 1, "comprehension -> [('target', 'Tuple'), ('iter', 'Attribute'), ('ifs', ['Compare'])]": 1, "BoolOp -> [('op', 'Or'), ('values', ['Name', 'BoolOp'])]": 2, "If -> [('test', 'Compare'), ('body', ['If']), ('orelse', ['Assign'])]": 1, "BinOp -> [('left', 'Str'), ('op', 'Mod'), ('right', 'Call')]": 89, "Compare -> [('left', 'Name'), ('ops', ['NotEq']), ('comparators', ['Attribute'])]": 13, "Call -> [('func', 'Attribute'), ('args', ['Compare']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 118, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Num', 'Num', 'Str', 'Str', 'Str', 'Str', 'Str'])]": 1, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['If', 'Assign']), ('orelse', [])]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Expr', 'TryFinally']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['BoolOp', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Call -> [('func', 'Name'), ('args', ['Attribute']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 5, "keyword -> [('arg', 'str'), ('value', 'Call')]": 198, "Return -> [('value', 'ListComp')]": 16, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'If', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['TryExcept', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'If', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['For', 'For']), ('decorator_list', [])]": 2, "Print -> [('dest', 'NoneType'), ('values', []), ('nl', 'bool')]": 6, "Yield -> [('value', 'Call')]": 16, "Call -> [('func', 'Attribute'), ('args', []), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 11, "List -> [('elts', ['Attribute', 'Attribute', 'Attribute', 'Attribute']), ('ctx', 'Load')]": 4, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['FunctionDef', 'If', 'If', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign']), ('orelse', ['If'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name']), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "Print -> [('dest', 'NoneType'), ('values', ['Str', 'BinOp']), ('nl', 'bool')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Return']), ('decorator_list', ['Call'])]": 17, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Name', 'Name'])]": 4, "If -> [('test', 'Name'), ('body', ['Expr', 'For']), ('orelse', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'BoolOp'), ('body', ['Assign']), ('orelse', ['Raise'])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign']), ('orelse', ['Assign', 'If', 'If', 'Assign'])]": 1, "If -> [('test', 'BoolOp'), ('body', ['If', 'Return']), ('orelse', [])]": 1, "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'Assign', 'Assign']), ('orelse', [])]": 4, "Call -> [('func', 'Name'), ('args', ['Num']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'TryExcept', 'Return']), ('decorator_list', [])]": 1, "ExceptHandler -> [('type', 'NoneType'), ('name', 'NoneType'), ('body', ['Assign'])]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'UnaryOp'), ('body', ['Expr']), ('orelse', [])]": 38, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', [])]": 35, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign']), ('decorator_list', [])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Str', 'Str', 'Str', 'Call', 'Str', 'List', 'Str', 'Str', 'Str'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'For', 'Expr', 'Expr', 'Expr', 'If', 'For', 'Return']), ('decorator_list', ['Attribute'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assert', 'If', 'If', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "Tuple -> [('elts', ['Num', 'Num', 'Num', 'Num', 'Num', 'Name']), ('ctx', 'Load')]": 1, "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Expr', 'Expr', 'Return']), ('orelse', [])]": 2, "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['Assign'])]": 22, "Import -> [('names', ['alias', 'alias', 'alias', 'alias', 'alias', 'alias'])]": 1, "If -> [('test', 'UnaryOp'), ('body', ['Expr', 'Assign', 'If']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'If', 'If', 'Expr', 'Expr', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Expr', 'Expr']), ('orelse', [])]": 1, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['If', 'If', 'If', 'Assign', 'Assign', 'Assign', 'If']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'If', 'If', 'Delete', 'Assign', 'Assign', 'Expr', 'Assign', 'Return']), ('decorator_list', [])]": 1, "ListComp -> [('elt', 'BoolOp'), ('generators', ['comprehension'])]": 1, "For -> [('target', 'Tuple'), ('iter', 'Name'), ('body', ['Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'For', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'For', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'For']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['If', 'Expr']), ('orelse', ['If'])]": 2, "If -> [('test', 'Compare'), ('body', ['Expr', 'Expr', 'Expr']), ('orelse', ['Raise'])]": 1, "BoolOp -> [('op', 'And'), ('values', ['Attribute', 'Compare', 'Compare'])]": 1, "If -> [('test', 'BoolOp'), ('body', ['Print']), ('orelse', ['Assign'])]": 1, "For -> [('target', 'Name'), ('iter', 'Subscript'), ('body', ['Expr', 'If']), ('orelse', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 77, "Compare -> [('left', 'Attribute'), ('ops', ['Is']), ('comparators', ['Attribute'])]": 1, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['If']), ('orelse', [])]": 20, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Attribute', 'Name', 'Name', 'Attribute', 'Call', 'Attribute', 'BinOp', 'Call', 'Call', 'Attribute', 'Attribute', 'Attribute', 'Attribute'])]": 1, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'For', 'Expr']), ('orelse', [])]": 1, "Tuple -> [('elts', ['Num', 'Num']), ('ctx', 'Load')]": 270, "BinOp -> [('left', 'UnaryOp'), ('op', 'Sub'), ('right', 'Num')]": 1, "Call -> [('func', 'Name'), ('args', ['Call']), ('keywords', ['keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 6, "If -> [('test', 'Name'), ('body', ['Assign', 'For']), ('orelse', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign']), ('orelse', ['If'])]": 7, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Print']), ('decorator_list', [])]": 1, "Yield -> [('value', 'Name')]": 8, "Call -> [('func', 'Attribute'), ('args', ['Subscript', 'BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "TryExcept -> [('body', ['Expr', 'Return']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 1, "Tuple -> [('elts', ['Attribute', 'Subscript']), ('ctx', 'Load')]": 2, "Compare -> [('left', 'Name'), ('ops', ['In']), ('comparators', ['Name'])]": 34, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'AugAssign', 'Expr', 'Assign', 'If', 'AugAssign', 'Assign', 'If', 'For', 'AugAssign', 'If', 'If', 'AugAssign', 'Return']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'List'), ('body', ['Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr']), ('orelse', [])]": 1, "Compare -> [('left', 'Str'), ('ops', ['NotIn']), ('comparators', ['Name'])]": 11, "Compare -> [('left', 'Name'), ('ops', ['Lt']), ('comparators', ['Call'])]": 3, "Call -> [('func', 'Attribute'), ('args', ['BinOp', 'Subscript', 'Subscript', 'Subscript', 'Name', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Call -> [('func', 'Name'), ('args', ['List', 'Dict']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 3, "If -> [('test', 'Name'), ('body', ['Assign', 'Break']), ('orelse', [])]": 1, "TryExcept -> [('body', ['Expr', 'Assign', 'Assign', 'Assign', 'For', 'Return']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 1, "UnaryOp -> [('op', 'USub'), ('operand', 'Call')]": 5, "TryExcept -> [('body', ['Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Return']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 1, "Slice -> [('lower', 'Num'), ('upper', 'Num'), ('step', 'NoneType')]": 11, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Num', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'For', 'Assign', 'Assign', 'For', 'Assign', 'For', 'Expr']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'TryExcept']), ('orelse', [])]": 2, "Dict -> [('keys', ['Str', 'Str']), ('values', ['Attribute', 'BoolOp'])]": 1, "Call -> [('func', 'Name'), ('args', ['Name', 'Call', 'Name', 'Call', 'Name', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "Tuple -> [('elts', ['Name', 'Num']), ('ctx', 'Load')]": 19, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'If', 'If', 'Return']), ('decorator_list', [])]": 1, "Tuple -> [('elts', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('ctx', 'Store')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]": 1, "Compare -> [('left', 'Call'), ('ops', ['NotEq']), ('comparators', ['Str'])]": 2, "TryExcept -> [('body', ['Assign', 'Expr', 'Assign']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 1, "keyword -> [('arg', 'str'), ('value', 'Dict')]": 20, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['If', 'Assign', 'Expr', 'Expr', 'Expr', 'If', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr']), ('orelse', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Subscript'), ('body', ['Assign', 'Expr']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'If', 'If', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "Yield -> [('value', 'Subscript')]": 1, "AugAssign -> [('target', 'Name'), ('op', 'Div'), ('value', 'Call')]": 2, "Tuple -> [('elts', ['Name', 'Name', 'Name', 'Name', 'Name', 'Call']), ('ctx', 'Load')]": 1, "Call -> [('func', 'Attribute'), ('args', ['GeneratorExp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 9, "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('orelse', [])]": 1, "If -> [('test', 'Attribute'), ('body', ['Expr', 'Return']), ('orelse', [])]": 1, "If -> [('test', 'Name'), ('body', ['FunctionDef']), ('orelse', ['FunctionDef'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "Call -> [('func', 'Call'), ('args', []), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'Name')]": 1, "Call -> [('func', 'Attribute'), ('args', ['Tuple', 'Tuple', 'Tuple']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "Module -> [('body', ['Import', 'Print', 'Print', 'Print', 'Assign', 'Print', 'Print', 'Print'])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'If', 'Assign', 'If', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'If']), ('decorator_list', ['Name'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If']), ('decorator_list', [])]": 5, "If -> [('test', 'Compare'), ('body', ['Expr', 'Assign', 'Expr']), ('orelse', [])]": 2, "If -> [('test', 'Name'), ('body', ['Assign', 'Expr']), ('orelse', ['Return'])]": 1, "Index -> [('value', 'Subscript')]": 14, "Call -> [('func', 'Name'), ('args', ['Name', 'Attribute', 'Attribute', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Call -> [('func', 'Attribute'), ('args', ['BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 272, "Call -> [('func', 'Attribute'), ('args', ['BoolOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 16, "Call -> [('func', 'Name'), ('args', ['Subscript', 'Str', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "BoolOp -> [('op', 'Or'), ('values', ['Subscript', 'Call'])]": 1, "Import -> [('names', ['alias', 'alias', 'alias', 'alias'])]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ClassDef', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'For', 'Return']), ('decorator_list', ['Call'])]": 1, "List -> [('elts', ['ListComp']), ('ctx', 'Load')]": 2, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Attribute', 'Num', 'Name', 'Attribute', 'Num', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "While -> [('test', 'Name'), ('body', ['If', 'Assign', 'Assign', 'For', 'If', 'AugAssign']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'TryExcept', 'If', 'Assign', 'If', 'Return']), ('decorator_list', [])]": 1, "Return -> [('value', 'Call')]": 531, "Call -> [('func', 'Name'), ('args', []), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 38, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Return']), ('decorator_list', [])]": 1, "Tuple -> [('elts', ['Attribute', 'Attribute', 'Call', 'Attribute']), ('ctx', 'Load')]": 8, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Attribute', 'Name', 'Name', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Call', 'Tuple', 'Name', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "If -> [('test', 'BoolOp'), ('body', ['If']), ('orelse', ['If'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Num', 'Num', 'Num', 'Num', 'Attribute', 'BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Call -> [('func', 'Attribute'), ('args', ['Str', 'Str', 'Attribute', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "If -> [('test', 'Name'), ('body', ['Assign', 'Expr']), ('orelse', ['Expr'])]": 1, "Expr -> [('value', 'BinOp')]": 2, "BinOp -> [('left', 'Str'), ('op', 'Add'), ('right', 'Name')]": 31, "If -> [('test', 'Compare'), ('body', ['Assign', 'If', 'If', 'FunctionDef', 'Assign', 'Expr', 'Expr', 'Expr']), ('orelse', [])]": 1, "arguments -> [('args', ['Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Attribute'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'ImportFrom', 'ImportFrom', 'Expr']), ('decorator_list', [])]": 3, "List -> [('elts', ['Name', 'Name', 'Name']), ('ctx', 'Load')]": 3, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['AugAssign', 'If']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'AugAssign', 'AugAssign', 'AugAssign', 'AugAssign', 'If', 'AugAssign', 'AugAssign', 'AugAssign', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'Call'), ('body', ['For', 'Expr']), ('orelse', [])]": 1, "BinOp -> [('left', 'Str'), ('op', 'Mod'), ('right', 'BinOp')]": 2, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Name', 'Name']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Expr']), ('orelse', [])]": 1, "If -> [('test', 'UnaryOp'), ('body', ['If']), ('orelse', [])]": 4, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Tuple', 'Name', 'BinOp', 'Name', 'Name', 'Name', 'Dict']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "If -> [('test', 'Call'), ('body', ['If', 'Assign']), ('orelse', ['If'])]": 1, "Compare -> [('left', 'Call'), ('ops', ['In']), ('comparators', ['Attribute'])]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 6, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'FunctionDef', 'Assign', 'Expr', 'Assign', 'For', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'For']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'If', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'For', 'Assign', 'Assign', 'Expr', 'For', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'For']), ('decorator_list', ['Name', 'Name', 'Name'])]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'FunctionDef', 'FunctionDef', 'Assign', 'Assign', 'Assign'])]": 1, "If -> [('test', 'UnaryOp'), ('body', ['Assign']), ('orelse', [])]": 47, "While -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'If', 'Assign', 'Assign']), ('orelse', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', ['Call'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['For', 'Return']), ('decorator_list', [])]": 3, "For -> [('target', 'Name'), ('iter', 'List'), ('body', ['Expr', 'For']), ('orelse', [])]": 2, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign']), ('orelse', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Expr', 'Expr', 'Expr', 'Expr']), ('orelse', [])]": 1, "If -> [('test', 'Attribute'), ('body', ['Expr']), ('orelse', ['Expr'])]": 5, "If -> [('test', 'Name'), ('body', ['Expr']), ('orelse', ['Raise'])]": 1, "BinOp -> [('left', 'Attribute'), ('op', 'BitAnd'), ('right', 'Num')]": 1, "Call -> [('func', 'Attribute'), ('args', ['Str', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 89, "If -> [('test', 'Call'), ('body', ['Assign', 'Assign']), ('orelse', ['If'])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', [])]": 1, "Print -> [('dest', 'NoneType'), ('values', ['Name', 'Str', 'BinOp']), ('nl', 'bool')]": 1, "List -> [('elts', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Num', 'Name', 'Name']), ('ctx', 'Load')]": 1, "TryExcept -> [('body', ['If', 'Assign', 'Assign', 'Expr', 'Assign', 'If', 'Expr']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Return']), ('decorator_list', ['Name'])]": 1, "If -> [('test', 'Compare'), ('body', ['FunctionDef']), ('orelse', ['FunctionDef'])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Num', 'Num', 'Num'])]": 1, "List -> [('elts', ['Call', 'Name', 'Name', 'Name', 'Name']), ('ctx', 'Load')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'If', 'Expr', 'Print', 'Assign', 'Assign', 'For']), ('decorator_list', [])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Str', 'Str'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'TryExcept', 'If', 'If', 'Return']), ('decorator_list', [])]": 1, "Call -> [('func', 'Name'), ('args', []), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "While -> [('test', 'Compare'), ('body', ['Assign']), ('orelse', [])]": 2, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Print', 'Return']), ('orelse', ['Return'])]": 1, "ExtSlice -> [('dims', ['Index', 'Slice'])]": 9, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Expr', 'For', 'Print', 'Assign', 'Expr', 'Print', 'If', 'Expr', 'Pass']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'List'), ('body', ['Assign', 'For', 'Assign', 'For']), ('orelse', [])]": 1, "If -> [('test', 'Name'), ('body', ['Assign']), ('orelse', ['Continue'])]": 2, "List -> [('elts', ['Num', 'Num', 'Call']), ('ctx', 'Load')]": 1, "BoolOp -> [('op', 'Or'), ('values', ['Name', 'Name'])]": 8, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'If', 'If', 'Assign', 'Expr', 'If', 'If']), ('orelse', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'Assign']), ('orelse', ['Assign', 'Assign', 'Assign'])]": 1, "Tuple -> [('elts', ['Attribute', 'Name', 'Name']), ('ctx', 'Load')]": 2, "BinOp -> [('left', 'Num'), ('op', 'Mult'), ('right', 'Attribute')]": 20, "Call -> [('func', 'Attribute'), ('args', []), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 5, "Call -> [('func', 'Attribute'), ('args', ['Dict', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "If -> [('test', 'BoolOp'), ('body', ['Assign']), ('orelse', ['Assign'])]": 7, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'FunctionDef', 'For', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'If', 'Expr', 'For', 'Assign', 'If']), ('decorator_list', [])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Num', 'Num', 'Name', 'Num'])]": 1, "BinOp -> [('left', 'Num'), ('op', 'Mult'), ('right', 'UnaryOp')]": 2, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'FunctionDef']), ('decorator_list', ['Call'])]": 1, "Call -> [('func', 'Name'), ('args', ['Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 5, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 58, "If -> [('test', 'Compare'), ('body', ['Raise']), ('orelse', [])]": 43, "If -> [('test', 'Name'), ('body', ['Raise']), ('orelse', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'If', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'If', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'If', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'If', 'Expr', 'Expr', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'If']), ('decorator_list', [])]": 1, "BinOp -> [('left', 'BinOp'), ('op', 'Div'), ('right', 'BinOp')]": 9, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'If', 'If', 'Assign', 'Assign', 'If', 'Assign', 'If', 'Return']), ('decorator_list', [])]": 2, "BoolOp -> [('op', 'And'), ('values', ['Call', 'Call', 'Compare'])]": 1, "Compare -> [('left', 'Name'), ('ops', ['IsNot']), ('comparators', ['Name'])]": 72, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Assign', 'Assign', 'Assign', 'FunctionDef']), ('decorator_list', [])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', [])]": 1, "BinOp -> [('left', 'Num'), ('op', 'Mult'), ('right', 'Num')]": 20, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Expr']), ('orelse', ['If'])]": 1, "Compare -> [('left', 'Attribute'), ('ops', ['NotEq']), ('comparators', ['Str'])]": 4, "Compare -> [('left', 'Str'), ('ops', ['In']), ('comparators', ['Attribute'])]": 23, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'If', 'Assign', 'For', 'For', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'TryExcept']), ('orelse', ['Assign', 'Assign', 'Expr', 'Expr'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name']), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 3, "Tuple -> [('elts', ['Subscript', 'Num']), ('ctx', 'Load')]": 1, "Call -> [('func', 'Name'), ('args', ['Name', 'Call', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If']), ('decorator_list', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name']), ('keywords', ['keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 19, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]": 3, "If -> [('test', 'Call'), ('body', ['Raise']), ('orelse', [])]": 5, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'If', 'Assign', 'For', 'Assign', 'Assign', 'Assign', 'Assign', 'TryFinally', 'For']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'Assign', 'For', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'ImportFrom', 'If', 'Expr', 'TryFinally']), ('decorator_list', [])]": 1, "BinOp -> [('left', 'Call'), ('op', 'Div'), ('right', 'Name')]": 5, "BoolOp -> [('op', 'And'), ('values', ['Attribute', 'Attribute', 'Attribute'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'If', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "TryExcept -> [('body', ['Expr', 'Assign', 'Return']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 1, "BinOp -> [('left', 'BinOp'), ('op', 'Mult'), ('right', 'BinOp')]": 21, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'Expr']), ('orelse', [])]": 5, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Str', 'Str', 'BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['TryExcept']), ('orelse', [])]": 8, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assert', 'Assign', 'If']), ('decorator_list', [])]": 4, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Num'])]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['TryExcept', 'If', 'Expr']), ('orelse', [])]": 1, "Compare -> [('left', 'Name'), ('ops', ['NotEq']), ('comparators', ['Call'])]": 3, "Call -> [('func', 'Attribute'), ('args', ['Subscript', 'Attribute']), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 5, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['For', 'Raise']), ('decorator_list', [])]": 1, "Attribute -> [('value', 'Attribute'), ('attr', 'str'), ('ctx', 'Load')]": 2237, "For -> [('target', 'Name'), ('iter', 'Tuple'), ('body', ['Expr', 'Expr']), ('orelse', [])]": 1, "If -> [('test', 'Name'), ('body', ['Expr', 'AugAssign']), ('orelse', ['Expr', 'AugAssign'])]": 1, "If -> [('test', 'BoolOp'), ('body', ['If', 'Expr']), ('orelse', [])]": 1, "Tuple -> [('elts', ['Name', 'Name']), ('ctx', 'Load')]": 222, "BoolOp -> [('op', 'And'), ('values', ['UnaryOp', 'Compare'])]": 9, "Subscript -> [('value', 'Name'), ('slice', 'Index'), ('ctx', 'Load')]": 871, "BinOp -> [('left', 'List'), ('op', 'Add'), ('right', 'ListComp')]": 3, "BinOp -> [('left', 'Num'), ('op', 'Mult'), ('right', 'Name')]": 22, "If -> [('test', 'Compare'), ('body', ['If', 'Return']), ('orelse', [])]": 3, "If -> [('test', 'Name'), ('body', ['If', 'Expr']), ('orelse', [])]": 3, "comprehension -> [('target', 'Tuple'), ('iter', 'Call'), ('ifs', ['UnaryOp'])]": 1, "Print -> [('dest', 'NoneType'), ('values', ['BinOp']), ('nl', 'bool')]": 18, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Return']), ('decorator_list', [])]": 16, "Tuple -> [('elts', ['Name', 'Name', 'Num']), ('ctx', 'Load')]": 1, "Call -> [('func', 'Attribute'), ('args', ['Str', 'Num', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "If -> [('test', 'Num'), ('body', ['Expr']), ('orelse', [])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Num', 'Num', 'Num', 'Name', 'Name', 'Name', 'List', 'Num', 'Name', 'Name'])]": 1, "Call -> [('func', 'Name'), ('args', ['Name', 'Num']), ('keywords', ['keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "Call -> [('func', 'Name'), ('args', ['BinOp', 'BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Compare -> [('left', 'Name'), ('ops', ['GtE']), ('comparators', ['Subscript'])]": 2, "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['Assign', 'Assign', 'Expr'])]": 1, "ExceptHandler -> [('type', 'Tuple'), ('name', 'NoneType'), ('body', ['Assign', 'Assign', 'If'])]": 1, "BinOp -> [('left', 'BinOp'), ('op', 'Div'), ('right', 'Num')]": 17, "ClassDef -> [('name', 'str'), ('bases', ['Attribute', 'Attribute', 'Name']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Call', 'Subscript']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 4, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'For', 'For', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]": 1, "Assign -> [('targets', ['Attribute']), ('value', 'List')]": 55, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Return']), ('decorator_list', [])]": 4, "arguments -> [('args', ['Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'str'), ('defaults', [])]": 25, "For -> [('target', 'Tuple'), ('iter', 'Name'), ('body', ['Print', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('orelse', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign']), ('orelse', ['Assign', 'Expr', 'Expr'])]": 1, "Tuple -> [('elts', ['Name', 'Name', 'Num', 'Num']), ('ctx', 'Load')]": 2, "If -> [('test', 'UnaryOp'), ('body', ['Expr', 'Expr']), ('orelse', [])]": 2, "ListComp -> [('elt', 'Tuple'), ('generators', ['comprehension'])]": 31, "Import -> [('names', ['alias'])]": 399, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign']), ('orelse', ['If'])]": 40, "If -> [('test', 'Name'), ('body', ['Assign', 'Expr']), ('orelse', [])]": 3, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'TryExcept', 'ClassDef', 'FunctionDef'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'TryExcept', 'Assign', 'If', 'If', 'Return']), ('decorator_list', [])]": 1, "BinOp -> [('left', 'BinOp'), ('op', 'Mult'), ('right', 'Attribute')]": 7, "Call -> [('func', 'Attribute'), ('args', ['Subscript', 'Subscript', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 5, "comprehension -> [('target', 'Name'), ('iter', 'Call'), ('ifs', [])]": 46, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Attribute', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 10, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['TryExcept', 'Assign', 'If', 'If', 'TryExcept', 'If', 'If', 'If']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign']), ('orelse', ['Assign', 'Assign', 'Assign', 'For'])]": 1, "Assign -> [('targets', ['Subscript']), ('value', 'Name')]": 118, "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef'])]": 1, "Call -> [('func', 'Name'), ('args', ['Name', 'Str', 'BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Assign', 'ClassDef', 'FunctionDef']), ('decorator_list', [])]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Expr', 'Assign', 'ClassDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef'])]": 1, "If -> [('test', 'Name'), ('body', ['Assign', 'Assign', 'If', 'If']), ('orelse', [])]": 1, "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'If', 'ClassDef'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Str', 'Name']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "Compare -> [('left', 'Call'), ('ops', ['Eq']), ('comparators', ['BinOp'])]": 4, "Compare -> [('left', 'Call'), ('ops', ['GtE']), ('comparators', ['Name'])]": 1, "arguments -> [('args', []), ('vararg', 'str'), ('kwarg', 'str'), ('defaults', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'If', 'For', 'Return']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Num', 'BinOp', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['Str', 'Num', 'Str'])]": 1, "If -> [('test', 'Attribute'), ('body', ['Assign', 'Assign', 'If']), ('orelse', [])]": 1, "arguments -> [('args', ['Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Attribute', 'Name'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'If', 'Assign', 'For', 'Assign', 'If', 'ImportFrom', 'Assign', 'Assign', 'If', 'If', 'If', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'Num'), ('body', ['Assign', 'Expr', 'Expr', 'Expr']), ('orelse', ['Assign', 'Expr'])]": 1, "Call -> [('func', 'Name'), ('args', ['Name', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 35, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Return']), ('decorator_list', [])]": 1, "BinOp -> [('left', 'Call'), ('op', 'Mod'), ('right', 'Name')]": 8, "Call -> [('func', 'Name'), ('args', ['BoolOp']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "Lambda -> [('args', 'arguments'), ('body', 'Str')]": 1, "If -> [('test', 'Compare'), ('body', ['FunctionDef', 'Assign', 'Assign', 'Assign', 'While']), ('orelse', ['If'])]": 1, "Assign -> [('targets', ['Tuple']), ('value', 'Call')]": 168, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Attribute', 'Subscript', 'Name', 'Call', 'Name', 'Call'])]": 1, "If -> [('test', 'Call'), ('body', ['Assign', 'Break']), ('orelse', [])]": 1, "Assert -> [('test', 'Compare'), ('msg', 'BinOp')]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'Expr']), ('orelse', [])]": 3, "arguments -> [('args', ['Tuple', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', [])]": 3, "ExceptHandler -> [('type', 'NoneType'), ('name', 'NoneType'), ('body', ['Print'])]": 1, "Compare -> [('left', 'Attribute'), ('ops', ['Eq']), ('comparators', ['Num'])]": 10, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Name', 'Num', 'Num', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['For', 'For']), ('orelse', [])]": 2, "Slice -> [('lower', 'Call'), ('upper', 'NoneType'), ('step', 'NoneType')]": 6, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'If', 'If', 'If', 'If', 'If']), ('decorator_list', [])]": 1, "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'Assign', 'Assign', 'Return']), ('orelse', ['TryExcept', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr'])]": 1, "List -> [('elts', ['Call', 'Call', 'Call', 'Call', 'Call']), ('ctx', 'Load')]": 1, "Call -> [('func', 'Name'), ('args', ['Name']), ('keywords', ['keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 5, "BinOp -> [('left', 'Name'), ('op', 'BitOr'), ('right', 'Call')]": 1, "Call -> [('func', 'Attribute'), ('args', ['Subscript', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 13, "Compare -> [('left', 'BinOp'), ('ops', ['Lt']), ('comparators', ['BinOp'])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str']), ('values', ['Attribute', 'Name', 'Name', 'Name'])]": 1, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'Expr', 'Expr', 'Expr']), ('orelse', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'Name')]": 2, "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['Expr']), ('orelse', [])]": 7, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Tuple', 'Num', 'Tuple', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'If', 'If', 'Assign']), ('decorator_list', [])]": 1, "BoolOp -> [('op', 'Or'), ('values', ['Call', 'List'])]": 6, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Num', 'Num', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 6, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name']), ('keywords', []), ('starargs', 'Name'), ('kwargs', 'Name')]": 2, "If -> [('test', 'BoolOp'), ('body', ['Raise']), ('orelse', ['Return'])]": 1, "If -> [('test', 'BoolOp'), ('body', ['If', 'Assign', 'TryExcept']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'Name'), ('body', ['Return']), ('orelse', ['If', 'Assign', 'Return'])]": 1, "TryExcept -> [('body', ['ImportFrom', 'Expr', 'ImportFrom']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Name']), ('keywords', ['keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "BoolOp -> [('op', 'And'), ('values', ['Name', 'List'])]": 1, "Call -> [('func', 'Name'), ('args', ['Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'Name')]": 3, "Tuple -> [('elts', ['Attribute', 'Str']), ('ctx', 'Load')]": 2, "Call -> [('func', 'Attribute'), ('args', []), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 106, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Subscript']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 5, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Import', 'Assign', 'Assign', 'Assign', 'AugAssign', 'AugAssign', 'Return']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Subscript'), ('body', ['Expr', 'Expr', 'Expr']), ('orelse', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assert', 'For']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 2, "BinOp -> [('left', 'Attribute'), ('op', 'Add'), ('right', 'Call')]": 2, "If -> [('test', 'Compare'), ('body', ['Assign', 'While', 'If']), ('orelse', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Subscript', 'Name', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'TryExcept', 'Assign', 'Assign', 'For', 'Return']), ('decorator_list', [])]": 2, "Assign -> [('targets', ['Name']), ('value', 'BoolOp')]": 43, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Print', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'For', 'Print', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'For', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Assign', 'For', 'Expr', 'Expr', 'Expr', 'Print', 'Expr', 'Expr', 'Return', 'Expr', 'Assign', 'Assign', 'Print', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'AugAssign', 'Assign', 'Print', 'Print', 'FunctionDef', 'Assign', 'Print', 'FunctionDef', 'Print', 'For', 'Expr', 'Assign', 'Assign', 'Print', 'Assign', 'For', 'Expr', 'Print', 'Assign', 'Assign', 'For', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Expr', 'Expr', 'Expr', 'Return', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Expr', 'Expr', 'Print', 'If', 'Return', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Print', 'Assign', 'Assign', 'Assign', 'Assign', 'Print', 'FunctionDef', 'Assign', 'Assign', 'Expr', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'Print', 'Assign', 'Return', 'Expr', 'Assign', 'Print', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'AugAssign', 'AugAssign', 'Print', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Str', 'Str', 'Str', 'Str', 'Call', 'Call', 'Str', 'Call', 'Call'])]": 1, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Assign']), ('orelse', [])]": 7, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'TryExcept']), ('decorator_list', [])]": 8, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign']), ('decorator_list', [])]": 5, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'For', 'FunctionDef', 'Assign', 'For', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign']), ('orelse', [])]": 4, "Call -> [('func', 'Name'), ('args', ['Str', 'Str', 'Str', 'Str', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 6, "If -> [('test', 'Attribute'), ('body', ['If', 'If', 'If', 'Assign', 'Assign', 'Assign', 'If']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'TryExcept']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'If']), ('decorator_list', [])]": 2, "Compare -> [('left', 'Attribute'), ('ops', ['Lt']), ('comparators', ['Attribute'])]": 1, "Compare -> [('left', 'BinOp'), ('ops', ['Eq']), ('comparators', ['Num'])]": 2, "Call -> [('func', 'Attribute'), ('args', ['BinOp', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 10, "If -> [('test', 'Name'), ('body', ['Assign', 'Expr']), ('orelse', ['Assign', 'Expr', 'Expr', 'Expr'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 99, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'If', 'Assign']), ('decorator_list', ['Name', 'Attribute'])]": 1, "BoolOp -> [('op', 'And'), ('values', ['UnaryOp', 'Call'])]": 7, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Num', 'Name'])]": 1, "Compare -> [('left', 'Attribute'), ('ops', ['Lt']), ('comparators', ['Tuple'])]": 1, "Call -> [('func', 'Name'), ('args', ['Lambda', 'Name', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "List -> [('elts', ['Dict', 'Dict']), ('ctx', 'Load')]": 6, "Compare -> [('left', 'Name'), ('ops', ['Gt']), ('comparators', ['Call'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'ClassDef', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Str'])]": 1, "If -> [('test', 'Call'), ('body', ['Assign', 'Assign', 'Assign']), ('orelse', ['Continue'])]": 1, "BinOp -> [('left', 'Attribute'), ('op', 'Div'), ('right', 'Attribute')]": 3, "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['If', 'If', 'If', 'If', 'TryExcept']), ('orelse', [])]": 1, "If -> [('test', 'Compare'), ('body', ['AugAssign']), ('orelse', [])]": 5, "While -> [('test', 'Name'), ('body', ['Assign', 'Assign', 'Assign', 'Print', 'If', 'If', 'If', 'Expr']), ('orelse', [])]": 1, "AugAssign -> [('target', 'Name'), ('op', 'Add'), ('value', 'Call')]": 21, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'For', 'For', 'For', 'If', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "keyword -> [('arg', 'str'), ('value', 'Name')]": 1025, "BoolOp -> [('op', 'And'), ('values', ['Call', 'UnaryOp'])]": 7, "List -> [('elts', ['Str', 'Str', 'Str', 'Str', 'Str']), ('ctx', 'Load')]": 9, "Slice -> [('lower', 'NoneType'), ('upper', 'NoneType'), ('step', 'NoneType')]": 122, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Assign']), ('decorator_list', [])]": 1, "ExceptHandler -> [('type', 'Attribute'), ('name', 'NoneType'), ('body', ['Raise'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'Return']), ('decorator_list', [])]": 3, "Compare -> [('left', 'Name'), ('ops', ['NotEq']), ('comparators', ['Num'])]": 5, "List -> [('elts', ['Str', 'Str', 'Str', 'Attribute', 'Attribute']), ('ctx', 'Load')]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'TryExcept']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 20, "comprehension -> [('target', 'Tuple'), ('iter', 'Call'), ('ifs', ['BoolOp'])]": 4, "TryExcept -> [('body', ['Assign', 'Return']), ('handlers', ['ExceptHandler', 'ExceptHandler']), ('orelse', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Call', 'Lambda']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assert', 'If', 'TryExcept', 'If', 'Assign', 'Expr', 'Return']), ('decorator_list', ['Name'])]": 1, "List -> [('elts', ['Num', 'Num', 'Num', 'Name', 'Name']), ('ctx', 'Load')]": 2, "If -> [('test', 'Call'), ('body', ['Assign', 'If', 'Expr', 'Return']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 1, "BinOp -> [('left', 'Num'), ('op', 'Sub'), ('right', 'BinOp')]": 1, "If -> [('test', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Return']), ('orelse', ['Expr'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Assign', 'Assign', 'For']), ('decorator_list', [])]": 2, "Call -> [('func', 'Name'), ('args', ['Attribute', 'Call', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Call -> [('func', 'Attribute'), ('args', ['Call', 'Name', 'Name', 'Name', 'Name', 'Tuple', 'Tuple']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign']), ('orelse', ['Assign'])]": 6, "Slice -> [('lower', 'Num'), ('upper', 'NoneType'), ('step', 'NoneType')]": 40, "If -> [('test', 'Name'), ('body', ['Expr', 'Expr', 'Expr', 'If']), ('orelse', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign']), ('orelse', ['Assign', 'Assign', 'Expr'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'For']), ('decorator_list', ['Name'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Print', 'Return']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Tuple'), ('body', ['For']), ('orelse', [])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Attribute']), ('values', ['Name', 'Call', 'Call', 'Name', 'BoolOp', 'Name', 'Attribute', 'Name', 'Name', 'Attribute'])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Expr']), ('orelse', ['If'])]": 1, "If -> [('test', 'BoolOp'), ('body', ['Assign', 'If']), ('orelse', [])]": 1, "BinOp -> [('left', 'Name'), ('op', 'Add'), ('right', 'Num')]": 85, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Tuple', 'Call', 'Call', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 3, "With -> [('context_expr', 'Call'), ('optional_vars', 'Name'), ('body', ['For'])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Num', 'Num', 'Str', 'Str', 'Str'])]": 1, "Call -> [('func', 'Name'), ('args', ['Subscript', 'Str', 'Lambda']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "BoolOp -> [('op', 'Or'), ('values', ['Name', 'Dict'])]": 10, "If -> [('test', 'Call'), ('body', ['Assign', 'If']), ('orelse', ['Raise'])]": 1, "Compare -> [('left', 'Attribute'), ('ops', ['Eq']), ('comparators', ['Attribute'])]": 14, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "ImportFrom -> [('module', 'str'), ('names', ['alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias']), ('level', 'int')]": 1, "Call -> [('func', 'Name'), ('args', ['Tuple', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Tuple -> [('elts', ['Str', 'List']), ('ctx', 'Load')]": 1, "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'Expr', 'Expr', 'Expr', 'FunctionDef', 'ClassDef', 'FunctionDef', 'FunctionDef'])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Num', 'Num', 'Num', 'Subscript', 'Subscript', 'Call', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Name', 'Str', 'Name', 'BinOp', 'Name', 'Num'])]": 1, "If -> [('test', 'Attribute'), ('body', ['Expr', 'Expr']), ('orelse', [])]": 1, "Tuple -> [('elts', ['Str', 'Str', 'Str']), ('ctx', 'Load')]": 14, "Call -> [('func', 'Name'), ('args', []), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 5, "arguments -> [('args', ['Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name'])]": 70, "Compare -> [('left', 'Name'), ('ops', ['Eq']), ('comparators', ['BinOp'])]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'If', 'Return']), ('decorator_list', [])]": 1, "TryFinally -> [('body', ['If', 'Assign', 'Assign', 'If', 'Expr', 'Return']), ('finalbody', ['Expr'])]": 1, "Call -> [('func', 'Attribute'), ('args', []), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1945, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['If', 'If', 'Expr']), ('orelse', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Name']), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Subscript', 'BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['If', 'For']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'BinOp', 'BinOp', 'Num', 'Name', 'Name', 'Attribute', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'If']), ('decorator_list', ['Name', 'Name'])]": 1, "Compare -> [('left', 'Subscript'), ('ops', ['In']), ('comparators', ['Name'])]": 2, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]": 3, "Global -> [('names', ['str'])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Str'])]": 3, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'TryExcept', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]": 1, "Assign -> [('targets', ['Attribute']), ('value', 'Attribute')]": 83, "TryFinally -> [('body', ['Assign', 'For']), ('finalbody', ['Expr', 'Expr'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'Return']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Str', 'Name', 'Name', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str']), ('values', ['Str', 'Str', 'Name', 'Attribute'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'If', 'For', 'For', 'For', 'If', 'If', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'If', 'Assign', 'Assign']), ('orelse', ['Assign', 'Assign'])]": 1, "Tuple -> [('elts', ['Call', 'List']), ('ctx', 'Load')]": 1, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'While', 'Assign']), ('orelse', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name']), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "Tuple -> [('elts', ['Attribute', 'BinOp']), ('ctx', 'Load')]": 4, "For -> [('target', 'Tuple'), ('iter', 'Name'), ('body', ['If']), ('orelse', [])]": 2, "ExceptHandler -> [('type', 'NoneType'), ('name', 'NoneType'), ('body', ['Return'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 2, "BinOp -> [('left', 'Num'), ('op', 'LShift'), ('right', 'Num')]": 11, "If -> [('test', 'Attribute'), ('body', ['Assign', 'If']), ('orelse', [])]": 3, "Assert -> [('test', 'Num'), ('msg', 'BinOp')]": 1, "Module -> [('body', ['Expr', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ClassDef'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'If', 'If', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "Tuple -> [('elts', ['Attribute', 'Attribute', 'Name']), ('ctx', 'Load')]": 1, "List -> [('elts', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('ctx', 'Store')]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['For']), ('orelse', [])]": 20, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'If', 'If', 'For', 'If', 'For', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'If', 'If', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['If', 'If']), ('orelse', [])]": 5, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'While', 'Expr']), ('decorator_list', [])]": 1, "List -> [('elts', ['BinOp']), ('ctx', 'Load')]": 5, "ClassDef -> [('name', 'str'), ('bases', ['Name', 'Name', 'Name']), ('body', ['Expr', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]": 1, "Tuple -> [('elts', ['Name', 'Name', 'Name']), ('ctx', 'Store')]": 32, "TryExcept -> [('body', ['Assign']), ('handlers', ['ExceptHandler']), ('orelse', ['Assign', 'Assign', 'If', 'If', 'Expr'])]": 1, "BinOp -> [('left', 'List'), ('op', 'Add'), ('right', 'Subscript')]": 1, "BoolOp -> [('op', 'And'), ('values', ['Compare', 'Compare', 'Compare'])]": 1, "For -> [('target', 'Name'), ('iter', 'List'), ('body', ['For', 'Expr']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'If', 'Return']), ('decorator_list', [])]": 4, "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'Expr', 'Expr', 'Expr']), ('orelse', [])]": 1, "BinOp -> [('left', 'Subscript'), ('op', 'Mult'), ('right', 'Call')]": 4, "BinOp -> [('left', 'Call'), ('op', 'BitOr'), ('right', 'Call')]": 7, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'TryFinally']), ('decorator_list', ['Name'])]": 1, "TryExcept -> [('body', ['If', 'Return']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 1, "BoolOp -> [('op', 'And'), ('values', ['Attribute', 'Compare'])]": 3, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['FunctionDef', 'ClassDef', 'ClassDef']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['If']), ('orelse', ['If'])]": 9, "Compare -> [('left', 'Subscript'), ('ops', ['NotIn']), ('comparators', ['Attribute'])]": 1, "Module -> [('body', ['Import', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]": 1, "BinOp -> [('left', 'Num'), ('op', 'Div'), ('right', 'Num')]": 1, "ExceptHandler -> [('type', 'Attribute'), ('name', 'NoneType'), ('body', ['Assign'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'For', 'Return']), ('decorator_list', [])]": 1, "ListComp -> [('elt', 'Subscript'), ('generators', ['comprehension'])]": 10, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr']), ('decorator_list', ['Attribute'])]": 4, "List -> [('elts', ['Str', 'Str', 'Str', 'Name']), ('ctx', 'Load')]": 1, "ListComp -> [('elt', 'Tuple'), ('generators', ['comprehension', 'comprehension'])]": 1, "Tuple -> [('elts', ['Str', 'Str', 'Num']), ('ctx', 'Load')]": 1, "If -> [('test', 'Call'), ('body', ['Assign', 'AugAssign']), ('orelse', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'If']), ('orelse', ['If'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Expr', 'If', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 5, "For -> [('target', 'Name'), ('iter', 'BinOp'), ('body', ['Assign', 'For', 'Assign', 'Print']), ('orelse', [])]": 1, "Slice -> [('lower', 'Num'), ('upper', 'BinOp'), ('step', 'NoneType')]": 4, "Tuple -> [('elts', ['Name', 'Attribute', 'Attribute', 'Name', 'Name']), ('ctx', 'Load')]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name']), ('keywords', ['keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 4, "If -> [('test', 'Compare'), ('body', ['If', 'Return']), ('orelse', ['If', 'Return'])]": 1, "If -> [('test', 'Call'), ('body', ['Print']), ('orelse', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Expr', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['ImportFrom', 'Assign']), ('orelse', [])]": 2, "Tuple -> [('elts', ['Call', 'Subscript']), ('ctx', 'Load')]": 1, "arguments -> [('args', ['Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'str'), ('defaults', ['Attribute'])]": 1, "Dict -> [('keys', ['Str', 'Str']), ('values', ['Num', 'Num'])]": 12, "Delete -> [('targets', ['Name'])]": 6, "IfExp -> [('test', 'Compare'), ('body', 'BinOp'), ('orelse', 'Name')]": 1, "BoolOp -> [('op', 'Or'), ('values', ['Attribute', 'Tuple'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'Assign']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'For']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'If', 'If', 'Assign', 'For', 'AugAssign', 'Return']), ('decorator_list', [])]": 1, "AugAssign -> [('target', 'Attribute'), ('op', 'Add'), ('value', 'Str')]": 1, "Call -> [('func', 'Attribute'), ('args', ['Call', 'Name', 'List', 'Num', 'Num', 'Tuple', 'Tuple']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'Assign', 'Expr']), ('orelse', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign']), ('orelse', ['If', 'Assign'])]": 1, "BoolOp -> [('op', 'Or'), ('values', ['Compare', 'Compare', 'Compare', 'Compare'])]": 1, "Print -> [('dest', 'NoneType'), ('values', ['Compare']), ('nl', 'bool')]": 3, "If -> [('test', 'Compare'), ('body', ['Expr', 'Assign', 'Return']), ('orelse', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 4, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'If', 'Assign', 'Assign', 'If']), ('decorator_list', [])]": 1, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'Return']), ('decorator_list', ['Attribute'])]": 1, "AugAssign -> [('target', 'Name'), ('op', 'Sub'), ('value', 'Num')]": 6, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'FunctionDef', 'Assign', 'If', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', ['Name', 'Name'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'For', 'Expr', 'Assign', 'Assign', 'Assign', 'For', 'Expr', 'Expr', 'Expr', 'For']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'If', 'If', 'Return']), ('decorator_list', [])]": 1, "Raise -> [('type', 'Name'), ('inst', 'BinOp'), ('tback', 'NoneType')]": 5, "Compare -> [('left', 'Subscript'), ('ops', ['In']), ('comparators', ['Str'])]": 2, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'If']), ('orelse', ['Assign', 'TryExcept'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Str', 'Name', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "BoolOp -> [('op', 'Or'), ('values', ['BoolOp', 'Attribute'])]": 1, "If -> [('test', 'Compare'), ('body', ['Print', 'Expr', 'Expr']), ('orelse', [])]": 1, "Print -> [('dest', 'NoneType'), ('values', ['Name', 'Name', 'Name', 'Name']), ('nl', 'bool')]": 1, "Call -> [('func', 'Attribute'), ('args', ['Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'Attribute')]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 4, "ExceptHandler -> [('type', 'NoneType'), ('name', 'NoneType'), ('body', ['Expr', 'Expr'])]": 2, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'FunctionDef', 'Assign']), ('decorator_list', [])]": 1, "Tuple -> [('elts', ['Str', 'Str', 'Str', 'Name']), ('ctx', 'Load')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'Assign', 'For', 'Assign', 'For']), ('decorator_list', [])]": 1, "TryExcept -> [('body', ['Assign', 'Assign', 'If', 'Return']), ('handlers', ['ExceptHandler', 'ExceptHandler', 'ExceptHandler']), ('orelse', [])]": 1, "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign']), ('orelse', ['Assign'])]": 1, "Tuple -> [('elts', ['Tuple']), ('ctx', 'Load')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Assign', 'If', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "BinOp -> [('left', 'Call'), ('op', 'Add'), ('right', 'List')]": 5, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'Return']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', ['Name'])]": 1, "If -> [('test', 'Call'), ('body', ['If', 'Assign']), ('orelse', [])]": 2, "Call -> [('func', 'Attribute'), ('args', []), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'Call')]": 2, "Compare -> [('left', 'Name'), ('ops', ['LtE']), ('comparators', ['Subscript'])]": 2, "If -> [('test', 'Compare'), ('body', ['For']), ('orelse', ['Assign'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Str', 'Str', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Num', 'Num', 'Num', 'Num', 'Num', 'Num'])]": 1, "arguments -> [('args', []), ('vararg', 'str'), ('kwarg', 'NoneType'), ('defaults', [])]": 13, "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign', 'Assign']), ('orelse', ['If'])]": 1, "Attribute -> [('value', 'Attribute'), ('attr', 'str'), ('ctx', 'Store')]": 44, "ExceptHandler -> [('type', 'Name'), ('name', 'Name'), ('body', ['Print', 'Assign', 'Continue'])]": 2, "ExtSlice -> [('dims', ['Slice', 'Index'])]": 67, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'If', 'Assign', 'Assign']), ('decorator_list', [])]": 1, "If -> [('test', 'Name'), ('body', ['Assign', 'Expr', 'Expr']), ('orelse', ['Expr'])]": 1, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Expr', 'TryExcept']), ('orelse', [])]": 1, "BinOp -> [('left', 'UnaryOp'), ('op', 'Add'), ('right', 'Num')]": 1, "If -> [('test', 'Name'), ('body', ['Assert', 'Assert', 'Assert']), ('orelse', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Name', 'Name', 'Str']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 3, "ExceptHandler -> [('type', 'Tuple'), ('name', 'NoneType'), ('body', ['Assign'])]": 5, "arguments -> [('args', ['Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Str'])]": 8, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 7, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'If', 'Assign', 'Expr']), ('orelse', [])]": 1, "Return -> [('value', 'Str')]": 58, "Compare -> [('left', 'Call'), ('ops', ['In']), ('comparators', ['Tuple'])]": 10, "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'Import', 'Import', 'Import', 'Import', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]": 1, "Tuple -> [('elts', ['Tuple', 'Tuple', 'Name']), ('ctx', 'Store')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'AugAssign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "BoolOp -> [('op', 'Or'), ('values', ['Compare', 'Call'])]": 1, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['For']), ('orelse', [])]": 25, "Compare -> [('left', 'Call'), ('ops', ['Eq']), ('comparators', ['Call'])]": 12, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign']), ('orelse', [])]": 10, "Slice -> [('lower', 'Attribute'), ('upper', 'NoneType'), ('step', 'NoneType')]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute'])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['FunctionDef', 'FunctionDef']), ('decorator_list', ['Call'])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Num', 'Num', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 5, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', ['Name'])]": 1, "Call -> [('func', 'Name'), ('args', ['Str', 'Str', 'Str', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 6, "BoolOp -> [('op', 'Or'), ('values', ['UnaryOp', 'Call'])]": 2, "If -> [('test', 'Name'), ('body', ['Assign', 'Return']), ('orelse', ['Raise'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assert', 'Assert', 'Expr']), ('decorator_list', [])]": 1, "TryExcept -> [('body', ['If']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 7, "If -> [('test', 'Call'), ('body', ['Expr', 'AugAssign']), ('orelse', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Subscript', 'Subscript']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 6, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', ['Attribute'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Name']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "List -> [('elts', ['Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num']), ('ctx', 'Load')]": 2, "Assign -> [('targets', ['Attribute']), ('value', 'Lambda')]": 2, "Tuple -> [('elts', ['Name']), ('ctx', 'Store')]": 13, "List -> [('elts', ['Name', 'Num', 'Num']), ('ctx', 'Load')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Print']), ('decorator_list', [])]": 2, "BinOp -> [('left', 'Name'), ('op', 'Sub'), ('right', 'BinOp')]": 13, "For -> [('target', 'Name'), ('iter', 'Tuple'), ('body', ['Expr', 'Expr', 'Expr']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Expr', 'Assign', 'Expr', 'Return']), ('decorator_list', [])]": 1, "List -> [('elts', ['Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple']), ('ctx', 'Load')]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'TryExcept', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'For']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Expr', 'Expr', 'If']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'TryExcept', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 1, "keyword -> [('arg', 'str'), ('value', 'List')]": 81, "arguments -> [('args', ['Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'str'), ('defaults', ['Name'])]": 11, "TryExcept -> [('body', ['TryExcept']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'For', 'Assign', 'For', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'For', 'Expr']), ('decorator_list', [])]": 1, "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Print', 'Assign', 'Assign']), ('decorator_list', ['Name', 'Attribute'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'If', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'For', 'For']), ('orelse', [])]": 1, "If -> [('test', 'Compare'), ('body', ['AugAssign', 'Continue']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Expr', 'Expr', 'Expr', 'Return']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Name', 'Num', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "List -> [('elts', ['List']), ('ctx', 'Load')]": 10, "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'Assign']), ('orelse', ['Assert', 'Assign', 'Assign'])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name']), ('vararg', 'str'), ('kwarg', 'str'), ('defaults', ['Name'])]": 1, "BinOp -> [('left', 'Call'), ('op', 'Add'), ('right', 'Name')]": 5, "If -> [('test', 'Compare'), ('body', ['If']), ('orelse', [])]": 20, "Call -> [('func', 'Name'), ('args', ['BinOp', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "If -> [('test', 'Compare'), ('body', ['Assign']), ('orelse', ['Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign'])]": 1, "If -> [('test', 'UnaryOp'), ('body', ['Raise']), ('orelse', ['Return'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Num', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 9, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'Assign', 'Return']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['BinOp', 'List']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "Call -> [('func', 'Attribute'), ('args', ['Call', 'Tuple']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 34, "BinOp -> [('left', 'Name'), ('op', 'BitXor'), ('right', 'Name')]": 2, "ExceptHandler -> [('type', 'Tuple'), ('name', 'NoneType'), ('body', ['Raise'])]": 1, "List -> [('elts', ['Attribute']), ('ctx', 'Load')]": 21, "For -> [('target', 'Name'), ('iter', 'Subscript'), ('body', ['Assign', 'Expr', 'For', 'For']), ('orelse', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Num', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 20, "BoolOp -> [('op', 'Or'), ('values', ['Call', 'Attribute'])]": 2, "Dict -> [('keys', ['Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute']), ('values', ['Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num'])]": 2, "If -> [('test', 'Name'), ('body', ['Assign', 'Assign']), ('orelse', [])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['Attribute', 'Attribute', 'Attribute'])]": 2, "TryExcept -> [('body', ['Return']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 19, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'For', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 1, "Assign -> [('targets', ['Subscript']), ('value', 'Subscript')]": 47, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'While', 'Return']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Subscript'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'If', 'If', 'Assign', 'If', 'If', 'Expr']), ('orelse', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Str', 'Attribute', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 7, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'Return']), ('decorator_list', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Name', 'Name', 'Name', 'Attribute', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "Call -> [('func', 'Attribute'), ('args', ['Str', 'Attribute', 'Attribute', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "BinOp -> [('left', 'BinOp'), ('op', 'Pow'), ('right', 'Num')]": 22, "Tuple -> [('elts', ['Num', 'Num', 'Num', 'Num']), ('ctx', 'Load')]": 18, "BoolOp -> [('op', 'Or'), ('values', ['Compare', 'Name'])]": 1, "comprehension -> [('target', 'Tuple'), ('iter', 'Call'), ('ifs', ['Compare'])]": 1, "If -> [('test', 'BoolOp'), ('body', ['ImportFrom', 'Assign', 'TryExcept', 'Assign', 'Expr']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'For', 'Expr', 'Return']), ('decorator_list', ['Attribute'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Call', 'Call', 'Attribute', 'Num', 'BinOp', 'Num', 'Num', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "If -> [('test', 'Compare'), ('body', ['If', 'If']), ('orelse', ['If'])]": 2, "Call -> [('func', 'Name'), ('args', []), ('keywords', ['keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 11, "If -> [('test', 'Call'), ('body', ['For']), ('orelse', [])]": 3, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Str', 'Str', 'Str', 'Str', 'Str'])]": 7, "Call -> [('func', 'Attribute'), ('args', ['Str', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 79, "Compare -> [('left', 'Attribute'), ('ops', ['Lt']), ('comparators', ['Num'])]": 6, "Call -> [('func', 'Name'), ('args', ['Name', 'Call', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Attribute']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Compare -> [('left', 'Subscript'), ('ops', ['Eq']), ('comparators', ['Tuple'])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 9, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign']), ('decorator_list', [])]": 1, "comprehension -> [('target', 'Name'), ('iter', 'Subscript'), ('ifs', [])]": 11, "Call -> [('func', 'Attribute'), ('args', ['Call']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'Name')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'For', 'If', 'Return']), ('decorator_list', [])]": 1, "Index -> [('value', 'Str')]": 671, "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign', 'Assign', 'Assign']), ('orelse', ['If'])]": 1, "If -> [('test', 'Call'), ('body', ['Expr', 'Expr', 'Expr', 'Expr', 'If', 'Expr', 'Raise']), ('orelse', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Str', 'Str', 'Dict']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "Attribute -> [('value', 'Name'), ('attr', 'str'), ('ctx', 'Load')]": 13626, "If -> [('test', 'UnaryOp'), ('body', ['Return']), ('orelse', ['FunctionDef', 'Return'])]": 1, "ExceptHandler -> [('type', 'Attribute'), ('name', 'NoneType'), ('body', ['Break'])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'Assign']), ('orelse', ['Assign', 'Assign', 'Assign', 'Assign'])]": 1, "TryExcept -> [('body', ['Assign', 'Expr', 'Assign', 'If']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 1, "Tuple -> [('elts', ['Call', 'Name', 'Name']), ('ctx', 'Load')]": 1, "While -> [('test', 'Name'), ('body', ['Assign', 'TryExcept', 'If', 'Expr', 'Assign', 'Expr', 'AugAssign', 'If']), ('orelse', [])]": 1, "If -> [('test', 'BoolOp'), ('body', ['Expr', 'Continue']), ('orelse', [])]": 1, "Call -> [('func', 'Name'), ('args', []), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "TryFinally -> [('body', ['If', 'Expr', 'While', 'Expr']), ('finalbody', ['If'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assert']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'For', 'For', 'Assign', 'Assign', 'TryExcept']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Num', 'BinOp', 'Tuple']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 5, "Tuple -> [('elts', ['Tuple', 'Call', 'Call']), ('ctx', 'Load')]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'List', 'Num', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "For -> [('target', 'Name'), ('iter', 'Subscript'), ('body', ['Expr', 'Expr']), ('orelse', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If']), ('decorator_list', [])]": 5, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 2, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'ClassDef', 'Assign'])]": 1, "BinOp -> [('left', 'Subscript'), ('op', 'Add'), ('right', 'Str')]": 4, "Tuple -> [('elts', ['Name', 'Attribute', 'Attribute']), ('ctx', 'Load')]": 1, "Tuple -> [('elts', []), ('ctx', 'Load')]": 59, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'For', 'Return']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'If', 'If', 'Assign', 'Expr']), ('orelse', [])]": 1, "If -> [('test', 'Attribute'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'For']), ('orelse', [])]": 1, "BoolOp -> [('op', 'And'), ('values', ['Name', 'Name'])]": 25, "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['Return'])]": 19, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'ClassDef']), ('decorator_list', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 224, "Tuple -> [('elts', ['BinOp', 'BinOp']), ('ctx', 'Load')]": 30, "For -> [('target', 'Name'), ('iter', 'List'), ('body', ['Assign', 'Print']), ('orelse', [])]": 1, "TryExcept -> [('body', ['For']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 1, "If -> [('test', 'Attribute'), ('body', ['Assign', 'FunctionDef', 'While']), ('orelse', [])]": 1, "GeneratorExp -> [('elt', 'Name'), ('generators', ['comprehension'])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'Assign', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 2, "USub -> <NULL>": 31, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', ['Name'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Name', 'Call', 'Name', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "For -> [('target', 'Name'), ('iter', 'List'), ('body', ['Expr', 'Expr', 'Expr']), ('orelse', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'If', 'Expr', 'If']), ('decorator_list', [])]": 1, "If -> [('test', 'Name'), ('body', ['If', 'If', 'If']), ('orelse', [])]": 1, "Module -> [('body', ['Import', 'ImportFrom', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'Assign', 'ClassDef', 'ClassDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]": 1, "List -> [('elts', ['Call']), ('ctx', 'Load')]": 18, "Call -> [('func', 'Name'), ('args', ['Tuple', 'Tuple', 'Tuple']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "List -> [('elts', ['Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute']), ('ctx', 'Load')]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Assign', 'TryExcept', 'Expr', 'Print', 'Assign', 'For', 'For']), ('decorator_list', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Name', 'Name', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 4, "List -> [('elts', ['Str', 'Str', 'Str', 'List']), ('ctx', 'Load')]": 4, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'ImportFrom', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'FunctionDef', 'If'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Tuple', 'Call', 'BinOp', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "AugAssign -> [('target', 'Name'), ('op', 'Mult'), ('value', 'Name')]": 3, "UnaryOp -> [('op', 'USub'), ('operand', 'Attribute')]": 4, "TryExcept -> [('body', ['Assign']), ('handlers', ['ExceptHandler']), ('orelse', ['Assign'])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'If']), ('orelse', ['For'])]": 1, "Call -> [('func', 'Name'), ('args', ['Name', 'Str', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Str', 'Str', 'Str', 'Str', 'BinOp'])]": 1, "comprehension -> [('target', 'Name'), ('iter', 'Name'), ('ifs', ['BoolOp'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'For', 'Return']), ('decorator_list', [])]": 11, "comprehension -> [('target', 'Name'), ('iter', 'Str'), ('ifs', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Attribute']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'Name')]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ClassDef', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'Attribute'), ('body', ['Continue']), ('orelse', ['If'])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Num'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'For', 'For', 'Return']), ('decorator_list', [])]": 1, "Compare -> [('left', 'Name'), ('ops', ['In']), ('comparators', ['Call'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'If', 'Expr', 'Assign', 'Assign', 'Expr', 'Return']), ('decorator_list', [])]": 1, "Compare -> [('left', 'BinOp'), ('ops', ['Lt']), ('comparators', ['Call'])]": 1, "List -> [('elts', ['Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute']), ('ctx', 'Load')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'For', 'Return']), ('decorator_list', [])]": 11, "Call -> [('func', 'Attribute'), ('args', ['Name']), ('keywords', ['keyword']), ('starargs', 'Name'), ('kwargs', 'Name')]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['For']), ('orelse', [])]": 4, "Compare -> [('left', 'Attribute'), ('ops', ['GtE']), ('comparators', ['Name'])]": 1, "Compare -> [('left', 'BinOp'), ('ops', ['Lt']), ('comparators', ['Num'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'If', 'Expr', 'Expr', 'Assign', 'Expr']), ('decorator_list', ['Name'])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'If']), ('orelse', ['Assign', 'Assert', 'Assign', 'Assign'])]": 1, "List -> [('elts', ['Num']), ('ctx', 'Load')]": 28, "If -> [('test', 'Compare'), ('body', ['Expr', 'For', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr']), ('orelse', [])]": 1, "ExceptHandler -> [('type', 'Tuple'), ('name', 'Name'), ('body', ['Expr', 'Return'])]": 1, "Tuple -> [('elts', ['Subscript', 'Subscript', 'Name']), ('ctx', 'Load')]": 2, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Assign', 'Expr', 'Expr', 'If']), ('orelse', [])]": 1, "BinOp -> [('left', 'Subscript'), ('op', 'Mult'), ('right', 'BinOp')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If']), ('decorator_list', ['Name'])]": 2, "Compare -> [('left', 'Tuple'), ('ops', ['In']), ('comparators', ['Call'])]": 1, "Assign -> [('targets', ['Attribute', 'Attribute']), ('value', 'Num')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign']), ('decorator_list', [])]": 11, "If -> [('test', 'Compare'), ('body', ['Assign', 'Expr', 'Expr', 'Return']), ('orelse', [])]": 1, "BinOp -> [('left', 'Call'), ('op', 'Add'), ('right', 'ListComp')]": 1, "Dict -> [('keys', ['Name']), ('values', ['Call'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'TryExcept', 'Return']), ('decorator_list', [])]": 6, "BinOp -> [('left', 'Name'), ('op', 'Sub'), ('right', 'Attribute')]": 3, "BinOp -> [('left', 'Attribute'), ('op', 'Mult'), ('right', 'Subscript')]": 1, "If -> [('test', 'Name'), ('body', ['If']), ('orelse', [])]": 8, "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef'])]": 1, "Tuple -> [('elts', ['Num', 'Name', 'Num', 'Num']), ('ctx', 'Load')]": 1, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Attribute', 'Str', 'Name']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "BoolOp -> [('op', 'Or'), ('values', ['Compare', 'Compare', 'Compare'])]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'For', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'For', 'Return']), ('decorator_list', ['Attribute'])]": 1, "ClassDef -> [('name', 'str'), ('bases', []), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', ['Name'])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Num', 'Name'])]": 1, "Call -> [('func', 'Name'), ('args', ['Attribute', 'Str', 'List']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'str'), ('defaults', ['Name', 'Name', 'Name'])]": 1, "List -> [('elts', ['Num', 'Num', 'Num']), ('ctx', 'Load')]": 47, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Return']), ('decorator_list', ['Name'])]": 2, "Assign -> [('targets', ['Subscript']), ('value', 'Attribute')]": 30, "Lambda -> [('args', 'arguments'), ('body', 'ListComp')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'If', 'Assign', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 2, "TryExcept -> [('body', ['Assign', 'Expr', 'For']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Name', 'Str', 'Name', 'Name', 'Name', 'Name', 'Name'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'Return']), ('decorator_list', ['Name'])]": 2, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Attribute', 'Name', 'Tuple']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "Assign -> [('targets', ['Name', 'Name']), ('value', 'BinOp')]": 1, "ListComp -> [('elt', 'Name'), ('generators', ['comprehension'])]": 35, "For -> [('target', 'Tuple'), ('iter', 'Name'), ('body', ['Print', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'For', 'Assign', 'Assign', 'For', 'Expr']), ('decorator_list', [])]": 1, "If -> [('test', 'Name'), ('body', ['Assign', 'For']), ('orelse', ['Assign', 'For'])]": 1, "Compare -> [('left', 'Name'), ('ops', ['NotIn']), ('comparators', ['Call'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Attribute', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'If', 'ClassDef', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'FunctionDef'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'AugAssign', 'AugAssign', 'For', 'AugAssign', 'AugAssign', 'AugAssign', 'AugAssign', 'AugAssign', 'AugAssign', 'Return']), ('decorator_list', [])]": 1, "BinOp -> [('left', 'Name'), ('op', 'BitAnd'), ('right', 'Num')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "If -> [('test', 'Name'), ('body', ['Expr']), ('orelse', ['Assign'])]": 2, "Call -> [('func', 'Name'), ('args', ['Name', 'Str', 'Tuple']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "For -> [('target', 'Name'), ('iter', 'Tuple'), ('body', ['Assign', 'Expr', 'Expr']), ('orelse', [])]": 1, "Expr -> [('value', 'Tuple')]": 1, "Compare -> [('left', 'Name'), ('ops', ['NotEq']), ('comparators', ['BoolOp'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['For', 'Pass']), ('orelse', [])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'str'), ('defaults', ['Name', 'Name', 'Name'])]": 1, "BoolOp -> [('op', 'And'), ('values', ['Compare', 'Compare', 'UnaryOp'])]": 1, "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['If', 'Assign', 'Assign', 'Return'])]": 1, "BinOp -> [('left', 'Name'), ('op', 'Sub'), ('right', 'Call')]": 5, "If -> [('test', 'Call'), ('body', ['If']), ('orelse', [])]": 6, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'Name'), ('body', ['Assign']), ('orelse', ['If'])]": 6, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'Expr']), ('orelse', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Name', 'List']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'Import', 'Assign', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef'])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Str', 'Name', 'Name', 'Str', 'Name', 'Name'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Subscript', 'Subscript', 'List']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]": 4, "BinOp -> [('left', 'Name'), ('op', 'Mult'), ('right', 'BinOp')]": 8, "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'TryExcept', 'Assign', 'FunctionDef', 'FunctionDef', 'ClassDef'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "If -> [('test', 'Call'), ('body', ['With']), ('orelse', [])]": 1, "BinOp -> [('left', 'UnaryOp'), ('op', 'Sub'), ('right', 'BinOp')]": 2, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Attribute', 'Num', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 7, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Global', 'Assign', 'Assign']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'If']), ('decorator_list', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "TryFinally -> [('body', ['TryExcept']), ('finalbody', ['Expr'])]": 3, "Compare -> [('left', 'Attribute'), ('ops', ['NotIn']), ('comparators', ['Tuple'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'For']), ('decorator_list', ['Name', 'Name'])]": 1, "If -> [('test', 'Call'), ('body', ['Assign', 'Expr', 'Expr']), ('orelse', [])]": 2, "BoolOp -> [('op', 'And'), ('values', ['Attribute', 'UnaryOp'])]": 4, "ExceptHandler -> [('type', 'Attribute'), ('name', 'Name'), ('body', ['Assign'])]": 1, "ClassDef -> [('name', 'str'), ('bases', []), ('body', ['Assign', 'Assign', 'Assign']), ('decorator_list', [])]": 3, "Compare -> [('left', 'Name'), ('ops', ['Lt']), ('comparators', ['BinOp'])]": 7, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Name'])]": 3, "TryFinally -> [('body', ['Assign', 'For', 'Expr']), ('finalbody', ['Expr'])]": 1, "Tuple -> [('elts', ['Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute']), ('ctx', 'Store')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'If']), ('decorator_list', [])]": 1, "If -> [('test', 'Call'), ('body', ['Assign', 'Assign', 'Return']), ('orelse', ['If'])]": 2, "Call -> [('func', 'Name'), ('args', ['Str', 'Tuple', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "BinOp -> [('left', 'Subscript'), ('op', 'Sub'), ('right', 'Name')]": 2, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Name', 'Name', 'Name']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'FunctionDef', 'Assign', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'Assign', 'If', 'Assign', 'If', 'If', 'If', 'If']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'If', 'Assign', 'Assign', 'For']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 3, "Assign -> [('targets', ['Name']), ('value', 'Name')]": 330, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'While', 'FunctionDef', 'Assign', 'Assign', 'FunctionDef', 'For', 'For', 'For', 'For', 'Expr', 'Assign', 'For', 'Assign', 'Expr']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'For']), ('decorator_list', [])]": 3, "BinOp -> [('left', 'Name'), ('op', 'Sub'), ('right', 'Subscript')]": 7, "BinOp -> [('left', 'BinOp'), ('op', 'Add'), ('right', 'Num')]": 14, "Assign -> [('targets', ['Attribute']), ('value', 'Compare')]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['TryExcept', 'Expr', 'Assign', 'Expr', 'Print']), ('decorator_list', [])]": 1, "Compare -> [('left', 'Subscript'), ('ops', ['Lt']), ('comparators', ['Subscript'])]": 2, "BinOp -> [('left', 'BinOp'), ('op', 'Add'), ('right', 'Subscript')]": 3, "Compare -> [('left', 'Name'), ('ops', ['In']), ('comparators', ['Subscript'])]": 3, "Call -> [('func', 'Attribute'), ('args', ['Num', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 26, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'Assign', 'If', 'Return']), ('decorator_list', [])]": 2, "Call -> [('func', 'Name'), ('args', ['Name', 'Name']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 18, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'FunctionDef']), ('decorator_list', [])]": 6, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'For']), ('orelse', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Attribute']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 3, "Tuple -> [('elts', ['Tuple', 'Tuple', 'Tuple', 'Tuple']), ('ctx', 'Load')]": 4, "While -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'AugAssign', 'If', 'If']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 11, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'For', 'If', 'Assign', 'If']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'If', 'If', 'If', 'If']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'TryExcept']), ('decorator_list', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', []), ('body', ['Assign', 'Assign']), ('decorator_list', [])]": 2, "Tuple -> [('elts', ['Subscript', 'Name', 'Call']), ('ctx', 'Load')]": 2, "Call -> [('func', 'Name'), ('args', ['Str', 'Str']), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "TryFinally -> [('body', ['If', 'Assign', 'Assign', 'While', 'If', 'Assign', 'Assign', 'Assign', 'While', 'If', 'While', 'Expr', 'Assign', 'Assign', 'For', 'Expr', 'Assign', 'If', 'Assign', 'Expr', 'If', 'Return']), ('finalbody', ['Expr', 'Expr'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['FunctionDef', 'Assign', 'For']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('orelse', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Call', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'ClassDef', 'ClassDef', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'ClassDef', 'FunctionDef'])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Str', 'Str', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name'])]": 1, "Yield -> [('value', 'Tuple')]": 4, "Call -> [('func', 'Attribute'), ('args', ['Call', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 69, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['For', 'Expr']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['FunctionDef', 'Expr', 'Assign', 'While', 'If']), ('decorator_list', [])]": 1, "comprehension -> [('target', 'Name'), ('iter', 'Call'), ('ifs', ['BoolOp'])]": 1, "Tuple -> [('elts', ['Name', 'Str', 'Num']), ('ctx', 'Load')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'For', 'Expr', 'Return']), ('decorator_list', [])]": 1, "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'Import', 'Import', 'Import', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'FunctionDef'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If']), ('decorator_list', [])]": 1, "ExceptHandler -> [('type', 'Attribute'), ('name', 'NoneType'), ('body', ['Expr'])]": 3, "Compare -> [('left', 'Name'), ('ops', ['GtE']), ('comparators', ['Name'])]": 5, "BinOp -> [('left', 'Attribute'), ('op', 'Mult'), ('right', 'Num')]": 6, "AugAssign -> [('target', 'Name'), ('op', 'Add'), ('value', 'Name')]": 4, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'Expr', 'Assign', 'Assign', 'Expr', 'Return']), ('decorator_list', ['Name', 'Name'])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Pass']), ('orelse', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'If']), ('orelse', [])]": 16, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Tuple', 'Tuple', 'Num', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "BinOp -> [('left', 'Attribute'), ('op', 'Add'), ('right', 'Name')]": 3, "Compare -> [('left', 'Subscript'), ('ops', ['Lt']), ('comparators', ['Num'])]": 2, "Call -> [('func', 'Attribute'), ('args', ['Call', 'Call', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 5, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Tuple', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 3, "arguments -> [('args', ['Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Str'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'If', 'Return']), ('decorator_list', [])]": 1, "TryFinally -> [('body', ['For']), ('finalbody', ['Expr', 'Expr'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'For']), ('decorator_list', [])]": 2, "arguments -> [('args', ['Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'str'), ('defaults', ['Name'])]": 5, "Call -> [('func', 'Name'), ('args', ['Str', 'Name', 'Name', 'Attribute', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Call -> [('func', 'Name'), ('args', ['Name', 'Num', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Call -> [('func', 'Name'), ('args', ['Name']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 63, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Assign', 'If', 'Return']), ('decorator_list', ['Attribute'])]": 1, "If -> [('test', 'BoolOp'), ('body', ['If', 'Expr', 'Expr']), ('orelse', [])]": 1, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Subscript', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 8, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'For', 'Assign', 'Return']), ('decorator_list', [])]": 1, "GeneratorExp -> [('elt', 'Tuple'), ('generators', ['comprehension'])]": 5, "If -> [('test', 'Name'), ('body', ['Expr', 'If']), ('orelse', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'If']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'Assign', 'If', 'Assign', 'If', 'If', 'If', 'Assign', 'Expr', 'If', 'If', 'If', 'If', 'Return']), ('decorator_list', [])]": 1, "While -> [('test', 'BoolOp'), ('body', ['AugAssign', 'If', 'For']), ('orelse', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Num', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "If -> [('test', 'Call'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'If']), ('orelse', ['Pass'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['TryExcept']), ('decorator_list', ['Name'])]": 3, "Call -> [('func', 'Attribute'), ('args', ['Name', 'List', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 4, "List -> [('elts', ['Call', 'Call', 'Str', 'Call', 'Str', 'Call']), ('ctx', 'Load')]": 7, "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'Return']), ('orelse', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'For', 'Assign', 'Assign', 'For', 'Expr', 'For', 'Expr', 'Expr', 'Return'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Attribute']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 6, "While -> [('test', 'Name'), ('body', ['Assign', 'Print', 'If', 'If', 'Print', 'Expr']), ('orelse', [])]": 2, "If -> [('test', 'Name'), ('body', ['Assign']), ('orelse', ['Assign'])]": 33, "Call -> [('func', 'Name'), ('args', ['Attribute', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 6, "Tuple -> [('elts', ['Num', 'Name']), ('ctx', 'Load')]": 7, "Call -> [('func', 'Attribute'), ('args', ['BinOp', 'Num', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef'])]": 1, "For -> [('target', 'Name'), ('iter', 'List'), ('body', ['Expr', 'Expr', 'Assign', 'For']), ('orelse', [])]": 1, "ImportFrom -> [('module', 'str'), ('names', ['alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias']), ('level', 'int')]": 1, "Tuple -> [('elts', ['Name', 'Name', 'List']), ('ctx', 'Load')]": 1, "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['Raise'])]": 14, "Call -> [('func', 'Name'), ('args', ['Subscript']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 71, "If -> [('test', 'Compare'), ('body', ['Assign', 'If', 'Assign']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'AugAssign', 'Assign', 'Expr', 'If', 'Expr']), ('decorator_list', [])]": 1, "BinOp -> [('left', 'Num'), ('op', 'Mult'), ('right', 'Call')]": 10, "Call -> [('func', 'Name'), ('args', ['Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 214, "Name -> [('id', 'str'), ('ctx', 'Store')]": 7826, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "For -> [('target', 'Tuple'), ('iter', 'Name'), ('body', ['Expr', 'Expr', 'Expr', 'Expr']), ('orelse', [])]": 1, "AugAssign -> [('target', 'Name'), ('op', 'Add'), ('value', 'ListComp')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'TryFinally', 'Expr', 'Return']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Subscript'), ('body', ['Assign', 'TryExcept', 'Expr', 'Expr']), ('orelse', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Num', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 3, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Tuple', 'Num', 'Num', 'Num', 'Num', 'Name', 'Name', 'Num'])]": 1, "BoolOp -> [('op', 'Or'), ('values', ['BoolOp', 'Compare'])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', []), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['FunctionDef']), ('decorator_list', [])]": 16, "GeneratorExp -> [('elt', 'Compare'), ('generators', ['comprehension'])]": 1, "If -> [('test', 'Name'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'For']), ('orelse', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', []), ('body', ['Assign', 'Assign', 'FunctionDef']), ('decorator_list', [])]": 1, "If -> [('test', 'Call'), ('body', ['Expr', 'Delete']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'If']), ('decorator_list', [])]": 1, "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign', 'If']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Delete', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "Dict -> [('keys', ['Str', 'Str']), ('values', ['Str', 'Str'])]": 2, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'str'), ('defaults', ['Name', 'Str', 'Call', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Tuple', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name'])]": 1, "If -> [('test', 'UnaryOp'), ('body', ['TryExcept']), ('orelse', ['Assign'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'For']), ('decorator_list', ['Name'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'FunctionDef', 'FunctionDef', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Call', 'Tuple']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'If', 'Assign', 'Assign', 'Assign', 'If', 'Return']), ('decorator_list', [])]": 1, "TryFinally -> [('body', ['Expr', 'Expr', 'Assign', 'Assign', 'Expr']), ('finalbody', ['Expr', 'TryExcept'])]": 1, "BoolOp -> [('op', 'Or'), ('values', ['Name', 'Subscript'])]": 3, "BinOp -> [('left', 'Attribute'), ('op', 'Add'), ('right', 'Tuple')]": 1, "Assign -> [('targets', ['Subscript']), ('value', 'Dict')]": 4, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['If', 'Assign', 'Assign']), ('orelse', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'For', 'For']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['If']), ('orelse', [])]": 25, "IfExp -> [('test', 'Name'), ('body', 'ListComp'), ('orelse', 'List')]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ClassDef', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "comprehension -> [('target', 'Name'), ('iter', 'Call'), ('ifs', ['UnaryOp'])]": 1, "If -> [('test', 'Name'), ('body', ['Print', 'Expr']), ('orelse', [])]": 1, "UnaryOp -> [('op', 'Not'), ('operand', 'Subscript')]": 3, "For -> [('target', 'Name'), ('iter', 'BinOp'), ('body', ['If', 'Assign', 'If']), ('orelse', [])]": 1, "AugAssign -> [('target', 'Name'), ('op', 'Add'), ('value', 'Str')]": 17, "If -> [('test', 'Compare'), ('body', ['Import', 'Import']), ('orelse', [])]": 1, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Expr']), ('orelse', [])]": 21, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'Assign', 'Return']), ('decorator_list', ['Name'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'Assign', 'For']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'Assign', 'Import', 'Expr']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Assign', 'Assign', 'TryFinally']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'For', 'Return']), ('decorator_list', ['Name'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'TryExcept', 'Assign', 'If', 'Return']), ('decorator_list', [])]": 2, "For -> [('target', 'Name'), ('iter', 'List'), ('body', ['Expr']), ('orelse', [])]": 9, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Str', 'Str', 'Str', 'Call', 'Str', 'Call', 'Str', 'Call', 'Str', 'Str', 'Str'])]": 3, "BoolOp -> [('op', 'And'), ('values', ['Compare', 'Name'])]": 1, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Assign', 'If', 'Expr']), ('orelse', [])]": 1, "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'Expr', 'If']), ('orelse', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Name', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Call -> [('func', 'Attribute'), ('args', ['Subscript', 'Attribute']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "BinOp -> [('left', 'List'), ('op', 'Mult'), ('right', 'Call')]": 6, "BinOp -> [('left', 'Attribute'), ('op', 'Sub'), ('right', 'BinOp')]": 1, "Call -> [('func', 'Name'), ('args', ['Name', 'Name', 'Name', 'UnaryOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Call -> [('func', 'Name'), ('args', []), ('keywords', []), ('starargs', 'Call'), ('kwargs', 'NoneType')]": 1, "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['Assign']), ('orelse', [])]": 1, "List -> [('elts', ['Name', 'Call']), ('ctx', 'Load')]": 1, "BinOp -> [('left', 'Num'), ('op', 'Div'), ('right', 'Attribute')]": 1, "If -> [('test', 'Attribute'), ('body', ['Assign']), ('orelse', ['Assign', 'Assign', 'Assign', 'Assign'])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Str', 'Str', 'Str', 'Name', 'Str', 'Str', 'Str', 'Str', 'Str'])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 4, "If -> [('test', 'UnaryOp'), ('body', ['ImportFrom']), ('orelse', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Assign', 'Assign', 'FunctionDef', 'ClassDef']), ('decorator_list', [])]": 1, "Assign -> [('targets', ['Name']), ('value', 'UnaryOp')]": 3, "keyword -> [('arg', 'str'), ('value', 'Subscript')]": 16, "Call -> [('func', 'Name'), ('args', ['List', 'Name', 'Name']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'If', 'Expr', 'Assign', 'Return']), ('decorator_list', ['Name'])]": 1, "Compare -> [('left', 'Call'), ('ops', ['In']), ('comparators', ['Str'])]": 1, "If -> [('test', 'UnaryOp'), ('body', ['Expr', 'Continue']), ('orelse', [])]": 2, "List -> [('elts', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('ctx', 'Load')]": 1, "If -> [('test', 'Name'), ('body', ['Expr']), ('orelse', ['If'])]": 1, "BoolOp -> [('op', 'Or'), ('values', ['Name', 'Call'])]": 7, "Tuple -> [('elts', ['Num', 'Str']), ('ctx', 'Load')]": 3, "BinOp -> [('left', 'List'), ('op', 'Mult'), ('right', 'Name')]": 4, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'If', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Str', 'Str', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 21, "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['Name', 'BinOp', 'Attribute'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'Name')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 4, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['TryExcept']), ('decorator_list', ['Attribute'])]": 1, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Expr', 'Assign', 'Expr']), ('orelse', [])]": 1, "Tuple -> [('elts', ['BinOp', 'Call']), ('ctx', 'Load')]": 1, "Call -> [('func', 'Attribute'), ('args', []), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'Attribute')]": 6, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Dict']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'If']), ('orelse', [])]": 1, "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['If'])]": 3, "Call -> [('func', 'Name'), ('args', ['Name']), ('keywords', []), ('starargs', 'Name'), ('kwargs', 'NoneType')]": 4, "BinOp -> [('left', 'Num'), ('op', 'Sub'), ('right', 'Subscript')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'If', 'Assign', 'If']), ('decorator_list', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Call', 'Attribute', 'Attribute', 'Attribute', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'Assign', 'While', 'Return']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Expr', 'Expr']), ('orelse', [])]": 1, "While -> [('test', 'Name'), ('body', ['Assign', 'If', 'Expr']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'If', 'FunctionDef', 'Expr', 'Assign', 'Assign', 'While', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Expr', 'Assign', 'For', 'Expr']), ('orelse', ['Assign', 'Expr', 'Expr'])]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Print', 'Assign']), ('orelse', [])]": 1, "TryExcept -> [('body', ['Assign', 'Assign', 'Assign', 'TryExcept', 'Assign', 'If', 'Assign', 'Assign', 'If', 'Assign', 'If', 'Assign', 'If', 'TryExcept', 'Assign', 'Assign', 'Assign', 'TryFinally', 'If']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 1, "Compare -> [('left', 'Attribute'), ('ops', ['Gt']), ('comparators', ['Num'])]": 6, "BoolOp -> [('op', 'And'), ('values', ['Attribute', 'Call', 'Call'])]": 1, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'TryExcept', 'Assign', 'Assign', 'ClassDef'])]": 1, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Expr', 'For']), ('orelse', [])]": 1, "Tuple -> [('elts', ['Str', 'Str', 'Str', 'Str']), ('ctx', 'Load')]": 3, "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Expr']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Return', 'If', 'Return']), ('decorator_list', [])]": 1, "Compare -> [('left', 'Name'), ('ops', ['Gt']), ('comparators', ['Name'])]": 5, "Tuple -> [('elts', ['Name', 'Tuple']), ('ctx', 'Store')]": 4, "Return -> [('value', 'BinOp')]": 110, "BoolOp -> [('op', 'And'), ('values', ['Name', 'Compare', 'Compare'])]": 3, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Name', 'Name', 'Name'])]": 1, "Dict -> [('keys', ['Str', 'Str']), ('values', ['Num', 'Call'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 2, "Return -> [('value', 'List')]": 13, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['For']), ('orelse', [])]": 7, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'Expr', 'If']), ('decorator_list', [])]": 1, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'ClassDef', 'FunctionDef'])]": 1, "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['Pass'])]": 23, "BinOp -> [('left', 'Name'), ('op', 'Mod'), ('right', 'Dict')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Raise']), ('decorator_list', [])]": 1, "Compare -> [('left', 'Attribute'), ('ops', ['In']), ('comparators', ['List'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'TryExcept', 'Assign', 'Expr', 'Return']), ('decorator_list', [])]": 1, "NotEq -> <NULL>": 97, "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['Num', 'Str', 'Num'])]": 10, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['If', 'Expr', 'Assign']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['BinOp', 'Str', 'Str', 'Str', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Assign -> [('targets', ['Attribute']), ('value', 'Name')]": 479, "Module -> [('body', ['Import', 'Import', 'Import', 'TryExcept', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'FunctionDef', 'FunctionDef', 'ClassDef', 'ClassDef', 'ClassDef'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'List']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 6, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'If', 'For', 'Return']), ('decorator_list', ['Name'])]": 1, "Tuple -> [('elts', ['Name', 'Attribute']), ('ctx', 'Load')]": 10, "Call -> [('func', 'Name'), ('args', ['Tuple', 'Num', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Tuple']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 34, "Call -> [('func', 'Attribute'), ('args', ['Str', 'Str', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 15, "BinOp -> [('left', 'Num'), ('op', 'Mult'), ('right', 'BinOp')]": 15, "Call -> [('func', 'Name'), ('args', ['Name', 'BinOp', 'BinOp', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'List', 'List', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Tuple -> [('elts', ['Str', 'Subscript']), ('ctx', 'Load')]": 1, "ImportFrom -> [('module', 'NoneType'), ('names', ['alias']), ('level', 'int')]": 1, "keyword -> [('arg', 'str'), ('value', 'Tuple')]": 67, "BinOp -> [('left', 'ListComp'), ('op', 'Add'), ('right', 'BinOp')]": 1, "If -> [('test', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign']), ('orelse', [])]": 1, "If -> [('test', 'Name'), ('body', ['Print']), ('orelse', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'Return']), ('decorator_list', [])]": 11, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Expr']), ('decorator_list', [])]": 1, "BinOp -> [('left', 'Num'), ('op', 'Add'), ('right', 'Call')]": 2, "Tuple -> [('elts', ['Tuple', 'Name']), ('ctx', 'Load')]": 3, "Compare -> [('left', 'Subscript'), ('ops', ['NotEq']), ('comparators', ['Attribute'])]": 1, "Compare -> [('left', 'Name'), ('ops', ['LtE']), ('comparators', ['BinOp'])]": 1, "Num -> [('n', 'int')]": 20972, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['List', 'Name', 'Name'])]": 1, "Tuple -> [('elts', ['Str', 'Call']), ('ctx', 'Load')]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'TryExcept', 'Expr', 'Assign', 'For']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Return']), ('orelse', ['Assign', 'Assign', 'Assign', 'For', 'Return'])]": 1, "TryFinally -> [('body', ['Expr', 'Expr', 'Expr']), ('finalbody', ['Expr'])]": 1, "While -> [('test', 'Name'), ('body', ['AugAssign', 'Assign', 'If', 'AugAssign']), ('orelse', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign']), ('orelse', ['Return'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Call', 'List', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['Assign', 'Expr', 'For']), ('orelse', [])]": 1, "If -> [('test', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'Expr']), ('orelse', ['Expr'])]": 1, "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'If'])]": 1, "If -> [('test', 'Compare'), ('body', ['Expr', 'Expr', 'Expr', 'Return']), ('orelse', ['Expr', 'Return'])]": 1, "BinOp -> [('left', 'Name'), ('op', 'FloorDiv'), ('right', 'Num')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Expr', 'Expr', 'Assign', 'Assign', 'AugAssign', 'For']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Expr']), ('orelse', ['Assign'])]": 3, "Subscript -> [('value', 'List'), ('slice', 'Slice'), ('ctx', 'Load')]": 5, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'For', 'Expr']), ('decorator_list', [])]": 6, "TryExcept -> [('body', ['Assign', 'If', 'Assign']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 1, "Assign -> [('targets', ['Name']), ('value', 'Yield')]": 6, "If -> [('test', 'UnaryOp'), ('body', ['Assign']), ('orelse', ['Assign', 'If'])]": 1, "Delete -> [('targets', ['Attribute'])]": 21, "If -> [('test', 'UnaryOp'), ('body', ['Return']), ('orelse', ['Return'])]": 2, "Slice -> [('lower', 'NoneType'), ('upper', 'Call'), ('step', 'NoneType')]": 1, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'For', 'Expr', 'Assign', 'Expr', 'If']), ('orelse', [])]": 1, "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'For']), ('orelse', [])]": 1, "BoolOp -> [('op', 'And'), ('values', ['Compare', 'UnaryOp', 'UnaryOp'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'While', 'Expr', 'Assign', 'Return']), ('decorator_list', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', []), ('body', ['Assign', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'For', 'Expr', 'Return']), ('decorator_list', [])]": 2, "ClassDef -> [('name', 'str'), ('bases', []), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'Assign', 'AugAssign']), ('orelse', [])]": 1, "If -> [('test', 'Name'), ('body', ['Assign', 'Assign', 'For']), ('orelse', ['Assign', 'For'])]": 1, "Assign -> [('targets', ['Name']), ('value', 'Subscript')]": 262, "Slice -> [('lower', 'Call'), ('upper', 'Call'), ('step', 'NoneType')]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['If', 'Assign']), ('orelse', [])]": 1, "Delete -> [('targets', ['Subscript'])]": 27, "Expr -> [('value', 'Yield')]": 30, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'For']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Str', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 3, "Module -> [('body', ['Import'])]": 1, "Call -> [('func', 'Name'), ('args', ['Attribute', 'Name', 'BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "If -> [('test', 'Attribute'), ('body', ['Raise']), ('orelse', [])]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Raise']), ('decorator_list', [])]": 13, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'ClassDef', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "If -> [('test', 'Call'), ('body', ['Assign', 'Expr', 'Assign', 'If', 'If', 'Assign', 'Expr', 'Expr', 'If', 'If', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'For', 'Expr', 'Expr', 'Print', 'Assign', 'Print', 'Expr', 'Print']), ('orelse', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Num']), ('keywords', ['keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', [])]": 145, "If -> [('test', 'Call'), ('body', ['Assign', 'If', 'Assign', 'If']), ('orelse', ['If'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'If']), ('decorator_list', [])]": 1, "If -> [('test', 'UnaryOp'), ('body', ['Assign']), ('orelse', ['Expr'])]": 1, "With -> [('context_expr', 'Call'), ('optional_vars', 'Name'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr'])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'str'), ('defaults', ['Name', 'Name', 'Str', 'Name'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Return']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Attribute', 'Name', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Compare -> [('left', 'Name'), ('ops', ['Is']), ('comparators', ['Name'])]": 100, "TryExcept -> [('body', ['Assign']), ('handlers', ['ExceptHandler']), ('orelse', ['Expr'])]": 3, "BinOp -> [('left', 'Subscript'), ('op', 'Pow'), ('right', 'Attribute')]": 4, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Print', 'Assign', 'Assign', 'For']), ('decorator_list', [])]": 1, "UnaryOp -> [('op', 'Not'), ('operand', 'Compare')]": 45, "Assign -> [('targets', ['Attribute']), ('value', 'UnaryOp')]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', []), ('body', ['Assign']), ('decorator_list', [])]": 13, "Str -> [('s', 'str')]": 8349, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['If']), ('orelse', ['Raise'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'If', 'Return']), ('decorator_list', ['Attribute'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'For', 'Return']), ('decorator_list', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "BinOp -> [('left', 'Attribute'), ('op', 'BitOr'), ('right', 'Call')]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Expr', 'Assign', 'If', 'Expr', 'Expr']), ('orelse', [])]": 1, "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['If', 'Assign', 'Return'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]": 7, "Call -> [('func', 'Name'), ('args', ['Name', 'BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 12, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'If', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'If', 'Expr', 'Assign', 'Expr', 'If']), ('decorator_list', [])]": 1, "BinOp -> [('left', 'Num'), ('op', 'Div'), ('right', 'Subscript')]": 1, "Div -> <NULL>": 171, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Expr', 'Return']), ('decorator_list', [])]": 1, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Expr', 'Expr']), ('orelse', [])]": 5, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'ImportFrom', 'TryExcept', 'TryExcept', 'Import', 'ClassDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'If'])]": 1, "Yield -> [('value', 'Attribute')]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Return']), ('orelse', ['If'])]": 2, "Lt -> <NULL>": 85, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Tuple', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Mult -> <NULL>": 375, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'Assign', 'Assign', 'For', 'Return']), ('decorator_list', [])]": 1, "Assign -> [('targets', ['Name']), ('value', 'Num')]": 163, "Assign -> [('targets', ['Subscript']), ('value', 'Num')]": 50, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'If'])]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Expr', 'Expr', 'Expr']), ('orelse', [])]": 2, "Call -> [('func', 'Name'), ('args', ['Name', 'Call', 'Str', 'Str', 'Name', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "BoolOp -> [('op', 'And'), ('values', ['Name', 'BinOp'])]": 1, "For -> [('target', 'Name'), ('iter', 'BinOp'), ('body', ['If', 'If']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'For', 'Assign', 'If', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Return']), ('decorator_list', [])]": 1, "Compare -> [('left', 'Name'), ('ops', ['GtE']), ('comparators', ['BinOp'])]": 2, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Name', 'Call', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Subscript']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 11, "BinOp -> [('left', 'Attribute'), ('op', 'Add'), ('right', 'Str')]": 29, "If -> [('test', 'Compare'), ('body', ['Delete']), ('orelse', [])]": 6, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['If', 'For']), ('orelse', [])]": 1, "Dict -> [('keys', ['Str', 'Str']), ('values', ['Str', 'Call'])]": 1, "If -> [('test', 'Compare'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr']), ('orelse', [])]": 1, "BoolOp -> [('op', 'And'), ('values', ['Name', 'Compare'])]": 15, "Compare -> [('left', 'Subscript'), ('ops', ['Gt']), ('comparators', ['Subscript'])]": 2, "Compare -> [('left', 'Name'), ('ops', ['Eq']), ('comparators', ['Num'])]": 36, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', [])]": 2, "Print -> [('dest', 'NoneType'), ('values', ['Str', 'Call']), ('nl', 'bool')]": 5, "Call -> [('func', 'Name'), ('args', ['Name', 'BinOp', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 6, "Call -> [('func', 'Name'), ('args', ['GeneratorExp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 10, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'If', 'Return']), ('decorator_list', [])]": 1, "BinOp -> [('left', 'UnaryOp'), ('op', 'Mult'), ('right', 'Attribute')]": 1, "BoolOp -> [('op', 'Or'), ('values', ['BoolOp', 'Str'])]": 5, "BinOp -> [('left', 'BinOp'), ('op', 'Add'), ('right', 'Str')]": 38, "Tuple -> [('elts', ['Subscript', 'Subscript']), ('ctx', 'Store')]": 2, "Compare -> [('left', 'Num'), ('ops', ['LtE', 'Lt']), ('comparators', ['Name', 'Name'])]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['If', 'TryExcept', 'TryExcept', 'If', 'Assign', 'AugAssign']), ('orelse', [])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Call', 'Call'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'If', 'Expr', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign']), ('decorator_list', [])]": 20, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'TryExcept']), ('decorator_list', [])]": 1, "Compare -> [('left', 'Str'), ('ops', ['In']), ('comparators', ['Subscript'])]": 7, "If -> [('test', 'BoolOp'), ('body', ['Continue']), ('orelse', [])]": 12, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Name', 'Attribute'])]": 1, "ExceptHandler -> [('type', 'Attribute'), ('name', 'Name'), ('body', ['Return'])]": 2, "Call -> [('func', 'Name'), ('args', ['Str']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 26, "If -> [('test', 'Compare'), ('body', ['FunctionDef', 'Assign', 'Expr', 'Expr', 'Expr']), ('orelse', [])]": 2, "Call -> [('func', 'Name'), ('args', ['Attribute', 'Attribute', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef'])]": 1, "BinOp -> [('left', 'Subscript'), ('op', 'Pow'), ('right', 'BinOp')]": 1, "Call -> [('func', 'Name'), ('args', ['Attribute', 'Dict']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'For', 'Expr', 'Expr', 'For', 'Assign']), ('decorator_list', [])]": 1, "Dict -> [('keys', ['Call']), ('values', ['Str'])]": 4, "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'If']), ('orelse', [])]": 1, "TryExcept -> [('body', ['Assign', 'Assign', 'Assign', 'If']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 2, "List -> [('elts', ['Name', 'Name', 'Call', 'Call']), ('ctx', 'Load')]": 1, "Call -> [('func', 'Name'), ('args', ['UnaryOp']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Global -> [('names', ['str', 'str'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1417, "If -> [('test', 'BoolOp'), ('body', ['Print']), ('orelse', ['Assign', 'Assign'])]": 1, "If -> [('test', 'UnaryOp'), ('body', ['If', 'Expr', 'Expr']), ('orelse', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Lambda', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 32, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'If', 'Return']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Str', 'Str', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 7, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Tuple', 'Tuple', 'Name', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "BinOp -> [('left', 'Attribute'), ('op', 'Add'), ('right', 'BinOp')]": 3, "If -> [('test', 'BoolOp'), ('body', ['Expr', 'If']), ('orelse', ['Expr', 'Expr', 'If'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Tuple', 'Num', 'Num', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "Call -> [('func', 'Attribute'), ('args', []), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 413, "BoolOp -> [('op', 'And'), ('values', ['Call', 'Call'])]": 8, "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['Assign', 'Return'])]": 2, "If -> [('test', 'UnaryOp'), ('body', ['Expr']), ('orelse', ['If'])]": 2, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Assign', 'Expr']), ('orelse', [])]": 2, "Call -> [('func', 'Name'), ('args', ['Attribute', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 14, "Tuple -> [('elts', ['Subscript', 'Call']), ('ctx', 'Load')]": 5, "Call -> [('func', 'Name'), ('args', ['Name', 'Str', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr']), ('decorator_list', [])]": 32, "While -> [('test', 'Compare'), ('body', ['Assign', 'Assign']), ('orelse', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Call', 'Str']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "GeneratorExp -> [('elt', 'BinOp'), ('generators', ['comprehension'])]": 1, "Compare -> [('left', 'Attribute'), ('ops', ['LtE']), ('comparators', ['Num'])]": 1, "List -> [('elts', ['Str', 'Str', 'Str', 'Dict']), ('ctx', 'Load')]": 1, "For -> [('target', 'Name'), ('iter', 'List'), ('body', ['Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'For', 'Assign']), ('orelse', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Expr', 'If', 'TryExcept', 'Raise']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'ImportFrom', 'If', 'Assign', 'Assign', 'Assign', 'For', 'While']), ('decorator_list', [])]": 1, "TryExcept -> [('body', ['Expr']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 33, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'For', 'Expr', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'str'), ('defaults', ['Name', 'Name', 'Num'])]": 1, "TryExcept -> [('body', ['Assign', 'Expr', 'Assign', 'Assign', 'Expr']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 1, "GeneratorExp -> [('elt', 'Call'), ('generators', ['comprehension'])]": 8, "Call -> [('func', 'Attribute'), ('args', ['Num', 'Name', 'Num', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'If', 'If', 'Assign', 'Assign', 'Assert', 'Assign', 'Assign', 'Assign', 'While', 'Expr', 'Expr', 'If', 'Expr', 'Return']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'While', 'FunctionDef', 'Expr', 'If', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'For', 'Expr', 'Assign']), ('orelse', [])]": 1, "Call -> [('func', 'Name'), ('args', []), ('keywords', []), ('starargs', 'Name'), ('kwargs', 'Name')]": 8, "BoolOp -> [('op', 'Or'), ('values', ['Name', 'List'])]": 4, "comprehension -> [('target', 'Name'), ('iter', 'Name'), ('ifs', [])]": 82, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "If -> [('test', 'BoolOp'), ('body', ['Expr', 'Expr', 'Expr']), ('orelse', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Name', 'Name', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 19, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Name'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'If', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'While', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'Call'), ('body', ['Assign', 'If', 'Assign', 'Assign', 'If', 'For']), ('orelse', [])]": 1, "ExceptHandler -> [('type', 'Tuple'), ('name', 'NoneType'), ('body', ['Expr'])]": 3, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Attribute', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 4, "BinOp -> [('left', 'Attribute'), ('op', 'BitOr'), ('right', 'Attribute')]": 14, "Call -> [('func', 'Name'), ('args', ['Name', 'BinOp', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "If -> [('test', 'Call'), ('body', ['Return']), ('orelse', ['Assign', 'Expr', 'Return'])]": 1, "Compare -> [('left', 'Str'), ('ops', ['In']), ('comparators', ['Name'])]": 52, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'TryExcept', 'TryExcept', 'TryExcept']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Str', 'Attribute', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'TryExcept', 'TryExcept', 'Assign', 'If', 'Expr', 'Expr', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'Name'), ('body', ['AugAssign']), ('orelse', ['AugAssign'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "Compare -> [('left', 'Name'), ('ops', ['In']), ('comparators', ['Tuple'])]": 7, "If -> [('test', 'BoolOp'), ('body', ['Expr']), ('orelse', [])]": 35, "Call -> [('func', 'Name'), ('args', ['Num', 'Num', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 7, "Call -> [('func', 'Attribute'), ('args', ['Call', 'Call', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Expr', 'Expr', 'If']), ('orelse', [])]": 2, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['If', 'TryExcept', 'TryExcept', 'AugAssign']), ('orelse', [])]": 1, "If -> [('test', 'BoolOp'), ('body', ['Expr']), ('orelse', ['If'])]": 4, "Module -> [('body', ['Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef'])]": 1, "Call -> [('func', 'Name'), ('args', ['Name', 'Str', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Call -> [('func', 'Attribute'), ('args', ['Call', 'Name', 'Num', 'Num', 'Num', 'Tuple', 'Tuple']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name', 'Name']), ('body', ['FunctionDef']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', []), ('keywords', []), ('starargs', 'Subscript'), ('kwargs', 'NoneType')]": 1, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 3, "Call -> [('func', 'Attribute'), ('args', ['Subscript', 'Name', 'Subscript']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Call -> [('func', 'Name'), ('args', ['Name', 'Attribute']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Subscript', 'Tuple']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 64, "Call -> [('func', 'Name'), ('args', ['Str', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 5, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Str', 'Str', 'Str', 'Attribute', 'Str', 'Str'])]": 3, "For -> [('target', 'Tuple'), ('iter', 'Attribute'), ('body', ['Assign', 'Assign', 'Expr']), ('orelse', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Name', 'Attribute', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "List -> [('elts', ['Str', 'Str', 'Str', 'Str', 'Call']), ('ctx', 'Load')]": 1, "Call -> [('func', 'Attribute'), ('args', ['Call', 'List']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 29, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "In -> <NULL>": 205, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 4, "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['If']), ('orelse', ['Expr', 'Assign', 'Expr', 'Expr'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Num', 'Name', 'Tuple']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Call -> [('func', 'Name'), ('args', ['Subscript', 'Str']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Return']), ('decorator_list', ['Name'])]": 15, "If -> [('test', 'Call'), ('body', ['Print', 'Raise']), ('orelse', [])]": 1, "AugAssign -> [('target', 'Attribute'), ('op', 'Add'), ('value', 'Call')]": 1, "Call -> [('func', 'Attribute'), ('args', ['Str', 'List']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 9, "Call -> [('func', 'Attribute'), ('args', ['Str', 'Attribute', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "If -> [('test', 'Call'), ('body', ['Assert', 'Expr']), ('orelse', ['Assert', 'Expr'])]": 1, "Compare -> [('left', 'Name'), ('ops', ['NotIn']), ('comparators', ['Attribute'])]": 6, "ClassDef -> [('name', 'str'), ('bases', []), ('body', ['FunctionDef']), ('decorator_list', [])]": 6, "Dict -> [('keys', ['Num', 'Num', 'Num']), ('values', ['Str', 'Str', 'Str'])]": 1, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Expr', 'FunctionDef', 'Assign', 'Assign', 'FunctionDef', 'Expr']), ('orelse', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Name', 'Str', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 28, "ExtSlice -> [('dims', ['Slice', 'Slice', 'Index'])]": 8, "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['BinOp', 'Call', 'Name'])]": 1, "BinOp -> [('left', 'Name'), ('op', 'Add'), ('right', 'Call')]": 15, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assert', 'For', 'Return']), ('decorator_list', ['Attribute'])]": 1, "BinOp -> [('left', 'Str'), ('op', 'Mult'), ('right', 'Name')]": 9, "If -> [('test', 'Attribute'), ('body', ['Return']), ('orelse', ['Return'])]": 6, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'Assign', 'Assign', 'Print', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Print', 'Assign', 'Print', 'Expr']), ('decorator_list', [])]": 1, "If -> [('test', 'UnaryOp'), ('body', ['TryExcept']), ('orelse', [])]": 2, "Call -> [('func', 'Name'), ('args', ['BinOp', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "If -> [('test', 'Name'), ('body', ['If', 'Return']), ('orelse', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Name', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 51, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['BoolOp', 'BinOp', 'BinOp'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'TryExcept']), ('decorator_list', [])]": 3, "If -> [('test', 'BoolOp'), ('body', ['Expr', 'Expr']), ('orelse', ['If'])]": 1, "Call -> [('func', 'Name'), ('args', ['Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 468, "Compare -> [('left', 'Call'), ('ops', ['In']), ('comparators', ['List'])]": 1, "Tuple -> [('elts', ['Tuple', 'Tuple']), ('ctx', 'Load')]": 6, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Str']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'Name')]": 1, "List -> [('elts', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('ctx', 'Load')]": 6, "BinOp -> [('left', 'Attribute'), ('op', 'Sub'), ('right', 'Num')]": 2, "Call -> [('func', 'Attribute'), ('args', ['Subscript', 'Subscript']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 8, "If -> [('test', 'Compare'), ('body', ['Expr']), ('orelse', [])]": 87, "For -> [('target', 'Tuple'), ('iter', 'Attribute'), ('body', ['FunctionDef', 'Expr']), ('orelse', [])]": 1, "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'Expr', 'Expr']), ('orelse', [])]": 2, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'If', 'Assign', 'If', 'If', 'Assign', 'Assign', 'Assign']), ('orelse', [])]": 1, "If -> [('test', 'Name'), ('body', ['Assign', 'Assign', 'Assign', 'Return']), ('orelse', [])]": 1, "Compare -> [('left', 'Subscript'), ('ops', ['NotEq']), ('comparators', ['Num'])]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Assert', 'Assign']), ('orelse', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Pass']), ('orelse', ['If'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Call', 'Name', 'Name']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'TryExcept', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Return']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 5, "If -> [('test', 'Compare'), ('body', ['Assign']), ('orelse', ['Assign', 'Assign'])]": 5, "If -> [('test', 'Compare'), ('body', ['Assign', 'If']), ('orelse', ['Print', 'Return'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'If', 'If', 'Return']), ('decorator_list', [])]": 1, "List -> [('elts', ['Str', 'Str']), ('ctx', 'Load')]": 42, "Dict -> [('keys', ['Str']), ('values', ['Call'])]": 20, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Delete', 'Expr', 'Delete', 'Expr', 'Delete', 'Expr']), ('decorator_list', [])]": 1, "BinOp -> [('left', 'Str'), ('op', 'Mod'), ('right', 'Attribute')]": 75, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'If', 'If']), ('orelse', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'While', 'Expr']), ('orelse', ['Assign'])]": 1, "BinOp -> [('left', 'Call'), ('op', 'Sub'), ('right', 'Name')]": 5, "Compare -> [('left', 'Attribute'), ('ops', ['Eq']), ('comparators', ['Call'])]": 2, "TryExcept -> [('body', ['If', 'Assign', 'Assign']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 1, "With -> [('context_expr', 'Call'), ('optional_vars', 'NoneType'), ('body', ['Expr', 'ImportFrom'])]": 1, "Tuple -> [('elts', ['Compare']), ('ctx', 'Load')]": 1, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'ClassDef'])]": 1, "ExceptHandler -> [('type', 'Tuple'), ('name', 'NoneType'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Expr'])]": 1, "List -> [('elts', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Num', 'Name']), ('ctx', 'Load')]": 1, "Tuple -> [('elts', ['List', 'List']), ('ctx', 'Load')]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Str', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 3, "Index -> [('value', 'Tuple')]": 91, "Assign -> [('targets', ['Subscript', 'Name']), ('value', 'Call')]": 3, "Call -> [('func', 'Attribute'), ('args', ['Str', 'BinOp']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "Assign -> [('targets', ['Subscript', 'Subscript']), ('value', 'Num')]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Assign', 'If', 'If', 'Expr']), ('orelse', [])]": 1, "List -> [('elts', ['Str', 'Str', 'Call']), ('ctx', 'Load')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Expr', 'Assign', 'Expr', 'If', 'Assign', 'If']), ('decorator_list', [])]": 1, "ExceptHandler -> [('type', 'NoneType'), ('name', 'NoneType'), ('body', ['Expr'])]": 4, "Call -> [('func', 'Name'), ('args', ['ListComp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 29, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['FunctionDef', 'Return']), ('decorator_list', [])]": 7, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Num', 'Num', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 3, "Tuple -> [('elts', ['Tuple', 'Tuple', 'Call']), ('ctx', 'Load')]": 1, "If -> [('test', 'Name'), ('body', ['If', 'If']), ('orelse', [])]": 2, "Call -> [('func', 'Name'), ('args', ['Call', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 5, "Assign -> [('targets', ['Name']), ('value', 'BinOp')]": 353, "If -> [('test', 'Compare'), ('body', ['Assign', 'If', 'Expr', 'Expr', 'Expr']), ('orelse', ['If'])]": 1, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['If', 'Expr', 'Assign', 'Assign', 'Assign']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 3, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'If'])]": 1, "Lambda -> [('args', 'arguments'), ('body', 'Call')]": 70, "BinOp -> [('left', 'Subscript'), ('op', 'Mult'), ('right', 'Subscript')]": 2, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "Call -> [('func', 'Name'), ('args', ['BinOp', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 4, "Tuple -> [('elts', ['Call', 'Name']), ('ctx', 'Load')]": 12, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'If', 'Print', 'Assign', 'Assign', 'Assign', 'If', 'If', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Print', 'Assign']), ('decorator_list', ['Name', 'Attribute'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'AugAssign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'List'), ('body', ['Expr', 'Expr', 'For']), ('orelse', [])]": 2, "Call -> [('func', 'Name'), ('args', ['Tuple', 'Call', 'Tuple']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'TryExcept', 'Expr', 'Assign']), ('orelse', [])]": 1, "Tuple -> [('elts', ['Attribute', 'Attribute', 'Attribute']), ('ctx', 'Store')]": 1, "Call -> [('func', 'Name'), ('args', ['List']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'AugAssign', 'AugAssign', 'AugAssign', 'AugAssign', 'AugAssign', 'Return']), ('decorator_list', [])]": 1, "keyword -> [('arg', 'str'), ('value', 'BinOp')]": 34, "Call -> [('func', 'Attribute'), ('args', ['Subscript', 'Name', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'Assign', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'FunctionDef', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "BinOp -> [('left', 'Name'), ('op', 'Pow'), ('right', 'Name')]": 4, "BinOp -> [('left', 'Name'), ('op', 'Mult'), ('right', 'Call')]": 12, "BinOp -> [('left', 'Call'), ('op', 'Sub'), ('right', 'Call')]": 8, "BinOp -> [('left', 'Call'), ('op', 'Mod'), ('right', 'Tuple')]": 2, "If -> [('test', 'Compare'), ('body', ['Import', 'FunctionDef', 'FunctionDef', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'For', 'For', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'FunctionDef', 'Assign', 'Assign', 'For', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('orelse', ['Print'])]": 1, "comprehension -> [('target', 'Tuple'), ('iter', 'Call'), ('ifs', [])]": 14, "Compare -> [('left', 'Attribute'), ('ops', ['NotEq']), ('comparators', ['Name'])]": 5, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'Expr', 'Return']), ('decorator_list', [])]": 1, "BinOp -> [('left', 'Call'), ('op', 'Mult'), ('right', 'Subscript')]": 1, "If -> [('test', 'Call'), ('body', ['Expr', 'Return']), ('orelse', [])]": 4, "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['Expr', 'Expr']), ('orelse', [])]": 2, "BinOp -> [('left', 'Num'), ('op', 'Pow'), ('right', 'UnaryOp')]": 1, "TryExcept -> [('body', ['Expr']), ('handlers', ['ExceptHandler']), ('orelse', ['If'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'If', 'Assign', 'Assign', 'Assign', 'If', 'Expr', 'If']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Num', 'Call', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "If -> [('test', 'Attribute'), ('body', ['Assign', 'Assign', 'Assign', 'Return']), ('orelse', [])]": 1, "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'TryExcept', 'Import', 'ImportFrom', 'ImportFrom', 'Assign', 'TryExcept', 'Assign', 'ClassDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'ClassDef', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'If'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Attribute', 'Num', 'Num', 'Num', 'Num', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Attribute', 'Attribute']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'For']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Str', 'Lambda']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Num', 'Name', 'Num'])]": 1, "Call -> [('func', 'Name'), ('args', ['Name', 'Call']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "Call -> [('func', 'Attribute'), ('args', ['BinOp', 'Subscript', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Call']), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'Name'), ('kwargs', 'Name')]": 1, "Call -> [('func', 'Attribute'), ('args', ['Str']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 46, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'If']), ('orelse', ['Assign'])]": 1, "Subscript -> [('value', 'Attribute'), ('slice', 'Index'), ('ctx', 'Load')]": 373, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Expr', 'Return']), ('orelse', ['Return'])]": 1, "Call -> [('func', 'Name'), ('args', ['Call']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 4, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'For', 'Return']), ('decorator_list', [])]": 1, "Assign -> [('targets', ['Name', 'Name']), ('value', 'Num')]": 2, "If -> [('test', 'Name'), ('body', ['For', 'Expr']), ('orelse', [])]": 1, "BinOp -> [('left', 'Name'), ('op', 'Div'), ('right', 'Subscript')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'If', 'Assign', 'If', 'For', 'Return']), ('decorator_list', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Name', 'Name', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 3, "If -> [('test', 'Attribute'), ('body', ['If', 'Return']), ('orelse', [])]": 1, "Compare -> [('left', 'Call'), ('ops', ['Lt']), ('comparators', ['Call'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Str']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]": 2, "BinOp -> [('left', 'Call'), ('op', 'Add'), ('right', 'Num')]": 19, "ClassDef -> [('name', 'str'), ('bases', []), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 2, "List -> [('elts', ['Num', 'Num', 'Num', 'Num']), ('ctx', 'Load')]": 11, "comprehension -> [('target', 'Name'), ('iter', 'Name'), ('ifs', ['Subscript'])]": 1, "If -> [('test', 'Name'), ('body', ['Assign', 'If', 'Assign']), ('orelse', ['Assign', 'Assign', 'Assign'])]": 1, "Tuple -> [('elts', ['Tuple', 'Name', 'Name']), ('ctx', 'Store')]": 2, "Tuple -> [('elts', ['Attribute', 'Attribute']), ('ctx', 'Store')]": 9, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 3, "Tuple -> [('elts', ['Str', 'Num']), ('ctx', 'Load')]": 11, "If -> [('test', 'Compare'), ('body', ['If', 'Assign']), ('orelse', ['Assign'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Return']), ('decorator_list', ['Name'])]": 1, "Tuple -> [('elts', ['Tuple', 'Name']), ('ctx', 'Store')]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'For', 'For', 'Assign', 'Assign']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'If', 'Assign', 'If', 'If', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'TryExcept']), ('decorator_list', [])]": 1, "Return -> [('value', 'Tuple')]": 72, "Assign -> [('targets', ['Subscript']), ('value', 'List')]": 11, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'ClassDef'])]": 1, "Call -> [('func', 'Name'), ('args', ['Subscript', 'Tuple']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Expr', 'If']), ('decorator_list', [])]": 1, "arguments -> [('args', ['Name', 'Name']), ('vararg', 'str'), ('kwarg', 'str'), ('defaults', ['Name'])]": 4, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Expr', 'If', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Expr', 'Assign', 'If']), ('decorator_list', [])]": 1, "Assign -> [('targets', ['Name', 'List']), ('value', 'Call')]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'Import', 'TryExcept', 'ImportFrom', 'ImportFrom', 'Assign', 'FunctionDef', 'ClassDef'])]": 1, "ImportFrom -> [('module', 'str'), ('names', ['alias', 'alias', 'alias', 'alias', 'alias']), ('level', 'int')]": 7, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'For']), ('decorator_list', [])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Call', 'Call', 'Call', 'Call'])]": 1, "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'With', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'FunctionDef', 'ClassDef', 'ClassDef', 'ClassDef', 'FunctionDef'])]": 1, "For -> [('target', 'Name'), ('iter', 'List'), ('body', ['Assign', 'Assign', 'For', 'Assign', 'Expr', 'Assign', 'For']), ('orelse', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 2, "TryExcept -> [('body', ['Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'For', 'Return']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 1, "BinOp -> [('left', 'Str'), ('op', 'Add'), ('right', 'Str')]": 1, "Assign -> [('targets', ['Tuple']), ('value', 'Name')]": 38, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'If', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]": 1, "keyword -> [('arg', 'str'), ('value', 'Attribute')]": 151, "Dict -> [('keys', ['Str', 'Name', 'Str', 'Str']), ('values', ['Name', 'Name', 'Name', 'Attribute'])]": 1, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['If', 'Assign', 'Assign', 'If']), ('orelse', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['List']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Str', 'Str', 'Str', 'Call', 'Call', 'Str'])]": 2, "Tuple -> [('elts', ['Attribute', 'Attribute', 'Attribute', 'Attribute']), ('ctx', 'Load')]": 11, "For -> [('target', 'Name'), ('iter', 'Subscript'), ('body', ['If']), ('orelse', [])]": 2, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Assign', 'Assign']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'If', 'If', 'If', 'If', 'Return']), ('decorator_list', [])]": 1, "Subscript -> [('value', 'Name'), ('slice', 'ExtSlice'), ('ctx', 'Store')]": 21, "TryExcept -> [('body', ['If', 'Expr']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'For', 'Expr']), ('decorator_list', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Str', 'Call']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "BoolOp -> [('op', 'And'), ('values', ['UnaryOp', 'Name'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'Expr', 'Assign']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'If', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'If', 'Expr', 'Assign', 'FunctionDef', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'If', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'TryExcept', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'FunctionDef', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Return']), ('decorator_list', [])]": 1, "BinOp -> [('left', 'Attribute'), ('op', 'Pow'), ('right', 'Attribute')]": 1, "If -> [('test', 'BoolOp'), ('body', ['Raise']), ('orelse', [])]": 15, "If -> [('test', 'Name'), ('body', ['Assign', 'Expr', 'Expr', 'Return']), ('orelse', [])]": 1, "BinOp -> [('left', 'Str'), ('op', 'Mult'), ('right', 'BinOp')]": 5, "Tuple -> [('elts', ['Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple']), ('ctx', 'Load')]": 1, "Call -> [('func', 'Name'), ('args', ['Str', 'Str', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 4, "Call -> [('func', 'Name'), ('args', ['Subscript', 'Subscript', 'UnaryOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Call -> [('func', 'Name'), ('args', ['Str', 'Attribute']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "Compare -> [('left', 'Name'), ('ops', ['NotEq']), ('comparators', ['Name'])]": 14, "If -> [('test', 'Compare'), ('body', ['If', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'Assign', 'Expr', 'Expr', 'For']), ('orelse', [])]": 1, "BinOp -> [('left', 'Subscript'), ('op', 'Sub'), ('right', 'Subscript')]": 25, "Tuple -> [('elts', ['BinOp', 'Name']), ('ctx', 'Load')]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Delete', 'If']), ('decorator_list', [])]": 1, "TryFinally -> [('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'If', 'Return']), ('finalbody', ['Expr'])]": 1, "If -> [('test', 'Call'), ('body', ['For']), ('orelse', ['Assign', 'Assign', 'Expr'])]": 1, "Print -> [('dest', 'NoneType'), ('values', ['Str', 'Name']), ('nl', 'bool')]": 20, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Print', 'Expr']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Name', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 12, "Assign -> [('targets', ['Subscript']), ('value', 'BinOp')]": 45, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'For', 'Expr', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'Name'), ('body', ['Assert', 'For']), ('orelse', [])]": 1, "Assert -> [('test', 'Compare'), ('msg', 'Str')]": 5, "With -> [('context_expr', 'Call'), ('optional_vars', 'Name'), ('body', ['Expr', 'ImportFrom', 'Assert'])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 4, "If -> [('test', 'UnaryOp'), ('body', ['If', 'TryExcept', 'If', 'Assign']), ('orelse', [])]": 1, "Compare -> [('left', 'Call'), ('ops', ['NotEq']), ('comparators', ['Name'])]": 4, "If -> [('test', 'UnaryOp'), ('body', ['Assign']), ('orelse', ['Assign'])]": 4, "For -> [('target', 'Name'), ('iter', 'Tuple'), ('body', ['TryExcept']), ('orelse', [])]": 1, "If -> [('test', 'Call'), ('body', ['If', 'Assign', 'Assign', 'Raise']), ('orelse', [])]": 1, "Tuple -> [('elts', ['Attribute', 'Str', 'Name', 'Str']), ('ctx', 'Load')]": 1, "BinOp -> [('left', 'Subscript'), ('op', 'Sub'), ('right', 'Num')]": 5, "Compare -> [('left', 'Call'), ('ops', ['Lt']), ('comparators', ['Name'])]": 5, "If -> [('test', 'Name'), ('body', ['Assign', 'Assign', 'If', 'Assign']), ('orelse', ['If'])]": 1, "If -> [('test', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'Assign']), ('orelse', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['BinOp', 'Call', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Delete', 'Expr', 'Assign', 'Assign', 'Expr', 'Delete', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "TryExcept -> [('body', ['Assign', 'Assign', 'If', 'If', 'If']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 1, "List -> [('elts', ['Name', 'Name', 'Str']), ('ctx', 'Load')]": 8, "Compare -> [('left', 'Name'), ('ops', ['In']), ('comparators', ['List'])]": 11, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "IfExp -> [('test', 'Attribute'), ('body', 'Attribute'), ('orelse', 'Str')]": 1, "Dict -> [('keys', ['Num', 'Num']), ('values', ['Num', 'Num'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If']), ('decorator_list', ['Name'])]": 3, "Index -> [('value', 'Num')]": 588, "Lambda -> [('args', 'arguments'), ('body', 'Subscript')]": 5, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'FunctionDef', 'ClassDef', 'ClassDef', 'Assign', 'FunctionDef']), ('decorator_list', [])]": 1, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['If', 'Assign', 'If']), ('orelse', [])]": 2, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 10, "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['If', 'Raise'])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Name', 'Name', 'Name'])]": 1, "BinOp -> [('left', 'Name'), ('op', 'Div'), ('right', 'Name')]": 20, "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['Print', 'Print', 'Print']), ('orelse', [])]": 1, "BinOp -> [('left', 'List'), ('op', 'Mult'), ('right', 'Attribute')]": 3, "If -> [('test', 'Name'), ('body', ['Assign', 'If', 'If', 'Assign', 'Expr']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Print', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'For']), ('decorator_list', [])]": 1, "Tuple -> [('elts', ['Str']), ('ctx', 'Load')]": 20, "If -> [('test', 'UnaryOp'), ('body', ['Return']), ('orelse', ['If'])]": 2, "BinOp -> [('left', 'BoolOp'), ('op', 'Add'), ('right', 'Call')]": 1, "BinOp -> [('left', 'BinOp'), ('op', 'Add'), ('right', 'BinOp')]": 27, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Str', 'Name', 'Name']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "BinOp -> [('left', 'Name'), ('op', 'Mod'), ('right', 'Name')]": 10, "Tuple -> [('elts', ['BoolOp', 'Attribute']), ('ctx', 'Load')]": 1, "While -> [('test', 'Name'), ('body', ['Assign', 'For', 'Expr', 'If', 'Expr']), ('orelse', [])]": 1, "Compare -> [('left', 'Name'), ('ops', ['LtE']), ('comparators', ['Name'])]": 5, "Call -> [('func', 'Attribute'), ('args', ['Name']), ('keywords', []), ('starargs', 'Name'), ('kwargs', 'NoneType')]": 1, "Tuple -> [('elts', ['Name']), ('ctx', 'Load')]": 28, "Assert -> [('test', 'UnaryOp'), ('msg', 'NoneType')]": 5, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'FunctionDef', 'Assign', 'TryFinally']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'Name')]": 2, "For -> [('target', 'Tuple'), ('iter', 'List'), ('body', ['Assign', 'Expr']), ('orelse', [])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Num'])]": 2, "Call -> [('func', 'Attribute'), ('args', ['Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 263, "Compare -> [('left', 'Attribute'), ('ops', ['LtE']), ('comparators', ['Name'])]": 3, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Name', 'Num', 'Name', 'Name'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'Name')]": 3, "Call -> [('func', 'Name'), ('args', ['BoolOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 7, "For -> [('target', 'Name'), ('iter', 'Tuple'), ('body', ['Assign', 'If']), ('orelse', [])]": 3, "Raise -> [('type', 'Name'), ('inst', 'Name'), ('tback', 'NoneType')]": 4, "Call -> [('func', 'Name'), ('args', ['Name', 'Name', 'Name', 'Str', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Break']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Raise']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 11, "Call -> [('func', 'Attribute'), ('args', ['Tuple']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 88, "Call -> [('func', 'Attribute'), ('args', ['Call', 'Num', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 8, "Slice -> [('lower', 'NoneType'), ('upper', 'NoneType'), ('step', 'Num')]": 8, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Expr']), ('decorator_list', [])]": 2, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Num', 'Name', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "TryExcept -> [('body', ['Assign', 'For']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 1, "BinOp -> [('left', 'Str'), ('op', 'Add'), ('right', 'Call')]": 19, "BinOp -> [('left', 'Name'), ('op', 'Sub'), ('right', 'Num')]": 52, "Call -> [('func', 'Name'), ('args', ['Name', 'Name']), ('keywords', ['keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "TryExcept -> [('body', ['Assign']), ('handlers', ['ExceptHandler']), ('orelse', ['If', 'If'])]": 1, "BinOp -> [('left', 'BinOp'), ('op', 'Add'), ('right', 'Name')]": 39, "If -> [('test', 'Compare'), ('body', ['Expr', 'Assign', 'Expr', 'Expr']), ('orelse', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'For', 'If', 'If', 'Return']), ('decorator_list', [])]": 1, "Dict -> [('keys', ['Attribute']), ('values', ['Name'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ClassDef', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "Dict -> [('keys', ['BinOp']), ('values', ['Call'])]": 1, "If -> [('test', 'Compare'), ('body', ['If', 'Assign', 'FunctionDef', 'Assign', 'Assign', 'Expr', 'Expr', 'For']), ('orelse', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name', 'Name', 'Name', 'Name', 'Name']), ('body', ['Expr', 'FunctionDef']), ('decorator_list', [])]": 1, "Assign -> [('targets', ['Name']), ('value', 'Call')]": 3626, "Print -> [('dest', 'NoneType'), ('values', ['BinOp', 'Str']), ('nl', 'bool')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Expr', 'If', 'Return']), ('decorator_list', [])]": 1, "Call -> [('func', 'Call'), ('args', []), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 5, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['For', 'For', 'For']), ('decorator_list', [])]": 1, "Call -> [('func', 'Name'), ('args', ['BinOp']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr']), ('orelse', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Call', 'Tuple']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Dict -> [('keys', ['Str']), ('values', ['BinOp'])]": 1, "Mod -> <NULL>": 612, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Name']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "TryExcept -> [('body', ['Assign']), ('handlers', ['ExceptHandler']), ('orelse', ['If'])]": 2, "If -> [('test', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'Assign']), ('orelse', ['Assign'])]": 1, "If -> [('test', 'UnaryOp'), ('body', ['Print', 'Expr']), ('orelse', [])]": 2, "List -> [('elts', ['Dict']), ('ctx', 'Load')]": 10, "If -> [('test', 'Name'), ('body', ['Assign', 'For']), ('orelse', ['Assign'])]": 1, "UnaryOp -> [('op', 'Invert'), ('operand', 'Call')]": 2, "Assign -> [('targets', ['Name']), ('value', 'Tuple')]": 49, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Expr', 'For']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', ['Name'])]": 1, "If -> [('test', 'Attribute'), ('body', ['Assign']), ('orelse', ['Assign', 'If'])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'For']), ('orelse', ['For'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['TryExcept', 'Return']), ('decorator_list', [])]": 2, "List -> [('elts', ['Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call']), ('ctx', 'Load')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'For', 'Return']), ('decorator_list', [])]": 1, "TryExcept -> [('body', ['Assign', 'For', 'Assign', 'Return']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Str', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'For', 'Expr', 'For', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Expr', 'For']), ('orelse', [])]": 1, "If -> [('test', 'BoolOp'), ('body', ['Expr', 'Expr', 'Expr', 'Expr']), ('orelse', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Num', 'BinOp', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 3, "BoolOp -> [('op', 'Or'), ('values', ['BoolOp', 'Num'])]": 1, "Call -> [('func', 'Name'), ('args', []), ('keywords', []), ('starargs', 'Subscript'), ('kwargs', 'NoneType')]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Return']), ('decorator_list', [])]": 3, "TryFinally -> [('body', ['Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'AugAssign', 'Expr', 'For', 'Expr', 'Return']), ('finalbody', ['Expr', 'Expr'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Return']), ('decorator_list', [])]": 70, "Raise -> [('type', 'Name'), ('inst', 'Call'), ('tback', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'For', 'For']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Expr']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'For', 'Assign', 'For']), ('decorator_list', [])]": 1, "Dict -> [('keys', ['Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute']), ('values', ['Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num'])]": 1, "Dict -> [('keys', ['Str']), ('values', ['Subscript'])]": 5, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['FunctionDef', 'Assign', 'FunctionDef']), ('decorator_list', [])]": 1, "List -> [('elts', ['Str', 'Name', 'Name']), ('ctx', 'Load')]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Name', 'BinOp']), ('keywords', ['keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "BinOp -> [('left', 'Attribute'), ('op', 'Mod'), ('right', 'Attribute')]": 1, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Num', 'Num', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Assign -> [('targets', ['Name']), ('value', 'Lambda')]": 14, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'Assign', 'Assign', 'For', 'If', 'Return']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Attribute', 'BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Raise']), ('orelse', [])]": 1, "Tuple -> [('elts', ['Attribute', 'Name', 'Name', 'Name']), ('ctx', 'Load')]": 2, "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['Name', 'Attribute', 'Call'])]": 1, "For -> [('target', 'Tuple'), ('iter', 'List'), ('body', ['Expr']), ('orelse', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', []), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 4, "For -> [('target', 'Name'), ('iter', 'List'), ('body', ['Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr']), ('orelse', [])]": 1, "BinOp -> [('left', 'Subscript'), ('op', 'Sub'), ('right', 'Attribute')]": 1, "Print -> [('dest', 'NoneType'), ('values', ['Subscript', 'BinOp']), ('nl', 'bool')]": 1, "Call -> [('func', 'Attribute'), ('args', ['Str', 'Str', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "List -> [('elts', ['Lambda', 'Lambda', 'Lambda', 'Lambda', 'Lambda', 'Lambda']), ('ctx', 'Load')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Return']), ('decorator_list', [])]": 2, "If -> [('test', 'UnaryOp'), ('body', ['Raise']), ('orelse', [])]": 38, "If -> [('test', 'Call'), ('body', ['Assign']), ('orelse', ['If'])]": 5, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Str']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "If -> [('test', 'BoolOp'), ('body', ['If']), ('orelse', [])]": 6, "Assign -> [('targets', ['Attribute']), ('value', 'BinOp')]": 15, "ExceptHandler -> [('type', 'NoneType'), ('name', 'NoneType'), ('body', ['Import'])]": 1, "BinOp -> [('left', 'Name'), ('op', 'Mod'), ('right', 'Tuple')]": 4, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'ImportFrom', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'FunctionDef', 'If'])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Print', 'Assign', 'Assign', 'Print', 'Assign', 'Print', 'Print', 'Assign', 'For', 'Assign', 'Print']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'If', 'If', 'Expr', 'TryFinally', 'Return']), ('decorator_list', [])]": 1, "ExceptHandler -> [('type', 'Name'), ('name', 'Name'), ('body', ['Expr', 'Expr', 'Assign', 'If'])]": 1, "BinOp -> [('left', 'BinOp'), ('op', 'Div'), ('right', 'Attribute')]": 2, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign']), ('orelse', [])]": 1, "If -> [('test', 'BoolOp'), ('body', ['TryExcept', 'TryExcept']), ('orelse', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'For', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "comprehension -> [('target', 'Name'), ('iter', 'Tuple'), ('ifs', ['Name'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name']), ('keywords', ['keyword', 'keyword']), ('starargs', 'Name'), ('kwargs', 'Name')]": 1, "Continue -> <NULL>": 88, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'For', 'For', 'Expr']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'For']), ('orelse', [])]": 2, "If -> [('test', 'Call'), ('body', ['Assign', 'Return']), ('orelse', [])]": 2, "If -> [('test', 'Name'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'If']), ('orelse', [])]": 1, "BoolOp -> [('op', 'And'), ('values', ['Attribute', 'Name'])]": 1, "TryExcept -> [('body', ['Assign', 'If']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 9, "If -> [('test', 'UnaryOp'), ('body', ['ImportFrom', 'Assign']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'For', 'For', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Return']), ('decorator_list', [])]": 6, "Call -> [('func', 'Name'), ('args', ['Subscript', 'Subscript']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "If -> [('test', 'Attribute'), ('body', ['AugAssign']), ('orelse', [])]": 2, "Call -> [('func', 'Name'), ('args', ['Num', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 5, "Tuple -> [('elts', ['Name', 'BinOp']), ('ctx', 'Load')]": 4, "Dict -> [('keys', ['Num', 'Num']), ('values', ['BinOp', 'BinOp'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Call', 'Attribute']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['AugAssign']), ('orelse', [])]": 3, "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['If', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'Expr', 'If', 'If']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'TryExcept', 'TryExcept', 'If', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'Expr', 'Assign']), ('decorator_list', [])]": 2, "Call -> [('func', 'Attribute'), ('args', ['BinOp', 'BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "BinOp -> [('left', 'Str'), ('op', 'Mod'), ('right', 'Dict')]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Return']), ('decorator_list', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Attribute']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "Slice -> [('lower', 'Name'), ('upper', 'BinOp'), ('step', 'NoneType')]": 1, "BoolOp -> [('op', 'And'), ('values', ['Name', 'Attribute'])]": 4, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'If']), ('decorator_list', [])]": 2, "Name -> [('id', 'str'), ('ctx', 'Del')]": 6, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Expr']), ('orelse', [])]": 27, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'ClassDef', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "Tuple -> [('elts', ['Name', 'Str']), ('ctx', 'Load')]": 6, "arguments -> [('args', ['Name']), ('vararg', 'NoneType'), ('kwarg', 'str'), ('defaults', [])]": 41, "Call -> [('func', 'Name'), ('args', ['List']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'Attribute')]": 5, "If -> [('test', 'Compare'), ('body', ['Expr', 'If']), ('orelse', [])]": 2, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Num', 'Num', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "BinOp -> [('left', 'BinOp'), ('op', 'Mult'), ('right', 'Subscript')]": 5, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'If', 'If', 'If', 'Expr']), ('orelse', [])]": 1, "For -> [('target', 'Tuple'), ('iter', 'Name'), ('body', ['For']), ('orelse', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "BoolOp -> [('op', 'And'), ('values', ['Attribute', 'Str'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Str', 'Str']), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "Assign -> [('targets', ['Attribute', 'Name']), ('value', 'Call')]": 8, "Call -> [('func', 'Attribute'), ('args', ['Call', 'List', 'Lambda']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 3, "Call -> [('func', 'Name'), ('args', ['Tuple', 'Tuple']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "Call -> [('func', 'Attribute'), ('args', ['Str']), ('keywords', ['keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 19, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'For', 'For', 'Assign']), ('decorator_list', [])]": 1, "If -> [('test', 'Attribute'), ('body', ['Assign']), ('orelse', ['Assign'])]": 6, "While -> [('test', 'Num'), ('body', ['TryExcept']), ('orelse', [])]": 1, "If -> [('test', 'UnaryOp'), ('body', ['Return']), ('orelse', [])]": 42, "ListComp -> [('elt', 'Compare'), ('generators', ['comprehension'])]": 3, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Num', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 6, "BinOp -> [('left', 'BinOp'), ('op', 'Add'), ('right', 'Attribute')]": 11, "If -> [('test', 'Name'), ('body', ['Assign', 'Assign', 'Assign', 'Assign']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'Return']), ('decorator_list', ['Name', 'Call', 'Attribute'])]": 1, "ImportFrom -> [('module', 'str'), ('names', ['alias', 'alias', 'alias']), ('level', 'int')]": 32, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Expr', 'Expr', 'Delete', 'Assign', 'Expr', 'Expr']), ('orelse', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Tuple', 'Name', 'Num', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Str -> [('s', 'unicode')]": 234, "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['Print'])]": 1, "Call -> [('func', 'Name'), ('args', ['Call', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 3, "Compare -> [('left', 'Subscript'), ('ops', ['Gt']), ('comparators', ['Name'])]": 1, "If -> [('test', 'Name'), ('body', ['Assign', 'If', 'Expr', 'Expr', 'Expr', 'Expr']), ('orelse', [])]": 1, "Tuple -> [('elts', ['Str', 'Name', 'Name', 'Name', 'Name']), ('ctx', 'Load')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'While']), ('decorator_list', [])]": 4, "BoolOp -> [('op', 'Or'), ('values', ['Compare', 'Compare', 'Call'])]": 1, "List -> [('elts', ['Str', 'Str', 'Str', 'Str']), ('ctx', 'Load')]": 10, "Attribute -> [('value', 'Subscript'), ('attr', 'str'), ('ctx', 'Store')]": 8, "List -> [('elts', ['Name', 'BinOp', 'BinOp', 'BinOp']), ('ctx', 'Load')]": 4, "Module -> [('body', ['Import', 'TryExcept', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'If', 'Assign', 'ClassDef', 'ClassDef', 'Assign', 'Assign', 'ClassDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'ClassDef', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]": 1, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'TryExcept', 'TryExcept', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'ImportFrom', 'ClassDef', 'ClassDef'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'If', 'Return']), ('decorator_list', [])]": 3, "Call -> [('func', 'Attribute'), ('args', ['Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 407, "Assign -> [('targets', ['Name']), ('value', 'IfExp')]": 9, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', [])]": 12, "BinOp -> [('left', 'BinOp'), ('op', 'Add'), ('right', 'List')]": 1, "Call -> [('func', 'Attribute'), ('args', ['Tuple', 'Attribute', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 28, "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'Assign', 'Return']), ('orelse', [])]": 1, "Tuple -> [('elts', ['Name', 'Call']), ('ctx', 'Load')]": 21, "keyword -> [('arg', 'str'), ('value', 'Str')]": 396, "Call -> [('func', 'Name'), ('args', ['Attribute', 'Subscript']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Delete']), ('orelse', ['Assign'])]": 1, "BoolOp -> [('op', 'And'), ('values', ['Name', 'Num'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'Assign', 'Expr', 'Return']), ('decorator_list', ['Name', 'Name'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Return']), ('decorator_list', [])]": 1, "Dict -> [('keys', ['Str']), ('values', ['Num'])]": 7, "Call -> [('func', 'Name'), ('args', ['BinOp', 'Call']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 4, "Call -> [('func', 'Name'), ('args', ['Num', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 3, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'ClassDef', 'FunctionDef']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Call', 'Name', 'Name', 'Tuple', 'Tuple']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('orelse', [])]": 1, "Assign -> [('targets', ['Attribute', 'Name']), ('value', 'Num')]": 1, "Call -> [('func', 'Attribute'), ('args', ['Subscript']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 109, "Call -> [('func', 'Name'), ('args', []), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "Print -> [('dest', 'NoneType'), ('values', ['Str', 'Call', 'Call']), ('nl', 'bool')]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'FunctionDef', 'FunctionDef', 'ClassDef']), ('decorator_list', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Name', 'Attribute', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 4, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'If', 'For']), ('orelse', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Tuple', 'Lambda']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 10, "Tuple -> [('elts', ['Tuple', 'Tuple', 'Tuple']), ('ctx', 'Load')]": 7, "Raise -> [('type', 'Name'), ('inst', 'NoneType'), ('tback', 'NoneType')]": 12, "Compare -> [('left', 'Subscript'), ('ops', ['Gt']), ('comparators', ['Num'])]": 6, "List -> [('elts', ['Call', 'Call', 'Call', 'Call']), ('ctx', 'Load')]": 3, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign'])]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'Import', 'ImportFrom', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'ClassDef', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'If'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "Compare -> [('left', 'Call'), ('ops', ['In']), ('comparators', ['Name'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Lambda']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "Compare -> [('left', 'Name'), ('ops', ['Eq']), ('comparators', ['Attribute'])]": 8, "If -> [('test', 'Call'), ('body', ['Assign', 'Assign']), ('orelse', [])]": 5, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Import', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "BoolOp -> [('op', 'Or'), ('values', ['Call', 'UnaryOp'])]": 1, "TryExcept -> [('body', ['Assign', 'If', 'Assign', 'For', 'If']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 1, "If -> [('test', 'Call'), ('body', ['Assign', 'If', 'Return']), ('orelse', [])]": 2, "ExceptHandler -> [('type', 'Attribute'), ('name', 'Tuple'), ('body', ['Expr'])]": 1, "Module -> [('body', ['Import', 'Expr', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Call', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 3, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Name', 'Name'])]": 4, "Compare -> [('left', 'Attribute'), ('ops', ['NotEq']), ('comparators', ['Attribute'])]": 6, "List -> [('elts', []), ('ctx', 'Load')]": 256, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'ClassDef', 'FunctionDef', 'Assign', 'Assign', 'Assign'])]": 1, "TryExcept -> [('body', ['ImportFrom', 'Assign', 'Assign']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'If', 'Return']), ('decorator_list', [])]": 1, "List -> [('elts', ['Num', 'Num']), ('ctx', 'Load')]": 26, "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('orelse', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Expr', 'Assign', 'Expr']), ('orelse', ['If'])]": 1, "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'If']), ('orelse', [])]": 1, "ExceptHandler -> [('type', 'Name'), ('name', 'Name'), ('body', ['ImportFrom', 'Assign', 'Expr', 'Expr', 'Expr'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'If', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Expr', 'For', 'Assign', 'Assign', 'If', 'Expr', 'Expr', 'Return']), ('decorator_list', ['Attribute'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assert', 'Assign', 'Return']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Subscript', 'Attribute']), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Num', 'Num', 'Str', 'Str', 'Num', 'Num', 'Call', 'Call', 'Num', 'Num'])]": 1, "BinOp -> [('left', 'BinOp'), ('op', 'Sub'), ('right', 'BinOp')]": 9, "Call -> [('func', 'Attribute'), ('args', ['Call', 'Attribute', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 14, "AugAssign -> [('target', 'Name'), ('op', 'Sub'), ('value', 'Subscript')]": 1, "Call -> [('func', 'Attribute'), ('args', ['Lambda', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "TryFinally -> [('body', ['Expr']), ('finalbody', ['Expr'])]": 1, "ExceptHandler -> [('type', 'Attribute'), ('name', 'Name'), ('body', ['Raise'])]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign']), ('decorator_list', [])]": 1, "If -> [('test', 'BoolOp'), ('body', ['TryExcept']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'Assign', 'If', 'Expr', 'If', 'Assign', 'Assign', 'Expr', 'Expr', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 7, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'Assign']), ('orelse', [])]": 2, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'Raise']), ('orelse', [])]": 1, "BoolOp -> [('op', 'And'), ('values', ['Call', 'Compare', 'Call'])]": 2, "arguments -> [('args', ['Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Num'])]": 6, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "Tuple -> [('elts', ['Name', 'Name', 'Subscript']), ('ctx', 'Load')]": 1, "Call -> [('func', 'Attribute'), ('args', ['Dict']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "arguments -> [('args', ['Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name'])]": 7, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Print']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['TryExcept']), ('orelse', ['Return'])]": 1, "Subscript -> [('value', 'Call'), ('slice', 'Index'), ('ctx', 'Load')]": 89, "ClassDef -> [('name', 'str'), ('bases', []), ('body', ['Pass']), ('decorator_list', [])]": 5, "Compare -> [('left', 'Name'), ('ops', ['Lt']), ('comparators', ['Subscript'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'For']), ('decorator_list', [])]": 1, "Compare -> [('left', 'Name'), ('ops', ['NotEq']), ('comparators', ['Dict'])]": 1, "TryFinally -> [('body', ['Assign', 'Expr', 'Assign']), ('finalbody', ['Delete'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Print', 'If', 'Print', 'Expr', 'Return']), ('decorator_list', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Attribute', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 7, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Expr', 'Expr']), ('orelse', [])]": 1, "If -> [('test', 'Call'), ('body', ['Expr', 'Continue']), ('orelse', [])]": 2, "Call -> [('func', 'Name'), ('args', ['Name', 'Name', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "Tuple -> [('elts', ['Attribute', 'Num', 'Num']), ('ctx', 'Load')]": 6, "BinOp -> [('left', 'Call'), ('op', 'Mod'), ('right', 'Call')]": 1, "Tuple -> [('elts', ['Num', 'Num', 'Num']), ('ctx', 'Load')]": 52, "Call -> [('func', 'Attribute'), ('args', ['Tuple', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 3, "Print -> [('dest', 'NoneType'), ('values', ['Tuple']), ('nl', 'bool')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'Assert', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Expr', 'Expr', 'If', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'For', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'If', 'Expr', 'If', 'Expr', 'If', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Return']), ('decorator_list', ['Attribute'])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'If']), ('orelse', ['Assign'])]": 5, "Dict -> [('keys', ['Num', 'Num', 'Num']), ('values', ['Tuple', 'Tuple', 'Tuple'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'If', 'Assign', 'For', 'Expr']), ('decorator_list', [])]": 1, "If -> [('test', 'Name'), ('body', ['Assign', 'Assign']), ('orelse', ['Assign'])]": 2, "Lambda -> [('args', 'arguments'), ('body', 'BinOp')]": 20, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', ['Call'])]": 1, "If -> [('test', 'Call'), ('body', ['Assign', 'TryExcept']), ('orelse', ['Assign'])]": 1, "If -> [('test', 'Call'), ('body', ['Assign', 'If']), ('orelse', ['If'])]": 1, "BinOp -> [('left', 'Call'), ('op', 'Div'), ('right', 'BinOp')]": 3, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'For', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "Compare -> [('left', 'BinOp'), ('ops', ['Gt']), ('comparators', ['Subscript'])]": 1, "BoolOp -> [('op', 'Or'), ('values', ['Compare', 'Compare'])]": 28, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'If', 'Return']), ('decorator_list', ['Name'])]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'Assign', 'If']), ('orelse', [])]": 1, "If -> [('test', 'Call'), ('body', ['Assign', 'Assign', 'TryExcept', 'Assign', 'TryExcept', 'Assign', 'If']), ('orelse', [])]": 1, "Compare -> [('left', 'Attribute'), ('ops', ['Gt']), ('comparators', ['Attribute'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Num', 'Num', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "arguments -> [('args', ['Name', 'Name', 'Name']), ('vararg', 'str'), ('kwarg', 'str'), ('defaults', ['Call'])]": 2, "If -> [('test', 'Name'), ('body', ['Expr', 'Expr']), ('orelse', [])]": 6, "Call -> [('func', 'Name'), ('args', ['Str', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 9, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name'])]": 14, "Call -> [('func', 'Attribute'), ('args', ['Str', 'Lambda', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "Dict -> [('keys', ['Str', 'Str']), ('values', ['Name', 'Call'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Call']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "If -> [('test', 'Call'), ('body', ['Assign']), ('orelse', ['Assign', 'If'])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'str'), ('defaults', ['Str', 'Name'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'With']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'If', 'Assign', 'If']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'For']), ('decorator_list', ['Name'])]": 1, "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign', 'Return']), ('orelse', [])]": 1, "Dict -> [('keys', ['Call']), ('values', ['Call'])]": 1, "If -> [('test', 'Name'), ('body', ['Assign']), ('orelse', ['If', 'Assign', 'TryExcept'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Expr', 'Return']), ('decorator_list', [])]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Expr', 'For']), ('decorator_list', ['Name'])]": 1, "TryExcept -> [('body', ['Assign', 'Return']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 2, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Name']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 8, "BinOp -> [('left', 'Str'), ('op', 'Mod'), ('right', 'Subscript')]": 8, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "Tuple -> [('elts', ['IfExp', 'Subscript']), ('ctx', 'Load')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'For', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Tuple'])]": 1, "If -> [('test', 'Compare'), ('body', ['Return']), ('orelse', ['Assign', 'Return'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'If', 'If']), ('decorator_list', ['Attribute'])]": 1, "Compare -> [('left', 'Call'), ('ops', ['Eq']), ('comparators', ['Subscript'])]": 3, "Name -> [('id', 'str'), ('ctx', 'Load')]": 36341, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]": 1, "Compare -> [('left', 'Attribute'), ('ops', ['Gt']), ('comparators', ['Name'])]": 4, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Return']), ('decorator_list', [])]": 30, "Call -> [('func', 'Name'), ('args', ['Attribute', 'Tuple']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 5, "List -> [('elts', ['Attribute', 'Name']), ('ctx', 'Load')]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['For', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Name', 'BinOp', 'BinOp', 'Num', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "If -> [('test', 'Name'), ('body', ['Assign', 'If', 'Assign']), ('orelse', [])]": 1, "Tuple -> [('elts', ['Name', 'Name', 'Attribute']), ('ctx', 'Load')]": 2, "For -> [('target', 'Tuple'), ('iter', 'List'), ('body', ['Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr']), ('orelse', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign']), ('orelse', ['If'])]": 1, "alias -> [('name', 'str'), ('asname', 'str')]": 88, "Subscript -> [('value', 'Attribute'), ('slice', 'ExtSlice'), ('ctx', 'Load')]": 20, "If -> [('test', 'BoolOp'), ('body', ['Return']), ('orelse', ['Return'])]": 3, "If -> [('test', 'Compare'), ('body', ['Assign']), ('orelse', ['Assert'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Subscript', 'Subscript', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "ExceptHandler -> [('type', 'Name'), ('name', 'Name'), ('body', ['If'])]": 1, "Attribute -> [('value', 'Str'), ('attr', 'str'), ('ctx', 'Load')]": 106, "Call -> [('func', 'Attribute'), ('args', ['Name', 'BinOp', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "BinOp -> [('left', 'Str'), ('op', 'Mult'), ('right', 'Num')]": 6, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['For']), ('decorator_list', [])]": 21, "BinOp -> [('left', 'Name'), ('op', 'Sub'), ('right', 'Name')]": 61, "TryExcept -> [('body', ['Assign', 'Assign', 'Print', 'For', 'Print', 'Assign', 'Print', 'Print', 'Assign']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Subscript', 'Name', 'BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "comprehension -> [('target', 'Tuple'), ('iter', 'Call'), ('ifs', ['Call'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Call', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'For']), ('decorator_list', [])]": 9, "Assert -> [('test', 'Compare'), ('msg', 'NoneType')]": 9, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'If', 'For', 'Expr']), ('decorator_list', [])]": 1, "Return -> [('value', 'Num')]": 13, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'For', 'Assign', 'For']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 43, "keyword -> [('arg', 'str'), ('value', 'Num')]": 286, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'For', 'Expr', 'Expr', 'Assign', 'Expr', 'If']), ('orelse', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Name', 'Name']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 20, "Assign -> [('targets', ['Subscript']), ('value', 'Call')]": 87, "Tuple -> [('elts', ['Num', 'Num', 'Num', 'Num', 'Num']), ('ctx', 'Load')]": 3, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Num']), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "If -> [('test', 'Compare'), ('body', ['Expr', 'Expr', 'If']), ('orelse', ['If', 'Expr', 'Expr'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 1, "Tuple -> [('elts', ['Num', 'Call']), ('ctx', 'Load')]": 7, "Call -> [('func', 'Name'), ('args', ['Name', 'Call', 'Call', 'List']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Call -> [('func', 'Attribute'), ('args', ['Tuple', 'Attribute', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "comprehension -> [('target', 'Name'), ('iter', 'Call'), ('ifs', ['Call'])]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ImportFrom', 'ClassDef'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'TryExcept', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'Attribute'), ('body', ['If']), ('orelse', ['Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Return'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'If', 'For']), ('decorator_list', ['Name'])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 13, "Call -> [('func', 'Attribute'), ('args', ['Str', 'Subscript']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "Compare -> [('left', 'Attribute'), ('ops', ['Eq']), ('comparators', ['List'])]": 1, "Tuple -> [('elts', ['Name', 'Name', 'Str']), ('ctx', 'Load')]": 2, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'List']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 12, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'If', 'Expr']), ('decorator_list', [])]": 1, "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'Assign', 'Assign', 'Assign']), ('orelse', [])]": 3, "BinOp -> [('left', 'List'), ('op', 'Add'), ('right', 'BinOp')]": 1, "BinOp -> [('left', 'Attribute'), ('op', 'Mult'), ('right', 'Attribute')]": 1, "BinOp -> [('left', 'Name'), ('op', 'BitOr'), ('right', 'Name')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'For', 'Return']), ('decorator_list', [])]": 1, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['TryExcept']), ('orelse', [])]": 1, "List -> [('elts', ['Str', 'Str', 'Str']), ('ctx', 'Load')]": 23, "BinOp -> [('left', 'Num'), ('op', 'Add'), ('right', 'Name')]": 6, "IfExp -> [('test', 'UnaryOp'), ('body', 'List'), ('orelse', 'Name')]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'For', 'Expr']), ('decorator_list', [])]": 1, "If -> [('test', 'BoolOp'), ('body', ['Expr']), ('orelse', ['For'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'If', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'Assign', 'FunctionDef']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['List', 'List', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Dict -> [('keys', ['Str', 'Str']), ('values', ['Call', 'List'])]": 2, "BinOp -> [('left', 'Subscript'), ('op', 'Div'), ('right', 'BinOp')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'For', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]": 2, "BinOp -> [('left', 'Attribute'), ('op', 'Mult'), ('right', 'Call')]": 7, "Call -> [('func', 'Name'), ('args', ['Num']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 5, "List -> [('elts', ['Attribute', 'Attribute', 'Attribute']), ('ctx', 'Load')]": 2, "Print -> [('dest', 'NoneType'), ('values', ['Call']), ('nl', 'bool')]": 11, "For -> [('target', 'Tuple'), ('iter', 'Name'), ('body', ['If', 'If']), ('orelse', [])]": 1, "If -> [('test', 'Call'), ('body', ['Expr']), ('orelse', ['For'])]": 2, "If -> [('test', 'Compare'), ('body', ['Expr', 'Expr']), ('orelse', [])]": 9, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Print', 'If', 'If']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign']), ('orelse', ['Assign', 'Assign'])]": 5, "List -> [('elts', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('ctx', 'Load')]": 2, "Call -> [('func', 'Name'), ('args', ['Name', 'Num', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "If -> [('test', 'Call'), ('body', ['Assign', 'Expr']), ('orelse', ['Assign'])]": 1, "Compare -> [('left', 'Name'), ('ops', ['Gt']), ('comparators', ['BinOp'])]": 2, "If -> [('test', 'Name'), ('body', ['Assign']), ('orelse', ['If', 'If'])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Str', 'Num', 'Name', 'Num', 'Name', 'Num', 'Name'])]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['If', 'Assign', 'For', 'Expr']), ('orelse', [])]": 1, "Index -> [('value', 'Name')]": 444, "If -> [('test', 'Name'), ('body', ['Pass']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'Assign', 'If', 'If', 'Assign', 'If', 'Assign', 'Assign', 'If', 'If']), ('decorator_list', ['Attribute'])]": 1, "TryExcept -> [('body', ['Assign', 'TryFinally']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 1, "Assign -> [('targets', ['Attribute', 'Attribute']), ('value', 'Name')]": 1, "If -> [('test', 'Name'), ('body', ['Expr', 'Expr', 'Expr']), ('orelse', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Num']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 5, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'AugAssign', 'Return']), ('decorator_list', [])]": 1, "Print -> [('dest', 'NoneType'), ('values', ['Str', 'Name', 'Name']), ('nl', 'bool')]": 8, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'Assign', 'If', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'Call'), ('body', ['If']), ('orelse', ['If'])]": 2, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Print']), ('orelse', [])]": 1, "If -> [('test', 'Call'), ('body', ['TryExcept']), ('orelse', ['Assign'])]": 1, "Module -> [('body', ['Import', 'ImportFrom', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'FunctionDef', 'Expr', 'Assign', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef'])]": 1, "If -> [('test', 'Compare'), ('body', ['Pass']), ('orelse', [])]": 1, "ExceptHandler -> [('type', 'Attribute'), ('name', 'NoneType'), ('body', ['If'])]": 1, "Call -> [('func', 'Name'), ('args', ['Attribute', 'Attribute', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 3, "While -> [('test', 'UnaryOp'), ('body', ['Assign', 'Assign', 'Assign']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'FunctionDef', 'FunctionDef', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', []), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'Dict')]": 5, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'If', 'Assign', 'If', 'If', 'Assign', 'Assign', 'For', 'If', 'Return']), ('decorator_list', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Attribute', 'BinOp', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "If -> [('test', 'BoolOp'), ('body', ['Assign']), ('orelse', ['If'])]": 9, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Num', 'BinOp', 'Tuple']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Delete']), ('decorator_list', [])]": 2, "If -> [('test', 'Name'), ('body', ['Assert', 'Assign']), ('orelse', ['Assign'])]": 3, "arguments -> [('args', ['Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Attribute'])]": 1, "If -> [('test', 'Name'), ('body', ['Expr']), ('orelse', ['Assign', 'If'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'If', 'Expr', 'Return']), ('decorator_list', [])]": 1, "BoolOp -> [('op', 'And'), ('values', ['Attribute', 'UnaryOp', 'Compare'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Return']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Num', 'Num', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 15, "Call -> [('func', 'Name'), ('args', []), ('keywords', []), ('starargs', 'Name'), ('kwargs', 'NoneType')]": 3, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name'])]": 1, "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['Assign', 'If', 'Assign'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Return']), ('decorator_list', ['Name'])]": 5, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'For', 'Expr', 'Expr', 'Assign', 'Expr']), ('orelse', [])]": 1, "Tuple -> [('elts', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('ctx', 'Load')]": 3, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'Expr']), ('orelse', [])]": 2, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Import', 'Import', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 1, "Assign -> [('targets', ['Attribute']), ('value', 'Num')]": 16, "Assign -> [('targets', ['Name']), ('value', 'Compare')]": 8, "If -> [('test', 'BoolOp'), ('body', ['Assign']), ('orelse', [])]": 34, "Compare -> [('left', 'Subscript'), ('ops', ['Lt']), ('comparators', ['Str'])]": 1, "TryExcept -> [('body', ['Assign']), ('handlers', ['ExceptHandler', 'ExceptHandler']), ('orelse', [])]": 4, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['If', 'Assert']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'For', 'If']), ('decorator_list', [])]": 1, "Compare -> [('left', 'Name'), ('ops', ['NotIn']), ('comparators', ['Name'])]": 14, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'ClassDef']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'List'), ('body', ['Expr', 'Expr', 'Expr', 'For']), ('orelse', [])]": 1, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'With', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'Assign', 'If', 'ClassDef', 'Assign', 'ClassDef', 'Assign', 'Expr', 'FunctionDef', 'ClassDef'])]": 1, "BitAnd -> <NULL>": 10, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If']), ('decorator_list', [])]": 66, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 8, "If -> [('test', 'Compare'), ('body', ['Assign', 'Expr']), ('orelse', ['For'])]": 1, "If -> [('test', 'Name'), ('body', ['Return']), ('orelse', ['If'])]": 2, "If -> [('test', 'UnaryOp'), ('body', ['For']), ('orelse', [])]": 1, "TryExcept -> [('body', ['Expr', 'Raise']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 1, "Or -> <NULL>": 170, "Module -> [('body', ['Import', 'Import', 'Assign', 'Import', 'Expr', 'Assign', 'Expr', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Expr', 'Expr', 'ImportFrom', 'ImportFrom', 'Expr', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'Assign']), ('orelse', ['Assign', 'Assign', 'Assign'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'If', 'If', 'For', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Print', 'Assign']), ('orelse', ['If'])]": 2, "If -> [('test', 'Name'), ('body', ['Expr', 'Continue']), ('orelse', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Str', 'Tuple']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 7, "Call -> [('func', 'Attribute'), ('args', ['Num', 'Attribute', 'Attribute', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "If -> [('test', 'Attribute'), ('body', ['TryExcept']), ('orelse', ['Assign'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'For']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "BinOp -> [('left', 'BinOp'), ('op', 'Sub'), ('right', 'Name')]": 3, "If -> [('test', 'Num'), ('body', ['Assign', 'Assign', 'Expr', 'Print', 'Expr']), ('orelse', ['Assign', 'Print', 'Print', 'Expr'])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name']), ('vararg', 'str'), ('kwarg', 'str'), ('defaults', ['Name', 'Name'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Tuple', 'Tuple', 'Num', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "If -> [('test', 'Attribute'), ('body', ['Expr', 'If']), ('orelse', [])]": 1, "ExceptHandler -> [('type', 'Attribute'), ('name', 'NoneType'), ('body', ['Expr', 'If'])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Str', 'Name'])]": 2, "ClassDef -> [('name', 'str'), ('bases', []), ('body', ['ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'ImportFrom', 'ImportFrom', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', ['Call'])]": 1, "Compare -> [('left', 'BinOp'), ('ops', ['Eq']), ('comparators', ['Call'])]": 2, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'ClassDef']), ('decorator_list', [])]": 2, "If -> [('test', 'Name'), ('body', ['Assign', 'Assign', 'For', 'Return']), ('orelse', ['Assign', 'Assign', 'If', 'Return'])]": 1, "Tuple -> [('elts', ['Attribute', 'Num']), ('ctx', 'Load')]": 5, "Compare -> [('left', 'Call'), ('ops', ['Eq']), ('comparators', ['Num'])]": 49, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'If', 'If', 'If']), ('orelse', [])]": 2, "TryExcept -> [('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'If', 'If', 'Assign', 'If', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'Call'), ('body', ['If', 'Return']), ('orelse', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 673, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Subscript', 'Subscript', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Attribute'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Attribute']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'Name')]": 1, "For -> [('target', 'Name'), ('iter', 'Subscript'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'TryExcept']), ('orelse', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Attribute', 'Num', 'Num', 'Num', 'Num', 'Num', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'Expr', 'Assign', 'Expr', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'If', 'Expr']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Name', 'Call']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'ClassDef', 'ClassDef', 'If'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Tuple', 'Tuple', 'Tuple', 'Num', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Expr', 'For', 'Assign']), ('decorator_list', [])]": 1, "UnaryOp -> [('op', 'Not'), ('operand', 'Call')]": 162, "If -> [('test', 'Compare'), ('body', ['Print', 'Raise']), ('orelse', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Attribute', 'Call', 'BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "If -> [('test', 'Call'), ('body', ['Assign', 'If', 'Expr', 'If', 'Return']), ('orelse', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign']), ('orelse', ['TryExcept'])]": 1, "Compare -> [('left', 'Call'), ('ops', ['Gt']), ('comparators', ['Attribute'])]": 1, "Slice -> [('lower', 'NoneType'), ('upper', 'Attribute'), ('step', 'NoneType')]": 10, "BinOp -> [('left', 'BinOp'), ('op', 'Div'), ('right', 'Call')]": 3, "Index -> [('value', 'Call')]": 32, "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['Assign', 'Expr', 'Expr']), ('orelse', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'If']), ('decorator_list', [])]": 2, "Raise -> [('type', 'Attribute'), ('inst', 'NoneType'), ('tback', 'NoneType')]": 2, "keyword -> [('arg', 'str'), ('value', 'Lambda')]": 21, "Call -> [('func', 'Name'), ('args', ['Call']), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "Compare -> [('left', 'Call'), ('ops', ['NotIn']), ('comparators', ['Name'])]": 1, "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'Assign']), ('orelse', [])]": 8, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Call', 'Attribute', 'Num', 'BinOp', 'Num', 'Num', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "For -> [('target', 'Name'), ('iter', 'List'), ('body', ['TryExcept']), ('orelse', [])]": 2, "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['FunctionDef'])]": 1, "Compare -> [('left', 'BinOp'), ('ops', ['Gt']), ('comparators', ['BinOp'])]": 1, "While -> [('test', 'UnaryOp'), ('body', ['Expr']), ('orelse', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Expr']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 2, "Return -> [('value', 'Compare')]": 28, "Attribute -> [('value', 'Name'), ('attr', 'str'), ('ctx', 'Del')]": 21, "BinOp -> [('left', 'List'), ('op', 'Mult'), ('right', 'Num')]": 2, "BinOp -> [('left', 'BinOp'), ('op', 'BitOr'), ('right', 'Attribute')]": 1, "Call -> [('func', 'Attribute'), ('args', ['Subscript']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'While', 'Pass']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', []), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "BoolOp -> [('op', 'Or'), ('values', ['Attribute', 'Str'])]": 5, "BinOp -> [('left', 'Call'), ('op', 'Add'), ('right', 'BinOp')]": 6, "If -> [('test', 'Compare'), ('body', ['TryExcept', 'FunctionDef', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr']), ('orelse', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Attribute', 'Call']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'UnaryOp', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Module -> [('body', ['Import', 'ImportFrom', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'FunctionDef', 'ClassDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'ClassDef', 'FunctionDef', 'Assign'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'If', 'For', 'Assert']), ('decorator_list', [])]": 1, "Tuple -> [('elts', ['Name', 'Num', 'Num', 'Num']), ('ctx', 'Load')]": 1, "TryExcept -> [('body', ['Delete']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 2, "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['Expr'])]": 12, "If -> [('test', 'Name'), ('body', ['Assign', 'Return']), ('orelse', ['Assign', 'Assign', 'If', 'Return'])]": 1, "Call -> [('func', 'Attribute'), ('args', []), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'Name')]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'FunctionDef', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'If', 'Expr', 'Assign', 'Expr', 'Expr', 'If']), ('orelse', [])]": 1, "BinOp -> [('left', 'UnaryOp'), ('op', 'Div'), ('right', 'Num')]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['If', 'Assign', 'Assign', 'If']), ('orelse', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Expr', 'AugAssign', 'If']), ('orelse', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Return']), ('orelse', [])]": 1, "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'Return']), ('orelse', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'If', 'Assign', 'Return'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign']), ('decorator_list', [])]": 31, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Expr', 'FunctionDef']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'While']), ('decorator_list', [])]": 1, "Compare -> [('left', 'BinOp'), ('ops', ['In']), ('comparators', ['Name'])]": 1, "For -> [('target', 'Name'), ('iter', 'List'), ('body', ['If', 'Expr']), ('orelse', [])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Str', 'Name', 'Name', 'Name'])]": 1, "Tuple -> [('elts', ['Attribute']), ('ctx', 'Load')]": 5, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Tuple', 'ListComp', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If']), ('orelse', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Call', 'Name', 'Name', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'If', 'Return']), ('decorator_list', [])]": 2, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'If', 'Assign']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'Return']), ('decorator_list', ['Name'])]": 2, "Call -> [('func', 'Attribute'), ('args', ['Call', 'Attribute', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 3, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'FunctionDef', 'FunctionDef', 'ClassDef', 'ClassDef']), ('decorator_list', [])]": 2, "For -> [('target', 'Name'), ('iter', 'List'), ('body', ['Assign', 'Expr', 'For', 'For']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'For', 'Assign', 'While', 'Expr']), ('decorator_list', [])]": 1, "Assign -> [('targets', ['Name', 'Attribute']), ('value', 'BinOp')]": 1, "BinOp -> [('left', 'Name'), ('op', 'Div'), ('right', 'Call')]": 1, "Compare -> [('left', 'Subscript'), ('ops', ['In']), ('comparators', ['Tuple'])]": 1, "If -> [('test', 'Attribute'), ('body', ['Expr']), ('orelse', [])]": 15, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Return']), ('decorator_list', ['Name'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 2, "If -> [('test', 'Compare'), ('body', ['Expr', 'Raise']), ('orelse', [])]": 2, "If -> [('test', 'BoolOp'), ('body', ['For']), ('orelse', ['Assign', 'Assign'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Str', 'Str']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 12, "If -> [('test', 'Num'), ('body', ['Print', 'Print', 'For', 'Expr']), ('orelse', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Tuple', 'Name', 'Name', 'Num', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Call -> [('func', 'Attribute'), ('args', ['Subscript', 'Name', 'Tuple']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Compare -> [('left', 'Name'), ('ops', ['Is']), ('comparators', ['Attribute'])]": 3, "If -> [('test', 'Call'), ('body', ['Return']), ('orelse', ['Return'])]": 9, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Assign', 'Assign', 'Assign', 'ClassDef', 'FunctionDef']), ('decorator_list', [])]": 1, "If -> [('test', 'Subscript'), ('body', ['Expr']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'If', 'Return']), ('decorator_list', [])]": 1, "ImportFrom -> [('module', 'str'), ('names', ['alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias']), ('level', 'int')]": 3, "TryFinally -> [('body', ['Return']), ('finalbody', ['Expr'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Num']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign']), ('orelse', [])]": 1, "If -> [('test', 'Call'), ('body', ['Assign', 'Assign']), ('orelse', ['Assign', 'Assign'])]": 1, "While -> [('test', 'Name'), ('body', ['Expr', 'Assign', 'Expr']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'If', 'If', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'For', 'Assign']), ('decorator_list', [])]": 1, "TryFinally -> [('body', ['Assign']), ('finalbody', ['Expr'])]": 3, "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'Assign', 'If']), ('orelse', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'AugAssign', 'AugAssign', 'AugAssign', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'TryFinally', 'Return']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'BinOp', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 3, "BinOp -> [('left', 'Call'), ('op', 'Add'), ('right', 'Str')]": 17, "Call -> [('func', 'Attribute'), ('args', ['Tuple', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 3, "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'FunctionDef'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Attribute', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 4, "If -> [('test', 'Compare'), ('body', ['If', 'Assign', 'Assign', 'Assign', 'For', 'Assign']), ('orelse', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Expr']), ('orelse', [])]": 8, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Compare']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 6, "BinOp -> [('left', 'Call'), ('op', 'Sub'), ('right', 'Num')]": 15, "Compare -> [('left', 'Subscript'), ('ops', ['NotEq']), ('comparators', ['Name'])]": 4, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Global', 'If', 'Return']), ('decorator_list', [])]": 1, "BoolOp -> [('op', 'And'), ('values', ['UnaryOp', 'Attribute'])]": 2, "Call -> [('func', 'Name'), ('args', ['Name', 'Name']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'Name')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', ['Name'])]": 1, "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef'])]": 1, "BinOp -> [('left', 'Call'), ('op', 'Mult'), ('right', 'Attribute')]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Call', 'Call', 'Name', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "BinOp -> [('left', 'Subscript'), ('op', 'Add'), ('right', 'Subscript')]": 8, "Dict -> [('keys', ['Str', 'Str']), ('values', ['Name', 'Attribute'])]": 1, "TryExcept -> [('body', ['Assign', 'Assign', 'Assign', 'For']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 1, "If -> [('test', 'Name'), ('body', ['Expr', 'Expr']), ('orelse', ['Assign', 'Expr'])]": 1, "If -> [('test', 'Call'), ('body', ['Return']), ('orelse', [])]": 23, "Call -> [('func', 'Name'), ('args', ['Attribute', 'Str', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 8, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Return']), ('decorator_list', [])]": 43, "Call -> [('func', 'Attribute'), ('args', ['Compare', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 6, "ExceptHandler -> [('type', 'Attribute'), ('name', 'NoneType'), ('body', ['Pass'])]": 3, "If -> [('test', 'Name'), ('body', ['Expr', 'AugAssign', 'For']), ('orelse', [])]": 1, "BinOp -> [('left', 'Name'), ('op', 'Add'), ('right', 'Str')]": 26, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'TryExcept']), ('decorator_list', [])]": 1, "Tuple -> [('elts', ['Name', 'Name', 'Dict']), ('ctx', 'Load')]": 5, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Tuple', 'Name', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'BinOp', 'BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 3, "Tuple -> [('elts', ['Num', 'Num', 'Name', 'Name']), ('ctx', 'Load')]": 1, "Call -> [('func', 'Attribute'), ('args', ['BinOp']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 4, "Call -> [('func', 'Name'), ('args', ['Attribute', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 8, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['AugAssign', 'Return']), ('decorator_list', [])]": 1, "BoolOp -> [('op', 'And'), ('values', ['Name', 'BoolOp'])]": 1, "Tuple -> [('elts', ['Call', 'Call']), ('ctx', 'Load')]": 38, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Print', 'Print', 'Print', 'Assign', 'If', 'Assign', 'If']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Return']), ('decorator_list', ['Name'])]": 5, "BinOp -> [('left', 'Name'), ('op', 'Add'), ('right', 'BinOp')]": 16, "Compare -> [('left', 'Call'), ('ops', ['Eq']), ('comparators', ['List'])]": 1, "BoolOp -> [('op', 'Or'), ('values', ['Name', 'Compare'])]": 1, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign']), ('orelse', [])]": 2, "Sub -> <NULL>": 257, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Attribute', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Call', 'Name', 'Name'])]": 1, "ExceptHandler -> [('type', 'Name'), ('name', 'Name'), ('body', ['Expr', 'Raise'])]": 3, "If -> [('test', 'Call'), ('body', ['For']), ('orelse', ['Expr'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Call']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 3, "Tuple -> [('elts', ['Name', 'Name', 'Name']), ('ctx', 'Load')]": 36, "BinOp -> [('left', 'Num'), ('op', 'Div'), ('right', 'BinOp')]": 5, "TryFinally -> [('body', ['If', 'Assign', 'Expr', 'Expr']), ('finalbody', ['If'])]": 1, "BoolOp -> [('op', 'Or'), ('values', ['BoolOp', 'Dict'])]": 1, "Expr -> [('value', 'Call')]": 4011, "BinOp -> [('left', 'Str'), ('op', 'Add'), ('right', 'Attribute')]": 9, "If -> [('test', 'Compare'), ('body', ['Expr', 'Expr', 'Expr']), ('orelse', [])]": 3, "List -> [('elts', ['Str', 'Str', 'Str', 'Call']), ('ctx', 'Load')]": 1, "BoolOp -> [('op', 'Or'), ('values', ['Attribute', 'List'])]": 1, "If -> [('test', 'Compare'), ('body', ['FunctionDef', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr']), ('orelse', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Name', 'Name', 'Attribute', 'List']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "AugAssign -> [('target', 'Name'), ('op', 'Add'), ('value', 'BinOp')]": 33, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assert', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'BoolOp'), ('body', ['Expr', 'Return']), ('orelse', [])]": 3, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'FunctionDef']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'For', 'Expr', 'For']), ('decorator_list', [])]": 1, "Slice -> [('lower', 'NoneType'), ('upper', 'Num'), ('step', 'NoneType')]": 54, "List -> [('elts', ['Name']), ('ctx', 'Load')]": 48, "Tuple -> [('elts', ['Name', 'Call', 'Call']), ('ctx', 'Load')]": 2, "Call -> [('func', 'Attribute'), ('args', ['Call']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 12, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'Expr', 'Assign', 'TryExcept']), ('decorator_list', [])]": 1, "BoolOp -> [('op', 'Or'), ('values', ['Call', 'Name'])]": 1, "If -> [('test', 'Compare'), ('body', ['Expr', 'Assign']), ('orelse', [])]": 2, "BinOp -> [('left', 'Call'), ('op', 'Add'), ('right', 'Subscript')]": 2, "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'Expr', 'Assign', 'For']), ('orelse', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'If', 'Expr', 'Expr', 'Expr', 'Expr']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'If', 'Expr', 'Expr', 'Assign', 'Assign', 'If', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'If', 'Assign', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'For', 'Expr', 'For']), ('decorator_list', [])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'str'), ('defaults', ['Name', 'Str'])]": 1, "BoolOp -> [('op', 'And'), ('values', ['Name', 'Call'])]": 16, "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['Name', 'Str', 'Str'])]": 2, "Expr -> [('value', 'Attribute')]": 16, "Tuple -> [('elts', ['Call', 'Str']), ('ctx', 'Load')]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'For', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'If', 'Assign', 'For', 'For']), ('decorator_list', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Expr', 'Assign', 'Assign', 'FunctionDef', 'ClassDef']), ('decorator_list', [])]": 1, "BoolOp -> [('op', 'Or'), ('values', ['Call', 'Str'])]": 9, "If -> [('test', 'UnaryOp'), ('body', ['Expr', 'Expr', 'Expr']), ('orelse', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'TryExcept', 'For', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'If', 'For', 'Return']), ('decorator_list', [])]": 1, "BinOp -> [('left', 'BinOp'), ('op', 'Pow'), ('right', 'Name')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Return']), ('decorator_list', [])]": 1, "Call -> [('func', 'Call'), ('args', ['Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "Compare -> [('left', 'Name'), ('ops', ['GtE']), ('comparators', ['Attribute'])]": 1, "Expr -> [('value', 'Str')]": 554, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'For', 'Return', 'Assign', 'Expr', 'For', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'For', 'Assign', 'If', 'For', 'If', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 1, "Assign -> [('targets', ['Tuple']), ('value', 'Tuple')]": 35, "BoolOp -> [('op', 'And'), ('values', ['Call', 'Name'])]": 3, "Call -> [('func', 'Attribute'), ('args', ['Name', 'BinOp', 'Num', 'Name', 'Attribute', 'Attribute', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "BinOp -> [('left', 'Attribute'), ('op', 'Add'), ('right', 'UnaryOp')]": 2, "If -> [('test', 'Compare'), ('body', ['ImportFrom', 'Assign', 'FunctionDef', 'Expr']), ('orelse', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['List', 'Attribute']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['Attribute', 'BinOp', 'Attribute'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Num', 'Num', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Num', 'Name', 'Attribute', 'Num', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "Call -> [('func', 'Attribute'), ('args', ['Str', 'Name', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "BinOp -> [('left', 'Call'), ('op', 'Mod'), ('right', 'Num')]": 3, "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['If', 'If', 'If', 'If', 'Assign', 'Assign', 'If', 'Assign', 'If', 'If', 'If', 'Assign', 'Assign']), ('orelse', [])]": 1, "BinOp -> [('left', 'Name'), ('op', 'FloorDiv'), ('right', 'Name')]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Pass']), ('decorator_list', [])]": 15, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'For', 'Assign', 'Assign', 'Assign', 'For', 'Return']), ('decorator_list', [])]": 1, "Assign -> [('targets', ['Attribute']), ('value', 'Tuple')]": 5, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'If', 'TryExcept', 'Return']), ('decorator_list', [])]": 1, "Tuple -> [('elts', ['Name', 'Name', 'Lambda']), ('ctx', 'Load')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "For -> [('target', 'Tuple'), ('iter', 'List'), ('body', ['Expr', 'Expr']), ('orelse', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr']), ('orelse', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name', 'Name']), ('body', ['Expr', 'Assign', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "BinOp -> [('left', 'Call'), ('op', 'Add'), ('right', 'Tuple')]": 1, "Call -> [('func', 'Name'), ('args', ['Attribute', 'Name', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Tuple -> [('elts', ['Attribute', 'List']), ('ctx', 'Load')]": 2, "If -> [('test', 'UnaryOp'), ('body', ['Return']), ('orelse', ['Expr', 'Assign', 'Assign', 'Assign', 'If'])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Num'])]": 5, "Call -> [('func', 'Subscript'), ('args', ['Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['FunctionDef', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'For']), ('decorator_list', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 289, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "Tuple -> [('elts', ['Str', 'Call', 'Str', 'Str']), ('ctx', 'Load')]": 1, "Tuple -> [('elts', ['Call', 'Attribute']), ('ctx', 'Load')]": 1, "List -> [('elts', ['Call', 'Call', 'Call']), ('ctx', 'Load')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'If', 'Return']), ('decorator_list', [])]": 5, "Call -> [('func', 'Name'), ('args', ['Name', 'Str', 'Dict']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 4, "BinOp -> [('left', 'Name'), ('op', 'Mult'), ('right', 'Name')]": 55, "Tuple -> [('elts', ['Attribute', 'Attribute', 'Call']), ('ctx', 'Load')]": 1, "Subscript -> [('value', 'Name'), ('slice', 'Index'), ('ctx', 'Del')]": 14, "Tuple -> [('elts', ['Attribute', 'Attribute', 'Call', 'Call']), ('ctx', 'Load')]": 1, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'If'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'For', 'For', 'For', 'For', 'If', 'Return']), ('decorator_list', [])]": 1, "Lambda -> [('args', 'arguments'), ('body', 'Attribute')]": 9, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 6, "Call -> [('func', 'Attribute'), ('args', ['Name', 'List', 'Tuple']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Lambda -> [('args', 'arguments'), ('body', 'BoolOp')]": 1, "BinOp -> [('left', 'Name'), ('op', 'Div'), ('right', 'BinOp')]": 5, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'TryFinally']), ('decorator_list', [])]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]": 1, "List -> [('elts', ['Attribute', 'Call', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute']), ('ctx', 'Load')]": 1, "If -> [('test', 'Compare'), ('body', ['Expr', 'Expr']), ('orelse', ['Expr'])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Name'])]": 8, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Expr', 'Assign', 'FunctionDef']), ('decorator_list', [])]": 5, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assert', 'Assign']), ('decorator_list', [])]": 1, "ExceptHandler -> [('type', 'NoneType'), ('name', 'NoneType'), ('body', ['Print', 'Import', 'Expr'])]": 1, "Subscript -> [('value', 'Attribute'), ('slice', 'Slice'), ('ctx', 'Load')]": 19, "BinOp -> [('left', 'Call'), ('op', 'BitOr'), ('right', 'BinOp')]": 1, "Call -> [('func', 'Name'), ('args', ['Num', 'Name', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['Print', 'Expr'])]": 1, "If -> [('test', 'Compare'), ('body', ['For']), ('orelse', ['If'])]": 2, "Compare -> [('left', 'Name'), ('ops', ['NotEq']), ('comparators', ['Subscript'])]": 1, "Return -> [('value', 'Dict')]": 18, "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['Assign', 'Expr', 'Assign'])]": 1, "If -> [('test', 'Name'), ('body', ['Expr', 'Assign', 'Expr']), ('orelse', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Num', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 6, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['For', 'Assign']), ('decorator_list', [])]": 1, "Assert -> [('test', 'BoolOp'), ('msg', 'NoneType')]": 1, "Tuple -> [('elts', ['Name', 'Name', 'Tuple']), ('ctx', 'Store')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'Return']), ('decorator_list', [])]": 1, "Subscript -> [('value', 'Tuple'), ('slice', 'Index'), ('ctx', 'Load')]": 1, "BinOp -> [('left', 'Tuple'), ('op', 'Mult'), ('right', 'Name')]": 4, "Print -> [('dest', 'NoneType'), ('values', ['Str']), ('nl', 'bool')]": 37, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'TryFinally']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'If']), ('decorator_list', [])]": 3, "List -> [('elts', ['Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'BinOp', 'BinOp', 'Name', 'BinOp', 'BinOp', 'BinOp', 'Name', 'BinOp', 'Num']), ('ctx', 'Load')]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Name', 'Num', 'Name', 'Name', 'Name'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Str', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "IsNot -> <NULL>": 103, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 95, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Str', 'Str', 'Str'])]": 1, "List -> [('elts', ['Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num']), ('ctx', 'Load')]": 4, "Compare -> [('left', 'Name'), ('ops', ['Lt']), ('comparators', ['Num'])]": 24, "Expr -> [('value', 'Subscript')]": 5, "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['TryExcept'])]": 6, "While -> [('test', 'Name'), ('body', ['If', 'Assign', 'Assign', 'TryExcept', 'Assign', 'Expr', 'Break']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Assign', 'Expr', 'Assign', 'For']), ('decorator_list', [])]": 1, "If -> [('test', 'Name'), ('body', ['Assign', 'If']), ('orelse', ['Assign'])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Expr', 'Expr']), ('orelse', [])]": 2, "If -> [('test', 'Call'), ('body', ['Assign']), ('orelse', ['Assign', 'Assign'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Return']), ('decorator_list', ['Attribute'])]": 1, "Call -> [('func', 'Attribute'), ('args', []), ('keywords', ['keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 41, "If -> [('test', 'Attribute'), ('body', ['Assign', 'Return']), ('orelse', ['Return'])]": 1, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('orelse', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Tuple', 'Num', 'Call', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'If', 'Return']), ('decorator_list', [])]": 2, "Call -> [('func', 'Attribute'), ('args', ['List']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 46, "ExceptHandler -> [('type', 'Attribute'), ('name', 'NoneType'), ('body', ['Assign', 'Assign', 'Expr', 'Return'])]": 1, "If -> [('test', 'Compare'), ('body', ['For', 'For', 'For', 'For']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'For']), ('decorator_list', [])]": 1, "TryFinally -> [('body', ['TryExcept']), ('finalbody', ['Assign'])]": 1, "If -> [('test', 'Call'), ('body', ['Expr', 'Return']), ('orelse', ['If'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['BinOp', 'BinOp']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "For -> [('target', 'Tuple'), ('iter', 'Name'), ('body', ['AugAssign']), ('orelse', [])]": 1, "Assign -> [('targets', ['Subscript']), ('value', 'ListComp')]": 3, "ExceptHandler -> [('type', 'Attribute'), ('name', 'Name'), ('body', ['Expr', 'Raise'])]": 2, "List -> [('elts', ['Name', 'Name']), ('ctx', 'Load')]": 22, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "Compare -> [('left', 'Name'), ('ops', ['Eq']), ('comparators', ['Subscript'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Attribute', 'Attribute', 'Name', 'Attribute', 'BinOp', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Call -> [('func', 'Name'), ('args', ['BinOp']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "ClassDef -> [('name', 'str'), ('bases', []), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'Expr', 'Return']), ('decorator_list', [])]": 1, "Assign -> [('targets', ['Tuple']), ('value', 'BoolOp')]": 1, "Dict -> [('keys', ['Num', 'Num', 'Num', 'Num']), ('values', ['Attribute', 'Attribute', 'Attribute', 'Attribute'])]": 1, "Compare -> [('left', 'Call'), ('ops', ['IsNot']), ('comparators', ['Name'])]": 5, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'If', 'TryExcept', 'Expr']), ('orelse', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'ClassDef']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Subscript', 'Subscript', 'Subscript', 'Subscript']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Call', 'Call', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Assign', 'If', 'Assign', 'Assign', 'Assign', 'If']), ('orelse', [])]": 1, "If -> [('test', 'BoolOp'), ('body', ['Assign', 'If', 'Assign', 'For', 'If', 'Assign', 'If', 'If']), ('orelse', ['If'])]": 1, "Print -> [('dest', 'NoneType'), ('values', ['Name', 'Name']), ('nl', 'bool')]": 2, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'str'), ('defaults', ['Str', 'Name', 'Name', 'Name'])]": 1, "BoolOp -> [('op', 'And'), ('values', ['Compare', 'Attribute'])]": 3, "Is -> <NULL>": 135, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Name', 'Name']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'Name')]": 1, "ExceptHandler -> [('type', 'Name'), ('name', 'Name'), ('body', ['If', 'If', 'Return'])]": 1, "BinOp -> [('left', 'Attribute'), ('op', 'Div'), ('right', 'Num')]": 11, "arguments -> [('args', ['Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Name'])]": 16, "While -> [('test', 'Call'), ('body', ['Assign', 'Assign']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['FunctionDef', 'Assign', 'If', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 2, "Call -> [('func', 'Attribute'), ('args', ['Num', 'Num', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 61, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]": 1, "BinOp -> [('left', 'BinOp'), ('op', 'Mult'), ('right', 'Num')]": 8, "Call -> [('func', 'Attribute'), ('args', ['Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'Name')]": 11, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'For']), ('orelse', [])]": 3, "If -> [('test', 'Name'), ('body', ['Assign']), ('orelse', [])]": 33, "If -> [('test', 'Attribute'), ('body', ['Assign']), ('orelse', [])]": 10, "List -> [('elts', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('ctx', 'Load')]": 3, "If -> [('test', 'UnaryOp'), ('body', ['Return']), ('orelse', ['Assign', 'Assign', 'Assign', 'Return'])]": 1, "TryExcept -> [('body', ['Assign', 'Assign', 'Expr', 'Return']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Str', 'Name', 'Name', 'Name'])]": 1, "Call -> [('func', 'Name'), ('args', ['Call', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 3, "List -> [('elts', ['Tuple']), ('ctx', 'Load')]": 16, "Compare -> [('left', 'Tuple'), ('ops', ['NotIn']), ('comparators', ['Attribute'])]": 1, "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['ImportFrom', 'ImportFrom'])]": 1, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign']), ('orelse', [])]": 17, "BoolOp -> [('op', 'And'), ('values', ['Compare', 'Compare'])]": 29, "Dict -> [('keys', ['Str', 'Str']), ('values', ['Name', 'Name'])]": 7, "BinOp -> [('left', 'Call'), ('op', 'Mult'), ('right', 'UnaryOp')]": 2, "BoolOp -> [('op', 'Or'), ('values', ['Call', 'Num'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'If', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign']), ('decorator_list', [])]": 1, "If -> [('test', 'Call'), ('body', ['Delete']), ('orelse', [])]": 8, "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['Assign', 'Expr']), ('orelse', [])]": 6, "For -> [('target', 'Tuple'), ('iter', 'Name'), ('body', ['Print', 'Expr']), ('orelse', [])]": 1, "BinOp -> [('left', 'Call'), ('op', 'Mult'), ('right', 'Num')]": 5, "With -> [('context_expr', 'Call'), ('optional_vars', 'Name'), ('body', ['TryExcept', 'Assign', 'If'])]": 1, "Return -> [('value', 'UnaryOp')]": 6, "ListComp -> [('elt', 'Num'), ('generators', ['comprehension'])]": 1, "BinOp -> [('left', 'BinOp'), ('op', 'Mult'), ('right', 'Call')]": 7, "If -> [('test', 'Call'), ('body', ['Assign', 'If', 'If', 'Assign']), ('orelse', [])]": 1, "List -> [('elts', ['Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Name', 'Attribute', 'Attribute']), ('ctx', 'Load')]": 1, "If -> [('test', 'Call'), ('body', ['Print', 'Expr']), ('orelse', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', ['Call'])]": 1, "BinOp -> [('left', 'Num'), ('op', 'Sub'), ('right', 'Num')]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Subscript', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Compare -> [('left', 'Subscript'), ('ops', ['LtE']), ('comparators', ['Num'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Call', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "Call -> [('func', 'Attribute'), ('args', ['Str', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 52, "Yield -> [('value', 'Num')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'If', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'If', 'Return']), ('decorator_list', [])]": 1, "Del -> <NULL>": 54, "If -> [('test', 'Compare'), ('body', ['Break']), ('orelse', [])]": 13, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "arguments -> [('args', ['Name', 'Name']), ('vararg', 'str'), ('kwarg', 'str'), ('defaults', ['Call'])]": 1, "While -> [('test', 'Compare'), ('body', ['Expr', 'Assign']), ('orelse', [])]": 1, "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['Assign', 'Assign', 'Assign'])]": 1, "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['Import'])]": 3, "Compare -> [('left', 'Subscript'), ('ops', ['In']), ('comparators', ['Call'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Return']), ('decorator_list', [])]": 23, "Compare -> [('left', 'Name'), ('ops', ['NotIn']), ('comparators', ['ListComp'])]": 1, "Call -> [('func', 'Name'), ('args', ['Name', 'Num', 'Str', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Call -> [('func', 'Attribute'), ('args', ['Str', 'Call', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['Num', 'Str', 'Str'])]": 1, "ExceptHandler -> [('type', 'Tuple'), ('name', 'Name'), ('body', ['Raise'])]": 3, "Compare -> [('left', 'Name'), ('ops', ['Eq']), ('comparators', ['Str'])]": 133, "For -> [('target', 'Name'), ('iter', 'BinOp'), ('body', ['Expr']), ('orelse', [])]": 1, "If -> [('test', 'UnaryOp'), ('body', ['Expr']), ('orelse', ['Assign', 'Assign', 'If', 'Assign', 'Assign', 'FunctionDef', 'If'])]": 1, "If -> [('test', 'Compare'), ('body', ['If', 'For']), ('orelse', ['If'])]": 1, "Compare -> [('left', 'Call'), ('ops', ['Lt']), ('comparators', ['Num'])]": 11, "If -> [('test', 'Call'), ('body', ['Assign']), ('orelse', ['Assign'])]": 20, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Assign']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Name', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str']), ('values', ['Attribute', 'Attribute', 'Attribute', 'Attribute'])]": 1, "ExceptHandler -> [('type', 'Attribute'), ('name', 'NoneType'), ('body', ['Return'])]": 7, "If -> [('test', 'Name'), ('body', ['If']), ('orelse', ['If'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['For', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Name', 'Num', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Compare -> [('left', 'Name'), ('ops', ['LtE']), ('comparators', ['Num'])]": 9, "BoolOp -> [('op', 'Or'), ('values', ['Name', 'UnaryOp'])]": 2, "If -> [('test', 'Name'), ('body', ['Assign', 'Assign', 'If']), ('orelse', [])]": 1, "Tuple -> [('elts', ['Attribute', 'Attribute', 'UnaryOp']), ('ctx', 'Load')]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name'])]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['If', 'Assign', 'If', 'If']), ('orelse', [])]": 1, "Index -> [('value', 'List')]": 2, "Call -> [('func', 'Name'), ('args', ['UnaryOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "While -> [('test', 'Name'), ('body', ['Assign', 'Expr']), ('orelse', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'Assign', 'Expr']), ('decorator_list', ['Name', 'Name', 'Name'])]": 1, "Call -> [('func', 'Name'), ('args', ['BinOp', 'Subscript']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Assign -> [('targets', ['Subscript']), ('value', 'Tuple')]": 10, "Compare -> [('left', 'Attribute'), ('ops', ['NotIn']), ('comparators', ['Name'])]": 3, "Compare -> [('left', 'Subscript'), ('ops', ['NotEq']), ('comparators', ['Call'])]": 1, "Call -> [('func', 'Name'), ('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Subscript']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', ['Name', 'Name', 'Name'])]": 1, "If -> [('test', 'Compare'), ('body', ['Return']), ('orelse', ['Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'While', 'Return'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'If', 'Expr']), ('decorator_list', [])]": 1, "comprehension -> [('target', 'Name'), ('iter', 'Name'), ('ifs', ['UnaryOp'])]": 3, "BinOp -> [('left', 'Num'), ('op', 'Pow'), ('right', 'Name')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "List -> [('elts', ['Call', 'Name', 'Name', 'Name']), ('ctx', 'Load')]": 1, "Compare -> [('left', 'Name'), ('ops', ['Gt']), ('comparators', ['Attribute'])]": 3, "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('orelse', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Dict']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 11, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 4, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'For', 'Assign', 'If', 'For', 'Assign', 'While', 'Return']), ('decorator_list', ['Attribute'])]": 1, "If -> [('test', 'Name'), ('body', ['Pass']), ('orelse', ['Expr', 'If', 'Expr', 'Expr'])]": 1, "Call -> [('func', 'Name'), ('args', ['Subscript', 'Attribute', 'Attribute', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Call -> [('func', 'Name'), ('args', ['Name', 'Attribute']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign']), ('decorator_list', [])]": 9, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'If', 'TryExcept', 'Return']), ('decorator_list', [])]": 2, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'BinOp']), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "BinOp -> [('left', 'Name'), ('op', 'Add'), ('right', 'Name')]": 33, "Tuple -> [('elts', ['List', 'Num', 'Name', 'Num', 'Num']), ('ctx', 'Load')]": 6, "arguments -> [('args', []), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', [])]": 82, "Assign -> [('targets', ['Attribute']), ('value', 'Dict')]": 25, "Compare -> [('left', 'Name'), ('ops', ['Eq']), ('comparators', ['Call'])]": 9, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'For', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'For']), ('decorator_list', [])]": 1, "Tuple -> [('elts', ['Name', 'Name']), ('ctx', 'Store')]": 375, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'If', 'If', 'Assign']), ('orelse', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Expr', 'If']), ('orelse', ['Raise'])]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Assign', 'Expr', 'Print']), ('orelse', [])]": 1, "While -> [('test', 'Num'), ('body', ['If', 'Assign', 'Assign', 'Assign', 'If']), ('orelse', [])]": 1, "Compare -> [('left', 'Subscript'), ('ops', ['Is']), ('comparators', ['Name'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['UnaryOp', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Num', 'Num', 'Name', 'Name', 'Str', 'Str', 'Str'])]": 1, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['If', 'If', 'If', 'Assign', 'If', 'Assign', 'For', 'Expr']), ('orelse', [])]": 1, "Call -> [('func', 'Attribute'), ('args', []), ('keywords', []), ('starargs', 'Name'), ('kwargs', 'Name')]": 11, "If -> [('test', 'UnaryOp'), ('body', ['If']), ('orelse', ['Expr', 'Expr', 'For'])]": 1, "Call -> [('func', 'Name'), ('args', ['Str', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 35, "Call -> [('func', 'Attribute'), ('args', ['Subscript', 'Subscript', 'Subscript', 'List']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['For', 'Assign', 'Assign', 'If', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "Attribute -> [('value', 'Dict'), ('attr', 'str'), ('ctx', 'Load')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'While']), ('decorator_list', [])]": 1, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Expr', 'Assign', 'If', 'Assign', 'Assign', 'If', 'Expr']), ('orelse', [])]": 1, "Return -> [('value', 'BoolOp')]": 27, "Call -> [('func', 'Attribute'), ('args', ['List', 'Attribute', 'List', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "If -> [('test', 'Compare'), ('body', ['Expr', 'Break']), ('orelse', [])]": 1, "Dict -> [('keys', ['Str', 'Str']), ('values', ['BinOp', 'Attribute'])]": 1, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Expr']), ('orelse', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Name', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 28, "If -> [('test', 'Attribute'), ('body', ['Assign', 'Assign']), ('orelse', [])]": 1, "If -> [('test', 'Name'), ('body', ['Assign', 'Assign', 'For']), ('orelse', ['Assign'])]": 1, "Call -> [('func', 'Name'), ('args', []), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'Attribute')]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['If', 'TryExcept', 'TryExcept', 'If', 'If', 'If', 'If', 'Expr', 'Assign', 'Assign', 'Expr']), ('orelse', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Compare', 'Compare']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'For', 'Assign']), ('decorator_list', [])]": 1, "Compare -> [('left', 'Attribute'), ('ops', ['IsNot']), ('comparators', ['Name'])]": 25, "Tuple -> [('elts', ['Call', 'Call', 'Call']), ('ctx', 'Load')]": 9, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If']), ('decorator_list', ['Name'])]": 7, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "Assign -> [('targets', ['Attribute']), ('value', 'BoolOp')]": 13, "Compare -> [('left', 'Subscript'), ('ops', ['Eq']), ('comparators', ['BinOp'])]": 4, "If -> [('test', 'Name'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'If', 'If', 'Return']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'If']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'If', 'Expr', 'Assign', 'For', 'If']), ('decorator_list', [])]": 1, "BoolOp -> [('op', 'And'), ('values', ['Call', 'Compare'])]": 9, "Call -> [('func', 'Attribute'), ('args', []), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'Name')]": 19, "Compare -> [('left', 'Attribute'), ('ops', ['NotIn']), ('comparators', ['Call'])]": 3, "Call -> [('func', 'Name'), ('args', []), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'Name')]": 1, "List -> [('elts', ['Dict', 'Dict', 'Dict', 'Dict', 'Dict']), ('ctx', 'Load')]": 1, "Call -> [('func', 'Attribute'), ('args', ['Call', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 26, "Assign -> [('targets', ['Name', 'Tuple']), ('value', 'Call')]": 1, "BoolOp -> [('op', 'Or'), ('values', ['BoolOp', 'Name'])]": 1, "IfExp -> [('test', 'Name'), ('body', 'Attribute'), ('orelse', 'Str')]": 1, "Call -> [('func', 'Attribute'), ('args', ['Subscript', 'Num', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 5, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr']), ('decorator_list', ['Name'])]": 1, "Call -> [('func', 'Name'), ('args', ['Attribute', 'Dict', 'Dict', 'List']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "For -> [('target', 'Tuple'), ('iter', 'Name'), ('body', ['If', 'If', 'If', 'Assign']), ('orelse', [])]": 1, "Tuple -> [('elts', ['Name', 'ListComp']), ('ctx', 'Load')]": 1, "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Expr', 'Expr']), ('orelse', ['Assign', 'Expr'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'TryExcept', 'Expr', 'TryFinally']), ('decorator_list', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name', 'Name', 'Name', 'Name', 'Name']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', ['Call'])]": 1, "ImportFrom -> [('module', 'str'), ('names', ['alias', 'alias']), ('level', 'int')]": 74, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'Assign', 'FunctionDef', 'Assign', 'FunctionDef', 'Assign', 'FunctionDef', 'Assign', 'FunctionDef', 'Assign', 'FunctionDef', 'Assign', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "Module -> [('body', ['Import', 'Assign', 'Expr', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'Import', 'Import', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'For', 'Expr', 'Assign', 'For', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Expr', 'Assign', 'Assign', 'Assign', 'While'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['BinOp', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 4, "Compare -> [('left', 'Name'), ('ops', ['Eq']), ('comparators', ['Name'])]": 63, "If -> [('test', 'Attribute'), ('body', ['Continue']), ('orelse', [])]": 2, "Call -> [('func', 'Name'), ('args', ['List', 'Attribute', 'Dict']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Call -> [('func', 'Name'), ('args', ['Attribute', 'Attribute', 'Attribute', 'Attribute', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "If -> [('test', 'UnaryOp'), ('body', ['Expr']), ('orelse', ['Expr'])]": 4, "Assign -> [('targets', ['Tuple']), ('value', 'Subscript')]": 14, "Tuple -> [('elts', ['Attribute', 'Attribute', 'Name']), ('ctx', 'Store')]": 1, "If -> [('test', 'BoolOp'), ('body', ['Expr', 'Expr']), ('orelse', [])]": 3, "Import -> [('names', ['alias', 'alias', 'alias'])]": 4, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Attribute', 'Call', 'Dict', 'Call', 'BoolOp', 'Attribute', 'Attribute', 'Attribute', 'Call'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Subscript', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 64, "Attribute -> [('value', 'BinOp'), ('attr', 'str'), ('ctx', 'Load')]": 5, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'ImportFrom', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'ClassDef', 'ClassDef', 'ClassDef', 'FunctionDef', 'FunctionDef', 'If'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'If', 'Assign', 'Assign', 'If', 'If', 'Return']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Tuple', 'Num', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 15, "While -> [('test', 'BinOp'), ('body', ['Expr']), ('orelse', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "ExceptHandler -> [('type', 'Name'), ('name', 'Name'), ('body', ['Expr'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'If']), ('orelse', ['If'])]": 1, "ExceptHandler -> [('type', 'Str'), ('name', 'NoneType'), ('body', ['Expr'])]": 1, "If -> [('test', 'Compare'), ('body', ['ImportFrom', 'Expr']), ('orelse', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Str', 'Call', 'Str', 'Str', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "List -> [('elts', ['Num', 'Num', 'BinOp', 'BinOp']), ('ctx', 'Load')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'If']), ('decorator_list', [])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Name', 'Name', 'Name'])]": 1, "Subscript -> [('value', 'Attribute'), ('slice', 'ExtSlice'), ('ctx', 'Store')]": 4, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Return']), ('decorator_list', [])]": 1, "Tuple -> [('elts', ['Call', 'Attribute', 'Attribute', 'Attribute']), ('ctx', 'Load')]": 1, "While -> [('test', 'BoolOp'), ('body', ['If', 'For']), ('orelse', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Print']), ('orelse', [])]": 2, "Assign -> [('targets', ['Name']), ('value', 'Str')]": 216, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'Assign', 'Import', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assert', 'If', 'If', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['FunctionDef', 'Assign', 'Assign', 'Return']), ('decorator_list', ['Name'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'For', 'Assert', 'Expr']), ('decorator_list', [])]": 1, "Compare -> [('left', 'Name'), ('ops', ['Lt']), ('comparators', ['Name'])]": 13, "Yield -> [('value', 'ListComp')]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Name', 'Name', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "Raise -> [('type', 'Call'), ('inst', 'NoneType'), ('tback', 'NoneType')]": 175, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'For', 'Assign', 'Return']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Tuple'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'Assign', 'If']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr']), ('decorator_list', ['Name'])]": 1, "For -> [('target', 'Tuple'), ('iter', 'List'), ('body', ['Assign', 'Expr', 'Assign', 'For']), ('orelse', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Subscript', 'Subscript']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "arguments -> [('args', ['Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name'])]": 45, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'If', 'Expr', 'Expr']), ('orelse', [])]": 1, "If -> [('test', 'Call'), ('body', ['Assign']), ('orelse', [])]": 47, "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'ImportFrom', 'ImportFrom', 'ClassDef', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name']), ('keywords', ['keyword', 'keyword']), ('starargs', 'Name'), ('kwargs', 'Name')]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Pass']), ('decorator_list', ['Call'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ClassDef', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "If -> [('test', 'Name'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'For']), ('orelse', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Assign', 'FunctionDef']), ('decorator_list', [])]": 6, "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['If', 'If', 'If']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'Expr', 'If', 'Assign', 'Expr', 'Expr', 'Assign', 'For', 'Expr']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'BinOp']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Compare -> [('left', 'Name'), ('ops', ['IsNot']), ('comparators', ['Attribute'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'While']), ('decorator_list', [])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Attribute', 'Attribute', 'Tuple'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Tuple', 'Name', 'Num', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'Assign', 'FunctionDef']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "BinOp -> [('left', 'BinOp'), ('op', 'FloorDiv'), ('right', 'Attribute')]": 1, "Import -> [('names', ['alias', 'alias'])]": 7, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'If', 'Assign', 'Assign']), ('orelse', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', []), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "List -> [('elts', ['Call', 'Call', 'Str', 'Str', 'Call']), ('ctx', 'Load')]": 1, "If -> [('test', 'BoolOp'), ('body', ['For', 'Expr']), ('orelse', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'For']), ('orelse', [])]": 2, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Num', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 7, "If -> [('test', 'Compare'), ('body', ['Break']), ('orelse', ['Assign'])]": 2, "If -> [('test', 'Name'), ('body', ['Delete']), ('orelse', [])]": 1, "If -> [('test', 'Call'), ('body', ['Delete', 'Delete']), ('orelse', [])]": 2, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Expr', 'Expr', 'Assign']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 4, "Assert -> [('test', 'Call'), ('msg', 'NoneType')]": 18, "Compare -> [('left', 'BinOp'), ('ops', ['Eq']), ('comparators', ['Name'])]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Print', 'Expr']), ('orelse', [])]": 3, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Expr', 'Assign', 'Assign', 'If', 'Expr']), ('orelse', [])]": 1, "List -> [('elts', ['Subscript', 'Subscript', 'Subscript']), ('ctx', 'Load')]": 3, "BinOp -> [('left', 'BoolOp'), ('op', 'Add'), ('right', 'Name')]": 2, "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'ClassDef'])]": 2, "ExceptHandler -> [('type', 'Name'), ('name', 'Name'), ('body', ['Raise'])]": 6, "Call -> [('func', 'Name'), ('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'str'), ('defaults', ['Name', 'Name', 'Name', 'Str', 'Str', 'Str', 'Subscript', 'Str', 'Str', 'Name'])]": 1, "While -> [('test', 'UnaryOp'), ('body', ['Expr', 'Expr', 'Assign', 'If', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'For', 'For', 'Pass']), ('orelse', [])]": 1, "Dict -> [('keys', ['Str']), ('values', ['Attribute'])]": 9, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Expr']), ('decorator_list', ['Call'])]": 1, "Pass -> <NULL>": 80, "Dict -> [('keys', ['Str', 'Str']), ('values', ['Num', 'Str'])]": 7, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Call', 'Call', 'Name'])]": 1, "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['Break'])]": 2, "If -> [('test', 'Compare'), ('body', ['Return']), ('orelse', [])]": 78, "Compare -> [('left', 'Subscript'), ('ops', ['In']), ('comparators', ['Attribute'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Delete']), ('decorator_list', [])]": 6, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 2, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'If', 'If', 'Expr']), ('orelse', [])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'str'), ('defaults', ['Name'])]": 1, "Assign -> [('targets', ['Attribute', 'Name']), ('value', 'Dict')]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Compare', 'Compare', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['For']), ('orelse', [])]": 7, "Tuple -> [('elts', ['Call']), ('ctx', 'Load')]": 14, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Expr', 'For', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'If', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['Dict', 'Dict', 'Dict'])]": 1, "If -> [('test', 'Call'), ('body', ['Delete', 'Assign']), ('orelse', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'ClassDef', 'FunctionDef']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Tuple', 'Tuple']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'ClassDef']), ('decorator_list', [])]": 1, "List -> [('elts', ['Tuple', 'Tuple', 'Tuple', 'Tuple']), ('ctx', 'Load')]": 6, "Attribute -> [('value', 'Name'), ('attr', 'str'), ('ctx', 'Store')]": 1060, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'TryExcept', 'Assign', 'If', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Str', 'Name', 'Name', 'Name', 'Name'])]": 2, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 27, "Call -> [('func', 'Attribute'), ('args', ['ListComp', 'List']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "If -> [('test', 'UnaryOp'), ('body', ['Return']), ('orelse', ['Assign', 'Assign', 'Return'])]": 3, "Call -> [('func', 'Name'), ('args', ['Name', 'Name']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'Name')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'For']), ('decorator_list', [])]": 1, "ExceptHandler -> [('type', 'Name'), ('name', 'Name'), ('body', ['Print', 'Expr', 'Continue'])]": 2, "Subscript -> [('value', 'Name'), ('slice', 'Slice'), ('ctx', 'Store')]": 14, "BinOp -> [('left', 'ListComp'), ('op', 'Add'), ('right', 'ListComp')]": 1, "comprehension -> [('target', 'Name'), ('iter', 'Name'), ('ifs', ['Call'])]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'For']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['If']), ('orelse', ['Raise'])]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Expr', 'Pass']), ('orelse', [])]": 3, "ListComp -> [('elt', 'BinOp'), ('generators', ['comprehension'])]": 11, "BinOp -> [('left', 'Tuple'), ('op', 'Add'), ('right', 'Call')]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Attribute']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 20, "If -> [('test', 'Compare'), ('body', ['Assign', 'Continue']), ('orelse', [])]": 2, "BinOp -> [('left', 'Name'), ('op', 'Add'), ('right', 'Tuple')]": 3, "BoolOp -> [('op', 'And'), ('values', ['Call', 'Attribute', 'Compare'])]": 2, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'ClassDef', 'ClassDef', 'FunctionDef', 'FunctionDef'])]": 1, "For -> [('target', 'Tuple'), ('iter', 'Attribute'), ('body', ['Assign', 'Assign', 'Assign']), ('orelse', [])]": 1, "List -> [('elts', ['BinOp', 'BinOp']), ('ctx', 'Load')]": 1, "BinOp -> [('left', 'Call'), ('op', 'Div'), ('right', 'Call')]": 5, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'Assign', 'Expr', 'Assign', 'Return']), ('decorator_list', ['Name'])]": 1, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['If', 'Assign', 'TryExcept', 'Assign', 'Assign', 'Assign', 'Assign']), ('orelse', [])]": 2, "BoolOp -> [('op', 'Or'), ('values', ['Compare', 'Attribute'])]": 3, "Compare -> [('left', 'Attribute'), ('ops', ['GtE']), ('comparators', ['Tuple'])]": 3, "Call -> [('func', 'Attribute'), ('args', ['Name']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 74, "Tuple -> [('elts', ['Name', 'Name', 'Num', 'Name']), ('ctx', 'Load')]": 1, "While -> [('test', 'Num'), ('body', ['Assign', 'If', 'AugAssign', 'If', 'If', 'Expr']), ('orelse', [])]": 1, "BinOp -> [('left', 'Attribute'), ('op', 'Pow'), ('right', 'BinOp')]": 2, "Slice -> [('lower', 'NoneType'), ('upper', 'Name'), ('step', 'NoneType')]": 21, "Dict -> [('keys', ['Str', 'Str']), ('values', ['Attribute', 'Attribute'])]": 5, "For -> [('target', 'Name'), ('iter', 'Tuple'), ('body', ['Assign', 'Assign', 'If']), ('orelse', [])]": 1, "Tuple -> [('elts', ['Num', 'Num', 'Attribute']), ('ctx', 'Load')]": 2, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Num', 'Str', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Lambda -> [('args', 'arguments'), ('body', 'Num')]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Str', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 3, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Expr', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Return']), ('decorator_list', [])]": 235, "ExceptHandler -> [('type', 'NoneType'), ('name', 'NoneType'), ('body', ['Raise'])]": 1, "TryFinally -> [('body', ['Expr', 'TryExcept']), ('finalbody', ['Expr', 'Expr'])]": 1, "comprehension -> [('target', 'Name'), ('iter', 'Tuple'), ('ifs', [])]": 6, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'TryFinally']), ('decorator_list', [])]": 2, "BoolOp -> [('op', 'Or'), ('values', ['Attribute', 'Call'])]": 2, "BoolOp -> [('op', 'And'), ('values', ['Call', 'Attribute'])]": 1, "If -> [('test', 'Call'), ('body', ['Assign', 'Continue']), ('orelse', [])]": 1, "Call -> [('func', 'Name'), ('args', []), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 82, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Name', 'Name', 'BinOp', 'Call', 'Call', 'Name', 'Name', 'Name', 'BinOp'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Tuple', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 3, "Tuple -> [('elts', ['Name', 'Str', 'Name']), ('ctx', 'Load')]": 9, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If']), ('decorator_list', [])]": 13, "BoolOp -> [('op', 'And'), ('values', ['UnaryOp', 'UnaryOp'])]": 5, "Lambda -> [('args', 'arguments'), ('body', 'Compare')]": 1, "Raise -> [('type', 'Name'), ('inst', 'Str'), ('tback', 'NoneType')]": 17, "AugAssign -> [('target', 'Attribute'), ('op', 'Add'), ('value', 'Num')]": 3, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Name', 'Subscript', 'Subscript', 'Name', 'Name', 'Name'])]": 2, "Raise -> [('type', 'NoneType'), ('inst', 'NoneType'), ('tback', 'NoneType')]": 13, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Attribute']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 3, "ClassDef -> [('name', 'str'), ('bases', ['Attribute', 'Attribute']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'FunctionDef', 'Assign', 'TryExcept']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Name', 'Name', 'Name']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "Assign -> [('targets', ['Name', 'Name']), ('value', 'Call')]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Str', 'Dict']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'For', 'Assign', 'Return']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'Expr']), ('decorator_list', [])]": 2, "Call -> [('func', 'Attribute'), ('args', ['Num', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Name']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 27, "For -> [('target', 'Tuple'), ('iter', 'List'), ('body', ['Assign', 'Assign', 'For']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'If']), ('orelse', ['Expr'])]": 1, "Compare -> [('left', 'Str'), ('ops', ['In']), ('comparators', ['Call'])]": 6, "Call -> [('func', 'Attribute'), ('args', ['Subscript']), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Return']), ('orelse', [])]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Print', 'While', 'For', 'If', 'If', 'Expr', 'Pass', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'If', 'Assign', 'Print', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Return']), ('decorator_list', [])]": 1, "UnaryOp -> [('op', 'USub'), ('operand', 'BinOp')]": 4, "Slice -> [('lower', 'Num'), ('upper', 'Name'), ('step', 'NoneType')]": 2, "comprehension -> [('target', 'Name'), ('iter', 'Attribute'), ('ifs', [])]": 11, "If -> [('test', 'Compare'), ('body', ['Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr']), ('orelse', [])]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]": 1, "If -> [('test', 'Name'), ('body', ['Assign', 'If', 'Assign']), ('orelse', ['Assign'])]": 2, "Tuple -> [('elts', ['BinOp', 'Num']), ('ctx', 'Load')]": 13, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign']), ('decorator_list', [])]": 4, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'If']), ('decorator_list', [])]": 1, "BoolOp -> [('op', 'Or'), ('values', ['Attribute', 'Attribute', 'Attribute'])]": 2, "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['Expr', 'Raise'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'FunctionDef', 'If', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Return']), ('decorator_list', [])]": 16, "Call -> [('func', 'Attribute'), ('args', ['Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 125, "List -> [('elts', ['Attribute', 'Num']), ('ctx', 'Load')]": 1, "Compare -> [('left', 'BinOp'), ('ops', ['NotEq']), ('comparators', ['Num'])]": 3, "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['Name', 'Call', 'Call'])]": 1, "BoolOp -> [('op', 'Or'), ('values', ['Call', 'Call'])]": 8, "Call -> [('func', 'Attribute'), ('args', ['Str', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 87, "Call -> [('func', 'Attribute'), ('args', ['Subscript', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 51, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Num', 'Num', 'Str', 'Num', 'Str', 'Num', 'Call', 'Call', 'Num', 'Num'])]": 2, "Tuple -> [('elts', ['Num', 'Num', 'Num', 'BinOp']), ('ctx', 'Load')]": 1, "Compare -> [('left', 'BinOp'), ('ops', ['NotEq']), ('comparators', ['Name'])]": 1, "Call -> [('func', 'Name'), ('args', ['Name', 'Str']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 3, "Call -> [('func', 'Name'), ('args', ['Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 78, "If -> [('test', 'Name'), ('body', ['AugAssign', 'If']), ('orelse', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Str', 'Attribute']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'If', 'If', 'Assign']), ('decorator_list', [])]": 1, "BinOp -> [('left', 'Attribute'), ('op', 'Mod'), ('right', 'Tuple')]": 2, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'For', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Str', 'Name']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "If -> [('test', 'Compare'), ('body', ['Print', 'Expr']), ('orelse', ['If'])]": 3, "Module -> [('body', ['Import', 'ImportFrom', 'ClassDef', 'ClassDef', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign'])]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'If'])]": 1, "Tuple -> [('elts', ['Num', 'Str', 'Name']), ('ctx', 'Load')]": 1, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'If']), ('orelse', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Name', 'Dict']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Assign', 'For', 'Return']), ('decorator_list', [])]": 1, "Call -> [('func', 'Name'), ('args', ['List', 'List', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "BinOp -> [('left', 'BinOp'), ('op', 'Sub'), ('right', 'Num')]": 6, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Assign', 'TryExcept', 'Expr']), ('orelse', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Subscript'), ('body', ['Assign', 'If', 'Expr']), ('orelse', [])]": 1, "Call -> [('func', 'Name'), ('args', ['List', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'For', 'For', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Tuple', 'Name', 'BinOp', 'Name', 'Name', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Call -> [('func', 'Attribute'), ('args', ['Num', 'BinOp', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Num', 'Str', 'Tuple']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 3, "If -> [('test', 'Compare'), ('body', ['Assign']), ('orelse', ['Assign', 'Assign', 'If'])]": 1, "arguments -> [('args', ['Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Tuple'])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "ImportFrom -> [('module', 'str'), ('names', ['alias']), ('level', 'int')]": 611, "If -> [('test', 'Attribute'), ('body', ['Pass']), ('orelse', ['If'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Attribute', 'Name', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "For -> [('target', 'Name'), ('iter', 'Subscript'), ('body', ['If', 'Expr']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'For', 'Expr', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'Call'), ('body', ['Assign', 'TryFinally']), ('orelse', [])]": 1, "Slice -> [('lower', 'UnaryOp'), ('upper', 'BinOp'), ('step', 'NoneType')]": 2, "TryExcept -> [('body', ['Assign']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 61, "Call -> [('func', 'Attribute'), ('args', ['Str', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 30, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['TryExcept', 'If', 'If', 'Assign', 'Assign', 'If', 'Return']), ('decorator_list', [])]": 1, "List -> [('elts', ['Tuple', 'Name']), ('ctx', 'Load')]": 1, "Tuple -> [('elts', ['Name', 'Name', 'Name', 'Name', 'Name']), ('ctx', 'Load')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Expr', 'If', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['BinOp', 'BinOp', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'For', 'If']), ('orelse', [])]": 1, "BinOp -> [('left', 'Str'), ('op', 'Mod'), ('right', 'Tuple')]": 215, "Call -> [('func', 'Name'), ('args', ['Num', 'BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 6, "Module -> [('body', ['Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef'])]": 1, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['If', 'Assign', 'If', 'If']), ('orelse', [])]": 1, "List -> [('elts', ['Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple']), ('ctx', 'Load')]": 1, "UnaryOp -> [('op', 'USub'), ('operand', 'Subscript')]": 1, "Tuple -> [('elts', ['Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute']), ('ctx', 'Load')]": 2, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Num', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 3, "Lambda -> [('args', 'arguments'), ('body', 'Name')]": 17, "arguments -> [('args', ['Name']), ('vararg', 'str'), ('kwarg', 'str'), ('defaults', [])]": 43, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'For', 'For']), ('decorator_list', ['Name'])]": 1, "List -> [('elts', ['Tuple', 'Name', 'Tuple']), ('ctx', 'Load')]": 1, "Call -> [('func', 'Attribute'), ('args', ['Tuple', 'Tuple']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "BinOp -> [('left', 'Subscript'), ('op', 'Mult'), ('right', 'Num')]": 6, "Tuple -> [('elts', ['Name', 'Name', 'BinOp']), ('ctx', 'Load')]": 1, "List -> [('elts', ['Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call']), ('ctx', 'Load')]": 1, "If -> [('test', 'UnaryOp'), ('body', ['Break']), ('orelse', [])]": 4, "BoolOp -> [('op', 'Or'), ('values', ['Subscript', 'Name'])]": 4, "TryExcept -> [('body', ['Expr', 'Assign']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Expr']), ('orelse', ['If', 'Expr'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Subscript'), ('body', ['Assign', 'If']), ('orelse', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'While', 'While', 'Assign', 'If']), ('orelse', [])]": 1, "BoolOp -> [('op', 'And'), ('values', ['Name', 'UnaryOp'])]": 11, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Expr', 'While', 'For', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'For', 'For', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'For', 'Assign', 'Assign', 'For']), ('decorator_list', [])]": 1, "Tuple -> [('elts', ['Tuple', 'Tuple', 'Tuple']), ('ctx', 'Store')]": 1, "Dict -> [('keys', ['Str', 'Str']), ('values', ['Call', 'Name'])]": 2, "Call -> [('func', 'Name'), ('args', ['Name', 'Tuple']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 14, "If -> [('test', 'Call'), ('body', ['Assign', 'If']), ('orelse', [])]": 4, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 2, "Compare -> [('left', 'Call'), ('ops', ['NotEq']), ('comparators', ['Call'])]": 5, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'ClassDef', 'FunctionDef'])]": 1, "Assign -> [('targets', ['Attribute']), ('value', 'ListComp')]": 6, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name', 'Name', 'Name', 'Name']), ('body', ['Expr', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "Print -> [('dest', 'NoneType'), ('values', ['Str', 'Attribute']), ('nl', 'bool')]": 3, "Expr -> [('value', 'Name')]": 7, "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['ImportFrom'])]": 11, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 2, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['If', 'If']), ('orelse', [])]": 4, "Tuple -> [('elts', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('ctx', 'Load')]": 2, "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['For', 'Assign'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Call', 'Name', 'Call', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Assert -> [('test', 'Name'), ('msg', 'NoneType')]": 3, "List -> [('elts', ['Num', 'Num', 'Num', 'Num', 'Num', 'BinOp', 'BinOp', 'Name', 'BinOp', 'BinOp', 'BinOp', 'Name', 'BinOp', 'Num']), ('ctx', 'Load')]": 2, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Num', 'List']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 4, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Name', 'Num', 'Num', 'Num']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "Call -> [('func', 'Attribute'), ('args', ['ListComp']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'AugAssign', 'Delete', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'If', 'If']), ('orelse', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Expr', 'Expr']), ('orelse', [])]": 3, "Tuple -> [('elts', ['Attribute', 'UnaryOp']), ('ctx', 'Load')]": 1, "While -> [('test', 'Num'), ('body', ['TryExcept', 'Expr']), ('orelse', [])]": 1, "TryExcept -> [('body', ['Assign', 'Expr']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "If -> [('test', 'Subscript'), ('body', ['Assign']), ('orelse', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'BinOp', 'BinOp', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1}