{"arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Str', 'Str', 'Str', 'Call', 'List', 'List', 'Num'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'Return']), ('decorator_list', ['Call'])]": 3, "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Return']), ('orelse', ['Assign', 'Assign', 'If', 'Expr', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr'])]": 1, "List -> [('elts', ['Str', 'Name', 'Attribute', 'Tuple', 'Name']), ('ctx', 'Load')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assert', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'If', 'Return']), ('decorator_list', [])]": 11, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'For', 'For', 'Assign']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'If', 'Assign', 'If', 'Assign', 'If', 'For', 'For', 'Assign', 'For', 'Assign', 'For', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'For', 'Expr', 'Assign', 'If', 'Assign', 'Assign', 'Expr', 'Return']), ('decorator_list', ['Name'])]": 1, "ExceptHandler -> [('type', 'Name'), ('name', 'Name'), ('body', ['For', 'If'])]": 2, "If -> [('test', 'Compare'), ('body', ['Assign', 'If', 'Expr']), ('orelse', [])]": 4, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Import', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'If', 'FunctionDef', 'If']), ('decorator_list', [])]": 4, "If -> [('test', 'Name'), ('body', ['ImportFrom']), ('orelse', ['ImportFrom'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'Assign', 'If']), ('decorator_list', [])]": 3, "Call -> [('func', 'Attribute'), ('args', ['Str', 'Call']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 6, "If -> [('test', 'BoolOp'), ('body', ['Assign', 'If', 'If', 'If']), ('orelse', [])]": 1, "If -> [('test', 'Attribute'), ('body', ['For', 'Print']), ('orelse', [])]": 3, "If -> [('test', 'Compare'), ('body', ['Expr']), ('orelse', ['If'])]": 147, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr']), ('orelse', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'If', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr']), ('orelse', [])]": 1, "List -> [('elts', ['Str', 'Name', 'Attribute', 'Attribute']), ('ctx', 'Load')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'For', 'If']), ('decorator_list', [])]": 2, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Str', 'Str', 'Str', 'Call', 'Call', 'Call', 'Str'])]": 1, "With -> [('context_expr', 'Call'), ('optional_vars', 'NoneType'), ('body', ['If', 'Expr', 'Assign', 'Expr'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assert', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 3, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Str', 'List'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr']), ('decorator_list', [])]": 65, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['If', 'Assign', 'For']), ('orelse', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Str', 'Str']), ('keywords', ['keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 7, "If -> [('test', 'BinOp'), ('body', ['Assign', 'If', 'Expr']), ('orelse', [])]": 3, "If -> [('test', 'Attribute'), ('body', ['For', 'Assign', 'Assign', 'Return']), ('orelse', [])]": 1, "BinOp -> [('left', 'Name'), ('op', 'Pow'), ('right', 'Num')]": 72, "While -> [('test', 'Call'), ('body', ['AugAssign', 'Assign']), ('orelse', [])]": 2, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'str'), ('defaults', ['Name', 'List', 'Name', 'Str'])]": 2, "Expr -> [('value', 'BoolOp')]": 13, "If -> [('test', 'Name'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'Expr']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assert', 'Assign', 'Assert']), ('decorator_list', [])]": 2, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Str', 'Call', 'Name'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ClassDef', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]": 4, "For -> [('target', 'Name'), ('iter', 'Subscript'), ('body', ['Assign', 'Assign', 'Delete', 'If']), ('orelse', [])]": 1, "Tuple -> [('elts', ['Call', 'Name', 'Call']), ('ctx', 'Load')]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'BinOp', 'Tuple', 'Call', 'Tuple']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str']), ('values', ['List', 'Name', 'Num', 'Num'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'For', 'If']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'If']), ('decorator_list', [])]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'Assign', 'FunctionDef', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 2, "For -> [('target', 'Tuple'), ('iter', 'Name'), ('body', ['Assign', 'If', 'Expr', 'Assign', 'If']), ('orelse', [])]": 2, "If -> [('test', 'Compare'), ('body', ['Expr', 'Assign', 'Expr', 'Return']), ('orelse', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Expr', 'Raise']), ('orelse', ['Expr'])]": 2, "ClassDef -> [('name', 'str'), ('bases', []), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'TryExcept', 'TryExcept', 'TryExcept', 'TryExcept', 'TryExcept']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'TryExcept', 'If', 'TryExcept', 'If', 'Return']), ('decorator_list', [])]": 1, "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'FunctionDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef'])]": 1, "If -> [('test', 'Compare'), ('body', ['Expr', 'AugAssign', 'Expr']), ('orelse', ['If'])]": 1, "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'If', 'If', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'If']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'BoolOp'), ('body', ['ImportFrom', 'Assign', 'Assign', 'For']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "If -> [('test', 'BoolOp'), ('body', ['Print', 'Return']), ('orelse', ['If'])]": 1, "Tuple -> [('elts', ['Call', 'Num']), ('ctx', 'Load')]": 7, "While -> [('test', 'Attribute'), ('body', ['Assign']), ('orelse', [])]": 5, "arguments -> [('args', ['Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'str'), ('defaults', [])]": 44, "List -> [('elts', ['Attribute', 'Lambda']), ('ctx', 'Load')]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Attribute', 'Call', 'Attribute', 'Attribute', 'Dict', 'Call', 'BoolOp', 'Attribute', 'Attribute', 'Attribute', 'Call'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Pass']), ('decorator_list', ['Name'])]": 7, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ClassDef', 'Expr']), ('decorator_list', [])]": 17, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'If', 'If', 'If', 'If', 'If']), ('orelse', [])]": 2, "ClassDef -> [('name', 'str'), ('bases', []), ('body', ['Expr', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "List -> [('elts', ['Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple']), ('ctx', 'Load')]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name', 'Name']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'If', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['AugAssign', 'Assign']), ('orelse', [])]": 2, "List -> [('elts', ['Tuple', 'Tuple', 'Tuple']), ('ctx', 'Load')]": 33, "Call -> [('func', 'Attribute'), ('args', ['Num', 'Num', 'Attribute', 'Num', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 3, "If -> [('test', 'Call'), ('body', ['TryExcept']), ('orelse', [])]": 20, "Tuple -> [('elts', ['Call', 'Call', 'Call', 'Call']), ('ctx', 'Load')]": 16, "TryExcept -> [('body', ['Assign', 'Assign']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 101, "Call -> [('func', 'Name'), ('args', ['Str', 'Str', 'Str', 'Dict', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Print', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Return']), ('decorator_list', [])]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'ClassDef'])]": 1, "ExceptHandler -> [('type', 'NoneType'), ('name', 'NoneType'), ('body', ['Expr', 'Assign'])]": 1, "ExtSlice -> [('dims', ['Slice', 'Slice', 'Slice'])]": 40, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'For', 'Expr']), ('decorator_list', [])]": 1, "If -> [('test', 'UnaryOp'), ('body', ['Expr', 'Return']), ('orelse', ['Expr', 'Return'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'If', 'Assign', 'Return']), ('decorator_list', [])]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'FunctionDef', 'FunctionDef', 'ClassDef', 'If'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'If', 'Return']), ('decorator_list', [])]": 1, "TryExcept -> [('body', ['Expr']), ('handlers', ['ExceptHandler']), ('orelse', ['If', 'For', 'If'])]": 1, "For -> [('target', 'Tuple'), ('iter', 'Name'), ('body', ['Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'For']), ('orelse', [])]": 1, "Compare -> [('left', 'Name'), ('ops', ['NotIn']), ('comparators', ['Tuple'])]": 19, "If -> [('test', 'Call'), ('body', ['If', 'Assign']), ('orelse', ['If'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['FunctionDef', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 1, "ExceptHandler -> [('type', 'NoneType'), ('name', 'NoneType'), ('body', ['Print', 'Print', 'Break'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Attribute', 'Num', 'Tuple']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 2, "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'Return']), ('orelse', ['Assign', 'Assign', 'Expr', 'Return'])]": 1, "TryExcept -> [('body', ['Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'If']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 1, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef'])]": 1, "BoolOp -> [('op', 'And'), ('values', ['Compare', 'Call'])]": 59, "If -> [('test', 'Call'), ('body', ['For']), ('orelse', ['If'])]": 5, "If -> [('test', 'Call'), ('body', ['Assign', 'Assign', 'TryExcept', 'Assign', 'Assign', 'Assert', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'For', 'Expr', 'Expr']), ('orelse', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Call', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "Tuple -> [('elts', ['Name', 'Tuple']), ('ctx', 'Load')]": 33, "Module -> [('body', ['Import', 'Expr', 'Import', 'ImportFrom', 'Import', 'ImportFrom', 'Import', 'Import', 'ClassDef'])]": 1, "Tuple -> [('elts', ['Call', 'Name', 'Tuple']), ('ctx', 'Load')]": 1, "While -> [('test', 'BoolOp'), ('body', ['Assign', 'Expr']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Assign', 'Assert', 'Assign', 'Assign', 'Assert', 'Assert', 'Assert']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['List']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 4, "If -> [('test', 'Compare'), ('body', ['Expr', 'Expr']), ('orelse', ['Expr', 'Expr'])]": 5, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Assert', 'Assign']), ('orelse', [])]": 1, "If -> [('test', 'Call'), ('body', ['Assign', 'TryFinally', 'Assign', 'If']), ('orelse', ['If'])]": 1, "UnaryOp -> [('op', 'Not'), ('operand', 'Name')]": 1259, "List -> [('elts', ['Dict', 'Dict', 'Dict', 'Dict']), ('ctx', 'Load')]": 6, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'If']), ('decorator_list', [])]": 1, "Module -> [('body', ['Import', 'Assign', 'Expr', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'Import', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Expr', 'Assign', 'Assign', 'Assign', 'Print', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'While'])]": 2, "BinOp -> [('left', 'Attribute'), ('op', 'Add'), ('right', 'Num')]": 78, "Module -> [('body', ['Import', 'FunctionDef'])]": 1, "While -> [('test', 'BoolOp'), ('body', ['Expr', 'Expr']), ('orelse', [])]": 2, "If -> [('test', 'Compare'), ('body', ['If', 'Assign', 'Assign', 'Assign', 'Assign', 'TryExcept']), ('orelse', ['Assign', 'Assign', 'If', 'Assign', 'Assign', 'Return'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]": 5, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Print']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'If', 'Assign', 'While', 'Assign', 'While', 'Expr', 'Assign', 'Return']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'TryExcept', 'Assign', 'If', 'Return']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['Assign', 'If', 'If', 'Assign', 'Expr']), ('orelse', [])]": 1, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef'])]": 1, "BinOp -> [('left', 'Call'), ('op', 'Mod'), ('right', 'Subscript')]": 5, "Tuple -> [('elts', ['Name', 'Call', 'Attribute']), ('ctx', 'Load')]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['If', 'Assign', 'Assign', 'If', 'If', 'For']), ('orelse', [])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Attribute', 'Name', 'Call', 'Name', 'Name'])]": 1, "Call -> [('func', 'Name'), ('args', ['Attribute', 'Name', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'For', 'Assign', 'While', 'Print']), ('decorator_list', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef']), ('decorator_list', [])]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'TryExcept', 'Import', 'Assign', 'ClassDef', 'ClassDef', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]": 1, "If -> [('test', 'Name'), ('body', ['Assign', 'If', 'If']), ('orelse', ['Assign'])]": 1, "Call -> [('func', 'Name'), ('args', ['Str', 'Call', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Compare -> [('left', 'Num'), ('ops', ['LtE']), ('comparators', ['Name'])]": 13, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Pass']), ('decorator_list', ['Call'])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'str'), ('defaults', ['Attribute', 'Str'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'Return']), ('decorator_list', [])]": 16, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Call', 'Call', 'Str', 'Call', 'Call', 'Call', 'Call', 'Str', 'Str', 'Str'])]": 1, "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['Import', 'Expr'])]": 1, "If -> [('test', 'Compare'), ('body', ['Import', 'ImportFrom', 'ImportFrom', 'If', 'Expr', 'Assign', 'Expr', 'Expr']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'ImportFrom', 'Assign', 'FunctionDef', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "If -> [('test', 'Attribute'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If']), ('orelse', [])]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'ClassDef', 'Assign', 'ClassDef', 'Assign', 'ClassDef', 'Assign', 'ClassDef', 'Assign', 'ClassDef', 'Assign', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef'])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'str'), ('kwarg', 'str'), ('defaults', ['Name', 'Name', 'Name'])]": 2, "If -> [('test', 'Name'), ('body', ['Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr']), ('orelse', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Name', 'Subscript', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'Name'), ('body', ['If', 'Assign', 'Return']), ('orelse', ['Return'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Expr', 'Assign', 'Expr', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 8, "BinOp -> [('left', 'Attribute'), ('op', 'Sub'), ('right', 'Attribute')]": 47, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Str', 'Str', 'Name'])]": 1, "BinOp -> [('left', 'BinOp'), ('op', 'BitAnd'), ('right', 'Compare')]": 6, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'For', 'Assign', 'If', 'Expr']), ('orelse', [])]": 1, "Subscript -> [('value', 'Name'), ('slice', 'ExtSlice'), ('ctx', 'Load')]": 449, "Call -> [('func', 'Name'), ('args', ['Name', 'Subscript']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 42, "If -> [('test', 'Compare'), ('body', ['For', 'If']), ('orelse', [])]": 1, "Tuple -> [('elts', ['Str', 'Str', 'Name', 'Str']), ('ctx', 'Load')]": 1, "For -> [('target', 'Tuple'), ('iter', 'Name'), ('body', ['TryExcept']), ('orelse', [])]": 2, "Eq -> <NULL>": 4522, "Call -> [('func', 'Attribute'), ('args', ['List', 'List', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['For', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "Print -> [('dest', 'NoneType'), ('values', ['Name', 'Name', 'BinOp']), ('nl', 'bool')]": 1, "Assign -> [('targets', ['Subscript', 'Subscript']), ('value', 'Name')]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', ['Name'])]": 1, "TryExcept -> [('body', ['Assign', 'If', 'Assign', 'If', 'Assign', 'If', 'Return']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Print', 'Print', 'Print', 'Print', 'Expr']), ('decorator_list', [])]": 1, "If -> [('test', 'Call'), ('body', ['Assign', 'Assign', 'If', 'Expr']), ('orelse', ['Raise'])]": 1, "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['If']), ('orelse', ['Assign', 'Expr', 'Expr', 'Expr'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Expr']), ('decorator_list', [])]": 77, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'TryFinally']), ('decorator_list', ['Name'])]": 1, "If -> [('test', 'Compare'), ('body', ['Print', 'If', 'If', 'If']), ('orelse', ['If'])]": 1, "If -> [('test', 'Attribute'), ('body', ['Return']), ('orelse', ['Expr', 'Return'])]": 1, "If -> [('test', 'Compare'), ('body', ['Expr', 'If', 'Expr', 'Assign', 'Break']), ('orelse', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Break']), ('orelse', [])]": 26, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'For', 'If']), ('decorator_list', [])]": 2, "If -> [('test', 'Attribute'), ('body', ['If', 'If']), ('orelse', ['Assign'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Print', 'Assign', 'Print']), ('decorator_list', [])]": 1, "Module -> [('body', ['Import', 'Import', 'TryExcept', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'FunctionDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'If'])]": 1, "List -> [('elts', ['List', 'List']), ('ctx', 'Load')]": 28, "ClassDef -> [('name', 'str'), ('bases', []), ('body', ['Expr', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 2, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'FunctionDef']), ('decorator_list', [])]": 62, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Name', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 36, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'If', 'Expr', 'Expr', 'Return', 'Expr']), ('decorator_list', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 2, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Pass']), ('orelse', [])]": 1, "If -> [('test', 'Name'), ('body', ['If', 'If', 'Raise']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Print']), ('decorator_list', [])]": 1, "BinOp -> [('left', 'Subscript'), ('op', 'Add'), ('right', 'Call')]": 9, "If -> [('test', 'Attribute'), ('body', ['Assign', 'For', 'Assign']), ('orelse', [])]": 3, "Dict -> [('keys', ['Str', 'Str']), ('values', ['Attribute', 'BinOp'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]": 5, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Assign', 'If', 'If', 'Expr', 'Expr', 'Return']), ('decorator_list', [])]": 1, "Tuple -> [('elts', ['Subscript', 'Call', 'Call', 'Subscript']), ('ctx', 'Load')]": 1, "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['Assign', 'If', 'If', 'If']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Assign', 'Assign', 'If', 'If', 'If', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Return']), ('decorator_list', ['Name'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'Name'), ('body', ['Print', 'Print', 'Print', 'Print', 'Print', 'Print']), ('orelse', [])]": 1, "BinOp -> [('left', 'Call'), ('op', 'Pow'), ('right', 'Num')]": 16, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'TryExcept', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'If', 'Assign', 'Assign', 'If', 'If', 'If', 'If', 'Assign', 'Assign', 'For', 'Return']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Assign', 'Expr', 'Expr', 'Expr']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "If -> [('test', 'Call'), ('body', ['Assign', 'Assign', 'Assign']), ('orelse', ['Assign'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['TryExcept', 'Return']), ('decorator_list', ['Attribute'])]": 1, "If -> [('test', 'Compare'), ('body', ['TryExcept', 'If', 'TryExcept']), ('orelse', ['Return'])]": 1, "If -> [('test', 'Call'), ('body', ['Assign', 'If', 'Expr', 'Assign', 'Assign', 'Assign', 'If']), ('orelse', [])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num'])]": 1, "BoolOp -> [('op', 'And'), ('values', ['Compare', 'Str'])]": 18, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Attribute', 'Call', 'Call', 'Str', 'Attribute', 'Name', 'Attribute', 'Attribute', 'Name', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Subscript', 'Attribute', 'Str'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'TryFinally', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'BoolOp'), ('body', ['Assign', 'If']), ('orelse', ['Assign', 'Raise'])]": 1, "TryExcept -> [('body', ['With']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 4, "TryFinally -> [('body', ['Assign', 'Expr', 'Assign', 'TryExcept']), ('finalbody', ['Expr'])]": 2, "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['If', 'Expr', 'Assign']), ('orelse', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr']), ('orelse', [])]": 1, "While -> [('test', 'Name'), ('body', ['Assign', 'If', 'Assign', 'If']), ('orelse', [])]": 2, "With -> [('context_expr', 'Attribute'), ('optional_vars', 'Name'), ('body', ['Expr', 'For'])]": 6, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'For', 'If', 'Assign', 'For', 'AugAssign', 'Return']), ('decorator_list', [])]": 1, "Lambda -> [('args', 'arguments'), ('body', 'UnaryOp')]": 10, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name'])]": 24, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 629, "Call -> [('func', 'Attribute'), ('args', ['GeneratorExp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 48, "Tuple -> [('elts', ['Name', 'Name', 'Tuple', 'Dict', 'Tuple']), ('ctx', 'Load')]": 2, "If -> [('test', 'Name'), ('body', ['For']), ('orelse', [])]": 46, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'TryExcept', 'Return']), ('decorator_list', [])]": 11, "ClassDef -> [('name', 'str'), ('bases', []), ('body', ['Expr', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Num', 'Attribute', 'Num', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'If', 'TryFinally']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'If', 'If', 'Expr']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Return']), ('orelse', ['Assign', 'While', 'Return'])]": 1, "Call -> [('func', 'Name'), ('args', ['Str', 'Name', 'Num', 'Num', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "If -> [('test', 'Compare'), ('body', ['Expr', 'Return']), ('orelse', ['If'])]": 21, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'If', 'If']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'If', 'Assign', 'For']), ('decorator_list', [])]": 1, "Dict -> [('keys', ['Str', 'Str']), ('values', ['Subscript', 'Num'])]": 1, "For -> [('target', 'Tuple'), ('iter', 'Attribute'), ('body', ['Assign']), ('orelse', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Break']), ('orelse', ['If'])]": 8, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['FunctionDef']), ('orelse', ['FunctionDef'])]": 7, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Num', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 32, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', ['Name'])]": 1, "BinOp -> [('left', 'Num'), ('op', 'Mod'), ('right', 'Num')]": 1, "For -> [('target', 'Tuple'), ('iter', 'Attribute'), ('body', ['Assign', 'If']), ('orelse', ['Raise'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'For', 'Assign', 'Expr', 'Assign', 'For']), ('decorator_list', [])]": 1, "If -> [('test', 'UnaryOp'), ('body', ['Expr', 'Expr', 'Delete']), ('orelse', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Str', 'Call', 'Tuple', 'Tuple', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "If -> [('test', 'Attribute'), ('body', ['AugAssign', 'AugAssign', 'AugAssign', 'If']), ('orelse', ['AugAssign', 'AugAssign', 'AugAssign'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['FunctionDef', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['Assign', 'If', 'If', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign']), ('orelse', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['BinOp', 'Subscript', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 4, "Call -> [('func', 'Attribute'), ('args', ['Call', 'Name', 'Subscript', 'Subscript']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Call -> [('func', 'Attribute'), ('args', ['Tuple', 'Num', 'Num', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Call -> [('func', 'Name'), ('args', ['Name', 'Dict']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'Call')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Expr']), ('decorator_list', ['Name'])]": 1, "If -> [('test', 'BinOp'), ('body', ['Expr']), ('orelse', ['If'])]": 2, "ClassDef -> [('name', 'str'), ('bases', []), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 16, "If -> [('test', 'Name'), ('body', ['Assign']), ('orelse', ['Raise'])]": 4, "Tuple -> [('elts', ['Str', 'Tuple', 'Dict']), ('ctx', 'Load')]": 3, "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign', 'Assign', 'AugAssign']), ('orelse', ['AugAssign'])]": 1, "If -> [('test', 'Compare'), ('body', ['AugAssign', 'If', 'If']), ('orelse', [])]": 1, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'ClassDef', 'ClassDef', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign'])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name', 'Name']), ('body', ['Expr', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'For']), ('decorator_list', [])]": 11, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Expr', 'Expr', 'TryExcept']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Return']), ('decorator_list', [])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Call', 'Name', 'Name', 'Call', 'Name', 'Attribute'])]": 1, "If -> [('test', 'Call'), ('body', ['Assign', 'Expr', 'If']), ('orelse', ['If', 'Expr'])]": 1, "If -> [('test', 'Call'), ('body', ['Assign', 'Return']), ('orelse', ['Assign', 'Return'])]": 1, "If -> [('test', 'Name'), ('body', ['Return']), ('orelse', [])]": 96, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Name', 'Name', 'Str']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 6, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'While', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "Compare -> [('left', 'Subscript'), ('ops', ['Lt']), ('comparators', ['Name'])]": 3, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'Import', 'ImportFrom', 'ClassDef', 'If'])]": 1, "BinOp -> [('left', 'List'), ('op', 'Mult'), ('right', 'BinOp')]": 6, "Call -> [('func', 'Name'), ('args', ['Call', 'Call', 'Call', 'Call', 'Call', 'Call']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "If -> [('test', 'UnaryOp'), ('body', ['Continue']), ('orelse', [])]": 91, "Call -> [('func', 'Attribute'), ('args', ['BinOp']), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'For', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['TryExcept', 'Assign', 'Assign', 'If']), ('orelse', [])]": 1, "If -> [('test', 'Attribute'), ('body', ['TryExcept']), ('orelse', ['Assign', 'Return'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'If', 'For', 'If', 'Assign', 'If', 'Assign', 'If', 'Assign', 'If', 'Return']), ('decorator_list', [])]": 2, "If -> [('test', 'Compare'), ('body', ['Assign', 'If']), ('orelse', ['Expr', 'Assign'])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['AugAssign', 'AugAssign']), ('decorator_list', [])]": 1, "BoolOp -> [('op', 'And'), ('values', ['UnaryOp', 'Call', 'Compare'])]": 1, "Assign -> [('targets', ['Name']), ('value', 'GeneratorExp')]": 8, "Dict -> [('keys', []), ('values', [])]": 1347, "If -> [('test', 'Call'), ('body', ['ImportFrom', 'Assign']), ('orelse', ['Assign'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'For', 'Assign', 'Expr', 'Assign']), ('decorator_list', [])]": 1, "TryExcept -> [('body', ['ImportFrom']), ('handlers', ['ExceptHandler']), ('orelse', ['Return'])]": 1, "IfExp -> [('test', 'Call'), ('body', 'Call'), ('orelse', 'Num')]": 1, "TryFinally -> [('body', ['Expr']), ('finalbody', ['Delete'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'For']), ('decorator_list', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name', 'Name', 'Name']), ('body', ['Expr', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'FunctionDef', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'Assign', 'TryExcept']), ('decorator_list', [])]": 1, "List -> [('elts', ['Name', 'Str', 'Str', 'Str', 'Str', 'Str', 'Name']), ('ctx', 'Load')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'If', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'If', 'If', 'Assign', 'Assign', 'If', 'If', 'Assign', 'Assign', 'For', 'Expr', 'For', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Return']), ('decorator_list', [])]": 1, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'FunctionDef', 'FunctionDef', 'If'])]": 1, "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'For', 'Expr', 'Expr', 'Expr']), ('orelse', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'Assign', 'Assert', 'Expr', 'Expr', 'Expr', 'Assert']), ('decorator_list', [])]": 1, "List -> [('elts', ['UnaryOp', 'UnaryOp', 'UnaryOp']), ('ctx', 'Load')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'If', 'If', 'If', 'Assign', 'Assign', 'If', 'Assign', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "Module -> [('body', ['Import', 'ImportFrom', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'Import', 'FunctionDef', 'FunctionDef', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr'])]": 1, "Module -> [('body', ['Import', 'Expr', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef'])]": 1, "If -> [('test', 'Attribute'), ('body', ['Expr']), ('orelse', ['Assign', 'Return'])]": 1, "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign']), ('orelse', ['Assign'])]": 11, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'ImportFrom', 'If', 'Assign', 'Assign', 'Expr', 'Return']), ('decorator_list', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Str', 'Name', 'Call', 'Num', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "TryExcept -> [('body', ['Assign', 'Assign', 'If', 'If', 'Assign']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'TryExcept', 'ImportFrom', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'ClassDef', 'ClassDef', 'FunctionDef'])]": 1, "BinOp -> [('left', 'Name'), ('op', 'Div'), ('right', 'Attribute')]": 21, "Tuple -> [('elts', ['BoolOp', 'Subscript', 'Call']), ('ctx', 'Load')]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Call', 'Call', 'Name', 'Call', 'Call'])]": 1, "If -> [('test', 'Name'), ('body', ['Print', 'If', 'If']), ('orelse', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Name', 'BinOp', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef'])]": 2, "AugAssign -> [('target', 'Name'), ('op', 'Mod'), ('value', 'Num')]": 2, "While -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'While', 'If', 'AugAssign']), ('orelse', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['BinOp', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 25, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "List -> [('elts', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('ctx', 'Load')]": 2, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Tuple', 'Name', 'Name', 'Name', 'Name'])]": 1, "If -> [('test', 'BoolOp'), ('body', ['Assign']), ('orelse', ['Print', 'Return'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'Call')]": 4, "If -> [('test', 'BoolOp'), ('body', ['Expr']), ('orelse', ['If', 'Expr', 'For', 'Expr', 'If'])]": 1, "If -> [('test', 'Compare'), ('body', ['If']), ('orelse', ['Assign', 'If'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Print', 'Assign', 'For']), ('decorator_list', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Num', 'Call', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "If -> [('test', 'Name'), ('body', ['FunctionDef', 'Assign', 'Assign', 'Assign']), ('orelse', ['Assign', 'Assign'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'While', 'Return']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'For', 'If', 'Assign', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Expr', 'Expr', 'Expr', 'If', 'If', 'If', 'If']), ('decorator_list', [])]": 1, "ExceptHandler -> [('type', 'NoneType'), ('name', 'NoneType'), ('body', ['Print', 'Continue'])]": 1, "Call -> [('func', 'Name'), ('args', ['Lambda', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "If -> [('test', 'Compare'), ('body', ['Expr', 'Assign', 'Assign', 'Expr']), ('orelse', [])]": 2, "Call -> [('func', 'Attribute'), ('args', ['Str', 'Str', 'Name', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'For', 'Return']), ('decorator_list', [])]": 128, "Call -> [('func', 'Name'), ('args', ['Call', 'Name', 'Num']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign']), ('decorator_list', [])]": 7, "Call -> [('func', 'Name'), ('args', ['Call', 'Num', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 5, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Expr', 'If']), ('orelse', [])]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'Print'])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Expr', 'Assign', 'Expr', 'Print', 'For']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr']), ('decorator_list', [])]": 266, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Name', 'Call', 'Name', 'Name', 'Call'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'If', 'Assign', 'Return']), ('decorator_list', ['Name'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'If']), ('decorator_list', [])]": 16, "If -> [('test', 'UnaryOp'), ('body', ['Expr', 'Expr', 'Expr', 'Return']), ('orelse', [])]": 1, "TryExcept -> [('body', ['Assign', 'Return']), ('handlers', ['ExceptHandler', 'ExceptHandler', 'ExceptHandler', 'ExceptHandler', 'ExceptHandler']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Expr', 'TryFinally', 'Assign', 'Expr', 'If']), ('decorator_list', [])]": 2, "Assert -> [('test', 'Call'), ('msg', 'BinOp')]": 10, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('orelse', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'If', 'If', 'Return']), ('orelse', [])]": 1, "Call -> [('func', 'Name'), ('args', ['IfExp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign']), ('orelse', ['Break'])]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'FunctionDef', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'Assign', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'Assign', 'FunctionDef', 'Assign', 'FunctionDef', 'Assign', 'Expr', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'Assign', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'Assign', 'Assign', 'Assign', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef'])]": 1, "If -> [('test', 'Call'), ('body', ['Expr', 'Expr', 'Expr', 'Expr', 'If', 'Raise']), ('orelse', ['Assign', 'Assign', 'Assign', 'Assign', 'If'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'If', 'Assign', 'Return']), ('decorator_list', [])]": 1, "Dict -> [('keys', ['Subscript']), ('values', ['Str'])]": 1, "Tuple -> [('elts', ['Name', 'Name', 'Name', 'Name']), ('ctx', 'Store')]": 96, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assert', 'For']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign']), ('orelse', ['Assign', 'For'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'For', 'For', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Raise']), ('decorator_list', [])]": 128, "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'TryExcept', 'Assign', 'ClassDef', 'FunctionDef', 'FunctionDef', 'Expr', 'Expr'])]": 1, "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'Assign']), ('orelse', ['Assign', 'Assign'])]": 4, "List -> [('elts', ['Attribute', 'Attribute', 'Attribute', 'Call']), ('ctx', 'Load')]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'str'), ('defaults', ['Name', 'Name', 'Name', 'Name'])]": 1, "BinOp -> [('left', 'Num'), ('op', 'Mult'), ('right', 'Attribute')]": 56, "Call -> [('func', 'Name'), ('args', ['Attribute', 'UnaryOp', 'UnaryOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "Tuple -> [('elts', ['Name', 'Name', 'Call', 'Call']), ('ctx', 'Load')]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Lambda']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 26, "If -> [('test', 'Call'), ('body', ['AugAssign']), ('orelse', ['AugAssign'])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign']), ('orelse', ['Assign', 'Raise'])]": 1, "ExceptHandler -> [('type', 'Attribute'), ('name', 'Name'), ('body', ['Expr'])]": 12, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assert', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assert', 'Assign', 'Assign', 'Assert', 'Assert', 'Assert', 'Assert', 'Assert', 'If', 'If', 'Assign', 'Assert', 'Assign', 'Assert', 'Assign', 'Assert', 'Assert', 'Assert']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Print', 'Print', 'For']), ('decorator_list', [])]": 1, "Tuple -> [('elts', ['Num', 'Subscript', 'Name']), ('ctx', 'Load')]": 1, "TryFinally -> [('body', ['TryFinally', 'Expr', 'ImportFrom', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('finalbody', ['Expr', 'Assign', 'Assign'])]": 1, "Compare -> [('left', 'Name'), ('ops', ['LtE']), ('comparators', ['BinOp'])]": 11, "ExceptHandler -> [('type', 'Name'), ('name', 'Name'), ('body', ['Assign', 'If'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'For', 'Return']), ('decorator_list', ['Attribute', 'Call'])]": 2, "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['Import', 'Assign'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assert', 'Assign', 'If']), ('decorator_list', [])]": 1, "BinOp -> [('left', 'Name'), ('op', 'Div'), ('right', 'Str')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Expr', 'For']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['If', 'Expr', 'Expr']), ('orelse', [])]": 3, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'If']), ('orelse', [])]": 58, "Call -> [('func', 'Attribute'), ('args', ['Str', 'BinOp', 'BinOp', 'Num', 'Num', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 8, "Call -> [('func', 'Name'), ('args', ['Attribute', 'ListComp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Call -> [('func', 'Name'), ('args', ['Call', 'Name', 'Num', 'BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 2, "Call -> [('func', 'Name'), ('args', ['Num', 'Call', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 3, "Call -> [('func', 'Name'), ('args', ['Str', 'Name', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "For -> [('target', 'Name'), ('iter', 'List'), ('body', ['Expr', 'Assign', 'Expr']), ('orelse', [])]": 2, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Name', 'Str', 'Name', 'Name', 'Name'])]": 1, "Assert -> [('test', 'Attribute'), ('msg', 'Str')]": 1, "List -> [('elts', ['Name', 'Call', 'Name']), ('ctx', 'Load')]": 2, "arguments -> [('args', ['Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Str', 'Call'])]": 2, "Print -> [('dest', 'NoneType'), ('values', ['Subscript', 'Str', 'Subscript']), ('nl', 'bool')]": 2, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Expr']), ('orelse', ['Expr', 'AugAssign'])]": 1, "BinOp -> [('left', 'Call'), ('op', 'BitXor'), ('right', 'BinOp')]": 1, "Tuple -> [('elts', ['Attribute', 'BoolOp']), ('ctx', 'Load')]": 3, "Tuple -> [('elts', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('ctx', 'Load')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'For', 'Assert', 'For']), ('decorator_list', [])]": 4, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Str', 'Str', 'Dict', 'Str', 'Str', 'Num', 'Str'])]": 3, "If -> [('test', 'Compare'), ('body', ['ImportFrom']), ('orelse', ['If'])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'str'), ('kwarg', 'str'), ('defaults', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name'])]": 1, "With -> [('context_expr', 'Attribute'), ('optional_vars', 'NoneType'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr'])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'If', 'Expr', 'Expr']), ('orelse', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'ClassDef']), ('decorator_list', [])]": 1, "TryExcept -> [('body', ['Expr', 'Expr', 'Assign']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 2, "Dict -> [('keys', ['Str', 'Str']), ('values', ['Subscript', 'Call'])]": 1, "If -> [('test', 'Name'), ('body', ['Assign', 'If']), ('orelse', ['If'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 1, "IfExp -> [('test', 'Attribute'), ('body', 'Call'), ('orelse', 'Name')]": 2, "Call -> [('func', 'Name'), ('args', ['Attribute', 'Str', 'Str', 'Name', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'Attribute')]": 1, "ExceptHandler -> [('type', 'Name'), ('name', 'Name'), ('body', ['Assert'])]": 7, "Call -> [('func', 'Name'), ('args', ['Name', 'BinOp', 'Name']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Expr', 'TryFinally']), ('decorator_list', [])]": 2, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Num', 'List', 'Attribute', 'Str', 'Name', 'Name'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Call', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'If', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'Assign', 'If', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Expr', 'AugAssign', 'Break']), ('orelse', [])]": 2, "For -> [('target', 'Name'), ('iter', 'Tuple'), ('body', ['Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'For']), ('orelse', [])]": 3, "BoolOp -> [('op', 'Or'), ('values', ['Attribute', 'Name'])]": 29, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Assign', 'Return']), ('decorator_list', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign']), ('decorator_list', [])]": 2, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Str', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 50, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]": 1, "Call -> [('func', 'Name'), ('args', ['BoolOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 37, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 159, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'TryExcept', 'TryExcept', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', ['Name'])]": 1, "Call -> [('func', 'Name'), ('args', ['Attribute', 'BinOp', 'BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'If', 'Assign', 'Assign', 'Assign', 'Expr', 'For', 'Assign', 'Assign', 'If', 'Expr', 'If', 'If', 'Expr', 'If', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'Expr', 'Return']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'For', 'Assert', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'If', 'Return']), ('decorator_list', [])]": 1, "UnaryOp -> [('op', 'Not'), ('operand', 'BoolOp')]": 54, "BinOp -> [('left', 'Str'), ('op', 'Mod'), ('right', 'Str')]": 8, "While -> [('test', 'UnaryOp'), ('body', ['Assign']), ('orelse', [])]": 1, "If -> [('test', 'BoolOp'), ('body', ['Expr', 'Return']), ('orelse', ['Return'])]": 1, "If -> [('test', 'Name'), ('body', ['Assert']), ('orelse', ['Assert'])]": 1, "Call -> [('func', 'Name'), ('args', ['Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'Name')]": 8, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'Assign', 'If']), ('decorator_list', [])]": 2, "Dict -> [('keys', ['Attribute', 'Str']), ('values', ['Name', 'Call'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Name', 'Name', 'Name', 'List']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Expr', 'If']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Global', 'Assign', 'Assign', 'If', 'AugAssign', 'Assign', 'Assign', 'While', 'Raise']), ('decorator_list', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assert', 'ImportFrom', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Return']), ('decorator_list', [])]": 2, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'FunctionDef', 'FunctionDef'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'If', 'For', 'Return']), ('decorator_list', [])]": 2, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'AugAssign']), ('orelse', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('orelse', [])]": 1, "Module -> [('body', ['Import', 'Assign', 'Expr', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'FunctionDef', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'For', 'Expr'])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Expr', 'Assign', 'Expr', 'Expr']), ('orelse', [])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['Str', 'List', 'Str'])]": 9, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Return']), ('decorator_list', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Name', 'Name', 'BinOp', 'Attribute', 'Name', 'Str', 'Str', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Pass']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "Slice -> [('lower', 'Num'), ('upper', 'Name'), ('step', 'NoneType')]": 25, "Call -> [('func', 'Name'), ('args', ['Call', 'Name', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "If -> [('test', 'Call'), ('body', ['If', 'Return']), ('orelse', ['Raise'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Assign', 'ClassDef', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Pass']), ('orelse', [])]": 3, "While -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'AugAssign', 'If', 'If']), ('orelse', [])]": 1, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'FunctionDef', 'If'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Str'), ('body', ['If']), ('orelse', [])]": 1, "Call -> [('func', 'Name'), ('args', ['BoolOp', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "If -> [('test', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'Assign', 'For', 'If', 'Expr', 'TryExcept']), ('orelse', [])]": 1, "If -> [('test', 'Call'), ('body', ['Assign']), ('orelse', ['Assign', 'Expr'])]": 4, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'TryExcept', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'TryExcept', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign']), ('orelse', ['If', 'Assign'])]": 1, "Dict -> [('keys', ['Str', 'Str']), ('values', ['Name', 'List'])]": 11, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['If', 'If']), ('orelse', [])]": 14, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Tuple', 'BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'Assign', 'If', 'Assign', 'If', 'Return']), ('decorator_list', ['Name'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'For', 'For', 'If', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'Call'), ('body', ['Assert', 'Assert', 'If']), ('orelse', ['If'])]": 1, "Tuple -> [('elts', ['Name', 'Subscript', 'Tuple']), ('ctx', 'Load')]": 1, "ExceptHandler -> [('type', 'Name'), ('name', 'Name'), ('body', ['Expr', 'Continue'])]": 4, "ExceptHandler -> [('type', 'Attribute'), ('name', 'NoneType'), ('body', ['Assign', 'Assign'])]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['FunctionDef', 'TryExcept', 'Expr']), ('decorator_list', [])]": 2, "If -> [('test', 'Compare'), ('body', ['Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr']), ('orelse', [])]": 1, "Dict -> [('keys', ['Str']), ('values', ['List'])]": 43, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['If', 'Assign', 'If', 'If', 'Assign', 'Expr']), ('orelse', [])]": 1, "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'If', 'Expr']), ('orelse', [])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Str', 'Str', 'List', 'Str', 'Str', 'Str'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'If', 'For', 'Expr', 'Assign', 'While', 'Expr', 'Return', 'Expr']), ('decorator_list', ['Attribute'])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['Delete']), ('orelse', [])]": 2, "List -> [('elts', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('ctx', 'Load')]": 4, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['TryExcept', 'Assign', 'If']), ('orelse', [])]": 1, "If -> [('test', 'BoolOp'), ('body', ['AugAssign', 'Assign']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'Assign', 'If', 'Expr']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assert', 'Return']), ('decorator_list', ['Call'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'For', 'If', 'Assign', 'Expr', 'If', 'For']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['FunctionDef', 'If', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'If', 'Assign', 'If', 'If', 'AugAssign', 'Assign', 'If', 'Expr', 'For']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'List'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr']), ('orelse', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Name', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'Name')]": 4, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name'])]": 1, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'ClassDef', 'ClassDef', 'FunctionDef', 'If'])]": 1, "Tuple -> [('elts', ['Num', 'Num', 'Call', 'Call']), ('ctx', 'Load')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'For', 'Return']), ('decorator_list', [])]": 1, "Tuple -> [('elts', ['Str', 'Attribute', 'Name']), ('ctx', 'Load')]": 9, "BoolOp -> [('op', 'Or'), ('values', ['BoolOp', 'Str'])]": 73, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 3, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Str', 'Attribute', 'Str', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 63, "If -> [('test', 'Call'), ('body', ['Pass']), ('orelse', ['If'])]": 4, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef'])]": 4, "arguments -> [('args', ['Name', 'Name', 'Name']), ('vararg', 'str'), ('kwarg', 'str'), ('defaults', ['Call', 'Call'])]": 1, "If -> [('test', 'Call'), ('body', ['Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'If', 'If', 'Assign', 'If', 'If', 'If', 'If', 'Assign', 'For', 'Expr', 'If', 'Expr', 'Expr', 'Expr', 'Print', 'Assign', 'Print', 'Expr', 'Print']), ('orelse', ['Assign', 'Assign', 'For', 'Expr'])]": 1, "List -> [('elts', ['Name', 'Str', 'Str', 'Name', 'Str', 'Name']), ('ctx', 'Load')]": 1, "BinOp -> [('left', 'List'), ('op', 'Add'), ('right', 'BinOp')]": 1, "IfExp -> [('test', 'UnaryOp'), ('body', 'List'), ('orelse', 'Name')]": 2, "While -> [('test', 'Attribute'), ('body', ['Assign', 'If']), ('orelse', [])]": 7, "Call -> [('func', 'Name'), ('args', ['Str', 'Str', 'Str', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'Attribute')]": 2, "If -> [('test', 'Compare'), ('body', ['Expr']), ('orelse', ['Raise'])]": 16, "For -> [('target', 'Tuple'), ('iter', 'Name'), ('body', ['If', 'If']), ('orelse', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'Return']), ('decorator_list', ['Name'])]": 4, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'Expr', 'Expr']), ('orelse', [])]": 1, "If -> [('test', 'Subscript'), ('body', ['Assign', 'Print', 'Expr']), ('orelse', [])]": 14, "Call -> [('func', 'Attribute'), ('args', ['Str', 'List']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Call -> [('func', 'Name'), ('args', ['Name', 'Attribute', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 3, "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['Str', 'Str', 'Num'])]": 6, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'If'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assert', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Expr', 'If', 'Return']), ('decorator_list', [])]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'Assign', 'If', 'Assign', 'Assign', 'For', 'Expr']), ('decorator_list', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', []), ('body', ['Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 3, "If -> [('test', 'Attribute'), ('body', ['Delete']), ('orelse', [])]": 2, "List -> [('elts', ['Name', 'Str', 'Name', 'Str', 'Str']), ('ctx', 'Load')]": 1, "While -> [('test', 'Name'), ('body', ['Assign', 'If', 'If', 'Assign']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'TryExcept', 'Assign', 'If', 'If', 'Return']), ('decorator_list', [])]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'ClassDef', 'ClassDef', 'If'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 10, "Call -> [('func', 'Name'), ('args', ['UnaryOp', 'Num', 'UnaryOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assert', 'Assert']), ('decorator_list', [])]": 2, "For -> [('target', 'Tuple'), ('iter', 'Name'), ('body', ['Expr', 'Assign', 'If', 'Assign']), ('orelse', [])]": 1, "TryExcept -> [('body', ['Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 1, "List -> [('elts', ['Str', 'BinOp', 'Str']), ('ctx', 'Load')]": 5, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['For', 'If']), ('orelse', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['If', 'If', 'If', 'If', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'If', 'Assign', 'Expr']), ('orelse', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Expr', 'Return']), ('orelse', ['Return'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'For', 'AugAssign', 'Assign', 'Assign', 'If', 'If', 'Return']), ('decorator_list', [])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name']), ('vararg', 'str'), ('kwarg', 'str'), ('defaults', ['Name', 'Name'])]": 3, "If -> [('test', 'Attribute'), ('body', ['Assign', 'If', 'Expr']), ('orelse', [])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Str', 'Str', 'Name', 'Num', 'Str', 'Str', 'Str', 'Num', 'Num', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Num', 'Str', 'Num'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Return']), ('decorator_list', ['Name'])]": 9, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['FunctionDef', 'Expr', 'Expr', 'TryFinally']), ('decorator_list', [])]": 1, "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign', 'Assign']), ('orelse', ['Assign'])]": 4, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'Assign', 'Expr', 'Assign', 'Return']), ('decorator_list', ['Name'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'For', 'For', 'Return']), ('decorator_list', [])]": 2, "Call -> [('func', 'Attribute'), ('args', ['Name', 'BinOp', 'Num', 'Name', 'Attribute', 'Attribute', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "Compare -> [('left', 'Attribute'), ('ops', ['NotIn']), ('comparators', ['List'])]": 4, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'If', 'Expr']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'If', 'Assign', 'If']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'Assign', 'For', 'Expr']), ('decorator_list', [])]": 1, "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'If'])]": 1, "If -> [('test', 'Attribute'), ('body', ['Assign', 'Assign', 'Assign', 'For', 'Assign', 'Assign', 'Assign', 'For', 'If']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 29, "ClassDef -> [('name', 'str'), ('bases', ['Name', 'Attribute']), ('body', ['Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'Import', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'ClassDef', 'ClassDef', 'Expr', 'Expr', 'ImportFrom', 'Expr', 'Assign', 'Assign'])]": 1, "If -> [('test', 'Name'), ('body', ['ImportFrom', 'If']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'For', 'For', 'For', 'For', 'Assign']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Str', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 59, "Call -> [('func', 'Name'), ('args', ['Call', 'Lambda']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Call -> [('func', 'Attribute'), ('args', ['List', 'List', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Num', 'Num'])]": 14, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'TryExcept', 'If', 'For', 'For', 'Assign', 'Assign', 'For']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['TryExcept', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Return']), ('decorator_list', ['Name'])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign']), ('orelse', ['Print'])]": 2, "Print -> [('dest', 'NoneType'), ('values', ['Name', 'Name']), ('nl', 'bool')]": 11, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name'])]": 1, "If -> [('test', 'BoolOp'), ('body', ['If']), ('orelse', ['Assign'])]": 9, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'If', 'If', 'Expr']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Expr', 'Expr', 'For']), ('orelse', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['TryExcept']), ('orelse', [])]": 33, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'ImportFrom', 'If', 'Assign', 'Assign', 'Assign', 'If', 'Return']), ('decorator_list', [])]": 2, "Call -> [('func', 'Yield'), ('args', ['Num', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "If -> [('test', 'BoolOp'), ('body', ['ImportFrom', 'ImportFrom', 'Print', 'Assign']), ('orelse', ['Assign', 'Assign', 'Import', 'Import', 'Print', 'If'])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 4, "Call -> [('func', 'Attribute'), ('args', ['Name', 'ListComp', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'AugAssign', 'AugAssign', 'AugAssign', 'Assign', 'Assign', 'AugAssign', 'AugAssign', 'AugAssign', 'AugAssign', 'AugAssign', 'AugAssign', 'AugAssign', 'AugAssign', 'AugAssign', 'AugAssign', 'Expr', 'Expr', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'With']), ('decorator_list', [])]": 2, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'ClassDef'])]": 1, "With -> [('context_expr', 'Call'), ('optional_vars', 'NoneType'), ('body', ['With'])]": 2, "TryFinally -> [('body', ['Assign', 'Expr']), ('finalbody', ['Assign'])]": 2, "If -> [('test', 'BoolOp'), ('body', ['AugAssign']), ('orelse', [])]": 18, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'For', 'Assign']), ('decorator_list', [])]": 5, "If -> [('test', 'UnaryOp'), ('body', ['Print', 'Expr']), ('orelse', [])]": 12, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "IfExp -> [('test', 'Call'), ('body', 'Call'), ('orelse', 'Call')]": 3, "For -> [('target', 'Name'), ('iter', 'BinOp'), ('body', ['Assign', 'For', 'Assign', 'If', 'Assign']), ('orelse', [])]": 1, "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'ClassDef'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Return']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'ListComp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['FunctionDef', 'Assign', 'FunctionDef', 'Assign', 'FunctionDef']), ('decorator_list', [])]": 1, "Invert -> <NULL>": 15, "BinOp -> [('left', 'Name'), ('op', 'Mod'), ('right', 'Call')]": 9, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 2, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'If', 'ClassDef', 'ClassDef', 'ClassDef', 'Assign'])]": 1, "Call -> [('func', 'Name'), ('args', ['Subscript', 'Subscript', 'Subscript', 'Attribute', 'Attribute', 'Attribute', 'Name', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "If -> [('test', 'UnaryOp'), ('body', ['TryExcept']), ('orelse', ['If'])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'ClassDef']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['Assign', 'If', 'Expr']), ('orelse', [])]": 5, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 16, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "While -> [('test', 'Compare'), ('body', ['If', 'Assign', 'If']), ('orelse', [])]": 1, "For -> [('target', 'Tuple'), ('iter', 'Tuple'), ('body', ['Assign', 'TryFinally']), ('orelse', [])]": 1, "Dict -> [('keys', ['Str', 'Str']), ('values', ['Attribute', 'Name'])]": 14, "If -> [('test', 'Compare'), ('body', ['Assign', 'AugAssign', 'While', 'If']), ('orelse', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'TryExcept', 'Assign', 'Assign', 'TryExcept', 'Assign', 'Assign', 'Expr', 'If', 'Return']), ('decorator_list', [])]": 1, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'Expr']), ('orelse', [])]": 3, "arguments -> [('args', ['Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Attribute'])]": 9, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'If', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'If', 'Expr', 'Expr', 'Expr']), ('orelse', ['If'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'Assert', 'Return']), ('decorator_list', ['Call'])]": 1, "If -> [('test', 'Compare'), ('body', ['Expr', 'Expr', 'Expr', 'Return']), ('orelse', [])]": 8, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['List'])]": 5, "If -> [('test', 'Call'), ('body', ['With']), ('orelse', ['Expr'])]": 1, "If -> [('test', 'Call'), ('body', ['Assign', 'Assign', 'For', 'Return']), ('orelse', [])]": 2, "Call -> [('func', 'Attribute'), ('args', ['Str', 'Call']), ('keywords', ['keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "Tuple -> [('elts', ['BoolOp', 'Call', 'Attribute']), ('ctx', 'Load')]": 2, "Module -> [('body', ['ImportFrom', 'Assign', 'Print', 'Assign', 'Assign', 'Assign', 'Assign', 'Print', 'Print'])]": 1, "Print -> [('dest', 'NoneType'), ('values', ['Name', 'Subscript', 'Subscript', 'Subscript', 'Subscript']), ('nl', 'bool')]": 1, "IfExp -> [('test', 'Name'), ('body', 'Subscript'), ('orelse', 'Subscript')]": 1, "Compare -> [('left', 'Name'), ('ops', ['Gt']), ('comparators', ['Num'])]": 164, "For -> [('target', 'Name'), ('iter', 'Tuple'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('orelse', [])]": 1, "If -> [('test', 'UnaryOp'), ('body', ['Expr', 'Assign', 'Assign', 'If', 'If', 'Assign', 'Assign']), ('orelse', [])]": 1, "While -> [('test', 'Name'), ('body', ['Assign', 'For', 'If', 'AugAssign']), ('orelse', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Tuple'), ('body', ['Assign', 'For', 'For']), ('orelse', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Delete']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'AugAssign', 'If', 'If', 'If', 'Return']), ('decorator_list', [])]": 1, "While -> [('test', 'Call'), ('body', ['Assign', 'Expr', 'Assign', 'Expr']), ('orelse', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Raise']), ('orelse', ['If'])]": 20, "arguments -> [('args', ['Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Str', 'Str'])]": 22, "UnaryOp -> [('op', 'USub'), ('operand', 'Subscript')]": 11, "If -> [('test', 'Name'), ('body', ['Assign', 'Assign', 'If']), ('orelse', ['Expr'])]": 1, "Dict -> [('keys', ['Attribute']), ('values', ['Attribute'])]": 4, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Assign', 'While']), ('orelse', [])]": 1, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['If', 'If']), ('orelse', [])]": 22, "Call -> [('func', 'BinOp'), ('args', []), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 4, "Call -> [('func', 'Name'), ('args', ['BinOp', 'Num', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 7, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'If', 'Assign', 'TryExcept', 'If', 'Expr', 'Assign', 'Expr', 'Expr', 'AugAssign', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'If', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('orelse', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Assign', 'Assign', 'For', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Delete']), ('orelse', ['Assign'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'TryFinally']), ('decorator_list', [])]": 2, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Str', 'Str']), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'While', 'Assign', 'Return']), ('decorator_list', [])]": 2, "ClassDef -> [('name', 'str'), ('bases', ['Name', 'Name']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "If -> [('test', 'UnaryOp'), ('body', ['Import', 'If']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "TryFinally -> [('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('finalbody', ['Expr'])]": 1, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'For', 'Assign', 'For', 'If', 'For']), ('orelse', [])]": 2, "If -> [('test', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'Assign', 'Expr', 'Return']), ('orelse', [])]": 1, "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'ClassDef', 'FunctionDef', 'FunctionDef'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'For', 'Assign', 'Return']), ('decorator_list', [])]": 2, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['If']), ('orelse', ['Return'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "If -> [('test', 'Name'), ('body', ['Expr', 'Expr', 'Print', 'Print', 'Print', 'Print', 'Print', 'While']), ('orelse', ['Expr'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If']), ('decorator_list', [])]": 1, "While -> [('test', 'Name'), ('body', ['AugAssign', 'If']), ('orelse', [])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'str'), ('defaults', ['Name', 'Name'])]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'TryExcept', 'If', 'If', 'Assign', 'If']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr']), ('decorator_list', ['Attribute'])]": 4, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Expr', 'If', 'Expr', 'If', 'Assign']), ('orelse', [])]": 1, "Add -> <NULL>": 6440, "Module -> [('body', ['Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'Assign', 'Expr']), ('decorator_list', [])]": 6, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Expr', 'If', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'FunctionDef', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "If -> [('test', 'Name'), ('body', ['If', 'If', 'If', 'If', 'If']), ('orelse', [])]": 1, "ExceptHandler -> [('type', 'NoneType'), ('name', 'NoneType'), ('body', ['Print', 'Print'])]": 1, "AugAssign -> [('target', 'Name'), ('op', 'Sub'), ('value', 'BinOp')]": 2, "Call -> [('func', 'Attribute'), ('args', ['List', 'BinOp']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 2, "Compare -> [('left', 'Call'), ('ops', ['LtE']), ('comparators', ['Num'])]": 26, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assert', 'Assign', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'Call'), ('body', ['Return']), ('orelse', [])]": 258, "List -> [('elts', ['Attribute', 'Str', 'Name', 'Name']), ('ctx', 'Load')]": 5, "Module -> [('body', ['Import', 'Assign', 'ImportFrom', 'Expr', 'ImportFrom', 'ImportFrom', 'Assign', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'FunctionDef', 'Expr', 'Expr', 'Expr', 'Expr', 'ClassDef', 'Assign', 'Assign'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Return']), ('decorator_list', [])]": 519, "If -> [('test', 'Name'), ('body', ['Assign', 'If']), ('orelse', ['Raise'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'For', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'For', 'Assign', 'For', 'Expr', 'For']), ('decorator_list', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', []), ('body', ['Expr', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 4, "IfExp -> [('test', 'Compare'), ('body', 'Name'), ('orelse', 'Num')]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign']), ('orelse', ['Raise'])]": 8, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'If', 'Assign', 'If', 'Assign', 'If', 'Return']), ('decorator_list', [])]": 2, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Attribute', 'Name', 'Attribute', 'Name', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'For', 'TryExcept']), ('orelse', [])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Subscript', 'Subscript', 'Subscript', 'Str', 'Str', 'IfExp'])]": 1, "If -> [('test', 'Name'), ('body', ['Assign', 'Print']), ('orelse', [])]": 1, "TryExcept -> [('body', ['If', 'Expr', 'If', 'Return']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 1, "List -> [('elts', ['Name', 'Num']), ('ctx', 'Load')]": 4, "If -> [('test', 'Call'), ('body', ['Assign', 'Expr', 'Assign', 'If']), ('orelse', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['If', 'Assign', 'If', 'Assign', 'TryExcept']), ('orelse', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Expr', 'Assign']), ('decorator_list', [])]": 2, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['If', 'TryExcept']), ('orelse', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Name', 'Str']), ('keywords', []), ('starargs', 'Attribute'), ('kwargs', 'NoneType')]": 1, "Compare -> [('left', 'Name'), ('ops', ['GtE']), ('comparators', ['Num'])]": 104, "Call -> [('func', 'Attribute'), ('args', ['List', 'Str', 'Dict']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 4, "While -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'If', 'AugAssign']), ('orelse', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Expr', 'Assign', 'Assign', 'Assign']), ('orelse', [])]": 2, "arguments -> [('args', ['Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', [])]": 8863, "Tuple -> [('elts', ['BinOp', 'Subscript']), ('ctx', 'Load')]": 6, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Delete', 'Expr']), ('orelse', [])]": 1, "BinOp -> [('left', 'Subscript'), ('op', 'Div'), ('right', 'Num')]": 34, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ImportFrom', 'ImportFrom', 'ClassDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'ClassDef'])]": 1, "Call -> [('func', 'Name'), ('args', ['BinOp', 'Name', 'Name']), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'TryExcept', 'ClassDef', 'ClassDef', 'FunctionDef', 'ClassDef', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef'])]": 1, "If -> [('test', 'BoolOp'), ('body', ['Expr', 'Expr', 'If']), ('orelse', ['If'])]": 1, "arguments -> [('args', ['Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Name'])]": 10, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import'])]": 1, "If -> [('test', 'BoolOp'), ('body', ['If', 'If', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign']), ('orelse', [])]": 1, "BinOp -> [('left', 'Attribute'), ('op', 'BitAnd'), ('right', 'BinOp')]": 2, "IfExp -> [('test', 'Name'), ('body', 'Attribute'), ('orelse', 'Name')]": 1, "Call -> [('func', 'Name'), ('args', ['Compare', 'Compare']), ('keywords', []), ('starargs', 'Name'), ('kwargs', 'NoneType')]": 5, "Call -> [('func', 'Attribute'), ('args', []), ('keywords', []), ('starargs', 'Call'), ('kwargs', 'NoneType')]": 16, "Call -> [('func', 'Name'), ('args', ['Attribute', 'IfExp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Module -> [('body', ['Import', 'Expr', 'Import', 'Import', 'Expr', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Import', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Assert', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr'])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'If', 'Assign', 'Assign', 'Assign', 'If', 'Expr', 'Assign', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "Assert -> [('test', 'Call'), ('msg', 'Call')]": 4, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Num', 'Name', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 8, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'FunctionDef', 'FunctionDef', 'ClassDef'])]": 1, "If -> [('test', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'If', 'If']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['TryExcept', 'Assign', 'For', 'Delete', 'Assign', 'If', 'If']), ('decorator_list', [])]": 2, "ClassDef -> [('name', 'str'), ('bases', []), ('body', ['Expr', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 5, "Call -> [('func', 'Name'), ('args', ['Name', 'Str', 'Subscript']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'If', 'If', 'Assign', 'For', 'If', 'If', 'Assign', 'For', 'If', 'If', 'Assign', 'For', 'If', 'If', 'Expr', 'Assign', 'Assign', 'Assign', 'For', 'Expr', 'Expr', 'Return']), ('decorator_list', [])]": 1, "ImportFrom -> [('module', 'str'), ('names', ['alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias']), ('level', 'int')]": 6, "TryFinally -> [('body', ['Assign', 'TryFinally', 'Expr']), ('finalbody', ['Expr'])]": 1, "If -> [('test', 'Name'), ('body', ['Break']), ('orelse', [])]": 12, "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'FunctionDef', 'If'])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name', 'Name']), ('body', ['Assign']), ('decorator_list', [])]": 3, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Name', 'BinOp']), ('keywords', ['keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Expr', 'Expr', 'Assign', 'Expr']), ('decorator_list', ['Name'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'If', 'If']), ('decorator_list', [])]": 1, "If -> [('test', 'Attribute'), ('body', ['For']), ('orelse', ['If'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'If', 'Expr', 'Assign', 'For', 'For', 'Return']), ('decorator_list', ['Call'])]": 1, "With -> [('context_expr', 'Call'), ('optional_vars', 'Name'), ('body', ['Print', 'Expr', 'Expr', 'Expr', 'Assign'])]": 1, "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['Assign', 'If', 'Assign', 'If', 'Expr', 'Assign']), ('orelse', [])]": 2, "For -> [('target', 'Name'), ('iter', 'Tuple'), ('body', ['Assign', 'Assign', 'Expr']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'If', 'If', 'If', 'Assign', 'For', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assert', 'Assert', 'Assign', 'Assert', 'Assert']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'For', 'For', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'For', 'Expr', 'Return']), ('decorator_list', [])]": 1, "ExceptHandler -> [('type', 'Name'), ('name', 'Name'), ('body', ['Assign', 'If', 'Assign', 'Return'])]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'If'])]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'If'])]": 1, "Call -> [('func', 'Name'), ('args', ['Num', 'Num', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Call -> [('func', 'Attribute'), ('args', ['List', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 18, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'For', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'If', 'Assign', 'For', 'For']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'ImportFrom', 'Import', 'Assign', 'For', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'If', 'Assign', 'Assign']), ('orelse', ['Assign', 'Assign'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Global', 'TryExcept', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Tuple', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 3, "If -> [('test', 'UnaryOp'), ('body', ['ImportFrom']), ('orelse', ['Assign'])]": 2, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['If', 'If', 'For', 'For']), ('orelse', [])]": 2, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Name', 'ListComp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Num', 'Name'])]": 2, "If -> [('test', 'Name'), ('body', ['Expr', 'Expr', 'Expr']), ('orelse', ['Expr'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "For -> [('target', 'Tuple'), ('iter', 'Name'), ('body', ['If', 'If', 'If']), ('orelse', [])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Name', 'Attribute', 'Dict', 'Str'])]": 8, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Expr', 'Return']), ('orelse', ['If'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Attribute', 'Str', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 6, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'If', 'If', 'If', 'Expr']), ('decorator_list', [])]": 1, "Print -> [('dest', 'NoneType'), ('values', ['BinOp', 'Str', 'Subscript']), ('nl', 'bool')]": 1, "If -> [('test', 'Subscript'), ('body', ['Assign', 'Assign', 'Print', 'Print']), ('orelse', [])]": 1, "BinOp -> [('left', 'Num'), ('op', 'LShift'), ('right', 'Attribute')]": 1, "Dict -> [('keys', ['Name', 'Name', 'Name', 'Name']), ('values', ['Name', 'Name', 'Name', 'Name'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Str', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'Expr']), ('orelse', ['Assign'])]": 1, "If -> [('test', 'BinOp'), ('body', ['Assign']), ('orelse', ['Assign'])]": 5, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Str', 'Str', 'Call', 'Call'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'If', 'Expr', 'Expr', 'Return']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Call']), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'Name'), ('kwargs', 'Name')]": 3, "Module -> [('body', ['Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'Assign', 'ClassDef', 'ClassDef', 'ClassDef'])]": 1, "For -> [('target', 'Tuple'), ('iter', 'Attribute'), ('body', ['Expr']), ('orelse', [])]": 7, "With -> [('context_expr', 'Call'), ('optional_vars', 'NoneType'), ('body', ['If'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 3, "Call -> [('func', 'Name'), ('args', ['Compare', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 4, "Compare -> [('left', 'Attribute'), ('ops', ['LtE', 'LtE']), ('comparators', ['Name', 'Attribute'])]": 5, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'If', 'Assign', 'If', 'FunctionDef', 'Return']), ('decorator_list', ['Name'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Global', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'str'), ('defaults', ['Dict', 'Name'])]": 12, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'If', 'If']), ('decorator_list', ['Call', 'Name'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Global', 'Print', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'If', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'For', 'Print', 'Expr']), ('decorator_list', [])]": 1, "If -> [('test', 'BoolOp'), ('body', ['Assign', 'If']), ('orelse', ['Expr'])]": 1, "BinOp -> [('left', 'Num'), ('op', 'Mult'), ('right', 'Subscript')]": 17, "Call -> [('func', 'Name'), ('args', ['ListComp', 'List']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 3, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'If']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'FunctionDef', 'FunctionDef', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'For', 'For', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "TryExcept -> [('body', ['If', 'If']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 3, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'Expr', 'Expr']), ('orelse', [])]": 1, "Compare -> [('left', 'Attribute'), ('ops', ['LtE']), ('comparators', ['Attribute'])]": 7, "If -> [('test', 'UnaryOp'), ('body', ['ImportFrom', 'If', 'TryExcept', 'TryExcept']), ('orelse', [])]": 2, "If -> [('test', 'Name'), ('body', ['Assign', 'Assign', 'Return']), ('orelse', ['Assign', 'Return'])]": 1, "Compare -> [('left', 'Call'), ('ops', ['Gt']), ('comparators', ['Call'])]": 17, "Print -> [('dest', 'NoneType'), ('values', ['Name', 'Name', 'Name']), ('nl', 'bool')]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'Import', 'ImportFrom', 'Import', 'FunctionDef', 'FunctionDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'Import', 'Assign', 'Expr', 'Expr', 'Assign', 'If', 'Expr', 'TryExcept', 'Assign', 'Print'])]": 1, "For -> [('target', 'Tuple'), ('iter', 'List'), ('body', ['If']), ('orelse', [])]": 2, "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'Expr', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assert', 'Assign', 'Assign', 'Assign', 'If', 'Return']), ('decorator_list', [])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Name', 'Name', 'Str', 'Str', 'Name', 'Name'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "If -> [('test', 'Attribute'), ('body', ['Assign', 'If']), ('orelse', ['Assign', 'Expr', 'If', 'Expr', 'If'])]": 2, "Dict -> [('keys', ['Str', 'Str']), ('values', ['BinOp', 'BinOp'])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assert']), ('orelse', ['If'])]": 1, "TryExcept -> [('body', ['ImportFrom', 'Import', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Return']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Raise']), ('decorator_list', ['Name'])]": 3, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 3, "Compare -> [('left', 'Num'), ('ops', ['Eq']), ('comparators', ['Name'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'ImportFrom', 'Expr', 'Assign', 'With', 'Return']), ('decorator_list', ['Call'])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 5, "If -> [('test', 'BoolOp'), ('body', ['Assign', 'If']), ('orelse', ['Assign', 'Assign'])]": 2, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "While -> [('test', 'BoolOp'), ('body', ['If', 'If', 'Expr']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'For']), ('decorator_list', [])]": 3, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Str', 'Num'])]": 1, "If -> [('test', 'Compare'), ('body', ['Expr', 'Return']), ('orelse', ['Raise'])]": 1, "BinOp -> [('left', 'BinOp'), ('op', 'Div'), ('right', 'Name')]": 38, "TryExcept -> [('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Return']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 1, "Call -> [('func', 'Name'), ('args', ['BoolOp']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'Name')]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Attribute', 'Name', 'Attribute', 'Attribute', 'Attribute', 'Attribute'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 23, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'If', 'Import', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'TryExcept', 'Assign', 'If', 'If', 'Return']), ('decorator_list', [])]": 2, "Compare -> [('left', 'Num'), ('ops', ['Eq']), ('comparators', ['Call'])]": 2, "Call -> [('func', 'Name'), ('args', ['Num', 'Num', 'BinOp', 'Name']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Expr', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "Tuple -> [('elts', ['Call', 'IfExp']), ('ctx', 'Load')]": 5, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Assign', 'For', 'For', 'Return']), ('decorator_list', [])]": 1, "TryFinally -> [('body', ['TryExcept', 'Expr']), ('finalbody', ['Expr'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]": 1, "If -> [('test', 'BoolOp'), ('body', ['Expr']), ('orelse', ['Expr'])]": 20, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'Assign', 'While', 'While', 'Return']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['If', 'Assign', 'Assign', 'Expr']), ('orelse', [])]": 5, "If -> [('test', 'Call'), ('body', ['If', 'If', 'Assign', 'Return']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'If', 'If']), ('decorator_list', [])]": 1, "Tuple -> [('elts', ['Name', 'Attribute', 'Attribute']), ('ctx', 'Load')]": 16, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'If', 'Expr', 'Expr', 'If']), ('decorator_list', [])]": 1, "TryExcept -> [('body', ['TryExcept']), ('handlers', ['ExceptHandler', 'ExceptHandler']), ('orelse', [])]": 1, "Module -> [('body', ['Import', 'ImportFrom', 'Import', 'Import', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'TryExcept']), ('orelse', ['Assign', 'Assign', 'Expr', 'Expr'])]": 1, "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'Assign', 'Expr', 'Assign']), ('orelse', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Return']), ('decorator_list', ['Call'])]": 7, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'If', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'For', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'Expr']), ('decorator_list', [])]": 10, "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['Name', 'BinOp', 'Call'])]": 1, "List -> [('elts', ['Str', 'Str', 'Name']), ('ctx', 'Load')]": 11, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If']), ('orelse', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'While', 'If', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'For', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'If']), ('decorator_list', [])]": 1, "BinOp -> [('left', 'BinOp'), ('op', 'BitAnd'), ('right', 'Num')]": 150, "Gt -> <NULL>": 815, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'ImportFrom', 'If', 'ImportFrom', 'Assign', 'If', 'If', 'If', 'Assign', 'Assign', 'If', 'Assign', 'If', 'Assign', 'For']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 2, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Call']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "Compare -> [('left', 'Call'), ('ops', ['GtE']), ('comparators', ['Tuple'])]": 3, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'ClassDef', 'Assign', 'FunctionDef', 'ClassDef', 'ClassDef', 'Assign'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Pass']), ('decorator_list', ['Attribute'])]": 3, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Str', 'Str', 'Name'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'With', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Str', 'Attribute', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 4, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'If', 'Print', 'Assign', 'Assign', 'Assign', 'If', 'If', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Print', 'Print', 'Print', 'Assign']), ('decorator_list', ['Name', 'Attribute'])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 2, "For -> [('target', 'Tuple'), ('iter', 'Name'), ('body', ['Assign', 'If', 'For']), ('orelse', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Attribute', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 82, "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['List', 'Call', 'Call'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'Assign', 'TryExcept', 'If', 'Assign', 'Expr', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Print', 'Assign', 'Assign', 'Assign', 'Print', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'If', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'BoolOp'), ('body', ['Expr', 'If']), ('orelse', [])]": 3, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'Import', 'ClassDef'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'Return']), ('decorator_list', ['Call'])]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]": 2, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Str', 'Str', 'Name', 'Str', 'BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('orelse', [])]": 2, "Assign -> [('targets', ['Name', 'Name']), ('value', 'Name')]": 26, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['List', 'List', 'List', 'List'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assert', 'Assign', 'Assert', 'Assign', 'Assign', 'Assert', 'Assert', 'Assert', 'Assert', 'Assert', 'If', 'If', 'Assign', 'Assert', 'Assign', 'Assert', 'Assign', 'Assert', 'Assign', 'Assert', 'Assign', 'Assert', 'Assert', 'Assert']), ('decorator_list', [])]": 1, "ExceptHandler -> [('type', 'Tuple'), ('name', 'NoneType'), ('body', ['Continue'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assert', 'Assign', 'If', 'Assign', 'Assign', 'Return']), ('decorator_list', ['Name'])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'ClassDef']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Print', 'For', 'For']), ('decorator_list', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Name', 'Call', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 9, "If -> [('test', 'Call'), ('body', ['Assign', 'Print', 'Assign', 'Assign', 'Assign']), ('orelse', ['Assign'])]": 1, "List -> [('elts', ['Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple']), ('ctx', 'Load')]": 1, "Call -> [('func', 'Attribute'), ('args', ['BinOp']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 14, "BinOp -> [('left', 'BinOp'), ('op', 'Mult'), ('right', 'Str')]": 6, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Num', 'Str', 'Tuple']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 11, "BinOp -> [('left', 'BinOp'), ('op', 'Mod'), ('right', 'Name')]": 6, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['For', 'For', 'For', 'Return']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 44, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'If', 'Print', 'Assign']), ('decorator_list', ['Name', 'Attribute'])]": 1, "Call -> [('func', 'Name'), ('args', []), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'Name')]": 6, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'TryExcept']), ('orelse', [])]": 1, "Lambda -> [('args', 'arguments'), ('body', 'BoolOp')]": 11, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Subscript', 'Subscript', 'Subscript', 'Subscript', 'Call', 'Name'])]": 1, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'FunctionDef', 'ClassDef', 'ClassDef', 'ClassDef', 'Assign', 'Assign', 'Assign', 'Assign', 'ClassDef', 'ClassDef'])]": 1, "Tuple -> [('elts', ['Name', 'BinOp', 'Call', 'Name', 'Name']), ('ctx', 'Load')]": 1, "TryExcept -> [('body', ['Assign', 'If', 'Assign', 'Assign', 'Return']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Expr', 'Return']), ('decorator_list', ['Name'])]": 3, "If -> [('test', 'Name'), ('body', ['Expr', 'If', 'Raise']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'With', 'Return']), ('decorator_list', ['Call'])]": 1, "If -> [('test', 'Name'), ('body', ['TryExcept']), ('orelse', [])]": 16, "Subscript -> [('value', 'Subscript'), ('slice', 'Index'), ('ctx', 'Load')]": 663, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'Import', 'Assign', 'TryExcept', 'Return']), ('decorator_list', [])]": 1, "Tuple -> [('elts', ['Tuple', 'Tuple', 'Name']), ('ctx', 'Store')]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Call', 'Num', 'Str', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'For', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'For']), ('decorator_list', [])]": 1, "TryExcept -> [('body', ['Expr', 'Expr', 'Expr', 'Expr']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 2, "If -> [('test', 'Name'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign']), ('orelse', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['If', 'Assign']), ('orelse', [])]": 3, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Name', 'Name', 'Name'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Import', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 3, "BoolOp -> [('op', 'Or'), ('values', ['Call', 'Subscript'])]": 11, "If -> [('test', 'Name'), ('body', ['Expr', 'For', 'Expr']), ('orelse', [])]": 2, "Call -> [('func', 'Attribute'), ('args', []), ('keywords', []), ('starargs', 'Attribute'), ('kwargs', 'NoneType')]": 7, "If -> [('test', 'Attribute'), ('body', ['Assign']), ('orelse', ['Assign', 'Break'])]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'If']), ('orelse', [])]": 1, "BinOp -> [('left', 'Attribute'), ('op', 'FloorDiv'), ('right', 'Num')]": 3, "If -> [('test', 'Name'), ('body', ['Expr']), ('orelse', ['Expr', 'Return'])]": 1, "For -> [('target', 'Name'), ('iter', 'List'), ('body', ['Assign', 'Assign', 'Expr']), ('orelse', [])]": 6, "Tuple -> [('elts', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('ctx', 'Store')]": 16, "Module -> [('body', ['Import', 'Import', 'Import', 'ImportFrom', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'For', 'If', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Return']), ('decorator_list', ['Call'])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'If', 'AugAssign', 'AugAssign']), ('orelse', [])]": 1, "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]": 1, "BinOp -> [('left', 'Attribute'), ('op', 'Mult'), ('right', 'BinOp')]": 9, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'Expr', 'Assign', 'If', 'If', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'UnaryOp'), ('body', ['Expr', 'AugAssign']), ('orelse', [])]": 1, "arguments -> [('args', ['Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Tuple'])]": 1, "Dict -> [('keys', ['Attribute', 'Attribute', 'Attribute', 'Attribute', 'Num']), ('values', ['Str', 'Str', 'Str', 'Str', 'Str'])]": 2, "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]": 1, "Call -> [('func', 'Name'), ('args', ['Str']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 36, "If -> [('test', 'Call'), ('body', ['Assign', 'Expr', 'If', 'Expr']), ('orelse', ['Expr', 'Expr', 'Expr'])]": 6, "comprehension -> [('target', 'Name'), ('iter', 'Subscript'), ('ifs', ['Subscript'])]": 1, "If -> [('test', 'UnaryOp'), ('body', ['If', 'Assign', 'If', 'TryExcept']), ('orelse', [])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Call', 'Name', 'Name', 'Name', 'Name'])]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'ClassDef', 'Assign', 'ClassDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'ClassDef', 'ClassDef', 'ClassDef'])]": 1, "BoolOp -> [('op', 'And'), ('values', ['Attribute', 'Name'])]": 14, "ExceptHandler -> [('type', 'Name'), ('name', 'Name'), ('body', ['Import', 'ImportFrom', 'TryExcept'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'TryFinally']), ('decorator_list', ['Name'])]": 3, "For -> [('target', 'Name'), ('iter', 'Subscript'), ('body', ['Expr', 'Expr']), ('orelse', [])]": 5, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'If', 'If', 'Return']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Tuple'), ('body', ['Expr']), ('orelse', [])]": 15, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'TryExcept', 'Assign', 'Return']), ('decorator_list', [])]": 1, "IfExp -> [('test', 'Attribute'), ('body', 'Name'), ('orelse', 'Name')]": 4, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Assign', 'Assign', 'AugAssign', 'If']), ('orelse', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assert', 'Print', 'Assign', 'Assign', 'Expr', 'If']), ('orelse', [])]": 1, "Call -> [('func', 'Name'), ('args', []), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Tuple -> [('elts', ['Attribute', 'Name', 'Attribute']), ('ctx', 'Load')]": 9, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'For', 'AugAssign', 'Return']), ('decorator_list', [])]": 1, "While -> [('test', 'Num'), ('body', ['Assign', 'Expr', 'For', 'If']), ('orelse', [])]": 1, "Dict -> [('keys', ['Name']), ('values', ['Name'])]": 33, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['For', 'For', 'Expr']), ('orelse', [])]": 2, "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['Attribute', 'Attribute', 'Name'])]": 3, "Compare -> [('left', 'Subscript'), ('ops', ['Eq']), ('comparators', ['Tuple'])]": 10, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'TryExcept', 'TryExcept', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'FunctionDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'FunctionDef', 'FunctionDef'])]": 1, "List -> [('elts', ['List', 'List', 'List', 'List']), ('ctx', 'Load')]": 7, "For -> [('target', 'Name'), ('iter', 'List'), ('body', ['Assign', 'Assign', 'Expr', 'Expr', 'Expr']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assert', 'AugAssign']), ('decorator_list', [])]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Expr', 'Assign', 'Return']), ('decorator_list', ['Name'])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Subscript', 'Subscript', 'Subscript', 'Subscript', 'Subscript', 'Subscript', 'Subscript', 'Subscript'])]": 1, "List -> [('elts', ['Str', 'Num']), ('ctx', 'Load')]": 17, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Print', 'If', 'Expr']), ('decorator_list', [])]": 2, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'str'), ('defaults', ['Num', 'Str'])]": 1, "Call -> [('func', 'Name'), ('args', ['Tuple']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "TryExcept -> [('body', ['Assign', 'Return']), ('handlers', ['ExceptHandler', 'ExceptHandler', 'ExceptHandler']), ('orelse', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Expr', 'If']), ('orelse', [])]": 6, "Print -> [('dest', 'Name'), ('values', ['Name']), ('nl', 'bool')]": 1, "If -> [('test', 'Name'), ('body', ['Assert', 'Assign', 'If', 'Return']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Expr', 'Expr', 'If', 'If']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Expr', 'Assign']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'If', 'If', 'If', 'Expr', 'TryFinally', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'BoolOp'), ('body', ['Expr', 'Expr', 'If']), ('orelse', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Assign', 'If', 'Expr', 'Expr']), ('orelse', [])]": 2, "If -> [('test', 'Compare'), ('body', ['Assign', 'Expr', 'For']), ('orelse', ['Raise'])]": 1, "If -> [('test', 'Attribute'), ('body', ['AugAssign']), ('orelse', [])]": 22, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assert', 'Assert', 'Assert', 'Assert']), ('orelse', [])]": 1, "ExceptHandler -> [('type', 'Tuple'), ('name', 'Name'), ('body', ['If'])]": 1, "If -> [('test', 'Attribute'), ('body', ['Assign']), ('orelse', ['Expr'])]": 4, "Module -> [('body', ['Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'FunctionDef', 'FunctionDef', 'Assign', 'Expr', 'Expr', 'Expr'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'For']), ('decorator_list', [])]": 1, "Index -> [('value', 'Compare')]": 20, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', ['Attribute'])]": 2, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Num', 'BinOp', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'If']), ('orelse', ['Assign', 'Assign'])]": 3, "If -> [('test', 'Compare'), ('body', ['Return']), ('orelse', ['Assign', 'Assign', 'If'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assert', 'Assert', 'Assert']), ('decorator_list', [])]": 1, "List -> [('elts', ['Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute']), ('ctx', 'Load')]": 2, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'For', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('orelse', [])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Str', 'Str', 'Str'])]": 4, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr']), ('orelse', [])]": 1, "If -> [('test', 'BoolOp'), ('body', ['If', 'Assign', 'Assign']), ('orelse', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Str', 'Name', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'If', 'Expr', 'If', 'If', 'Assign', 'Assign', 'If', 'Expr', 'If', 'Expr', 'If', 'If']), ('decorator_list', ['Name'])]": 1, "Call -> [('func', 'Subscript'), ('args', ['Subscript', 'Subscript']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'For', 'For', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'Assign', 'If', 'Assign', 'If', 'If', 'If', 'If']), ('decorator_list', [])]": 2, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 4, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'For']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Compare']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "For -> [('target', 'Tuple'), ('iter', 'Subscript'), ('body', ['Assign', 'If']), ('orelse', [])]": 2, "Call -> [('func', 'Name'), ('args', ['Name', 'Str', 'Str', 'Str', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'For', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Assign', 'For', 'Expr', 'Assign', 'Assign', 'For', 'For', 'For', 'For', 'Expr', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'For', 'If', 'Assign', 'Return']), ('decorator_list', [])]": 2, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'AugAssign', 'Expr']), ('orelse', ['Assign', 'Assign'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'For', 'Expr']), ('decorator_list', [])]": 1, "If -> [('test', 'Name'), ('body', ['Assign', 'Assign', 'Assign']), ('orelse', [])]": 13, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "If -> [('test', 'Name'), ('body', ['Expr', 'If', 'Expr']), ('orelse', ['If'])]": 1, "BitOr -> <NULL>": 316, "ExceptHandler -> [('type', 'NoneType'), ('name', 'NoneType'), ('body', ['Print', 'Expr', 'While'])]": 1, "If -> [('test', 'BoolOp'), ('body', ['Print', 'Print', 'Print', 'Print', 'Print', 'Print', 'Return']), ('orelse', ['If'])]": 1, "If -> [('test', 'Name'), ('body', ['Expr', 'Expr']), ('orelse', ['Expr'])]": 3, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign']), ('decorator_list', [])]": 1, "Call -> [('func', 'Subscript'), ('args', ['Attribute', 'Name', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign']), ('orelse', ['Assign', 'Assign', 'Assign'])]": 4, "Compare -> [('left', 'BinOp'), ('ops', ['LtE']), ('comparators', ['Num'])]": 4, "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['If', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'Expr', 'If', 'If']), ('orelse', [])]": 2, "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'If', 'Expr', 'Expr', 'Expr', 'For', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr']), ('orelse', [])]": 2, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'If'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'Expr', 'Assign']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'Assign', 'If', 'Return']), ('decorator_list', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Str', 'BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 18, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'Expr']), ('decorator_list', [])]": 4, "Compare -> [('left', 'Name'), ('ops', ['NotEq']), ('comparators', ['Str'])]": 118, "Call -> [('func', 'Name'), ('args', ['Lambda', 'Attribute', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'Assign']), ('decorator_list', [])]": 2, "Call -> [('func', 'Name'), ('args', ['Name', 'Tuple', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 3, "Compare -> [('left', 'Call'), ('ops', ['Eq']), ('comparators', ['Name'])]": 141, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'If', 'Return']), ('decorator_list', [])]": 11, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'If', 'If', 'If', 'Expr']), ('decorator_list', [])]": 2, "If -> [('test', 'Attribute'), ('body', ['Return']), ('orelse', [])]": 70, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assert', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "While -> [('test', 'Compare'), ('body', ['AugAssign', 'Expr']), ('orelse', [])]": 1, "Module -> [('body', ['Import', 'ImportFrom', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'FunctionDef', 'FunctionDef'])]": 1, "If -> [('test', 'Name'), ('body', ['Assign', 'Assign', 'Assign', 'Return']), ('orelse', ['Raise'])]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['If', 'If', 'If', 'Expr', 'Assign']), ('orelse', [])]": 1, "Assign -> [('targets', ['Subscript']), ('value', 'Compare')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'For', 'For']), ('decorator_list', [])]": 5, "Compare -> [('left', 'Attribute'), ('ops', ['LtE']), ('comparators', ['Num'])]": 7, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "While -> [('test', 'Name'), ('body', ['Assign', 'If', 'Assign', 'If', 'If', 'Return']), ('orelse', [])]": 1, "Call -> [('func', 'Attribute'), ('args', []), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'Name')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'If', 'Assign']), ('decorator_list', [])]": 4, "If -> [('test', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'If']), ('orelse', [])]": 3, "ExceptHandler -> [('type', 'Tuple'), ('name', 'NoneType'), ('body', ['Expr', 'Assign', 'Return'])]": 1, "If -> [('test', 'Call'), ('body', ['Assign', 'For', 'Expr', 'Print']), ('orelse', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'Expr']), ('orelse', ['If'])]": 2, "Call -> [('func', 'Name'), ('args', ['Name', 'Subscript', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 8, "Call -> [('func', 'Attribute'), ('args', ['Str', 'BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 111, "Tuple -> [('elts', ['Str', 'Subscript', 'Subscript']), ('ctx', 'Load')]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'For']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Num', 'Num', 'Num', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 21, "Call -> [('func', 'Name'), ('args', ['Tuple']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 99, "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['Str', 'Str', 'Name'])]": 6, "Call -> [('func', 'Attribute'), ('args', ['Subscript', 'Name', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "arguments -> [('args', ['Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'str'), ('defaults', ['Num'])]": 2, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Num', 'Num']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'Expr'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'Raise']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr']), ('decorator_list', ['Call'])]": 1, "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'ClassDef'])]": 1, "TryExcept -> [('body', ['Expr', 'Print']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'If', 'If', 'Expr', 'Assign']), ('decorator_list', [])]": 1, "Dict -> [('keys', ['Name', 'Name', 'Name']), ('values', ['Call', 'Call', 'Call'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Expr', 'Return']), ('decorator_list', [])]": 7, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'If']), ('decorator_list', [])]": 3, "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['Expr', 'Expr']), ('orelse', [])]": 9, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'For']), ('decorator_list', [])]": 4, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 3, "Call -> [('func', 'Name'), ('args', ['Dict']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'Name')]": 3, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Name', 'Str', 'Dict'])]": 2, "If -> [('test', 'Name'), ('body', ['Assign', 'Expr', 'Assign', 'Assign']), ('orelse', ['Assign'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'For', 'Expr']), ('decorator_list', [])]": 2, "BoolOp -> [('op', 'And'), ('values', ['Name', 'Subscript'])]": 11, "If -> [('test', 'Call'), ('body', ['Assign', 'Assign', 'Pass']), ('orelse', ['Assign', 'Pass'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'FunctionDef', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'For', 'Expr', 'Expr', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'Attribute'), ('body', ['Assign', 'TryExcept', 'If']), ('orelse', ['If'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Expr', 'Assign', 'TryExcept']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'TryExcept', 'Assign', 'Delete', 'Return']), ('decorator_list', ['Call', 'Name'])]": 1, "If -> [('test', 'Compare'), ('body', ['Expr', 'Assign', 'Expr', 'If', 'Expr', 'Expr']), ('orelse', ['Expr', 'Assign', 'Expr', 'If', 'Expr', 'Expr'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "ExceptHandler -> [('type', 'Name'), ('name', 'Name'), ('body', ['If', 'Raise'])]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'If', 'Expr', 'If', 'Expr', 'If']), ('decorator_list', [])]": 1, "BoolOp -> [('op', 'And'), ('values', ['Name', 'Attribute'])]": 35, "Call -> [('func', 'Attribute'), ('args', ['Str', 'ListComp', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 19, "Call -> [('func', 'Name'), ('args', ['Num', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 141, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str'])]": 5, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Return']), ('decorator_list', [])]": 3, "Slice -> [('lower', 'Attribute'), ('upper', 'Name'), ('step', 'NoneType')]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'Import', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'ClassDef', 'ClassDef', 'ClassDef', 'If'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Return', 'Expr']), ('decorator_list', [])]": 4, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['TryExcept', 'Assign', 'Assign', 'If', 'If', 'Assign', 'Assign', 'If', 'Assign', 'For', 'If']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'TryExcept', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'TryFinally', 'Print']), ('decorator_list', [])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Str', 'Str', 'Str', 'Call', 'Str', 'Call', 'Str', 'Str'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'ImportFrom', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'TryExcept', 'Return']), ('decorator_list', [])]": 1, "ImportFrom -> [('module', 'str'), ('names', ['alias', 'alias', 'alias', 'alias']), ('level', 'int')]": 127, "If -> [('test', 'Compare'), ('body', ['Import', 'Assign', 'TryExcept', 'Assign', 'TryExcept']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'If', 'TryExcept']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['If', 'AugAssign', 'Assign', 'Assign', 'If']), ('orelse', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'For', 'If', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', ['Name'])]": 4, "Dict -> [('keys', ['Str', 'Str']), ('values', ['Call', 'Call'])]": 55, "Yield -> [('value', 'List')]": 4, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'Assign', 'If', 'Assign', 'Expr', 'Return']), ('decorator_list', [])]": 1, "Compare -> [('left', 'Subscript'), ('ops', ['Eq']), ('comparators', ['BinOp'])]": 8, "Tuple -> [('elts', ['Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple']), ('ctx', 'Load')]": 3, "Call -> [('func', 'Attribute'), ('args', ['BinOp', 'Subscript']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 20, "List -> [('elts', ['Name', 'Str', 'Call', 'Str', 'Name', 'Name']), ('ctx', 'Load')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr']), ('decorator_list', ['Name'])]": 3, "If -> [('test', 'BoolOp'), ('body', ['If', 'Assign', 'Assign']), ('orelse', ['If'])]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Expr', 'If', 'Expr', 'Expr', 'Assign', 'If']), ('orelse', [])]": 3, "Call -> [('func', 'Name'), ('args', ['Name', 'Attribute', 'Name', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "While -> [('test', 'Call'), ('body', ['If', 'Assign']), ('orelse', [])]": 2, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "TryExcept -> [('body', ['Assign', 'AugAssign', 'Expr']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 1, "Assign -> [('targets', ['Subscript', 'Subscript']), ('value', 'Attribute')]": 1, "TryExcept -> [('body', ['Assign', 'Assign', 'Assign', 'Expr', 'For', 'If']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Assign']), ('decorator_list', [])]": 6, "ListComp -> [('elt', 'Call'), ('generators', ['comprehension', 'comprehension'])]": 1, "While -> [('test', 'UnaryOp'), ('body', ['Expr', 'Expr']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'If', 'Expr', 'Return']), ('decorator_list', ['Call'])]": 1, "If -> [('test', 'Attribute'), ('body', ['Expr', 'Expr', 'Expr', 'Expr', 'For', 'Expr']), ('orelse', [])]": 2, "If -> [('test', 'Call'), ('body', ['Assign', 'Assign', 'While', 'Expr']), ('orelse', [])]": 1, "If -> [('test', 'Call'), ('body', ['Assign', 'Expr']), ('orelse', ['If'])]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'FunctionDef'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'For', 'Return']), ('decorator_list', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Str', 'Num', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'If', 'If', 'If', 'Assign', 'Return']), ('decorator_list', [])]": 1, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'FunctionDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'If'])]": 1, "If -> [('test', 'Compare'), ('body', ['FunctionDef']), ('orelse', ['Assign'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'While', 'Return']), ('decorator_list', [])]": 8, "TryExcept -> [('body', ['If', 'If', 'Return']), ('handlers', ['ExceptHandler', 'ExceptHandler', 'ExceptHandler']), ('orelse', [])]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'ImportFrom', 'Import', 'Import', 'Import', 'Assign', 'ClassDef'])]": 1, "If -> [('test', 'BoolOp'), ('body', ['Assign', 'If', 'Expr', 'Assign']), ('orelse', ['If'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'If', 'Expr', 'Assign', 'If', 'Assign', 'If']), ('decorator_list', ['Name'])]": 1, "Call -> [('func', 'Name'), ('args', ['Call']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 24, "If -> [('test', 'Attribute'), ('body', ['Assign', 'If', 'Assign']), ('orelse', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'For', 'Assign', 'Assign', 'If', 'Return']), ('decorator_list', ['Name'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Num', 'Num', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Expr']), ('orelse', [])]": 309, "Call -> [('func', 'Attribute'), ('args', ['Name']), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 35, "If -> [('test', 'Call'), ('body', ['Expr', 'AugAssign', 'Assign', 'Break']), ('orelse', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Expr', 'Assign', 'Expr', 'Return']), ('decorator_list', [])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Subscript', 'Subscript', 'Subscript', 'Name', 'Name', 'Name'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'List', 'Lambda']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 16, "Call -> [('func', 'Name'), ('args', ['Attribute', 'Attribute', 'BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 10, "If -> [('test', 'Compare'), ('body', ['If', 'Assign', 'Assign']), ('orelse', ['If'])]": 1, "Module -> [('body', ['Import', 'Assign', 'FunctionDef', 'FunctionDef'])]": 1, "AugAssign -> [('target', 'Name'), ('op', 'BitOr'), ('value', 'Name')]": 2, "Call -> [('func', 'Name'), ('args', ['Name', 'Name', 'Name', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 6, "Delete -> [('targets', ['Subscript', 'Subscript'])]": 1, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['If', 'Print']), ('orelse', [])]": 1, "If -> [('test', 'Call'), ('body', ['Assign', 'For', 'Return']), ('orelse', [])]": 2, "If -> [('test', 'Attribute'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'If', 'Expr', 'Expr', 'For', 'Assign', 'If']), ('orelse', [])]": 2, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Name']), ('keywords', []), ('starargs', 'Name'), ('kwargs', 'Name')]": 3, "Slice -> [('lower', 'NoneType'), ('upper', 'Attribute'), ('step', 'NoneType')]": 15, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'For', 'If', 'If', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If']), ('decorator_list', [])]": 1, "TryFinally -> [('body', ['Expr', 'If']), ('finalbody', ['Expr'])]": 2, "If -> [('test', 'BinOp'), ('body', ['Continue']), ('orelse', [])]": 5, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Global', 'Assign', 'Assign']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Return']), ('decorator_list', ['Call'])]": 1, "BinOp -> [('left', 'Name'), ('op', 'Mod'), ('right', 'Subscript')]": 2, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['If', 'Expr', 'Expr']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'For', 'Print']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Name', 'Call', 'Call']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "If -> [('test', 'Name'), ('body', ['Assign', 'Assign', 'Assign', 'If']), ('orelse', [])]": 3, "Tuple -> [('elts', ['Name', 'Call', 'Call', 'Call']), ('ctx', 'Load')]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', []), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'Subscript')]": 2, "If -> [('test', 'Compare'), ('body', ['Pass']), ('orelse', ['Raise'])]": 6, "Dict -> [('keys', ['Str', 'Str']), ('values', ['Str', 'Name'])]": 22, "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['Name', 'Str', 'Attribute'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Assign', 'If', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Raise']), ('orelse', ['Return'])]": 1, "While -> [('test', 'UnaryOp'), ('body', ['Assign', 'Assign', 'Assign', 'While', 'If']), ('orelse', [])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name']), ('vararg', 'str'), ('kwarg', 'str'), ('defaults', ['Dict'])]": 1, "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['If', 'Assign', 'If', 'TryExcept']), ('orelse', [])]": 2, "If -> [('test', 'Compare'), ('body', ['TryExcept', 'Assign', 'If', 'Assign', 'Assign', 'If']), ('orelse', [])]": 1, "Exec -> [('body', 'Subscript'), ('globals', 'NoneType'), ('locals', 'NoneType')]": 1, "Call -> [('func', 'Attribute'), ('args', ['Str', 'Attribute', 'Num', 'Tuple', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Compare -> [('left', 'Name'), ('ops', ['NotEq']), ('comparators', ['Attribute'])]": 65, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'TryExcept']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'If', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'For', 'For', 'Return']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['If', 'If', 'If', 'Expr']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "keyword -> [('arg', 'str'), ('value', 'Call')]": 1521, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "Call -> [('func', 'Name'), ('args', ['BinOp', 'Str', 'Dict']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign']), ('decorator_list', [])]": 1, "ExceptHandler -> [('type', 'Attribute'), ('name', 'NoneType'), ('body', ['Expr', 'Continue'])]": 2, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', ['Name'])]": 1, "Call -> [('func', 'Attribute'), ('args', []), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 135, "Tuple -> [('elts', ['Attribute', 'Attribute', 'Attribute', 'Name']), ('ctx', 'Load')]": 1, "BinOp -> [('left', 'Name'), ('op', 'BitAnd'), ('right', 'Compare')]": 1, "Module -> [('body', ['Import', 'Assign', 'Expr', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Print', 'Assign', 'Assign', 'Print', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Assign', 'Assign', 'For', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'For', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Print', 'Print', 'Expr', 'Expr'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Return']), ('decorator_list', ['Call'])]": 51, "BinOp -> [('left', 'Call'), ('op', 'Pow'), ('right', 'BinOp')]": 4, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'ImportFrom', 'Return']), ('decorator_list', ['Call'])]": 4, "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str']), ('values', ['Attribute', 'Attribute', 'Attribute', 'Str'])]": 4, "If -> [('test', 'Name'), ('body', ['Assign', 'If', 'Assign', 'Assign', 'Assign']), ('orelse', ['Assign', 'If', 'Assign', 'Assign', 'Assign'])]": 1, "If -> [('test', 'Attribute'), ('body', ['Assign', 'If', 'Assign', 'Assign', 'Assign', 'If']), ('orelse', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Num']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 3, "If -> [('test', 'Attribute'), ('body', ['TryExcept', 'TryExcept']), ('orelse', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Lambda']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Call -> [('func', 'Attribute'), ('args', ['Str', 'Call', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Call -> [('func', 'Name'), ('args', ['Name', 'Str', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['AugAssign', 'Assign', 'If', 'AugAssign']), ('orelse', [])]": 2, "If -> [('test', 'Compare'), ('body', ['AugAssign']), ('orelse', ['Delete', 'Assign'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'Assign', 'For', 'Expr', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Print', 'Assign', 'If', 'Expr', 'Expr', 'Expr', 'If', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Str', 'Num', 'Num', 'Num', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 73, "ListComp -> [('elt', 'BoolOp'), ('generators', ['comprehension'])]": 9, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'For', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'For', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'For']), ('decorator_list', [])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Call', 'Call', 'Call', 'Call', 'Call', 'Call'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'AugAssign', 'TryFinally', 'Assign']), ('decorator_list', [])]": 2, "Call -> [('func', 'Attribute'), ('args', ['Str', 'Str']), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 3, "If -> [('test', 'Attribute'), ('body', ['TryExcept']), ('orelse', [])]": 2, "If -> [('test', 'Name'), ('body', ['Assign']), ('orelse', ['Assign', 'For', 'If'])]": 1, "Call -> [('func', 'Name'), ('args', ['Name', 'Num', 'Str', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "For -> [('target', 'Tuple'), ('iter', 'Name'), ('body', ['Assign', 'Print', 'AugAssign', 'Expr', 'Expr']), ('orelse', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Print', 'Assign', 'If', 'If', 'If']), ('decorator_list', [])]": 2, "If -> [('test', 'Compare'), ('body', ['Expr', 'Assign', 'If', 'Assign', 'Expr', 'If', 'AugAssign']), ('orelse', ['If'])]": 1, "If -> [('test', 'Call'), ('body', ['Assign']), ('orelse', ['Expr', 'Return'])]": 2, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Attribute', 'Num']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 3, "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'ImportFrom', 'Assign', 'For', 'Assign', 'Expr', 'Assign', 'TryExcept', 'For', 'Return']), ('decorator_list', [])]": 1, "With -> [('context_expr', 'Call'), ('optional_vars', 'Name'), ('body', ['Assign', 'Expr', 'Expr'])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'TryExcept']), ('orelse', [])]": 7, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'If', 'Assign', 'Assign', 'If', 'Assign', 'If', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Expr']), ('orelse', [])]": 1, "If -> [('test', 'Call'), ('body', ['Expr', 'Expr', 'Assign', 'Expr']), ('orelse', ['Expr', 'Assign', 'Assign', 'Assign', 'Expr'])]": 2, "If -> [('test', 'Name'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'If']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'TryExcept', 'If', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 1, "TryExcept -> [('body', ['Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Return']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Tuple', 'Name', 'BinOp', 'Name', 'Name', 'Name', 'Dict']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]": 2, "BoolOp -> [('op', 'Or'), ('values', ['Name', 'Call'])]": 24, "Call -> [('func', 'Name'), ('args', ['Name', 'Call', 'Name', 'Call', 'Name', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 4, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'If', 'If', 'Return']), ('decorator_list', [])]": 5, "Tuple -> [('elts', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('ctx', 'Store')]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Str', 'Attribute', 'Str', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 5, "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'If']), ('orelse', [])]": 1, "If -> [('test', 'BoolOp'), ('body', ['AugAssign', 'If']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['FunctionDef', 'FunctionDef', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "If -> [('test', 'Name'), ('body', ['Assign', 'Expr', 'Expr']), ('orelse', ['Expr', 'For'])]": 1, "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ImportFrom', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'If'])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'ClassDef', 'FunctionDef', 'FunctionDef', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'Expr', 'ClassDef', 'If'])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Expr', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 2, "Tuple -> [('elts', ['Name', 'Name', 'Name', 'Name', 'Name', 'Call']), ('ctx', 'Load')]": 2, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 35, "If -> [('test', 'Name'), ('body', ['Assign', 'Assign', 'Assign']), ('orelse', ['Raise'])]": 4, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'If', 'Raise']), ('decorator_list', [])]": 2, "Module -> [('body', ['Import', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assert', 'Expr']), ('decorator_list', [])]": 3, "If -> [('test', 'Name'), ('body', ['FunctionDef']), ('orelse', ['FunctionDef'])]": 5, "Call -> [('func', 'Call'), ('args', []), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'Name')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Print']), ('decorator_list', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 7, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'If', 'Assign', 'If', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'If']), ('decorator_list', ['Name'])]": 2, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Expr', 'Assign', 'Expr']), ('orelse', [])]": 6, "If -> [('test', 'Attribute'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Expr']), ('orelse', [])]": 2, "If -> [('test', 'BoolOp'), ('body', ['Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr']), ('orelse', [])]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'ImportFrom', 'Import', 'Import', 'Import', 'Import', 'Assign', 'TryExcept', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'ClassDef', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'If'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'While']), ('decorator_list', [])]": 1, "List -> [('elts', ['Subscript', 'Subscript', 'Subscript', 'Subscript']), ('ctx', 'Load')]": 1, "If -> [('test', 'Compare'), ('body', ['If', 'Expr']), ('orelse', ['Assign'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'If', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "BoolOp -> [('op', 'Or'), ('values', ['Subscript', 'Call'])]": 2, "Import -> [('names', ['alias', 'alias', 'alias', 'alias'])]": 15, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 4, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'TryExcept', 'Assign', 'If', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'For', 'Expr', 'If', 'If', 'If', 'If', 'If', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'If', 'If', 'Assign', 'If']), ('decorator_list', [])]": 1, "Return -> [('value', 'Call')]": 4493, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'For', 'Return', 'Assign', 'Expr', 'For', 'Expr']), ('decorator_list', [])]": 1, "Tuple -> [('elts', ['Attribute', 'Attribute', 'Call', 'Attribute']), ('ctx', 'Load')]": 16, "While -> [('test', 'Name'), ('body', ['If', 'Assign']), ('orelse', [])]": 2, "If -> [('test', 'BoolOp'), ('body', ['If']), ('orelse', ['If'])]": 8, "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'TryExcept']), ('decorator_list', [])]": 1, "Tuple -> [('elts', ['Subscript', 'Str', 'Tuple', 'Dict']), ('ctx', 'Load')]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Tuple', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'Assign', 'For', 'TryExcept']), ('decorator_list', [])]": 1, "arguments -> [('args', ['Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Attribute'])]": 4, "For -> [('target', 'Name'), ('iter', 'List'), ('body', ['If', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'For']), ('orelse', [])]": 1, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'FunctionDef', 'ClassDef', 'ClassDef', 'ClassDef', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'Expr', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'For', 'If', 'Return']), ('decorator_list', [])]": 1, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['If', 'Break']), ('orelse', [])]": 1, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'TryExcept', 'Assign', 'If', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'Assign'])]": 1, "Call -> [('func', 'Name'), ('args', ['Name']), ('keywords', ['keyword']), ('starargs', 'Name'), ('kwargs', 'NoneType')]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Return']), ('decorator_list', [])]": 1, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'ImportFrom', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ImportFrom', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]": 1, "If -> [('test', 'Attribute'), ('body', ['Expr', 'For']), ('orelse', [])]": 2, "If -> [('test', 'Name'), ('body', ['AugAssign']), ('orelse', ['Return'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'TryExcept', 'For', 'TryExcept']), ('orelse', [])]": 1, "If -> [('test', 'Compare'), ('body', ['If', 'Assign', 'Assign', 'If', 'If', 'AugAssign', 'Assign']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Return']), ('decorator_list', ['Call'])]": 6, "For -> [('target', 'Name'), ('iter', 'Tuple'), ('body', ['Print', 'For']), ('orelse', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', ['Call'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['While', 'Return']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'If', 'If', 'Assign', 'Assign', 'TryExcept', 'If', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assert', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'For', 'Assign', 'Assign', 'For', 'For', 'Assign', 'For', 'If', 'For', 'If', 'Return']), ('decorator_list', [])]": 1, "List -> [('elts', ['Str', 'Str', 'Str', 'Attribute', 'Name']), ('ctx', 'Load')]": 1, "If -> [('test', 'Compare'), ('body', ['Expr', 'If', 'If']), ('orelse', ['Expr'])]": 1, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr']), ('orelse', [])]": 1, "TryExcept -> [('body', ['Import']), ('handlers', ['ExceptHandler']), ('orelse', ['If', 'If'])]": 1, "If -> [('test', 'Name'), ('body', ['Expr']), ('orelse', ['Raise'])]": 1, "BinOp -> [('left', 'Attribute'), ('op', 'BitAnd'), ('right', 'Num')]": 8, "Call -> [('func', 'Attribute'), ('args', ['Str', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 343, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Attribute', 'BoolOp', 'Name', 'Compare', 'Call'])]": 2, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Str'])]": 1, "If -> [('test', 'Name'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'While']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Assign', 'If', 'If', 'If', 'If', 'If', 'For', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "TryExcept -> [('body', ['If', 'Assign', 'Assign', 'Expr', 'Assign', 'If', 'Expr']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Return']), ('decorator_list', ['Name'])]": 24, "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'FunctionDef', 'FunctionDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'ClassDef', 'ClassDef'])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 2, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str']), ('values', ['Attribute', 'Str', 'Str', 'Str'])]": 2, "If -> [('test', 'Name'), ('body', ['If']), ('orelse', ['If', 'TryExcept', 'Expr'])]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Assign', 'If', 'Expr']), ('orelse', [])]": 2, "Call -> [('func', 'Name'), ('args', ['Lambda', 'Lambda']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'ImportFrom', 'Return']), ('decorator_list', [])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['BinOp', 'Name', 'Name'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Expr', 'For', 'Print', 'Assign', 'Expr', 'Print', 'If', 'Expr', 'Pass']), ('decorator_list', [])]": 1, "If -> [('test', 'Name'), ('body', ['Print']), ('orelse', ['If'])]": 2, "arguments -> [('args', ['Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Name', 'Name'])]": 7, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'Assign', 'ImportFrom', 'If', 'Return']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Tuple', 'Attribute', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 30, "If -> [('test', 'Attribute'), ('body', ['If', 'Assign', 'Return']), ('orelse', ['Assign', 'Expr', 'Assign', 'ClassDef', 'Return'])]": 1, "BoolOp -> [('op', 'And'), ('values', ['Compare', 'Call', 'UnaryOp'])]": 2, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'Assign']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'FunctionDef', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'If', 'Return', 'For', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'If', 'Assign', 'If', 'If', 'If', 'Assign', 'Assign', 'For', 'Return']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'If', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', []), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 56, "If -> [('test', 'BoolOp'), ('body', ['Assign']), ('orelse', ['Assign'])]": 85, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Expr', 'Expr', 'Expr', 'If']), ('orelse', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]": 2, "List -> [('elts', ['Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple']), ('ctx', 'Load')]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'FunctionDef']), ('decorator_list', ['Call'])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr']), ('orelse', ['If'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'TryExcept', 'TryExcept', 'Return']), ('decorator_list', [])]": 2, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 255, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Assign', 'TryExcept', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If']), ('orelse', [])]": 1, "Dict -> [('keys', ['Name']), ('values', ['BinOp'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Import', 'Expr']), ('decorator_list', [])]": 1, "BoolOp -> [('op', 'And'), ('values', ['Call', 'Call', 'Compare'])]": 3, "Tuple -> [('elts', ['Name', 'Name', 'Name', 'Call', 'Attribute', 'Attribute', 'Attribute', 'Name', 'Name']), ('ctx', 'Load')]": 1, "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Expr', 'Expr', 'Return']), ('orelse', [])]": 2, "If -> [('test', 'Compare'), ('body', ['Expr', 'Expr', 'Import', 'Assign', 'ImportFrom', 'Assign', 'Expr', 'Print']), ('orelse', [])]": 1, "BinOp -> [('left', 'Num'), ('op', 'Mult'), ('right', 'Num')]": 55, "Assign -> [('targets', ['Tuple', 'Name']), ('value', 'Tuple')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assert', 'Assign', 'Assert', 'Assert', 'Assert', 'Assert', 'If', 'If', 'Assign', 'Assert']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'TryExcept', 'Assign', 'For', 'For', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign']), ('decorator_list', [])]": 2, "arguments -> [('args', ['Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'str'), ('defaults', ['Str'])]": 3, "If -> [('test', 'Name'), ('body', ['Print']), ('orelse', ['Print'])]": 7, "If -> [('test', 'Attribute'), ('body', ['Expr', 'AugAssign', 'TryFinally']), ('orelse', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ClassDef', 'Assign', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "BoolOp -> [('op', 'Or'), ('values', ['Compare', 'Name', 'Name'])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', ['Attribute'])]": 7, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'If', 'If', 'Assign']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'If', 'Assign', 'For']), ('orelse', ['Expr', 'For'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]": 19, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'If'])]": 1, "If -> [('test', 'Attribute'), ('body', ['Assign', 'Print']), ('orelse', [])]": 2, "BinOp -> [('left', 'Call'), ('op', 'Div'), ('right', 'Name')]": 30, "List -> [('elts', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('ctx', 'Load')]": 1, "BoolOp -> [('op', 'Or'), ('values', ['BoolOp', 'Subscript'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'If', 'Expr']), ('decorator_list', ['Call'])]": 1, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'Expr']), ('orelse', [])]": 27, "Call -> [('func', 'Name'), ('args', ['Attribute', 'Subscript']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 12, "comprehension -> [('target', 'Name'), ('iter', 'Subscript'), ('ifs', ['Compare'])]": 7, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Expr', 'Assign', 'Assign', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name', 'Attribute']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Name']), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "If -> [('test', 'Compare'), ('body', ['AugAssign']), ('orelse', [])]": 84, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['FunctionDef', 'Expr', 'Return']), ('decorator_list', ['Name'])]": 1, "Compare -> [('left', 'Name'), ('ops', ['NotEq']), ('comparators', ['Call'])]": 10, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'If', 'If', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['For', 'Raise']), ('decorator_list', [])]": 8, "Attribute -> [('value', 'Attribute'), ('attr', 'str'), ('ctx', 'Load')]": 21360, "List -> [('elts', ['Tuple', 'Str', 'Str']), ('ctx', 'Load')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For']), ('decorator_list', [])]": 2, "If -> [('test', 'BoolOp'), ('body', ['If', 'Expr']), ('orelse', [])]": 1, "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'TryExcept', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'ClassDef', 'ClassDef'])]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Assign', 'Assign', 'For', 'Expr']), ('orelse', [])]": 1, "Subscript -> [('value', 'Name'), ('slice', 'Index'), ('ctx', 'Load')]": 8077, "BinOp -> [('left', 'Num'), ('op', 'Mult'), ('right', 'Name')]": 133, "UnaryOp -> [('op', 'Not'), ('operand', 'Attribute')]": 672, "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['If', 'Continue'])]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'If', 'Assign', 'For', 'For']), ('decorator_list', [])]": 1, "List -> [('elts', ['UnaryOp', 'Subscript', 'Subscript']), ('ctx', 'Load')]": 2, "Print -> [('dest', 'NoneType'), ('values', ['BinOp']), ('nl', 'bool')]": 347, "Call -> [('func', 'Attribute'), ('args', []), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 4, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'For', 'For', 'Expr', 'Expr']), ('orelse', [])]": 1, "List -> [('elts', ['Attribute', 'Attribute', 'Lambda']), ('ctx', 'Load')]": 5, "If -> [('test', 'Num'), ('body', ['Expr']), ('orelse', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Expr']), ('orelse', ['If'])]": 2, "Call -> [('func', 'Name'), ('args', ['BinOp', 'BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 30, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Print', 'Assign', 'Assign', 'For', 'Print', 'Assign', 'Assign', 'If', 'Return']), ('decorator_list', [])]": 4, "For -> [('target', 'Name'), ('iter', 'List'), ('body', ['Assign']), ('orelse', [])]": 4, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'Import', 'ClassDef', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'If'])]": 1, "If -> [('test', 'Call'), ('body', ['Assign', 'For', 'Assign', 'If']), ('orelse', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Attribute', 'Attribute', 'Name']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Assign', 'If', 'If', 'Return']), ('decorator_list', [])]": 1, "Yield -> [('value', 'BinOp')]": 11, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'ImportFrom', 'Assign', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'Assign', 'Expr', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'If'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'If', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'If', 'If', 'Assign', 'Expr', 'Expr', 'Assign', 'While', 'For', 'Expr', 'Expr', 'Expr', 'If', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "If -> [('test', 'Name'), ('body', ['Expr', 'Assign', 'For', 'Expr', 'Expr', 'Expr', 'Assign']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assert', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'Import', 'Import', 'Assert', 'If', 'TryExcept']), ('decorator_list', [])]": 1, "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'Assign', 'For', 'Assign', 'For', 'If']), ('orelse', [])]": 1, "BinOp -> [('left', 'List'), ('op', 'Mult'), ('right', 'Attribute')]": 9, "ListComp -> [('elt', 'Tuple'), ('generators', ['comprehension'])]": 163, "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['Assign', 'For']), ('orelse', [])]": 12, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'If', 'If', 'Return']), ('decorator_list', [])]": 7, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'FunctionDef', 'Return']), ('decorator_list', ['Name'])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign']), ('orelse', ['If'])]": 306, "If -> [('test', 'Name'), ('body', ['Assign', 'Expr']), ('orelse', [])]": 29, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'For', 'For', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Subscript', 'Subscript', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 19, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Expr', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['TryExcept', 'Assign', 'If', 'If', 'TryExcept', 'If', 'If', 'If']), ('decorator_list', [])]": 1, "ExceptHandler -> [('type', 'Name'), ('name', 'Name'), ('body', ['Assign', 'Assign'])]": 4, "If -> [('test', 'Name'), ('body', ['Expr']), ('orelse', ['Expr'])]": 63, "If -> [('test', 'Compare'), ('body', ['ClassDef', 'FunctionDef']), ('orelse', ['Assign'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Global', 'Assign', 'Assign', 'If', 'While', 'Assign', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'If', 'If', 'If', 'If', 'If']), ('decorator_list', [])]": 1, "comprehension -> [('target', 'Name'), ('iter', 'Attribute'), ('ifs', ['Call'])]": 8, "Call -> [('func', 'Name'), ('args', ['Name', 'Str', 'BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 8, "ClassDef -> [('name', 'str'), ('bases', []), ('body', ['Expr', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Expr', 'Assign', 'ClassDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef'])]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'FunctionDef', 'ClassDef', 'If'])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Expr', 'Assign']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'FunctionDef', 'ClassDef'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Str', 'Name']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 3, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str']), ('values', ['Str', 'Num', 'Num', 'Str'])]": 1, "If -> [('test', 'Name'), ('body', ['If']), ('orelse', ['Assign', 'Assign', 'Expr', 'Expr', 'Assign'])]": 1, "Compare -> [('left', 'Call'), ('ops', ['Eq']), ('comparators', ['BinOp'])]": 9, "If -> [('test', 'Compare'), ('body', ['Assign', 'If', 'Break']), ('orelse', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Return']), ('orelse', ['Assign', 'Expr'])]": 1, "If -> [('test', 'Compare'), ('body', ['Import', 'Assign', 'If', 'Assign', 'Assign']), ('orelse', [])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['Num', 'Num', 'Dict'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'If', 'For', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'While', 'Return']), ('decorator_list', [])]": 2, "If -> [('test', 'Compare'), ('body', ['Expr']), ('orelse', ['Assign', 'Expr', 'Expr'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'If', 'If', 'For', 'Return']), ('decorator_list', [])]": 1, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'Assign', 'Expr', 'Assign', 'Assign', 'AugAssign', 'AugAssign', 'AugAssign', 'AugAssign', 'Assign', 'For', 'If'])]": 1, "For -> [('target', 'Tuple'), ('iter', 'Subscript'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Expr']), ('orelse', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Name', 'Name', 'BinOp', 'Attribute', 'Attribute', 'Str', 'Str', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "While -> [('test', 'BoolOp'), ('body', ['If', 'Expr']), ('orelse', [])]": 1, "Attribute -> [('value', 'BoolOp'), ('attr', 'str'), ('ctx', 'Load')]": 6, "Call -> [('func', 'Name'), ('args', ['Name', 'Name', 'Attribute', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 6, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Print', 'TryExcept', 'Return']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Attribute', 'Attribute', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Attribute', 'Subscript', 'Name', 'Call', 'Name', 'Call'])]": 1, "If -> [('test', 'BoolOp'), ('body', ['Assign', 'For', 'If']), ('orelse', [])]": 1, "TryExcept -> [('body', ['Assign', 'Assign']), ('handlers', ['ExceptHandler']), ('orelse', ['Expr'])]": 2, "TryFinally -> [('body', ['If', 'Assign', 'Expr']), ('finalbody', ['Expr'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'If', 'Expr', 'Assign', 'If', 'If', 'AugAssign', 'For', 'Return']), ('decorator_list', [])]": 1, "BoolOp -> [('op', 'And'), ('values', ['BoolOp', 'Attribute'])]": 2, "If -> [('test', 'Call'), ('body', ['If', 'Assign', 'Assign']), ('orelse', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'AugAssign', 'Assign', 'Assign', 'Expr', 'Assign', 'Return']), ('orelse', ['Return'])]": 1, "Call -> [('func', 'Name'), ('args', ['Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'Name')]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Name', 'Num', 'Num', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "While -> [('test', 'Compare'), ('body', ['Print', 'Expr', 'Assign']), ('orelse', [])]": 1, "If -> [('test', 'Call'), ('body', ['Print', 'Print', 'Return']), ('orelse', [])]": 1, "TryExcept -> [('body', ['Raise']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 2, "Compare -> [('left', 'Name'), ('ops', ['Is']), ('comparators', ['Str'])]": 4, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Expr', 'If', 'If', 'Expr']), ('orelse', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['TryExcept', 'Expr', 'Expr', 'For', 'For']), ('decorator_list', [])]": 1, "BinOp -> [('left', 'Name'), ('op', 'BitOr'), ('right', 'Call')]": 23, "Call -> [('func', 'Name'), ('args', ['Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 8253, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'FunctionDef', 'Assign', 'Assign', 'For', 'Expr', 'Expr', 'For']), ('decorator_list', [])]": 1, "ExceptHandler -> [('type', 'Name'), ('name', 'Name'), ('body', ['Print', 'Return'])]": 5, "TryExcept -> [('body', ['Assign', 'Expr', 'Assign', 'Assign', 'If']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['Expr']), ('orelse', [])]": 131, "Call -> [('func', 'Attribute'), ('args', ['Call', 'Num', 'BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "TryFinally -> [('body', ['Expr', 'Expr']), ('finalbody', ['Expr', 'If'])]": 1, "If -> [('test', 'BoolOp'), ('body', ['If', 'Assign', 'TryExcept']), ('orelse', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'TryExcept', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Expr', 'Expr', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef'])]": 1, "Tuple -> [('elts', ['BinOp', 'Str']), ('ctx', 'Load')]": 2, "ExceptHandler -> [('type', 'NoneType'), ('name', 'NoneType'), ('body', ['Assign'])]": 38, "While -> [('test', 'Name'), ('body', ['Assign', 'If', 'AugAssign', 'If', 'If', 'Expr']), ('orelse', [])]": 1, "Call -> [('func', 'Attribute'), ('args', []), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 838, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'If', 'If', 'Expr', 'Expr', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Import', 'Assign', 'Assign', 'Assign', 'AugAssign', 'AugAssign', 'Return']), ('decorator_list', [])]": 2, "If -> [('test', 'BoolOp'), ('body', ['Assign', 'TryExcept']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Expr', 'Return']), ('decorator_list', [])]": 12, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'If', 'Expr', 'Return']), ('decorator_list', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name', 'Name']), ('body', ['Expr', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 2, "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['List', 'List', 'List'])]": 5, "Dict -> [('keys', ['Str', 'Str']), ('values', ['Attribute', 'BoolOp'])]": 6, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Print', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'For', 'Print', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'For', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Assign', 'For', 'Expr', 'Expr', 'Expr', 'Print', 'Expr', 'Expr', 'Return', 'Expr', 'Assign', 'Assign', 'Print', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'AugAssign', 'Assign', 'Print', 'Print', 'FunctionDef', 'Assign', 'Print', 'FunctionDef', 'Print', 'For', 'Expr', 'Assign', 'Assign', 'Print', 'Assign', 'For', 'Expr', 'Print', 'Assign', 'Assign', 'For', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Expr', 'Expr', 'Expr', 'Return', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Expr', 'Expr', 'Print', 'If', 'Return', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Print', 'Assign', 'Assign', 'Assign', 'Assign', 'Print', 'FunctionDef', 'Assign', 'Assign', 'Expr', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'Print', 'Assign', 'Return', 'Expr', 'Assign', 'Print', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'AugAssign', 'AugAssign', 'Print', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Assign']), ('orelse', [])]": 41, "If -> [('test', 'Compare'), ('body', ['Assign', 'Expr', 'Assign', 'Assign']), ('orelse', [])]": 1, "List -> [('elts', ['Str', 'Str', 'Name', 'Str', 'Str', 'Name', 'Str', 'Str', 'Name']), ('ctx', 'Load')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', ['Call'])]": 1, "If -> [('test', 'Call'), ('body', ['Assign', 'TryExcept']), ('orelse', ['Return'])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Expr', 'Expr', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'TryExcept']), ('decorator_list', [])]": 9, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'For', 'Assign', 'Expr', 'For', 'Assign', 'Expr', 'Assign', 'Return']), ('decorator_list', ['Name'])]": 1, "Compare -> [('left', 'Attribute'), ('ops', ['Lt']), ('comparators', ['Attribute'])]": 16, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'If', 'If', 'Return']), ('decorator_list', ['Name'])]": 1, "BoolOp -> [('op', 'And'), ('values', ['Name', 'Call', 'Compare'])]": 3, "If -> [('test', 'Name'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'AugAssign', 'If', 'Return']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assert']), ('decorator_list', [])]": 2, "Assert -> [('test', 'BoolOp'), ('msg', 'Call')]": 16, "If -> [('test', 'Compare'), ('body', ['If']), ('orelse', ['AugAssign'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'Assign', 'If', 'Expr']), ('decorator_list', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Subscript', 'Subscript', 'Subscript', 'Name']), ('keywords', ['keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 5, "If -> [('test', 'UnaryOp'), ('body', ['Assert', 'Assign']), ('orelse', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', []), ('body', ['Assign', 'FunctionDef', 'FunctionDef', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Print', 'Assign', 'For']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'ClassDef', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'For']), ('decorator_list', ['Name', 'Name'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Str', 'Str', 'BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 6, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'ClassDef', 'ClassDef'])]": 1, "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign', 'While', 'Assign']), ('orelse', [])]": 2, "TryFinally -> [('body', ['Expr']), ('finalbody', ['Expr', 'Expr'])]": 1, "TryExcept -> [('body', ['ImportFrom', 'ClassDef']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 1, "For -> [('target', 'Name'), ('iter', 'List'), ('body', ['TryFinally']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assert', 'Assign', 'Assign', 'Assert', 'Assign', 'Assign', 'Assert', 'Assign', 'Assign', 'Assert', 'Assert']), ('decorator_list', [])]": 1, "Slice -> [('lower', 'Num'), ('upper', 'NoneType'), ('step', 'NoneType')]": 283, "With -> [('context_expr', 'Call'), ('optional_vars', 'NoneType'), ('body', ['Assign', 'Assign', 'Expr'])]": 2, "Slice -> [('lower', 'NoneType'), ('upper', 'NoneType'), ('step', 'NoneType')]": 861, "arguments -> [('args', ['Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'List'])]": 1, "AugAssign -> [('target', 'Name'), ('op', 'LShift'), ('value', 'Num')]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['If', 'Assign', 'If', 'Assign', 'Expr', 'TryExcept', 'Assign', 'Assign', 'If', 'If', 'AugAssign', 'If']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'Return']), ('decorator_list', [])]": 18, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'Assign', 'Expr', 'Assign']), ('decorator_list', [])]": 2, "For -> [('target', 'Name'), ('iter', 'Subscript'), ('body', ['Assign', 'TryExcept', 'Expr', 'Expr']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'Assign', 'Assign', 'If', 'Assign', 'For', 'Assign', 'If', 'For', 'Assign', 'Assign']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'Assign', 'TryExcept', 'Assign', 'Assign', 'If', 'Expr']), ('decorator_list', [])]": 2, "If -> [('test', 'Compare'), ('body', ['Import', 'Assign', 'Assign']), ('orelse', [])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Attribute']), ('values', ['Name', 'Name', 'Name'])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign']), ('orelse', ['Expr', 'Return'])]": 1, "List -> [('elts', ['Num', 'Num', 'Num', 'Name', 'Name']), ('ctx', 'Load')]": 2, "Call -> [('func', 'Attribute'), ('args', ['Subscript', 'Subscript', 'Name', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 6, "List -> [('elts', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('ctx', 'Load')]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Assign', 'Assign', 'For']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'FunctionDef', 'FunctionDef', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Call', 'Name', 'Name', 'Name', 'Name', 'Tuple', 'Tuple']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Call -> [('func', 'Name'), ('args', ['Num', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 74, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'If', 'If', 'Expr', 'For', 'If', 'Expr', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'Assign', 'For', 'Assign', 'For']), ('decorator_list', [])]": 1, "If -> [('test', 'Name'), ('body', ['Expr', 'Expr', 'Expr', 'If']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "Assign -> [('targets', ['Subscript', 'Name']), ('value', 'Name')]": 2, "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Delete', 'Assign', 'Assign', 'If']), ('orelse', ['If'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Attribute', 'Name', 'Name']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "TryExcept -> [('body', ['Expr', 'Expr', 'Expr']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 7, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "TryExcept -> [('body', ['Print', 'Expr']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'For', 'Assign', 'For', 'Assign', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'BoolOp'), ('body', ['Assign', 'If']), ('orelse', [])]": 29, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'Assign', 'If']), ('decorator_list', [])]": 2, "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['ImportFrom', 'Assign'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Str', 'Name', 'Name', 'Name', 'Name', 'Name', 'Str', 'Name', 'Name'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Import', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assert', 'Assign', 'Assign', 'Return']), ('decorator_list', ['Call'])]": 2, "BoolOp -> [('op', 'Or'), ('values', ['Name', 'Dict'])]": 54, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'Assign', 'Assign', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "ImportFrom -> [('module', 'str'), ('names', ['alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias']), ('level', 'int')]": 31, "Tuple -> [('elts', ['Str', 'List']), ('ctx', 'Load')]": 10, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'For', 'Assign', 'Assign', 'For', 'Return']), ('decorator_list', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Num', 'Call', 'List', 'Num', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]": 5, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Tuple', 'Name']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 27, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Num', 'Num', 'Num', 'Subscript', 'Subscript', 'Call', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Name', 'Str', 'Name', 'BinOp', 'Name', 'Num'])]": 1, "IfExp -> [('test', 'Compare'), ('body', 'Call'), ('orelse', 'Num')]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'Assign', 'While', 'Assign', 'If', 'Return']), ('decorator_list', ['Name'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'Expr']), ('decorator_list', ['Attribute'])]": 3, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'AugAssign', 'Return']), ('decorator_list', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Name']), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 32, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assert', 'If', 'AugAssign', 'TryFinally', 'If']), ('decorator_list', [])]": 2, "List -> [('elts', ['Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple']), ('ctx', 'Load')]": 1, "Call -> [('func', 'Subscript'), ('args', ['Call', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Module -> [('body', ['Import', 'ImportFrom', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'TryExcept', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'TryExcept', 'TryExcept', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'TryExcept', 'Assign', 'While'])]": 1, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'FunctionDef', 'Assign', 'FunctionDef', 'Assign', 'FunctionDef', 'Assign', 'FunctionDef', 'Assign', 'ClassDef', 'Expr'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'If', 'If', 'Expr']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['AugAssign', 'If', 'If']), ('orelse', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Expr', 'Raise']), ('orelse', ['Return'])]": 2, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'If', 'Assign', 'If', 'Assign', 'If', 'If']), ('orelse', [])]": 1, "BoolOp -> [('op', 'And'), ('values', ['Compare', 'Compare', 'BoolOp'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assert', 'Assign', 'If', 'Assign', 'Assign', 'Expr', 'Return']), ('decorator_list', [])]": 2, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Call', 'Str']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Expr', 'If']), ('decorator_list', [])]": 1, "If -> [('test', 'BoolOp'), ('body', ['Assign', 'If', 'If']), ('orelse', [])]": 3, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "BinOp -> [('left', 'BinOp'), ('op', 'Pow'), ('right', 'Num')]": 60, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'If', 'If', 'Assign', 'Assign', 'Assign', 'If', 'If', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'FunctionDef', 'Expr', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'If', 'For', 'For', 'For', 'If', 'If', 'Return']), ('decorator_list', [])]": 1, "Yield -> [('value', 'Attribute')]": 8, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'TryExcept', 'Assign', 'Assign', 'If', 'FunctionDef', 'Expr']), ('decorator_list', [])]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'ClassDef', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "Tuple -> [('elts', ['Attribute', 'BinOp']), ('ctx', 'Load')]": 31, "Call -> [('func', 'Name'), ('args', ['Compare', 'Compare', 'Compare']), ('keywords', []), ('starargs', 'Name'), ('kwargs', 'NoneType')]": 1, "For -> [('target', 'Tuple'), ('iter', 'Name'), ('body', ['If']), ('orelse', [])]": 32, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assert', 'AugAssign', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'Name'), ('body', ['Expr', 'Expr', 'For', 'For', 'For', 'For', 'Expr']), ('orelse', [])]": 1, "If -> [('test', 'Attribute'), ('body', ['Assign', 'If']), ('orelse', [])]": 18, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Name', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 13, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'If', 'If', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "Print -> [('dest', 'NoneType'), ('values', ['Attribute', 'Attribute', 'Attribute', 'Attribute']), ('nl', 'bool')]": 1, "If -> [('test', 'Name'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'Assign', 'If', 'Expr']), ('orelse', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Str', 'Attribute', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 65, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'For', 'Expr']), ('decorator_list', [])]": 2, "BoolOp -> [('op', 'Or'), ('values', ['Call', 'UnaryOp'])]": 4, "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['If', 'If']), ('orelse', [])]": 10, "Dict -> [('keys', ['Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute']), ('values', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str'])]": 2, "If -> [('test', 'Name'), ('body', ['Assign', 'Assign']), ('orelse', ['Return'])]": 1, "Module -> [('body', ['Import', 'Assign', 'Expr', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Expr', 'Expr', 'For', 'Expr', 'Expr', 'Expr', 'Assign', 'For', 'Expr'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['Assign', 'Expr', 'Return'])]": 1, "ExceptHandler -> [('type', 'Tuple'), ('name', 'Name'), ('body', ['If', 'Expr', 'Assign'])]": 4, "BinOp -> [('left', 'Name'), ('op', 'Mult'), ('right', 'Compare')]": 1, "Tuple -> [('elts', ['Subscript', 'BinOp', 'Subscript']), ('ctx', 'Load')]": 4, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'For', 'Return']), ('decorator_list', ['Name'])]": 2, "ExceptHandler -> [('type', 'Tuple'), ('name', 'Name'), ('body', ['Expr', 'Expr', 'Expr'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'If', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'For']), ('decorator_list', [])]": 2, "BoolOp -> [('op', 'And'), ('values', ['Compare', 'Compare', 'Subscript'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Import', 'If', 'Assign', 'If', 'If', 'Return']), ('decorator_list', [])]": 1, "Module -> [('body', ['Import', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]": 1, "For -> [('target', 'Name'), ('iter', 'Tuple'), ('body', ['Assign', 'Assign', 'Assign', 'For']), ('orelse', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Name', 'Num', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "ListComp -> [('elt', 'Subscript'), ('generators', ['comprehension'])]": 139, "If -> [('test', 'Compare'), ('body', ['Expr', 'If', 'Assert']), ('orelse', ['If'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['TryExcept']), ('decorator_list', ['Name'])]": 14, "Tuple -> [('elts', ['Str', 'Str', 'Num']), ('ctx', 'Load')]": 4, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'ImportFrom', 'Return']), ('decorator_list', ['Call'])]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['If', 'Assert', 'Expr']), ('orelse', [])]": 1, "Call -> [('func', 'Name'), ('args', ['UnaryOp', 'Attribute', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 3, "Module -> [('body', ['Import', 'Assign', 'Expr', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'For', 'Assign', 'Expr', 'Expr', 'Assign', 'For', 'Assign', 'For', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'For', 'Expr', 'Expr'])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'str'), ('defaults', ['Name', 'Num'])]": 1, "TryExcept -> [('body', ['Assign', 'Assign']), ('handlers', ['ExceptHandler']), ('orelse', ['If'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Delete', 'If', 'If']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Num']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 4, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr']), ('decorator_list', ['Call'])]": 1, "Call -> [('func', 'Call'), ('args', []), ('keywords', []), ('starargs', 'Name'), ('kwargs', 'Name')]": 4, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'TryExcept', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'UnaryOp'), ('body', ['Expr', 'Assign', 'Assign', 'Expr', 'Expr']), ('orelse', [])]": 6, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['ImportFrom', 'Assign']), ('orelse', [])]": 11, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Print', 'Assign']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'If', 'If', 'Assign', 'TryExcept']), ('decorator_list', ['Name'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'AugAssign', 'Return']), ('decorator_list', [])]": 2, "Call -> [('func', 'Call'), ('args', ['Call']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "BoolOp -> [('op', 'Or'), ('values', ['Attribute', 'Tuple'])]": 3, "If -> [('test', 'BoolOp'), ('body', ['Assign']), ('orelse', ['If', 'ClassDef'])]": 1, "If -> [('test', 'Call'), ('body', ['Assign', 'Expr']), ('orelse', [])]": 20, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Expr', 'Expr', 'Assign']), ('orelse', [])]": 2, "If -> [('test', 'BoolOp'), ('body', ['For']), ('orelse', [])]": 8, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'For']), ('decorator_list', [])]": 4, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'Expr', 'Assign', 'Assign', 'If']), ('decorator_list', [])]": 1, "If -> [('test', 'Call'), ('body', ['Expr', 'Expr', 'Expr', 'Return']), ('orelse', ['Expr'])]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import'])]": 1, "BoolOp -> [('op', 'And'), ('values', ['Name', 'UnaryOp', 'UnaryOp'])]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'Assign', 'For', 'If', 'Assign', 'For', 'Assign', 'If', 'Assign', 'For', 'Return']), ('decorator_list', [])]": 1, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Assign', 'If', 'If', 'If', 'If', 'If', 'If', 'Expr']), ('orelse', [])]": 2, "If -> [('test', 'Compare'), ('body', ['Expr', 'Assign', 'Return']), ('orelse', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 13, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'Return']), ('decorator_list', ['Attribute'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['BinOp', 'Name']), ('keywords', []), ('starargs', 'Name'), ('kwargs', 'NoneType')]": 1, "AugAssign -> [('target', 'Name'), ('op', 'Sub'), ('value', 'Num')]": 39, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'If', 'If', 'Expr', 'If', 'Expr']), ('decorator_list', ['Attribute'])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Attribute', 'Name', 'Name', 'Str'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'For']), ('decorator_list', ['Name'])]": 2, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Assign', 'Assign', 'While', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', ['Attribute'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['FunctionDef', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]": 4, "ClassDef -> [('name', 'str'), ('bases', []), ('body', ['Expr', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Print', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign']), ('orelse', ['Assign'])]": 7, "Call -> [('func', 'Name'), ('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Compare']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ClassDef', 'Assign']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'If', 'Assign', 'AugAssign', 'If', 'Assign', 'Return']), ('decorator_list', [])]": 1, "TryFinally -> [('body', ['Expr']), ('finalbody', ['If'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Num', 'Attribute', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 4, "If -> [('test', 'Call'), ('body', ['Assign', 'Assign', 'Assign']), ('orelse', ['Assign', 'Assign', 'Assign'])]": 3, "Call -> [('func', 'Name'), ('args', ['Subscript', 'Subscript', 'Subscript']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "TryExcept -> [('body', ['Assign', 'Assign', 'If', 'Return']), ('handlers', ['ExceptHandler', 'ExceptHandler', 'ExceptHandler']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'For', 'Expr', 'Expr', 'TryExcept', 'Assign', 'Assign', 'Assign', 'Print', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "Tuple -> [('elts', ['Tuple']), ('ctx', 'Load')]": 13, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Assign', 'If', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'ClassDef', 'FunctionDef', 'Assign', 'Assign', 'Assign'])]": 1, "TryExcept -> [('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Print', 'For', 'Print', 'Assign', 'Expr']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'Return']), ('decorator_list', [])]": 10, "AugAssign -> [('target', 'Attribute'), ('op', 'Mod'), ('value', 'Call')]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Str', 'Str']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 8, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ClassDef', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Compare', 'Compare']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 9, "If -> [('test', 'UnaryOp'), ('body', ['Assign']), ('orelse', ['Pass'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'TryExcept', 'TryExcept', 'TryExcept', 'Assign', 'Assign', 'Assign', 'If', 'If', 'If', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "List -> [('elts', ['Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple']), ('ctx', 'Load')]": 2, "Attribute -> [('value', 'Attribute'), ('attr', 'str'), ('ctx', 'Store')]": 448, "TryExcept -> [('body', ['If', 'If', 'If', 'Return']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assert', 'If', 'If', 'If', 'If', 'Assign', 'Assign', 'If']), ('decorator_list', [])]": 1, "Raise -> [('type', 'Attribute'), ('inst', 'Name'), ('tback', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'ImportFrom', 'Expr', 'Return']), ('decorator_list', ['Call'])]": 1, "While -> [('test', 'Num'), ('body', ['Assign', 'If']), ('orelse', [])]": 3, "If -> [('test', 'UnaryOp'), ('body', ['Print', 'Return']), ('orelse', [])]": 13, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'ImportFrom', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'If', 'If', 'If', 'If', 'Assign', 'For', 'Assign', 'If']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Assign', 'Expr', 'Expr']), ('decorator_list', ['Attribute'])]": 4, "BinOp -> [('left', 'UnaryOp'), ('op', 'Add'), ('right', 'Num')]": 1, "Module -> [('body', ['Import', 'Assign', 'Expr', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'For', 'For', 'For', 'For', 'Assign', 'Expr', 'Assign', 'For', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Expr', 'Expr'])]": 1, "If -> [('test', 'Name'), ('body', ['Assert', 'Assert', 'Assert']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Print', 'Assign', 'Expr', 'For', 'Print', 'Return']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Expr', 'For', 'For', 'For', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "Compare -> [('left', 'Num'), ('ops', ['Lt']), ('comparators', ['Name'])]": 1, "ExceptHandler -> [('type', 'Tuple'), ('name', 'NoneType'), ('body', ['Assign'])]": 27, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Global', 'If', 'For', 'If']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'For', 'Expr', 'For', 'Assign', 'For', 'For', 'Return']), ('decorator_list', [])]": 1, "arguments -> [('args', ['Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Str'])]": 62, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Import', 'Expr', 'Expr', 'Expr', 'If', 'Assign', 'Assign', 'If', 'FunctionDef', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Return']), ('decorator_list', ['Call', 'Name'])]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'TryExcept']), ('decorator_list', [])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['UnaryOp', 'Call', 'Attribute'])]": 2, "If -> [('test', 'Call'), ('body', ['Assign', 'Expr', 'For']), ('orelse', ['Expr'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Expr', 'For', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Expr', 'Assign', 'Expr']), ('orelse', ['If'])]": 1, "BoolOp -> [('op', 'Or'), ('values', ['Compare', 'Call'])]": 20, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'FunctionDef', 'FunctionDef'])]": 1, "Compare -> [('left', 'Call'), ('ops', ['Eq']), ('comparators', ['Call'])]": 58, "Call -> [('func', 'Name'), ('args', ['Name', 'Call', 'Name', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 5, "Call -> [('func', 'Attribute'), ('args', ['Yield', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['AugAssign']), ('decorator_list', [])]": 7, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['If']), ('orelse', ['Expr'])]": 4, "Call -> [('func', 'Attribute'), ('args', ['Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'Name')]": 1, "Call -> [('func', 'Attribute'), ('args', ['IfExp', 'BinOp', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "If -> [('test', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'If']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'If', 'If', 'Assign', 'For', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['If', 'Expr', 'If']), ('orelse', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "If -> [('test', 'Call'), ('body', ['If', 'Print', 'Assign', 'Break']), ('orelse', [])]": 1, "If -> [('test', 'Compare'), ('body', ['If', 'AugAssign']), ('orelse', [])]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ImportFrom', 'ClassDef', 'ClassDef', 'ImportFrom', 'ClassDef', 'ImportFrom', 'ClassDef', 'FunctionDef', 'ClassDef', 'ClassDef'])]": 1, "TryExcept -> [('body', ['If']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 67, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name'])]": 1, "With -> [('context_expr', 'Call'), ('optional_vars', 'Name'), ('body', ['Assign', 'If'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 22, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Name']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 25, "TryExcept -> [('body', ['Assign', 'FunctionDef', 'Expr']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 1, "TryExcept -> [('body', ['ImportFrom']), ('handlers', ['ExceptHandler']), ('orelse', ['Expr'])]": 2, "Call -> [('func', 'Attribute'), ('args', ['Call', 'Name', 'Str', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Tuple -> [('elts', ['Name']), ('ctx', 'Store')]": 20, "Call -> [('func', 'Name'), ('args', ['Name', 'Name', 'Num']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'If', 'If', 'Assign', 'Assign', 'For', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "BinOp -> [('left', 'Name'), ('op', 'Sub'), ('right', 'BinOp')]": 42, "For -> [('target', 'Name'), ('iter', 'Tuple'), ('body', ['Expr', 'Expr', 'Expr']), ('orelse', [])]": 4, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Expr', 'TryExcept', 'For']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "If -> [('test', 'Name'), ('body', ['Assign', 'Assign', 'For', 'If', 'Assign', 'Assign', 'For']), ('orelse', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['TryExcept', 'TryExcept', 'TryExcept', 'TryExcept', 'If', 'If', 'If', 'If', 'If']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Expr', 'FunctionDef', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['AugAssign', 'Continue']), ('orelse', [])]": 2, "Tuple -> [('elts', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('ctx', 'Load')]": 2, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'Import', 'Import', 'FunctionDef', 'Assign', 'FunctionDef', 'ClassDef', 'ClassDef', 'FunctionDef', 'FunctionDef', 'Expr'])]": 1, "TryFinally -> [('body', ['Assign', 'If', 'Expr', 'AugAssign', 'TryFinally', 'If', 'Assign', 'Assign', 'For', 'Expr', 'Assign', 'Assign', 'For', 'Expr', 'Assign', 'Expr', 'Expr']), ('finalbody', ['If', 'Expr'])]": 2, "If -> [('test', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'TryExcept', 'If', 'For', 'If']), ('orelse', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "Tuple -> [('elts', ['Call', 'Name', 'Subscript']), ('ctx', 'Load')]": 8, "arguments -> [('args', ['Name', 'Name', 'Name']), ('vararg', 'str'), ('kwarg', 'str'), ('defaults', ['Name'])]": 21, "BinOp -> [('left', 'Call'), ('op', 'Add'), ('right', 'Name')]": 37, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Print', 'FunctionDef', 'FunctionDef', 'Expr']), ('decorator_list', [])]": 1, "If -> [('test', 'Name'), ('body', ['Assign', 'If', 'Expr', 'Expr', 'Expr', 'Expr']), ('orelse', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Call', 'Name', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['Assign', 'Assign', 'Assign']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'Assign', 'Return']), ('decorator_list', [])]": 9, "Call -> [('func', 'Attribute'), ('args', ['BinOp', 'List']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 10, "While -> [('test', 'Name'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'If', 'For']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'Print', 'While', 'Assign', 'Assign']), ('decorator_list', [])]": 1, "BinOp -> [('left', 'Name'), ('op', 'BitXor'), ('right', 'Name')]": 6, "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'TryExcept', 'TryExcept', 'Assign', 'ClassDef', 'ClassDef'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', ['Call'])]": 1, "Assign -> [('targets', ['Name', 'Attribute']), ('value', 'Name')]": 1, "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'AugAssign']), ('orelse', [])]": 1, "BinOp -> [('left', 'Subscript'), ('op', 'Mult'), ('right', 'Num')]": 23, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Print', 'Assign', 'Expr', 'Expr']), ('orelse', [])]": 1, "BoolOp -> [('op', 'And'), ('values', ['Attribute', 'Attribute', 'Compare'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 3, "If -> [('test', 'Name'), ('body', ['If', 'Assign', 'If']), ('orelse', [])]": 8, "ImportFrom -> [('module', 'str'), ('names', ['alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias']), ('level', 'int')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Return']), ('decorator_list', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', ['Call'])]": 1, "Call -> [('func', 'Name'), ('args', ['Name', 'Name', 'Name', 'Name', 'Num', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 3, "Tuple -> [('elts', ['Call', 'Subscript', 'Name']), ('ctx', 'Load')]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'Assign', 'Print', 'Print', 'Print', 'Assign', 'While', 'Return']), ('decorator_list', [])]": 1, "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['Assign', 'Assign', 'If', 'Raise'])]": 1, "Tuple -> [('elts', ['Name', 'Str', 'Name', 'Num']), ('ctx', 'Load')]": 2, "For -> [('target', 'Tuple'), ('iter', 'List'), ('body', ['Assign', 'TryExcept', 'Expr']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'If', 'Assign', 'If', 'If', 'Return']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Assign', 'Assign', 'For', 'Assign', 'Assign', 'Expr']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'TryExcept', 'Assign', 'For', 'Expr', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "Call -> [('func', 'Subscript'), ('args', ['Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Assign', 'Return', 'If']), ('decorator_list', [])]": 1, "Module -> [('body', ['Import', 'Import', 'Expr', 'Expr', 'Expr', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef'])]": 1, "comprehension -> [('target', 'Tuple'), ('iter', 'Call'), ('ifs', ['Compare'])]": 11, "ListComp -> [('elt', 'List'), ('generators', ['comprehension'])]": 3, "UnaryOp -> [('op', 'Invert'), ('operand', 'Attribute')]": 3, "Call -> [('func', 'Attribute'), ('args', ['Call', 'Call', 'Attribute', 'Num', 'BinOp', 'Num', 'Num', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Expr', 'Assign', 'Assign', 'FunctionDef']), ('decorator_list', [])]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'If', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'FunctionDef', 'Assign', 'If', 'If', 'Assign', 'If', 'Assign', 'Return']), ('decorator_list', [])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Attribute', 'Attribute', 'Name', 'Name'])]": 1, "Lambda -> [('args', 'arguments'), ('body', 'Dict')]": 7, "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef'])]": 1, "Call -> [('func', 'Name'), ('args', ['Name', 'Call', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Attribute']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 10, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'Expr']), ('decorator_list', ['Name'])]": 1, "Call -> [('func', 'Name'), ('args', ['Call', 'Dict']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'If', 'TryExcept', 'Assign', 'TryExcept', 'Return']), ('decorator_list', [])]": 2, "Compare -> [('left', 'Attribute'), ('ops', ['In']), ('comparators', ['Subscript'])]": 6, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef']), ('decorator_list', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'FunctionDef', 'FunctionDef'])]": 1, "If -> [('test', 'Name'), ('body', ['Expr', 'For', 'Expr', 'Assign']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['FunctionDef', 'If', 'If', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Return']), ('decorator_list', [])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'str'), ('defaults', ['Name', 'Name'])]": 3, "Call -> [('func', 'Attribute'), ('args', ['Str', 'Str', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign', 'Assign', 'Assign']), ('orelse', ['If'])]": 2, "If -> [('test', 'Call'), ('body', ['Expr', 'Expr', 'Expr', 'Expr', 'If', 'Expr', 'Raise']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'While', 'Expr', 'Expr', 'Return']), ('decorator_list', [])]": 1, "Print -> [('dest', 'Call'), ('values', []), ('nl', 'bool')]": 1, "Call -> [('func', 'Name'), ('args', ['Name', 'Call']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 13, "Attribute -> [('value', 'Name'), ('attr', 'str'), ('ctx', 'Load')]": 104914, "Tuple -> [('elts', ['Call', 'Name', 'Name']), ('ctx', 'Load')]": 17, "If -> [('test', 'Compare'), ('body', ['Assign']), ('orelse', ['TryExcept'])]": 7, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]": 2, "If -> [('test', 'UnaryOp'), ('body', ['Expr']), ('orelse', ['Assign', 'If'])]": 1, "If -> [('test', 'BoolOp'), ('body', ['Expr', 'Continue']), ('orelse', [])]": 3, "TryFinally -> [('body', ['If', 'Expr', 'While', 'Expr']), ('finalbody', ['If'])]": 3, "While -> [('test', 'BoolOp'), ('body', ['Assign', 'If']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'For', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Import', 'TryExcept', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Str', 'Str']), ('keywords', ['keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 46, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'ClassDef', 'Assign'])]": 1, "Call -> [('func', 'Name'), ('args', ['Subscript', 'List']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'Assign', 'Assign', 'Return']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'FunctionDef', 'Expr', 'If', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "Slice -> [('lower', 'Num'), ('upper', 'BinOp'), ('step', 'NoneType')]": 11, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 3, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'ClassDef', 'ClassDef', 'If'])]": 1, "If -> [('test', 'Call'), ('body', ['Assign', 'Expr', 'Assign', 'If', 'Assign', 'Expr', 'Assign']), ('orelse', [])]": 1, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'AugAssign', 'AugAssign', 'AugAssign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'AugAssign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr']), ('decorator_list', ['Name', 'Name', 'Name'])]": 1, "Attribute -> [('value', 'Compare'), ('attr', 'str'), ('ctx', 'Load')]": 24, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'Break']), ('orelse', ['While', 'Continue'])]": 1, "For -> [('target', 'Tuple'), ('iter', 'Name'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'If', 'If', 'If']), ('orelse', [])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['Name', 'Str', 'Str'])]": 2, "While -> [('test', 'Name'), ('body', ['AugAssign', 'Assign', 'If', 'If']), ('orelse', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Return']), ('orelse', ['Assign'])]": 4, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'Assign', 'If']), ('decorator_list', [])]": 2, "USub -> <NULL>": 204, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Assign', 'FunctionDef', 'ClassDef']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Dict']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 7, "Compare -> [('left', 'Str'), ('ops', ['NotIn']), ('comparators', ['Name'])]": 84, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Name', 'Name', 'Num', 'Str'])]": 1, "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr']), ('orelse', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Tuple', 'Tuple', 'Tuple']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 8, "TryExcept -> [('body', ['Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'For', 'Assign', 'Assign', 'For', 'Expr', 'Expr']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Name', 'Name', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 43, "List -> [('elts', ['Str', 'Str', 'Str', 'List']), ('ctx', 'Load')]": 4, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 4, "If -> [('test', 'Compare'), ('body', ['Assign', 'For', 'Assign', 'Assign']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assert']), ('decorator_list', [])]": 1, "AugAssign -> [('target', 'Name'), ('op', 'Mult'), ('value', 'Name')]": 5, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'If', 'Assign', 'Assign', 'For', 'If']), ('decorator_list', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Name', 'Str', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 7, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'TryExcept']), ('decorator_list', [])]": 4, "arguments -> [('args', ['Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Call'])]": 2, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Num', 'Str'])]": 2, "Call -> [('func', 'Name'), ('args', ['Num', 'Attribute', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "Module -> [('body', ['Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'ImportFrom', 'Import', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'ImportFrom', 'Assign', 'Assign', 'FunctionDef', 'ClassDef', 'ClassDef'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'ImportFrom', 'If', 'Assign', 'If']), ('decorator_list', [])]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'ClassDef', 'ClassDef', 'ClassDef'])]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['If']), ('orelse', ['Assign', 'Expr'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'BinOp'), ('body', ['Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'If']), ('orelse', [])]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'FunctionDef', 'Assign', 'ClassDef', 'ClassDef'])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Print', 'Expr', 'Import', 'Expr']), ('orelse', ['If'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'For', 'Return']), ('decorator_list', [])]": 66, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'ClassDef', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 2, "Call -> [('func', 'Name'), ('args', ['Str', 'Str', 'Dict']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 4, "If -> [('test', 'Compare'), ('body', ['For']), ('orelse', [])]": 56, "Compare -> [('left', 'Attribute'), ('ops', ['GtE']), ('comparators', ['Name'])]": 7, "Compare -> [('left', 'BinOp'), ('ops', ['Lt']), ('comparators', ['Num'])]": 3, "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'FunctionDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'Assign', 'Assign', 'Assign', 'Assign', 'ClassDef', 'FunctionDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'FunctionDef', 'ClassDef', 'FunctionDef', 'ClassDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Expr', 'Expr'])]": 2, "If -> [('test', 'BinOp'), ('body', ['Assign', 'Expr', 'Expr', 'Expr']), ('orelse', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'If']), ('orelse', ['Assign', 'Assert', 'Assign', 'Assign'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'Assign', 'If', 'Return']), ('decorator_list', [])]": 4, "If -> [('test', 'Compare'), ('body', ['AugAssign']), ('orelse', ['Assign', 'AugAssign'])]": 2, "If -> [('test', 'Compare'), ('body', ['Expr', 'For', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'If', 'Expr', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "BinOp -> [('left', 'Subscript'), ('op', 'Mult'), ('right', 'BinOp')]": 4, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If']), ('decorator_list', ['Name'])]": 9, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'Import', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Import', 'FunctionDef', 'FunctionDef', 'Expr'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'TryExcept', 'Assign', 'TryExcept', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'TryExcept', 'Return']), ('decorator_list', [])]": 18, "BinOp -> [('left', 'Name'), ('op', 'Sub'), ('right', 'Attribute')]": 25, "Compare -> [('left', 'Subscript'), ('ops', ['Eq']), ('comparators', ['Call'])]": 5, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'TryExcept', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "If -> [('test', 'Name'), ('body', ['If']), ('orelse', [])]": 49, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Assign', 'Assign', 'Print']), ('orelse', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Name', 'BoolOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Assign -> [('targets', ['Attribute', 'Attribute']), ('value', 'Call')]": 5, "BoolOp -> [('op', 'Or'), ('values', ['Compare', 'Compare', 'Compare'])]": 11, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Return']), ('decorator_list', ['Name'])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Expr']), ('orelse', ['Assign', 'Expr'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['TryExcept', 'Return']), ('decorator_list', ['Name'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'For', 'Expr', 'If']), ('decorator_list', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Attribute', 'Str', 'List']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 4, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['If', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Expr']), ('orelse', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Str']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 120, "If -> [('test', 'Compare'), ('body', ['Return']), ('orelse', [])]": 781, "Compare -> [('left', 'Subscript'), ('ops', ['Eq', 'Eq']), ('comparators', ['Subscript', 'Str'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Name', 'Str', 'Name', 'Name', 'Name', 'Name', 'Name'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Call', 'Str', 'Str', 'Str', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "While -> [('test', 'Call'), ('body', ['If', 'AugAssign']), ('orelse', [])]": 1, "While -> [('test', 'Name'), ('body', ['Assign', 'If']), ('orelse', [])]": 9, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'FunctionDef', 'FunctionDef'])]": 2, "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Return']), ('orelse', ['Raise'])]": 4, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', ['Call'])]": 1, "Compare -> [('left', 'Name'), ('ops', ['NotIn']), ('comparators', ['Call'])]": 14, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Attribute', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 33, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Expr', 'Expr', 'If']), ('decorator_list', [])]": 2, "If -> [('test', 'Compare'), ('body', ['Assign', 'Expr', 'Return']), ('orelse', [])]": 9, "Call -> [('func', 'Name'), ('args', []), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'Call')]": 4, "Call -> [('func', 'Name'), ('args', ['Name', 'Str', 'Tuple']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Call -> [('func', 'Attribute'), ('args', ['Tuple']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 10, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'Expr', 'Return']), ('decorator_list', [])]": 2, "Dict -> [('keys', ['Str', 'Str']), ('values', ['Call', 'Str'])]": 15, "ExceptHandler -> [('type', 'Tuple'), ('name', 'NoneType'), ('body', ['If', 'Return'])]": 1, "Call -> [('func', 'Name'), ('args', ['Name', 'Name', 'BinOp', 'BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['AugAssign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'If']), ('decorator_list', [])]": 1, "ListComp -> [('elt', 'Lambda'), ('generators', ['comprehension'])]": 2, "BinOp -> [('left', 'Name'), ('op', 'Sub'), ('right', 'Call')]": 51, "Tuple -> [('elts', ['Name', 'Name', 'Name', 'Name', 'Call']), ('ctx', 'Load')]": 2, "TryExcept -> [('body', ['Import', 'ImportFrom', 'ImportFrom']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 1, "If -> [('test', 'Call'), ('body', ['Assign', 'TryExcept', 'Assign', 'TryExcept']), ('orelse', [])]": 1, "BinOp -> [('left', 'Attribute'), ('op', 'Mod'), ('right', 'Str')]": 3, "Tuple -> [('elts', ['Num', 'Num', 'Name']), ('ctx', 'Load')]": 4, "Tuple -> [('elts', ['Attribute', 'Name', 'Subscript']), ('ctx', 'Load')]": 1, "BinOp -> [('left', 'Name'), ('op', 'Mult'), ('right', 'BinOp')]": 31, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'If', 'If', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'TryExcept', 'If', 'Return']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'For', 'Assign', 'Return']), ('decorator_list', [])]": 2, "If -> [('test', 'Compare'), ('body', ['If']), ('orelse', ['If', 'Expr'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'TryFinally', 'Return']), ('decorator_list', [])]": 4, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Attribute', 'Num', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 7, "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'If', 'If', 'If', 'If', 'Expr']), ('orelse', [])]": 2, "ExceptHandler -> [('type', 'Name'), ('name', 'Name'), ('body', ['Expr', 'Assign', 'Raise'])]": 1, "TryExcept -> [('body', ['Assign', 'Assign', 'For', 'Expr', 'Expr']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 1, "Compare -> [('left', 'Attribute'), ('ops', ['NotIn']), ('comparators', ['Tuple'])]": 9, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'For']), ('decorator_list', ['Name', 'Name'])]": 3, "If -> [('test', 'Name'), ('body', ['Assign', 'If', 'If']), ('orelse', ['Print'])]": 1, "ExceptHandler -> [('type', 'Attribute'), ('name', 'Name'), ('body', ['Assign'])]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Expr', 'Expr', 'Assign']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('orelse', ['If'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'Assign', 'With', 'Expr', 'Print']), ('decorator_list', [])]": 1, "Compare -> [('left', 'Name'), ('ops', ['Lt']), ('comparators', ['BinOp'])]": 31, "Call -> [('func', 'Attribute'), ('args', ['Name', 'BinOp', 'Name', 'Name', 'Attribute', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Assign', 'Assign', 'ClassDef', 'FunctionDef']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['If', 'Assign']), ('orelse', [])]": 11, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Assign', 'For', 'Expr']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Str', 'List', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 4, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assert', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Assert']), ('decorator_list', [])]": 1, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['If', 'Assign', 'If', 'Assign', 'Expr', 'AugAssign']), ('orelse', [])]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Global', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'If']), ('decorator_list', [])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['Str', 'Name', 'Name'])]": 1, "List -> [('elts', ['Name', 'Str', 'Str', 'Str', 'Str', 'Str']), ('ctx', 'Load')]": 1, "Call -> [('func', 'Name'), ('args', ['Name', 'Str', 'Dict']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Name', 'Name', 'Name']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'FunctionDef', 'Assign', 'Return']), ('decorator_list', [])]": 3, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign']), ('orelse', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]": 3, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Attribute', 'Str', 'Name', 'List']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Name', 'Tuple']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "If -> [('test', 'Name'), ('body', ['Assign', 'Assign', 'Assign']), ('orelse', ['Assign', 'Assign', 'Assign'])]": 2, "Call -> [('func', 'Name'), ('args', ['BinOp', 'Attribute']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 85, "IfExp -> [('test', 'Compare'), ('body', 'Attribute'), ('orelse', 'Subscript')]": 2, "TryExcept -> [('body', ['If', 'Expr', 'Expr']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 2, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Str', 'Str', 'Str', 'Str', 'Name', 'Str', 'Str'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'If']), ('decorator_list', [])]": 8, "If -> [('test', 'Call'), ('body', ['TryExcept']), ('orelse', ['If', 'Expr'])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Expr', 'Return']), ('orelse', [])]": 4, "If -> [('test', 'Compare'), ('body', ['Assign']), ('orelse', ['Assert', 'Assign'])]": 1, "Assign -> [('targets', ['Attribute']), ('value', 'Compare')]": 17, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['TryExcept', 'Expr', 'Assign', 'Expr', 'Print']), ('decorator_list', [])]": 1, "If -> [('test', 'Call'), ('body', ['ImportFrom', 'Return']), ('orelse', ['ImportFrom', 'Return'])]": 1, "If -> [('test', 'Call'), ('body', ['TryExcept']), ('orelse', ['Assign', 'Assign'])]": 1, "Call -> [('func', 'Name'), ('args', ['Str', 'Num', 'Num', 'Name', 'Call', 'Call', 'Call', 'Call', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "If -> [('test', 'Compare'), ('body', ['Expr', 'Assign', 'Assign', 'If', 'Expr', 'Return']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Print', 'If']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'If', 'Assign', 'If', 'For']), ('decorator_list', ['Name'])]": 1, "BoolOp -> [('op', 'And'), ('values', ['UnaryOp', 'BoolOp'])]": 2, "AugAssign -> [('target', 'Attribute'), ('op', 'Sub'), ('value', 'Name')]": 4, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'Assign', 'Assign', 'Assign', 'For', 'Expr', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Expr', 'While']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Attribute']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 88, "Tuple -> [('elts', ['Tuple', 'Tuple', 'Tuple', 'Tuple']), ('ctx', 'Load')]": 17, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'If', 'If', 'Expr', 'Assign']), ('decorator_list', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Attribute', 'Attribute', 'Attribute', 'Num', 'Num', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['If']), ('orelse', ['AugAssign'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'Import', 'If', 'Assign', 'Return']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Name', 'Num', 'Name', 'Attribute', 'Attribute', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Str', 'List']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 3, "Call -> [('func', 'Name'), ('args', ['Attribute', 'Attribute', 'Str']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 4, "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['Num', 'Str', 'Str'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 6, "Module -> [('body', ['Import', 'ImportFrom', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'UnaryOp', 'UnaryOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 4, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['FunctionDef', 'Assign', 'For']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('orelse', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Call', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 8, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'ClassDef', 'ClassDef', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'ClassDef', 'FunctionDef'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Return']), ('decorator_list', [])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Attribute', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'BoolOp', 'Name', 'Name'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Subscript']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Compare -> [('left', 'Name'), ('ops', ['GtE']), ('comparators', ['Name'])]": 39, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'If', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef'])]": 1, "BoolOp -> [('op', 'And'), ('values', ['Attribute', 'Subscript'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', ['Name', 'Attribute'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'If', 'If', 'If']), ('decorator_list', [])]": 4, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'For', 'With', 'Expr', 'Return']), ('decorator_list', ['Name', 'Name'])]": 1, "BinOp -> [('left', 'Attribute'), ('op', 'Add'), ('right', 'Name')]": 33, "If -> [('test', 'Name'), ('body', ['If', 'If', 'Assign', 'TryFinally']), ('orelse', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Print']), ('orelse', [])]": 7, "UnaryOp -> [('op', 'Invert'), ('operand', 'Name')]": 2, "List -> [('elts', ['UnaryOp', 'BinOp', 'UnaryOp']), ('ctx', 'Load')]": 1, "Call -> [('func', 'Name'), ('args', ['Str', 'Name', 'Name', 'Attribute', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'If', 'Assert', 'Return']), ('decorator_list', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Name']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 408, "Call -> [('func', 'Attribute'), ('args', ['Subscript', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 44, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'For', 'Assign', 'Return']), ('decorator_list', [])]": 4, "GeneratorExp -> [('elt', 'Tuple'), ('generators', ['comprehension'])]": 32, "If -> [('test', 'Attribute'), ('body', ['Expr']), ('orelse', ['If'])]": 7, "List -> [('elts', ['Attribute', 'Attribute', 'Call']), ('ctx', 'Load')]": 1, "If -> [('test', 'Compare'), ('body', ['Assign']), ('orelse', ['Assign', 'TryExcept'])]": 1, "If -> [('test', 'Compare'), ('body', ['AugAssign', 'AugAssign']), ('orelse', ['AugAssign', 'AugAssign'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Call', 'Name']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 3, "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'FunctionDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef'])]": 1, "If -> [('test', 'Attribute'), ('body', ['Assign', 'Assign', 'Expr', 'Expr', 'For']), ('orelse', [])]": 2, "Tuple -> [('elts', ['Name', 'Str', 'Dict']), ('ctx', 'Load')]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Num', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'For', 'Assign', 'For', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Call', 'BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 45, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['With']), ('decorator_list', ['Attribute'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'TryExcept', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'If', 'If', 'If', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'TryExcept', 'Expr', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'TryExcept']), ('decorator_list', [])]": 2, "Tuple -> [('elts', ['Attribute', 'Str', 'Num', 'Attribute']), ('ctx', 'Load')]": 6, "If -> [('test', 'Name'), ('body', ['Assign']), ('orelse', ['Assign'])]": 213, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Tuple', 'Tuple', 'Tuple']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "If -> [('test', 'BoolOp'), ('body', ['Print', 'Print', 'Assign', 'Assign']), ('orelse', [])]": 1, "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'If', 'Expr', 'Assign', 'Delete']), ('orelse', ['If'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['BinOp', 'Num', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 4, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Print', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "ImportFrom -> [('module', 'str'), ('names', ['alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias']), ('level', 'int')]": 1, "If -> [('test', 'Call'), ('body', ['For']), ('orelse', ['Print'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Pass']), ('decorator_list', ['Name', 'Name', 'Call'])]": 6, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['If', 'If', 'Expr', 'Assign', 'If']), ('orelse', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('orelse', [])]": 1, "If -> [('test', 'BoolOp'), ('body', ['Expr', 'Expr', 'If', 'Return']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Global', 'Assign', 'Assign', 'Assign', 'Assign', 'While', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'TryExcept', 'Expr']), ('decorator_list', [])]": 1, "If -> [('test', 'UnaryOp'), ('body', ['If', 'Assign']), ('orelse', ['If'])]": 1, "For -> [('target', 'Name'), ('iter', 'Subscript'), ('body', ['Assign', 'While']), ('orelse', [])]": 1, "Tuple -> [('elts', ['Attribute', 'Subscript', 'Name']), ('ctx', 'Load')]": 2, "Slice -> [('lower', 'BinOp'), ('upper', 'Subscript'), ('step', 'NoneType')]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assert', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assert', 'Assign', 'If', 'Assign', 'Expr']), ('orelse', [])]": 1, "List -> [('elts', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('ctx', 'Load')]": 2, "If -> [('test', 'Attribute'), ('body', ['If', 'If', 'Return']), ('orelse', ['Return'])]": 2, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['If', 'If', 'If', 'If', 'TryExcept', 'If']), ('orelse', [])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Call', 'Name', 'Attribute', 'Attribute', 'Attribute', 'Name', 'Call'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Expr', 'AugAssign', 'Assign', 'TryFinally']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'For', 'Expr', 'Expr', 'If', 'Expr', 'Return']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Str', 'Str', 'Dict', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'If', 'Assign', 'Expr', 'If', 'Assign', 'Assign', 'If', 'If', 'Assign', 'Assign', 'If', 'Assign', 'For', 'For']), ('decorator_list', ['Attribute'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'Assign', 'If', 'If']), ('decorator_list', [])]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ClassDef', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]": 8, "ClassDef -> [('name', 'str'), ('bases', []), ('body', ['Assign', 'Assign', 'FunctionDef']), ('decorator_list', [])]": 5, "If -> [('test', 'Compare'), ('body', ['Assign', 'Return']), ('orelse', ['Assign', 'If', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Return'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Delete', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "Dict -> [('keys', ['Str', 'Str']), ('values', ['Str', 'Str'])]": 142, "ImportFrom -> [('module', 'NoneType'), ('names', ['alias', 'alias']), ('level', 'int')]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'If', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'Assign', 'For']), ('decorator_list', [])]": 2, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['FunctionDef']), ('decorator_list', ['Attribute'])]": 2, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'AugAssign']), ('orelse', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "List -> [('elts', ['Str', 'Name', 'Str']), ('ctx', 'Load')]": 2, "Raise -> [('type', 'Subscript'), ('inst', 'Name'), ('tback', 'Subscript')]": 4, "Tuple -> [('elts', ['Name', 'Dict']), ('ctx', 'Load')]": 34, "Dict -> [('keys', ['Call', 'Call', 'Call', 'Call']), ('values', ['Tuple', 'Tuple', 'Tuple', 'Tuple'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'If', 'Assign', 'If', 'Return']), ('decorator_list', [])]": 1, "Dict -> [('keys', ['Subscript']), ('values', ['Name'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'For', 'Assign', 'Assign', 'If', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Import', 'Return']), ('orelse', ['If'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'Expr', 'Assign', 'Return']), ('decorator_list', [])]": 3, "If -> [('test', 'Compare'), ('body', ['Import', 'Assign', 'Assign', 'Expr', 'Expr', 'Return']), ('orelse', ['Return'])]": 1, "If -> [('test', 'Name'), ('body', ['Print', 'Expr']), ('orelse', [])]": 3, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'Assign', 'TryExcept', 'Assign', 'TryExcept', 'ClassDef', 'ClassDef', 'If'])]": 1, "Call -> [('func', 'Name'), ('args', ['Name', 'Dict', 'Dict', 'Subscript']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'For', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assert', 'Assign', 'Expr', 'Assign', 'Expr', 'Return']), ('decorator_list', [])]": 1, "AugAssign -> [('target', 'Name'), ('op', 'Add'), ('value', 'Str')]": 112, "If -> [('test', 'Call'), ('body', ['Assign', 'If', 'Assign']), ('orelse', ['Assign'])]": 2, "If -> [('test', 'Compare'), ('body', ['Import', 'Import']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'FunctionDef', 'Assign']), ('decorator_list', [])]": 1, "For -> [('target', 'Tuple'), ('iter', 'List'), ('body', ['Assign']), ('orelse', [])]": 1, "Print -> [('dest', 'NoneType'), ('values', ['Call', 'Attribute']), ('nl', 'bool')]": 1, "If -> [('test', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'Assign']), ('orelse', ['Assign', 'Assign'])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Str', 'Str', 'Str', 'Str', 'Name', 'Str'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Str', 'Subscript']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 50, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'TryExcept', 'Assign', 'If', 'Assign', 'If']), ('decorator_list', ['Name', 'Name', 'Call', 'Call'])]": 2, "List -> [('elts', ['Name', 'Name', 'Call', 'Call', 'Call']), ('ctx', 'Load')]": 1, "BoolOp -> [('op', 'And'), ('values', ['Compare', 'Name'])]": 10, "Print -> [('dest', 'NoneType'), ('values', ['Str', 'Name', 'Str', 'Call']), ('nl', 'bool')]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Expr', 'Print', 'Assign', 'Print', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'For', 'For', 'Print', 'Assign', 'Assign', 'For', 'Expr', 'Print', 'Assign', 'Assign', 'For', 'Print', 'Assign', 'Assign', 'For', 'Expr', 'Print', 'Assign', 'Assign', 'For', 'Expr', 'Expr', 'Expr']), ('orelse', ['Pass'])]": 1, "If -> [('test', 'Compare'), ('body', ['If', 'If']), ('orelse', ['If', 'If'])]": 3, "If -> [('test', 'Call'), ('body', ['TryExcept', 'Return']), ('orelse', [])]": 2, "Call -> [('func', 'Name'), ('args', ['BinOp', 'Tuple']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 4, "Call -> [('func', 'Attribute'), ('args', ['Subscript', 'Attribute']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]": 1, "If -> [('test', 'Attribute'), ('body', ['Expr', 'Assign', 'Expr', 'For']), ('orelse', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign']), ('orelse', ['Assign', 'If', 'If'])]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assert', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assert', 'Assign', 'Assign', 'Assert', 'Assert', 'Assert', 'Assert', 'Assert', 'If', 'If', 'Assign', 'Assert', 'Assign', 'Assert', 'Assign', 'Assert', 'Assert', 'Assert']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'For', 'Raise']), ('decorator_list', [])]": 2, "Tuple -> [('elts', ['BinOp', 'BinOp', 'Num']), ('ctx', 'Load')]": 1, "If -> [('test', 'Name'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'Assign', 'AugAssign', 'AugAssign', 'AugAssign']), ('orelse', [])]": 1, "ExceptHandler -> [('type', 'NoneType'), ('name', 'NoneType'), ('body', ['Assign', 'Assign', 'Print'])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Str', 'Str', 'Str', 'Name', 'Str', 'Str', 'Str', 'Str', 'Str'])]": 1, "Call -> [('func', 'Call'), ('args', ['Subscript']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Num', 'Name', 'Name'])]": 2, "Assign -> [('targets', ['Name']), ('value', 'UnaryOp')]": 42, "keyword -> [('arg', 'str'), ('value', 'Subscript')]": 329, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assert', 'Assert', 'Assign', 'Assert', 'Assert', 'Assert', 'Assert']), ('decorator_list', [])]": 1, "If -> [('test', 'BoolOp'), ('body', ['If', 'Return']), ('orelse', ['Assign', 'If', 'Assign', 'Assign'])]": 1, "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['Print', 'For']), ('orelse', [])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Call'])]": 2, "Call -> [('func', 'Attribute'), ('args', ['Num', 'Name', 'Num', 'Name', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['TryExcept', 'If', 'Assign', 'Expr', 'Expr']), ('orelse', [])]": 2, "Call -> [('func', 'Attribute'), ('args', ['Name', 'ListComp', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "List -> [('elts', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('ctx', 'Load')]": 4, "Call -> [('func', 'Attribute'), ('args', ['Subscript', 'Subscript', 'Subscript']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 28, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'For', 'Assign', 'If', 'Expr', 'Assign', 'For', 'Print', 'Expr', 'Expr']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'If', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'If', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 2, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Name', 'Name', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "If -> [('test', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'For', 'Assign']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Return']), ('decorator_list', [])]": 2, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Num', 'Name', 'Num', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Call -> [('func', 'Attribute'), ('args', []), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'Attribute')]": 12, "Compare -> [('left', 'BinOp'), ('ops', ['Lt']), ('comparators', ['Name'])]": 4, "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['If'])]": 21, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Attribute', 'List', 'Str']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ClassDef', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'FunctionDef', 'Assign', 'Assign', 'Expr', 'Assign', 'If', 'Assign', 'If', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'If', 'Expr', 'Expr', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'If', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'For', 'If', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'Assign', 'While', 'Return']), ('decorator_list', [])]": 2, "TryExcept -> [('body', ['Expr', 'Assign', 'Assign', 'Assign', 'For', 'Return']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 1, "With -> [('context_expr', 'Call'), ('optional_vars', 'Name'), ('body', ['Assign', 'Assign', 'Assign'])]": 1, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'Assign', 'If']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'If', 'FunctionDef', 'Expr', 'Assign', 'Assign', 'While', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'ImportFrom', 'Assign', 'If', 'Return']), ('decorator_list', ['Name'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Subscript', 'Subscript', 'List']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Import', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Str', 'Attribute', 'Name', 'Name', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Expr', 'Assign']), ('orelse', [])]": 2, "Module -> [('body', ['Import', 'Assign', 'Expr', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'Import', 'Import', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'For', 'Expr', 'Assign', 'For', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Expr', 'Assign', 'Assign', 'Assign', 'While'])]": 1, "While -> [('test', 'Call'), ('body', ['Assign']), ('orelse', [])]": 4, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Name', 'Name']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 6, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Print', 'Print', 'Print', 'Print', 'Print', 'Print', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assert', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Import', 'Assign', 'Assert', 'Assign', 'Assign', 'For', 'Return']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Call', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'Name')]": 2, "If -> [('test', 'Compare'), ('body', ['Return']), ('orelse', ['Assign', 'Assign', 'Expr', 'Assign', 'Return'])]": 1, "If -> [('test', 'Compare'), ('body', ['Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'For']), ('orelse', ['Expr', 'If'])]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Assign', 'Assign', 'TryExcept']), ('orelse', [])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Name', 'Name', 'Name'])]": 4, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'For', 'For', 'Assign', 'Assign', 'Assert', 'Assign', 'Assign', 'For', 'Assign', 'Expr', 'Assign', 'While', 'Expr', 'Print']), ('decorator_list', [])]": 1, "Assert -> [('test', 'Name'), ('msg', 'Name')]": 3, "Return -> [('value', 'List')]": 167, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'FunctionDef', 'FunctionDef', 'For', 'Expr', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'Assign', 'For', 'If', 'Assign', 'For', 'Import', 'With', 'Return']), ('decorator_list', [])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name']), ('vararg', 'str'), ('kwarg', 'str'), ('defaults', ['Name', 'Name', 'Name'])]": 1, "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['Pass'])]": 214, "BinOp -> [('left', 'Name'), ('op', 'Mod'), ('right', 'Dict')]": 6, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Raise']), ('decorator_list', [])]": 2, "TryExcept -> [('body', ['If', 'If', 'Print', 'For', 'If', 'If', 'Print']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 1, "If -> [('test', 'Name'), ('body', ['If', 'For', 'Expr']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'TryExcept', 'Assign', 'Expr', 'Return']), ('decorator_list', [])]": 4, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Return']), ('decorator_list', ['Attribute'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 3, "Subscript -> [('value', 'Str'), ('slice', 'Slice'), ('ctx', 'Load')]": 7, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['If', 'Expr', 'Assign']), ('orelse', [])]": 3, "If -> [('test', 'Name'), ('body', ['Assign', 'Assign', 'While']), ('orelse', [])]": 1, "Assign -> [('targets', ['Attribute']), ('value', 'Name')]": 3973, "If -> [('test', 'Attribute'), ('body', ['Assign', 'Assign', 'Raise']), ('orelse', [])]": 2, "Dict -> [('keys', ['Str', 'Str']), ('values', ['Dict', 'List'])]": 4, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Attribute', 'BoolOp', 'Name', 'Call', 'Name'])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "Tuple -> [('elts', ['BoolOp', 'Subscript']), ('ctx', 'Load')]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Tuple']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 67, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assert', 'If', 'If', 'If', 'If', 'Assign', 'If']), ('decorator_list', [])]": 1, "BinOp -> [('left', 'Num'), ('op', 'Mult'), ('right', 'BinOp')]": 67, "ExceptHandler -> [('type', 'NoneType'), ('name', 'NoneType'), ('body', ['Print'])]": 12, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'List', 'List', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['Assign', 'Assign', 'Assign', 'Return'])]": 1, "AugAssign -> [('target', 'Attribute'), ('op', 'Add'), ('value', 'Str')]": 8, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Tuple', 'Num', 'Tuple', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "If -> [('test', 'Attribute'), ('body', ['For']), ('orelse', ['If', 'If', 'If'])]": 1, "If -> [('test', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Expr', 'Assign']), ('orelse', ['Return'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'If', 'If', 'If', 'If', 'If', 'Return']), ('decorator_list', [])]": 2, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 2, "ClassDef -> [('name', 'str'), ('bases', ['Attribute', 'Attribute', 'Name']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'TryExcept', 'ImportFrom', 'ImportFrom', 'Assign', 'ClassDef'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "While -> [('test', 'Name'), ('body', ['Expr']), ('orelse', [])]": 4, "Call -> [('func', 'Attribute'), ('args', ['Tuple', 'Name', 'Name', 'BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 4, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'If', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "TryFinally -> [('body', ['Expr', 'Expr', 'Expr']), ('finalbody', ['Expr'])]": 1, "Tuple -> [('elts', ['Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute']), ('ctx', 'Load')]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 2, "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['Assign', 'Expr', 'For']), ('orelse', [])]": 1, "BinOp -> [('left', 'Num'), ('op', 'LShift'), ('right', 'Num')]": 25, "If -> [('test', 'Name'), ('body', ['Assign', 'Expr', 'AugAssign', 'Expr', 'If']), ('orelse', ['Assign', 'If'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'Assign', 'Expr', 'Expr', 'Return']), ('decorator_list', ['Name'])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Expr', 'Assign', 'Assign']), ('decorator_list', [])]": 2, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'For', 'For']), ('orelse', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Name', 'Name', 'List']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Expr', 'Expr', 'Assign', 'Assign', 'AugAssign', 'For']), ('decorator_list', [])]": 1, "Subscript -> [('value', 'List'), ('slice', 'Slice'), ('ctx', 'Load')]": 5, "If -> [('test', 'Call'), ('body', ['Expr', 'Pass']), ('orelse', ['If'])]": 1, "TryExcept -> [('body', ['Assign', 'If', 'Assign']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 2, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Name', 'Name', 'Name', 'Name', 'Str', 'Name', 'Name'])]": 2, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Num', 'Subscript']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "If -> [('test', 'Call'), ('body', ['Expr']), ('orelse', ['Assign'])]": 7, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name']), ('vararg', 'str'), ('kwarg', 'str'), ('defaults', [])]": 14, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'For', 'For']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Expr']), ('orelse', ['Assign', 'If', 'Expr'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assert', 'Assert', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'If', 'Assign', 'Expr', 'Assign', 'If', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'If', 'Return']), ('orelse', ['If'])]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'TryExcept', 'TryExcept', 'For', 'TryExcept', 'If']), ('decorator_list', [])]": 2, "Tuple -> [('elts', ['Call', 'Name', 'Call', 'Call', 'Name', 'Attribute']), ('ctx', 'Load')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 3, "Call -> [('func', 'Attribute'), ('args', ['Call', 'Attribute', 'BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Attribute', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "List -> [('elts', ['Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple']), ('ctx', 'Load')]": 10, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'If'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'If']), ('decorator_list', [])]": 1, "If -> [('test', 'Name'), ('body', ['Assign', 'Assign', 'For']), ('orelse', ['Assign', 'For'])]": 2, "Assign -> [('targets', ['Name']), ('value', 'Subscript')]": 2598, "ExceptHandler -> [('type', 'Tuple'), ('name', 'NoneType'), ('body', ['Raise'])]": 24, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['If', 'Assign']), ('orelse', [])]": 6, "Call -> [('func', 'Attribute'), ('args', ['Str', 'Num', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 4, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Attribute', 'Str', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 5, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Str', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 29, "If -> [('test', 'Compare'), ('body', ['Expr', 'Print']), ('orelse', ['If'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Raise']), ('decorator_list', [])]": 83, "Call -> [('func', 'Attribute'), ('args', ['Name', 'BoolOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "Call -> [('func', 'Attribute'), ('args', ['Name']), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "arguments -> [('args', ['Name', 'Name', 'Name']), ('vararg', 'str'), ('kwarg', 'str'), ('defaults', [])]": 60, "If -> [('test', 'UnaryOp'), ('body', ['Import', 'Expr', 'Expr']), ('orelse', [])]": 1, "If -> [('test', 'Call'), ('body', ['Assign', 'Expr', 'Assign', 'If', 'If', 'Assign', 'Expr', 'Expr', 'If', 'If', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'For', 'Expr', 'Expr', 'Print', 'Assign', 'Print', 'Expr', 'Print']), ('orelse', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Num']), ('keywords', ['keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 14, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 4, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'If', 'Assign', 'Assign', 'While', 'For', 'For']), ('orelse', [])]": 1, "List -> [('elts', ['Str', 'Name']), ('ctx', 'Load')]": 20, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['For', 'Expr', 'Expr']), ('orelse', ['Print'])]": 1, "Module -> [('body', ['Import', 'Import', 'Expr', 'FunctionDef', 'FunctionDef', 'If'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'If', 'If', 'Assign', 'If', 'Return']), ('decorator_list', [])]": 1, "With -> [('context_expr', 'Call'), ('optional_vars', 'Name'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr'])]": 1, "If -> [('test', 'Subscript'), ('body', ['If', 'Assign']), ('orelse', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Return']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Call']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 4, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'AugAssign', 'AugAssign', 'For', 'AugAssign', 'AugAssign', 'AugAssign', 'AugAssign', 'AugAssign', 'AugAssign', 'Return']), ('decorator_list', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "ExceptHandler -> [('type', 'Attribute'), ('name', 'NoneType'), ('body', ['Assign', 'Expr'])]": 6, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Return']), ('decorator_list', ['Name'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'For', 'Assign', 'For', 'Assign', 'Expr', 'Return']), ('decorator_list', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 11, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'For', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 2, "If -> [('test', 'Compare'), ('body', ['Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'For', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Print', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'For', 'Assign', 'While', 'Print', 'Print']), ('orelse', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'If']), ('orelse', ['Pass'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]": 47, "Call -> [('func', 'Attribute'), ('args', ['ListComp', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign']), ('orelse', ['Assign', 'If'])]": 1, "List -> [('elts', ['Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call']), ('ctx', 'Load')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'If', 'Assign', 'If', 'If', 'If']), ('decorator_list', [])]": 1, "Tuple -> [('elts', ['BinOp', 'Name', 'Call', 'Subscript']), ('ctx', 'Load')]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'Assign']), ('orelse', [])]": 4, "Index -> [('value', 'BoolOp')]": 2, "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'Import', 'Expr', 'Expr', 'Expr', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Expr', 'Assign', 'Assert', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For'])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'ClassDef']), ('decorator_list', [])]": 1, "TryExcept -> [('body', ['For', 'If', 'Assign', 'If', 'Expr', 'Expr', 'Expr', 'Expr']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 1, "Lt -> <NULL>": 548, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'If', 'If', 'If', 'If', 'If', 'TryExcept']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'If']), ('decorator_list', [])]": 4, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'ClassDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "BinOp -> [('left', 'Num'), ('op', 'Mult'), ('right', 'Call')]": 47, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'If', 'If', 'Expr', 'Assign', 'If']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign']), ('orelse', ['Continue'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 2, "With -> [('context_expr', 'Attribute'), ('optional_vars', 'NoneType'), ('body', ['Expr', 'Expr'])]": 1, "If -> [('test', 'Attribute'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'Assign', 'For']), ('orelse', [])]": 2, "BoolOp -> [('op', 'And'), ('values', ['Name', 'BinOp'])]": 13, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'ClassDef', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'BinOp'), ('body', ['If', 'If']), ('orelse', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Str', 'Name', 'List']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'Name')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'For', 'Assign', 'If', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Return']), ('decorator_list', [])]": 1, "TryExcept -> [('body', ['Assign', 'Assign', 'If', 'Assign', 'Assign']), ('handlers', ['ExceptHandler', 'ExceptHandler']), ('orelse', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Subscript']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 39, "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'Expr', 'Expr', 'Assign']), ('orelse', ['Assign'])]": 1, "Dict -> [('keys', ['Str', 'Str']), ('values', ['Str', 'Call'])]": 20, "TryExcept -> [('body', ['Expr', 'If']), ('handlers', ['ExceptHandler', 'ExceptHandler', 'ExceptHandler']), ('orelse', [])]": 1, "BoolOp -> [('op', 'And'), ('values', ['Name', 'Compare'])]": 145, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Name', 'Num', 'Name', 'Attribute', 'Num', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "Call -> [('func', 'Name'), ('args', ['Call', 'Attribute', 'Attribute', 'Attribute', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Expr', 'Expr', 'Expr', 'Expr', 'If', 'Assign']), ('orelse', [])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Attribute', 'List', 'Dict', 'Attribute', 'Attribute', 'Attribute', 'ListComp'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'ClassDef', 'ClassDef', 'ClassDef', 'FunctionDef', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Num', 'Num', 'Call', 'BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "If -> [('test', 'Name'), ('body', ['If', 'Expr', 'If', 'Assign', 'If', 'Assign', 'Assign', 'If', 'If']), ('orelse', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'For']), ('orelse', ['Assign'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Import', 'Assign']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Expr', 'Assign', 'While']), ('decorator_list', [])]": 1, "Slice -> [('lower', 'Call'), ('upper', 'Call'), ('step', 'NoneType')]": 2, "Compare -> [('left', 'Name'), ('ops', ['In']), ('comparators', ['ListComp'])]": 2, "If -> [('test', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'For', 'If', 'For']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'For', 'Expr', 'Expr', 'Print', 'Print']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Import', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 2, "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'If', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign']), ('orelse', [])]": 2, "ClassDef -> [('name', 'str'), ('bases', []), ('body', ['Assign', 'Expr', 'FunctionDef']), ('decorator_list', [])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Dict', 'Dict', 'Dict', 'Dict', 'Dict', 'Dict', 'Dict', 'Dict', 'Dict', 'Dict'])]": 2, "TryExcept -> [('body', ['Assign', 'Assign', 'Assign', 'If']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 5, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Assign', 'For', 'Assign']), ('orelse', [])]": 3, "Call -> [('func', 'Name'), ('args', []), ('keywords', ['keyword', 'keyword']), ('starargs', 'Call'), ('kwargs', 'NoneType')]": 1, "If -> [('test', 'UnaryOp'), ('body', ['Return']), ('orelse', ['Expr'])]": 2, "Call -> [('func', 'Name'), ('args', ['Name', 'Name', 'Attribute']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'For']), ('decorator_list', ['Name'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Import', 'Assign', 'Print', 'Expr']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Print', 'Assign', 'Assign', 'Assign', 'If', 'If', 'If', 'Assign', 'Expr']), ('orelse', [])]": 1, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['If', 'If', 'Expr']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'Assign', 'TryExcept', 'Return']), ('decorator_list', [])]": 2, "While -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Expr', 'Expr', 'AugAssign']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'TryExcept', 'Assign', 'If', 'Expr', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign', 'For']), ('orelse', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Print']), ('orelse', ['Expr'])]": 1, "Call -> [('func', 'Attribute'), ('args', []), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2900, "BoolOp -> [('op', 'And'), ('values', ['Call', 'Call'])]": 69, "List -> [('elts', ['Subscript', 'Num']), ('ctx', 'Load')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Return', 'Assign']), ('decorator_list', [])]": 1, "Compare -> [('left', 'Call'), ('ops', ['Eq', 'Eq']), ('comparators', ['Call', 'Num'])]": 1, "Tuple -> [('elts', ['Subscript', 'Call']), ('ctx', 'Load')]": 32, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For']), ('decorator_list', ['Name'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['TryExcept', 'For', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'Subscript'), ('body', ['Assign', 'If', 'Expr']), ('orelse', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Subscript'), ('body', ['AugAssign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr']), ('orelse', [])]": 1, "Tuple -> [('elts', ['Subscript', 'Name', 'Subscript']), ('ctx', 'Load')]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign']), ('orelse', ['Expr', 'Return'])]": 2, "Tuple -> [('elts', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('ctx', 'Store')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Assign', 'AugAssign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "TryExcept -> [('body', ['Assign', 'Expr', 'Assign', 'Assign', 'Expr']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'FunctionDef', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 3, "If -> [('test', 'BoolOp'), ('body', ['If', 'If', 'If']), ('orelse', ['Raise'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'TryExcept', 'Assign', 'If', 'Assign', 'TryFinally']), ('decorator_list', [])]": 1, "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'Assign']), ('orelse', ['If', 'Assign', 'Assign', 'Assign'])]": 1, "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['Assign', 'Delete', 'Assign', 'For', 'Expr']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'If', 'If', 'If', 'Assign', 'If', 'Assert', 'Assign', 'If', 'For']), ('decorator_list', [])]": 1, "Assign -> [('targets', ['Attribute', 'Name']), ('value', 'Str')]": 1, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'For', 'If', 'Expr', 'Expr']), ('orelse', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'If', 'Assign', 'For', 'If', 'Expr', 'If', 'For']), ('orelse', [])]": 2, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Name'])]": 9, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'If', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "Tuple -> [('elts', ['Name', 'Subscript', 'Name', 'Name', 'Name', 'Name']), ('ctx', 'Load')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'Assign', 'TryExcept', 'TryExcept', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', ['Name'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['TryExcept', 'Assign', 'For']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'If', 'TryExcept', 'If']), ('decorator_list', ['Name'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'Assign', 'Import', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'TryExcept', 'Return']), ('decorator_list', [])]": 10, "ClassDef -> [('name', 'str'), ('bases', []), ('body', ['Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "BinOp -> [('left', 'Attribute'), ('op', 'BitOr'), ('right', 'Attribute')]": 71, "Call -> [('func', 'Name'), ('args', ['Name', 'BinOp', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assert']), ('decorator_list', ['Name'])]": 1, "Compare -> [('left', 'Str'), ('ops', ['In']), ('comparators', ['Name'])]": 525, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'If', 'If', 'If']), ('orelse', [])]": 1, "If -> [('test', 'Call'), ('body', ['Expr', 'Assign', 'Assign', 'Expr']), ('orelse', [])]": 1, "List -> [('elts', ['Attribute', 'Call', 'Call']), ('ctx', 'Load')]": 1, "If -> [('test', 'Name'), ('body', ['AugAssign']), ('orelse', ['AugAssign'])]": 2, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'ClassDef', 'FunctionDef']), ('decorator_list', [])]": 2, "If -> [('test', 'Attribute'), ('body', ['Assign', 'If', 'TryExcept']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'If', 'For']), ('decorator_list', [])]": 1, "If -> [('test', 'BoolOp'), ('body', ['Expr']), ('orelse', [])]": 221, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['TryExcept', 'Assign', 'Assign', 'Assign', 'Expr', 'Return']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Str', 'Name', 'Name', 'Name', 'Num', 'Num', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 3, "List -> [('elts', ['Name', 'Name', 'Str']), ('ctx', 'Load')]": 8, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 4, "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'ClassDef', 'FunctionDef'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'For', 'Return']), ('decorator_list', [])]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'If']), ('decorator_list', [])]": 1, "List -> [('elts', ['Str', 'List', 'List']), ('ctx', 'Load')]": 1, "Call -> [('func', 'Attribute'), ('args', []), ('keywords', []), ('starargs', 'Subscript'), ('kwargs', 'NoneType')]": 20, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 29, "Call -> [('func', 'Attribute'), ('args', ['Subscript', 'Tuple']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 105, "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'For', 'Assign']), ('orelse', [])]": 3, "Call -> [('func', 'Name'), ('args', ['Name', 'Attribute', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "List -> [('elts', ['Name', 'Str', 'Str', 'Call', 'Str', 'Name', 'Call']), ('ctx', 'Load')]": 1, "Call -> [('func', 'Attribute'), ('args', ['Call', 'List']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 340, "If -> [('test', 'Call'), ('body', ['If']), ('orelse', ['Expr'])]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'ImportFrom', 'ImportFrom', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'For', 'Expr', 'Expr', 'Expr', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'For', 'If', 'Assign', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['If']), ('orelse', ['Expr', 'Assign', 'Expr', 'Expr'])]": 1, "If -> [('test', 'Attribute'), ('body', ['If', 'Assign', 'Assign']), ('orelse', ['Assign'])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Return']), ('orelse', ['Raise'])]": 1, "BinOp -> [('left', 'Name'), ('op', 'LShift'), ('right', 'Name')]": 4, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['List', 'List', 'List', 'List', 'List', 'List', 'List', 'List', 'List', 'List', 'List', 'List', 'List', 'List', 'List', 'List'])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['List', 'Call', 'Call'])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'BoolOp', 'Name', 'BoolOp', 'Name', 'Name'])]": 1, "Compare -> [('left', 'Str'), ('ops', ['NotIn']), ('comparators', ['Subscript'])]": 4, "ClassDef -> [('name', 'str'), ('bases', []), ('body', ['FunctionDef']), ('decorator_list', [])]": 68, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'ImportFrom', 'TryExcept', 'If', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Return']), ('decorator_list', [])]": 2, "Call -> [('func', 'Yield'), ('args', []), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "If -> [('test', 'BoolOp'), ('body', ['Return']), ('orelse', ['Assign', 'For', 'Return'])]": 1, "BoolOp -> [('op', 'And'), ('values', ['Compare', 'Compare', 'Call'])]": 3, "ExceptHandler -> [('type', 'Name'), ('name', 'Name'), ('body', ['If'])]": 43, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'Assign', 'Expr', 'Assign', 'For', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'Assign', 'Assign', 'Print', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Print', 'Assign', 'Print', 'Expr']), ('decorator_list', [])]": 1, "ExceptHandler -> [('type', 'NoneType'), ('name', 'NoneType'), ('body', ['ImportFrom'])]": 3, "Call -> [('func', 'Name'), ('args', []), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'Attribute')]": 6, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'Assign', 'Assign', 'If']), ('decorator_list', [])]": 1, "Call -> [('func', 'Name'), ('args', ['BinOp', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 20, "Call -> [('func', 'Name'), ('args', ['Name', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 577, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Name', 'Dict']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'Import', 'ClassDef', 'ClassDef', 'ClassDef'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'TryExcept']), ('decorator_list', [])]": 23, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr']), ('decorator_list', ['Call'])]": 3, "Call -> [('func', 'Name'), ('args', ['Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 3764, "Compare -> [('left', 'Call'), ('ops', ['In']), ('comparators', ['List'])]": 8, "Tuple -> [('elts', ['Tuple', 'Tuple']), ('ctx', 'Load')]": 52, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'If']), ('orelse', ['If'])]": 5, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'If', 'Assign', 'Expr', 'Expr', 'If']), ('decorator_list', [])]": 1, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['TryExcept', 'If']), ('orelse', [])]": 1, "Call -> [('func', 'Name'), ('args', ['BinOp', 'BinOp', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Num', 'Num', 'Str', 'Name', 'Str', 'Name', 'Name', 'Name'])]": 1, "Call -> [('func', 'Name'), ('args', ['Str', 'Call', 'Call', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "If -> [('test', 'Compare'), ('body', ['For']), ('orelse', ['Expr'])]": 3, "If -> [('test', 'Attribute'), ('body', ['If', 'Return']), ('orelse', [])]": 6, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Tuple', 'Num', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "If -> [('test', 'Call'), ('body', ['If']), ('orelse', ['TryExcept', 'If', 'Assign', 'TryFinally', 'Expr'])]": 1, "If -> [('test', 'BoolOp'), ('body', ['Return']), ('orelse', ['Assign', 'If'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'TryExcept', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'ImportFrom']), ('orelse', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "If -> [('test', 'Name'), ('body', ['Assign', 'If', 'If', 'If', 'If', 'If', 'If', 'If']), ('orelse', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Name', 'Name', 'Attribute', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('orelse', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign'])]": 1, "List -> [('elts', ['Str', 'Str']), ('ctx', 'Load')]": 369, "BoolOp -> [('op', 'And'), ('values', ['Call', 'Attribute', 'Call'])]": 2, "If -> [('test', 'Compare'), ('body', ['If', 'Expr']), ('orelse', ['Assign', 'Assign'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assert', 'Assert', 'Assert', 'If', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Delete', 'Expr', 'Delete', 'Expr', 'Delete', 'Expr']), ('decorator_list', [])]": 1, "BinOp -> [('left', 'Str'), ('op', 'Mod'), ('right', 'Attribute')]": 548, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'TryExcept', 'If', 'If', 'Return']), ('decorator_list', [])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Str', 'Str'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'If', 'Assign', 'Expr', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'While', 'Expr']), ('orelse', ['Assign'])]": 1, "If -> [('test', 'Attribute'), ('body', ['Assign', 'Assign', 'Expr', 'Assign', 'Assign']), ('orelse', [])]": 1, "BoolOp -> [('op', 'And'), ('values', ['UnaryOp', 'Attribute', 'Attribute'])]": 1, "Compare -> [('left', 'Attribute'), ('ops', ['Eq']), ('comparators', ['Call'])]": 22, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple'])]": 1, "TryExcept -> [('body', ['Assign', 'Expr', 'Assign', 'For']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 1, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Assert', 'Expr']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Return']), ('decorator_list', ['Name'])]": 1, "If -> [('test', 'BoolOp'), ('body', ['FunctionDef', 'Assign']), ('orelse', [])]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'TryExcept', 'ImportFrom', 'Expr', 'ClassDef'])]": 1, "ExceptHandler -> [('type', 'Tuple'), ('name', 'NoneType'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Expr'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['TryExcept', 'Assign', 'Assign', 'For', 'Return']), ('decorator_list', ['Name'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'AugAssign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Name', 'Dict', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 11, "Assign -> [('targets', ['Tuple']), ('value', 'ListComp')]": 17, "AugAssign -> [('target', 'Attribute'), ('op', 'Add'), ('value', 'IfExp')]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'Expr', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'FunctionDef', 'ClassDef', 'If'])]": 1, "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('orelse', ['Assign'])]": 1, "Assign -> [('targets', ['Subscript', 'Name']), ('value', 'Call')]": 16, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'Assign', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'If'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Import', 'Assign', 'Assign', 'Assign', 'For', 'If', 'Expr', 'Return']), ('decorator_list', [])]": 1, "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['Import', 'Expr', 'If', 'If', 'Return'])]": 2, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Assign', 'If', 'If', 'If', 'Return']), ('orelse', [])]": 1, "Tuple -> [('elts', ['Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple']), ('ctx', 'Load')]": 1, "If -> [('test', 'BoolOp'), ('body', ['Assign', 'If', 'Expr']), ('orelse', [])]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assert', 'For']), ('decorator_list', [])]": 1, "If -> [('test', 'BoolOp'), ('body', ['Assign', 'For']), ('orelse', ['If'])]": 1, "Call -> [('func', 'Name'), ('args', ['Attribute', 'Tuple']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 24, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'For']), ('decorator_list', [])]": 100, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['If', 'Expr', 'Assign', 'Assign', 'Assign']), ('orelse', [])]": 1, "BinOp -> [('left', 'Subscript'), ('op', 'Mult'), ('right', 'Subscript')]": 6, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['With', 'While']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'For', 'For', 'Return']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'If', 'Print', 'Assign', 'Assign', 'Assign', 'If', 'If', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Print', 'Assign']), ('decorator_list', ['Name', 'Attribute'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Name', 'Attribute', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Assign', 'If', 'Assign', 'Assign', 'For', 'Expr', 'Expr', 'Expr', 'Expr', 'If']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'AugAssign', 'Assign', 'Assign', 'Expr', 'If', 'Assign', 'Expr', 'Return']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'List'), ('body', ['Expr', 'Expr', 'For']), ('orelse', [])]": 2, "BinOp -> [('left', 'Subscript'), ('op', 'Sub'), ('right', 'BinOp')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assert']), ('decorator_list', ['Call'])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'FunctionDef']), ('decorator_list', [])]": 14, "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['Str', 'Name', 'Dict'])]": 1, "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'AugAssign', 'If', 'Assign']), ('orelse', [])]": 2, "For -> [('target', 'Name'), ('iter', 'Subscript'), ('body', ['Assign', 'Assign', 'Assign', 'Expr']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'FunctionDef', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'If', 'If', 'Assign', 'Assign', 'If', 'Assign']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Expr']), ('decorator_list', [])]": 1, "TryExcept -> [('body', ['Assign', 'If', 'Assign', 'Assign', 'Assign']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 1, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Assign', 'Expr', 'If', 'Expr', 'Expr']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "If -> [('test', 'BoolOp'), ('body', ['Pass']), ('orelse', [])]": 1, "BinOp -> [('left', 'Call'), ('op', 'Mod'), ('right', 'Tuple')]": 30, "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['Assign', 'If', 'Continue'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Global', 'Assign', 'Assign', 'For', 'If', 'Return']), ('decorator_list', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Name', 'Call', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Print', 'If', 'Assign', 'AugAssign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "Compare -> [('left', 'Attribute'), ('ops', ['NotEq']), ('comparators', ['Name'])]": 50, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "TryExcept -> [('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 1, "If -> [('test', 'Call'), ('body', ['Expr', 'Return']), ('orelse', [])]": 20, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Global', 'If', 'Return']), ('decorator_list', [])]": 4, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Expr', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]": 2, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'Print', 'Print', 'Assign', 'Print', 'Assign', 'Assign', 'Assign']), ('orelse', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Call', 'Call', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Assign', 'TryExcept']), ('decorator_list', [])]": 2, "While -> [('test', 'Name'), ('body', ['TryExcept', 'Assign', 'If', 'AugAssign', 'Assign']), ('orelse', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['If']), ('orelse', ['For'])]": 1, "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'If', 'If', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'If']), ('orelse', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Expr', 'ClassDef', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'TryExcept', 'TryExcept', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "While -> [('test', 'Name'), ('body', ['Assign', 'Expr', 'For']), ('orelse', [])]": 1, "Compare -> [('left', 'Attribute'), ('ops', ['Eq']), ('comparators', ['BinOp'])]": 3, "If -> [('test', 'BoolOp'), ('body', ['Return']), ('orelse', ['Assign', 'Assign', 'Assign', 'TryExcept'])]": 1, "If -> [('test', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'While', 'Return']), ('orelse', ['Raise'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Assign', 'FunctionDef', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For']), ('decorator_list', ['Name', 'Name'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'For', 'Return']), ('decorator_list', [])]": 17, "If -> [('test', 'Compare'), ('body', ['Assign']), ('orelse', ['Print', 'Expr'])]": 1, "If -> [('test', 'Call'), ('body', ['Assign']), ('orelse', ['TryExcept'])]": 8, "Compare -> [('left', 'Call'), ('ops', ['Lt']), ('comparators', ['Call'])]": 8, "If -> [('test', 'Attribute'), ('body', ['Assign', 'Expr', 'Expr']), ('orelse', [])]": 2, "Call -> [('func', 'Attribute'), ('args', ['Subscript', 'Attribute', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 14, "BinOp -> [('left', 'Attribute'), ('op', 'Pow'), ('right', 'Num')]": 16, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['TryExcept', 'If', 'If', 'Return']), ('decorator_list', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', []), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'If', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef'])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 39, "If -> [('test', 'Compare'), ('body', ['Expr']), ('orelse', ['Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'If'])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Tuple', 'Name', 'Num', 'Tuple', 'Name', 'Tuple', 'Dict', 'Num'])]": 2, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'For', 'Assign', 'Assign', 'If']), ('orelse', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Expr', 'Expr']), ('decorator_list', [])]": 5, "TryExcept -> [('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('handlers', ['ExceptHandler', 'ExceptHandler', 'ExceptHandler', 'ExceptHandler']), ('orelse', [])]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef'])]": 1, "Tuple -> [('elts', ['Num', 'Str', 'Str']), ('ctx', 'Load')]": 12, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assert', 'If', 'TryExcept', 'Assign', 'If', 'Assign', 'Return']), ('decorator_list', [])]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'If', 'ImportFrom', 'Import', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'If'])]": 1, "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'If']), ('orelse', ['If', 'Assign'])]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'FunctionDef', 'FunctionDef', 'If'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'TryExcept']), ('decorator_list', [])]": 3, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Attribute', 'Str', 'Name']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Assign -> [('targets', ['Subscript']), ('value', 'List')]": 82, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'ClassDef'])]": 1, "Call -> [('func', 'Name'), ('args', ['Subscript', 'Tuple']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 8, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "If -> [('test', 'Attribute'), ('body', ['Assign', 'For', 'For', 'Assign', 'If', 'Assign', 'If', 'If']), ('orelse', ['Assign'])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'If', 'If', 'If', 'Return']), ('orelse', [])]": 2, "For -> [('target', 'Tuple'), ('iter', 'Name'), ('body', ['If', 'If', 'Assign', 'Expr', 'AugAssign', 'Delete']), ('orelse', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['Assign', 'Expr', 'AugAssign']), ('orelse', [])]": 3, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'For', 'If', 'For', 'Assign']), ('orelse', [])]": 2, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'For']), ('decorator_list', [])]": 2, "TryExcept -> [('body', ['Assert', 'Assert', 'Assert', 'Assert']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Call', 'Call', 'Call', 'Call'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['For', 'For', 'Assign', 'Assign', 'If', 'If', 'Expr']), ('decorator_list', [])]": 1, "TryExcept -> [('body', ['Import', 'Expr']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 1, "BoolOp -> [('op', 'And'), ('values', ['Call', 'Attribute'])]": 17, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'If', 'If', 'Assign', 'If', 'For', 'Assign', 'Expr']), ('orelse', ['Expr'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Assign', 'If', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'Attribute'), ('body', ['Import', 'Return']), ('orelse', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'Expr']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Import', 'For', 'For', 'For', 'Assign', 'For', 'For', 'Expr', 'Expr', 'Expr']), ('decorator_list', ['Name'])]": 1, "TryExcept -> [('body', ['Expr', 'Assign', 'Assign', 'Assign', 'If', 'Expr', 'For', 'Expr', 'Expr']), ('handlers', ['ExceptHandler', 'ExceptHandler']), ('orelse', [])]": 1, "Subscript -> [('value', 'Name'), ('slice', 'ExtSlice'), ('ctx', 'Store')]": 231, "TryExcept -> [('body', ['If', 'Expr']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 7, "Call -> [('func', 'Attribute'), ('args', ['Tuple', 'Tuple']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 18, "Call -> [('func', 'Name'), ('args', ['Dict', 'Dict']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 5, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "If -> [('test', 'Attribute'), ('body', ['Print', 'Assign', 'Continue']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'If', 'If', 'If', 'If', 'Assign', 'If', 'For', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign', 'Print', 'Expr', 'Expr', 'If', 'Assign', 'Assign', 'Return']), ('orelse', ['Assign', 'TryExcept'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 2, "If -> [('test', 'Name'), ('body', ['Assign', 'Expr', 'Expr', 'If']), ('orelse', [])]": 1, "If -> [('test', 'Call'), ('body', ['Assign']), ('orelse', ['Print', 'Assign', 'Expr', 'Expr'])]": 1, "Module -> [('body', ['Import', 'TryExcept', 'TryExcept', 'TryExcept', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'FunctionDef', 'ClassDef', 'ClassDef', 'ClassDef'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'TryExcept', 'TryExcept', 'Return']), ('decorator_list', ['Call'])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'If', 'Assign', 'Assign', 'Assign']), ('orelse', ['Assign', 'Assign', 'Assign', 'Assign'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Attribute']), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 6, "If -> [('test', 'Attribute'), ('body', ['AugAssign', 'If']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'TryExcept', 'For', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 5, "If -> [('test', 'Call'), ('body', ['For']), ('orelse', ['Assign', 'Assign', 'Expr'])]": 1, "IfExp -> [('test', 'Attribute'), ('body', 'Attribute'), ('orelse', 'Name')]": 1, "If -> [('test', 'Name'), ('body', ['Assert', 'For']), ('orelse', [])]": 1, "Assert -> [('test', 'Compare'), ('msg', 'Str')]": 53, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Delete', 'Assign', 'Delete', 'Assign', 'Delete', 'Delete']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Assign', 'Assign', 'Expr', 'Delete', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 34, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'For', 'Assign', 'Assign', 'Assign', 'Expr', 'For']), ('decorator_list', [])]": 1, "List -> [('elts', ['Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute']), ('ctx', 'Load')]": 1, "If -> [('test', 'UnaryOp'), ('body', ['If', 'TryExcept', 'If', 'Assign']), ('orelse', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'If', 'Expr', 'Assign', 'Return']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Tuple'), ('body', ['TryExcept']), ('orelse', [])]": 5, "If -> [('test', 'Compare'), ('body', ['Assign', 'If', 'For']), ('orelse', [])]": 1, "TryExcept -> [('body', ['With', 'Print']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 2, "List -> [('elts', ['Attribute', 'Str', 'Str', 'Str', 'Name', 'Name']), ('ctx', 'Load')]": 1, "If -> [('test', 'Call'), ('body', ['For', 'Expr', 'Expr']), ('orelse', [])]": 1, "TryFinally -> [('body', ['Assign', 'Assign', 'For']), ('finalbody', ['Expr'])]": 1, "Module -> [('body', ['Import', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Expr', 'Print'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['AugAssign', 'If']), ('decorator_list', [])]": 1, "ExceptHandler -> [('type', 'Tuple'), ('name', 'Name'), ('body', ['Assign', 'TryExcept', 'If'])]": 1, "If -> [('test', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'Assign']), ('orelse', [])]": 3, "If -> [('test', 'Call'), ('body', ['For']), ('orelse', ['Pass'])]": 1, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('orelse', [])]": 1, "If -> [('test', 'Call'), ('body', ['Expr', 'Expr']), ('orelse', ['Expr'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assert', 'Assert', 'Assign', 'If', 'If', 'Assign', 'Assign', 'For', 'Assign', 'Assign']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Subscript'), ('body', ['Assign', 'If', 'If', 'If']), ('orelse', [])]": 1, "Compare -> [('left', 'Name'), ('ops', ['In']), ('comparators', ['List'])]": 43, "If -> [('test', 'Attribute'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'TryExcept', 'Return']), ('decorator_list', [])]": 3, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'TryExcept', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'FunctionDef', 'FunctionDef'])]": 1, "Lambda -> [('args', 'arguments'), ('body', 'Subscript')]": 48, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef'])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Return']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'While', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'For', 'Expr', 'Assign']), ('decorator_list', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'FunctionDef', 'FunctionDef', 'If'])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Dict'])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Name', 'Name', 'Name'])]": 26, "BinOp -> [('left', 'Name'), ('op', 'Div'), ('right', 'Name')]": 59, "IfExp -> [('test', 'Attribute'), ('body', 'Call'), ('orelse', 'Attribute')]": 6, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'ImportFrom', 'TryExcept', 'TryExcept', 'Import', 'ClassDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'If'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'If', 'Expr', 'Return']), ('decorator_list', [])]": 1, "TryExcept -> [('body', ['Assign']), ('handlers', ['ExceptHandler']), ('orelse', ['Expr', 'For'])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "BinOp -> [('left', 'BinOp'), ('op', 'Add'), ('right', 'BinOp')]": 209, "Attribute -> [('value', 'ListComp'), ('attr', 'str'), ('ctx', 'Load')]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'TryExcept', 'If', 'Assign', 'Expr', 'Assign', 'For', 'TryExcept', 'If']), ('decorator_list', [])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'str'), ('kwarg', 'NoneType'), ('defaults', [])]": 1, "Tuple -> [('elts', ['BoolOp', 'Attribute']), ('ctx', 'Load')]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'AugAssign', 'While']), ('orelse', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Break']), ('orelse', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr'])]": 1, "Tuple -> [('elts', ['Str', 'BoolOp', 'Name', 'Name', 'Name']), ('ctx', 'Load')]": 2, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['If', 'For', 'Expr']), ('orelse', [])]": 2, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef'])]": 4, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'With', 'Assign', 'Assign', 'Assign', 'If', 'Expr', 'Return']), ('decorator_list', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Name']), ('keywords', []), ('starargs', 'Call'), ('kwargs', 'NoneType')]": 3, "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['Assign', 'If', 'Assign', 'Expr', 'If', 'Expr', 'If']), ('orelse', [])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Attribute', 'Name', 'Name', 'Name'])]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "List -> [('elts', ['Call', 'Call', 'Call', 'Call', 'Call', 'Call']), ('ctx', 'Load')]": 2, "TryExcept -> [('body', ['Assign', 'Expr', 'Return']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 2, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'Name')]": 16, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]": 4, "If -> [('test', 'BoolOp'), ('body', ['For']), ('orelse', ['If'])]": 1, "AugAssign -> [('target', 'Name'), ('op', 'BitAnd'), ('value', 'BinOp')]": 4, "Raise -> [('type', 'Name'), ('inst', 'Name'), ('tback', 'NoneType')]": 10, "Call -> [('func', 'Name'), ('args', ['Name', 'Name', 'Name', 'Str', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Import', 'Expr', 'Assign', 'Assign', 'If', 'Return']), ('decorator_list', [])]": 2, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'If', 'Expr']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['TryExcept', 'Assign', 'If', 'TryExcept', 'Assign', 'Expr']), ('decorator_list', [])]": 2, "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'Assign', 'If', 'TryExcept']), ('orelse', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Num', 'Name', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "TryExcept -> [('body', ['Assign', 'For']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 8, "If -> [('test', 'Attribute'), ('body', ['Assign', 'Expr']), ('orelse', ['For'])]": 1, "BinOp -> [('left', 'Str'), ('op', 'Add'), ('right', 'Call')]": 243, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'For', 'If', 'Return']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assert', 'Expr']), ('decorator_list', [])]": 13, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Return']), ('decorator_list', ['Name'])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Attribute', 'Attribute', 'Name']), ('body', ['Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "ExceptHandler -> [('type', 'Attribute'), ('name', 'Tuple'), ('body', ['Import', 'If', 'Break'])]": 1, "TryExcept -> [('body', ['Assign', 'Delete']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['While', 'If', 'Return']), ('decorator_list', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name', 'Name', 'Name', 'Name', 'Name']), ('body', ['Expr', 'FunctionDef']), ('decorator_list', [])]": 2, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Str', 'Name', 'Name', 'List'])]": 1, "If -> [('test', 'UnaryOp'), ('body', ['FunctionDef', 'Assign', 'FunctionDef']), ('orelse', [])]": 1, "If -> [('test', 'Attribute'), ('body', ['If', 'AugAssign', 'Assign']), ('orelse', ['If'])]": 1, "Compare -> [('left', 'Subscript'), ('ops', ['LtE']), ('comparators', ['Name'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['For', 'For', 'For']), ('decorator_list', [])]": 3, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Expr', 'ClassDef'])]": 1, "ExceptHandler -> [('type', 'Tuple'), ('name', 'NoneType'), ('body', ['Return'])]": 6, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'If', 'Assign', 'TryExcept', 'Assign', 'Expr', 'TryFinally', 'Print']), ('decorator_list', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Str', 'Attribute', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'If', 'If', 'TryExcept']), ('decorator_list', [])]": 1, "Print -> [('dest', 'NoneType'), ('values', ['Call', 'Str']), ('nl', 'bool')]": 3, "TryExcept -> [('body', ['Expr']), ('handlers', ['ExceptHandler']), ('orelse', ['Return'])]": 3, "Call -> [('func', 'Name'), ('args', ['Attribute', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 30, "Call -> [('func', 'Attribute'), ('args', ['Attribute']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 125, "Call -> [('func', 'Name'), ('args', ['Name', 'Attribute', 'Attribute', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "BinOp -> [('left', 'UnaryOp'), ('op', 'Mult'), ('right', 'Call')]": 1, "If -> [('test', 'Name'), ('body', ['Assign', 'For']), ('orelse', ['Assign'])]": 2, "If -> [('test', 'Name'), ('body', ['Delete', 'ImportFrom', 'Assign']), ('orelse', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', ['Name'])]": 2, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'If', 'If', 'If', 'If', 'For']), ('orelse', [])]": 2, "While -> [('test', 'Attribute'), ('body', ['Assign', 'For']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'For', 'Expr', 'Return']), ('decorator_list', [])]": 5, "Tuple -> [('elts', ['Name', 'Str', 'Tuple', 'Num']), ('ctx', 'Load')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assert', 'While']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assert', 'If', 'If', 'Assign', 'Expr', 'If']), ('decorator_list', [])]": 1, "Module -> [('body', ['Import', 'Assign', 'Expr', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'For', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'For', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Print', 'Print', 'Expr', 'Expr', 'Expr', 'Expr'])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Num', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Str'])]": 2, "For -> [('target', 'Name'), ('iter', 'BinOp'), ('body', ['Assign', 'If']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'Assign', 'If', 'If', 'Return']), ('decorator_list', [])]": 2, "If -> [('test', 'Call'), ('body', ['Assign', 'Break']), ('orelse', ['If'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Num', 'BinOp', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 5, "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'Assign']), ('orelse', ['Assign'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "If -> [('test', 'Attribute'), ('body', ['Assign', 'Assign', 'Expr']), ('orelse', ['Assign', 'Expr'])]": 1, "Module -> [('body', ['Import', 'TryExcept', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'ImportFrom', 'ClassDef', 'ClassDef'])]": 1, "If -> [('test', 'Call'), ('body', ['Assign', 'AugAssign', 'Return']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Print', 'Print', 'Return']), ('decorator_list', [])]": 1, "TryFinally -> [('body', ['TryExcept', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'FunctionDef', 'Assign', 'If', 'Return']), ('finalbody', ['Expr', 'Expr'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "If -> [('test', 'Name'), ('body', ['Assign', 'Assign', 'TryExcept', 'Assign', 'Expr']), ('orelse', ['Raise'])]": 1, "Call -> [('func', 'Name'), ('args', ['Str', 'Name', 'Str', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 6, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]": 1, "Call -> [('func', 'Name'), ('args', ['Num', 'Num']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "List -> [('elts', ['Str', 'Name', 'Name']), ('ctx', 'Load')]": 5, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'Expr', 'Print']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['BinOp', 'Attribute', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 6, "If -> [('test', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'TryExcept', 'Assign', 'If', 'Assign']), ('orelse', [])]": 1, "Compare -> [('left', 'Call'), ('ops', ['NotEq']), ('comparators', ['Subscript'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Num', 'Num', 'BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'If', 'Assign']), ('decorator_list', [])]": 2, "If -> [('test', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'If']), ('orelse', ['Assign'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Subscript', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 4, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'If']), ('decorator_list', [])]": 1, "BoolOp -> [('op', 'And'), ('values', ['Attribute', 'BinOp'])]": 8, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'If', 'Assign', 'Assign', 'Return']), ('decorator_list', ['Name'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If']), ('decorator_list', ['Call'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Return']), ('decorator_list', [])]": 7, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'If', 'TryExcept', 'Assign', 'If', 'If', 'If', 'Assign', 'If', 'If', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'Call'), ('body', ['Assign']), ('orelse', ['If'])]": 57, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name', 'Name', 'Name', 'Name']), ('body', ['Expr', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "ExceptHandler -> [('type', 'NoneType'), ('name', 'NoneType'), ('body', ['Import'])]": 1, "List -> [('elts', ['Num', 'Str', 'Num', 'Tuple', 'BinOp']), ('ctx', 'Load')]": 3, "ExceptHandler -> [('type', 'Name'), ('name', 'Name'), ('body', ['Expr', 'Expr', 'Assign', 'If'])]": 1, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['AugAssign', 'Expr', 'If']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'If', 'Assign']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', []), ('keywords', []), ('starargs', 'BinOp'), ('kwargs', 'NoneType')]": 1, "If -> [('test', 'BoolOp'), ('body', ['TryExcept', 'TryExcept']), ('orelse', [])]": 1, "IfExp -> [('test', 'Name'), ('body', 'List'), ('orelse', 'List')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'For', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]": 2, "Tuple -> [('elts', ['Attribute', 'Call', 'Call', 'Call', 'Name', 'Subscript']), ('ctx', 'Load')]": 1, "If -> [('test', 'Name'), ('body', ['Assign', 'Return']), ('orelse', ['Return'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'While']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Expr']), ('orelse', [])]": 2, "Module -> [('body', ['Import', 'TryExcept', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'If', 'Assign', 'ClassDef', 'ClassDef', 'Assign', 'Assign', 'ClassDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'ClassDef', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'For']), ('decorator_list', [])]": 3, "Call -> [('func', 'Name'), ('args', ['Num', 'Num', 'Num']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('orelse', ['Assign', 'Assign', 'Assign'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'If', 'Assign', 'Expr', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'For', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', ['Call'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'If', 'If', 'Raise']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', ['Name'])]": 1, "Compare -> [('left', 'Name'), ('ops', ['NotEq']), ('comparators', ['BinOp'])]": 3, "Dict -> [('keys', ['Str', 'Str']), ('values', ['Str', 'Subscript'])]": 2, "If -> [('test', 'Name'), ('body', ['Assign', 'Assign', 'If', 'If', 'Assign']), ('orelse', ['If', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Assign'])]": 1, "List -> [('elts', ['Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call']), ('ctx', 'Load')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "Tuple -> [('elts', ['Name', 'BinOp']), ('ctx', 'Load')]": 32, "Module -> [('body', ['Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef'])]": 1, "If -> [('test', 'Call'), ('body', ['Assign', 'If']), ('orelse', ['Assign', 'Assign'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'If', 'Expr', 'Return']), ('decorator_list', [])]": 1, "For -> [('target', 'Tuple'), ('iter', 'Attribute'), ('body', ['If', 'For']), ('orelse', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['List', 'List']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 7, "Call -> [('func', 'Name'), ('args', ['Name', 'Attribute', 'Str', 'Call', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "BoolOp -> [('op', 'Or'), ('values', ['Name', 'Attribute', 'Name'])]": 1, "With -> [('context_expr', 'Call'), ('optional_vars', 'NoneType'), ('body', ['Expr', 'Expr', 'Return'])]": 1, "Call -> [('func', 'Name'), ('args', ['Lambda', 'ListComp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'Expr', 'Assign']), ('decorator_list', [])]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'If', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'AugAssign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Expr', 'Expr', 'TryFinally', 'Expr']), ('decorator_list', [])]": 2, "Name -> [('id', 'str'), ('ctx', 'Del')]": 31, "comprehension -> [('target', 'Name'), ('iter', 'Call'), ('ifs', ['Attribute'])]": 5, "Call -> [('func', 'Name'), ('args', ['List']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'Attribute')]": 14, "If -> [('test', 'Compare'), ('body', ['If']), ('orelse', ['Expr', 'If'])]": 1, "If -> [('test', 'Compare'), ('body', ['AugAssign', 'Assign', 'If', 'For']), ('orelse', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Expr', 'If']), ('orelse', [])]": 10, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'Assign', 'Assign', 'For', 'If', 'Assign', 'Print', 'Assign', 'Print', 'Expr', 'Expr', 'Print', 'Expr', 'Print']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', ['Call'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'ImportFrom', 'Return']), ('decorator_list', ['Call'])]": 1, "TryExcept -> [('body', ['Assign']), ('handlers', ['ExceptHandler', 'ExceptHandler', 'ExceptHandler', 'ExceptHandler']), ('orelse', [])]": 1, "If -> [('test', 'Name'), ('body', ['Assign', 'Assign', 'For', 'Return']), ('orelse', [])]": 1, "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'If', 'If', 'If']), ('orelse', ['Return'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'If', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'For', 'Assign', 'Assign', 'For', 'If', 'Assign', 'Assign', 'For', 'If', 'Assign']), ('decorator_list', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Call', 'List', 'Lambda']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 3, "If -> [('test', 'UnaryOp'), ('body', ['Assert', 'Assign', 'Assign', 'Assign']), ('orelse', ['Assign'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'If', 'Return']), ('decorator_list', [])]": 1, "Dict -> [('keys', ['Num', 'Num', 'Num']), ('values', ['Str', 'Str', 'Str'])]": 3, "Print -> [('dest', 'NoneType'), ('values', ['Str', 'BinOp']), ('nl', 'bool')]": 7, "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('orelse', ['If'])]": 1, "While -> [('test', 'Num'), ('body', ['TryExcept']), ('orelse', [])]": 8, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'ClassDef', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'ClassDef', 'FunctionDef'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Name', 'Name', 'Num', 'Num', 'Dict'])]": 1, "AugAssign -> [('target', 'Name'), ('op', 'Add'), ('value', 'BoolOp')]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'Return']), ('decorator_list', ['Name', 'Call', 'Attribute'])]": 1, "If -> [('test', 'Name'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'If', 'Return']), ('decorator_list', [])]": 1, "Tuple -> [('elts', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('ctx', 'Load')]": 2, "Module -> [('body', ['Import', 'ImportFrom', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'ImportFrom', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Tuple', 'Name', 'Num', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "BoolOp -> [('op', 'And'), ('values', ['Name', 'Name', 'Compare', 'Compare', 'Compare', 'Compare'])]": 1, "Call -> [('func', 'Name'), ('args', ['Call', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 23, "Compare -> [('left', 'Subscript'), ('ops', ['Gt']), ('comparators', ['Name'])]": 6, "BoolOp -> [('op', 'And'), ('values', ['Compare', 'UnaryOp', 'UnaryOp', 'UnaryOp'])]": 1, "BinOp -> [('left', 'Str'), ('op', 'Add'), ('right', 'Name')]": 279, "If -> [('test', 'Attribute'), ('body', ['Assign']), ('orelse', ['Global', 'If', 'Assign'])]": 2, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', [])]": 143, "With -> [('context_expr', 'Attribute'), ('optional_vars', 'NoneType'), ('body', ['Expr', 'Assign'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "Tuple -> [('elts', ['Attribute', 'Str', 'BinOp', 'Str', 'Str', 'Str', 'Str', 'Str', 'BinOp', 'Name']), ('ctx', 'Load')]": 2, "If -> [('test', 'BoolOp'), ('body', ['Expr', 'If', 'Expr']), ('orelse', [])]": 2, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign']), ('orelse', ['Assign', 'Assign', 'Assign'])]": 2, "Tuple -> [('elts', ['Attribute', 'Tuple']), ('ctx', 'Load')]": 1, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Attribute', 'Name', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "BinOp -> [('left', 'Attribute'), ('op', 'Sub'), ('right', 'Subscript')]": 4, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'For', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'If']), ('decorator_list', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'Assign']), ('decorator_list', [])]": 29, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Return']), ('decorator_list', [])]": 1, "Dict -> [('keys', ['Str']), ('values', ['Num'])]": 66, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 2, "TryExcept -> [('body', ['Assign', 'Expr', 'Expr', 'Expr']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'For', 'If', 'Assign', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'Expr']), ('decorator_list', ['Name'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Import', 'If', 'If', 'If', 'ImportFrom', 'Assign', 'Assign', 'If', 'Assign', 'If', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['If', 'For']), ('orelse', ['If'])]": 2, "If -> [('test', 'Compare'), ('body', ['Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('orelse', [])]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'If'])]": 1, "If -> [('test', 'Compare'), ('body', ['If', 'Assign', 'Assign', 'If', 'If']), ('orelse', ['If', 'If'])]": 1, "If -> [('test', 'BoolOp'), ('body', ['Assign', 'For', 'Expr', 'Assign']), ('orelse', [])]": 2, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'If', 'For']), ('orelse', [])]": 3, "If -> [('test', 'Compare'), ('body', ['Expr', 'ImportFrom', 'ImportFrom', 'Expr', 'Expr']), ('orelse', ['Expr', 'ImportFrom', 'Expr', 'ImportFrom', 'Expr'])]": 1, "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign']), ('orelse', [])]": 32, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'Assign', 'If', 'Assign', 'If', 'If', 'Assign', 'For', 'Assign', 'Assign', 'For', 'Assign', 'If', 'If', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Import', 'Expr', 'Import', 'Expr']), ('decorator_list', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Name', 'Subscript']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assert', 'Assert', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assert', 'Assert']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'If']), ('decorator_list', [])]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'Import', 'ImportFrom', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'ClassDef', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'If'])]": 2, "For -> [('target', 'Name'), ('iter', 'List'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('orelse', [])]": 2, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Str', 'Name', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 2, "Compare -> [('left', 'Call'), ('ops', ['In']), ('comparators', ['Name'])]": 24, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "If -> [('test', 'UnaryOp'), ('body', ['Expr', 'Expr']), ('orelse', [])]": 29, "Call -> [('func', 'Name'), ('args', ['Subscript']), ('keywords', ['keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Call', 'Name', 'Name', 'Name', 'Name'])]": 2, "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['If', 'Expr', 'Assign', 'If']), ('orelse', [])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'str'), ('kwarg', 'str'), ('defaults', ['Name', 'Name', 'Name', 'Name'])]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'If', 'FunctionDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'Import', 'Import', 'ClassDef', 'ClassDef', 'FunctionDef', 'If'])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Expr', 'Expr']), ('orelse', ['Expr'])]": 1, "Dict -> [('keys', ['Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute']), ('values', ['Str', 'Str', 'Str', 'Str', 'Str'])]": 2, "If -> [('test', 'Call'), ('body', ['Assign', 'Assign']), ('orelse', [])]": 18, "If -> [('test', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'Return']), ('orelse', [])]": 1, "Print -> [('dest', 'NoneType'), ('values', ['Str', 'Repr']), ('nl', 'bool')]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Import', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Tuple', 'Name', 'Tuple', 'Name', 'Num', 'Tuple'])]": 1, "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['Return', 'FunctionDef'])]": 2, "List -> [('elts', ['BinOp', 'Str', 'Str', 'Str', 'Str', 'Str']), ('ctx', 'Load')]": 1, "If -> [('test', 'Compare'), ('body', ['Expr', 'Assign', 'Expr', 'Expr', 'Expr']), ('orelse', [])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Attribute', 'BoolOp', 'Call', 'Name'])]": 1, "Tuple -> [('elts', ['Name', 'Call', 'Call', 'Call', 'Call']), ('ctx', 'Load')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Return']), ('decorator_list', ['Name'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'Assign', 'If']), ('decorator_list', [])]": 1, "Compare -> [('left', 'Attribute'), ('ops', ['NotEq']), ('comparators', ['Attribute'])]": 86, "ClassDef -> [('name', 'str'), ('bases', ['Name', 'Name']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 2, "If -> [('test', 'Compare'), ('body', ['Assign']), ('orelse', ['Assign', 'If', 'For', 'If'])]": 1, "For -> [('target', 'Name'), ('iter', 'ListComp'), ('body', ['TryExcept']), ('orelse', [])]": 2, "List -> [('elts', ['Call', 'Str', 'Str']), ('ctx', 'Load')]": 2, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'FunctionDef', 'If'])]": 1, "Compare -> [('left', 'Call'), ('ops', ['In']), ('comparators', ['Call'])]": 8, "TryExcept -> [('body', ['ImportFrom', 'Assign', 'Assign']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'If', 'Assign', 'Assign', 'If', 'Assign', 'Return']), ('decorator_list', [])]": 1, "List -> [('elts', ['Num', 'Num']), ('ctx', 'Load')]": 153, "Tuple -> [('elts', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Call']), ('ctx', 'Load')]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Expr', 'Expr']), ('orelse', ['If', 'If', 'Assign', 'Expr', 'If', 'Expr'])]": 1, "If -> [('test', 'Name'), ('body', ['Expr', 'AugAssign']), ('orelse', ['Expr', 'AugAssign'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'For', 'Assign', 'Expr', 'Return']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'For', 'Assign', 'Assign']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'Name'), ('body', ['Assign', 'Expr', 'For']), ('orelse', [])]": 2, "Tuple -> [('elts', ['Name', 'Name', 'Name', 'Str', 'Str', 'BinOp']), ('ctx', 'Load')]": 1, "If -> [('test', 'UnaryOp'), ('body', ['If', 'Expr']), ('orelse', [])]": 3, "Compare -> [('left', 'Subscript'), ('ops', ['GtE']), ('comparators', ['Str'])]": 1, "If -> [('test', 'Call'), ('body', ['Assign', 'Assign', 'If']), ('orelse', ['Expr', 'Assign', 'Continue'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', ['Name'])]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['If']), ('orelse', [])]": 273, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 90, "If -> [('test', 'Compare'), ('body', ['Assign', 'Raise']), ('orelse', ['Raise'])]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['If', 'Assign', 'For', 'If']), ('orelse', [])]": 1, "If -> [('test', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Expr']), ('orelse', [])]": 1, "arguments -> [('args', ['Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Num'])]": 52, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "Module -> [('body', ['Import', 'Expr', 'Import', 'ImportFrom', 'ImportFrom', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['TryExcept', 'TryExcept']), ('decorator_list', [])]": 3, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Str', 'Num', 'Num', 'Name', 'Name', 'Name'])]": 1, "For -> [('target', 'Name'), ('iter', 'List'), ('body', ['Expr', 'Expr', 'Expr']), ('orelse', [])]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['With', 'Assign']), ('decorator_list', [])]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 2, "BinOp -> [('left', 'Attribute'), ('op', 'Add'), ('right', 'Subscript')]": 2, "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['AugAssign', 'Continue'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Pass']), ('decorator_list', [])]": 47, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'While']), ('decorator_list', [])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Call', 'Name', 'Call', 'BoolOp', 'Str', 'Call'])]": 1, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'If', 'Print', 'Print', 'Assign', 'Assign', 'If', 'For'])]": 1, "Call -> [('func', 'Name'), ('args', ['Str', 'Num', 'Num', 'Name', 'Call', 'Call', 'Call', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 4, "If -> [('test', 'Call'), ('body', ['Assign', 'If', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr']), ('orelse', ['Assign', 'Expr', 'Expr', 'Assign', 'If', 'Expr'])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]": 2, "If -> [('test', 'UnaryOp'), ('body', ['Expr', 'Print', 'Expr']), ('orelse', [])]": 1, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'FunctionDef', 'Assign', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'Assign', 'FunctionDef', 'Assign', 'FunctionDef', 'Assign', 'FunctionDef', 'Assign'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'For', 'If', 'If', 'Return']), ('decorator_list', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Str', 'Call']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'If']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['Assign', 'For', 'If']), ('orelse', [])]": 4, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Global', 'Global', 'Print', 'If', 'Assign', 'Print', 'Assign', 'Assign', 'TryExcept', 'Print', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Expr']), ('orelse', ['If', 'Expr', 'If'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'Import', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'BoolOp'), ('body', ['Expr', 'Print']), ('orelse', ['Print'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Assign', 'Assign', 'If', 'Expr', 'Assign', 'Assign']), ('decorator_list', [])]": 1, "Global -> [('names', ['str', 'str', 'str', 'str', 'str'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'TryExcept', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'TryExcept', 'Assign', 'Expr', 'TryExcept', 'Expr', 'Expr', 'Expr', 'Expr', 'TryExcept', 'Assign', 'Expr', 'TryExcept', 'Expr', 'Expr', 'Expr', 'Expr', 'TryExcept', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Attribute', 'Attribute', 'Name'])]": 12, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'TryExcept', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'If', 'Assign', 'For', 'Expr']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'TryExcept']), ('orelse', [])]": 1, "If -> [('test', 'Name'), ('body', ['Assign', 'Assign']), ('orelse', ['Assign'])]": 16, "If -> [('test', 'UnaryOp'), ('body', ['Expr', 'Expr', 'AugAssign']), ('orelse', [])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Call', 'Call', 'Subscript', 'Call', 'Name', 'Subscript', 'Name', 'Name'])]": 1, "If -> [('test', 'Name'), ('body', ['Assert', 'Assign']), ('orelse', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'TryExcept']), ('decorator_list', [])]": 5, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Name', 'Call', 'Name'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Num', 'Attribute']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 4, "Call -> [('func', 'Attribute'), ('args', ['Str', 'Num', 'Str', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 4, "If -> [('test', 'Compare'), ('body', ['TryExcept', 'TryExcept', 'ImportFrom']), ('orelse', [])]": 1, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Expr', 'Expr', 'If', 'If', 'If']), ('orelse', [])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str']), ('values', ['Str', 'List', 'List', 'List'])]": 1, "Call -> [('func', 'Name'), ('args', ['Attribute', 'Str', 'BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Name', 'Name', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'Assign', 'Assign', 'Assign', 'TryExcept', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'FunctionDef', 'If'])]": 1, "List -> [('elts', ['Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple']), ('ctx', 'Load')]": 1, "If -> [('test', 'Compare'), ('body', ['Expr', 'Expr', 'Expr', 'AugAssign']), ('orelse', [])]": 1, "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'Expr', 'If']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'If', 'Assign']), ('decorator_list', [])]": 1, "If -> [('test', 'Call'), ('body', ['Expr']), ('orelse', ['TryExcept', 'TryExcept'])]": 1, "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef'])]": 1, "Call -> [('func', 'Name'), ('args', ['Name', 'Dict']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 4, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Call']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 5, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Name', 'Name', 'Subscript', 'Name', 'Name', 'Name', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "If -> [('test', 'BinOp'), ('body', ['Expr', 'Assign', 'Assign', 'Assign']), ('orelse', [])]": 4, "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign', 'Return']), ('orelse', [])]": 3, "Module -> [('body', ['Import', 'If', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Expr', 'Expr', 'Assign', 'FunctionDef', 'Expr', 'ImportFrom', 'ClassDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'FunctionDef', 'If'])]": 1, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'AugAssign']), ('orelse', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Global', 'Assign', 'Assign', 'Assign', 'If', 'If', 'For', 'Return', 'Raise']), ('decorator_list', [])]": 1, "BoolOp -> [('op', 'And'), ('values', ['UnaryOp', 'Attribute', 'Name'])]": 3, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Name']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 29, "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign', 'For', 'AugAssign', 'If', 'Expr']), ('orelse', ['If'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'For', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'Name')]": 1, "Call -> [('func', 'Name'), ('args', ['Call', 'Name', 'Num', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'Name')]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Tuple'])]": 1, "ClassDef -> [('name', 'str'), ('bases', []), ('body', ['Assign', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]": 8, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'If', 'If']), ('decorator_list', ['Attribute'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Call', 'Call', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 5, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'If', 'If', 'If', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Attribute', 'Name', 'BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 3, "Call -> [('func', 'Name'), ('args', ['Name', 'Name']), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'If', 'FunctionDef', 'Expr', 'Return']), ('decorator_list', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'Assign', 'ClassDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "If -> [('test', 'UnaryOp'), ('body', ['Raise']), ('orelse', ['Assign'])]": 5, "Call -> [('func', 'Name'), ('args', ['Num', 'Name', 'Tuple', 'Dict', 'Tuple']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]": 1, "Assert -> [('test', 'UnaryOp'), ('msg', 'BinOp')]": 3, "List -> [('elts', ['Attribute', 'Name']), ('ctx', 'Load')]": 12, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['For', 'Expr', 'Expr']), ('decorator_list', [])]": 6, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Expr', 'For']), ('orelse', [])]": 9, "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['Assign', 'Assign', 'For']), ('orelse', [])]": 2, "Call -> [('func', 'Attribute'), ('args', ['List']), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'ImportFrom', 'Import', 'Assign', 'If']), ('decorator_list', [])]": 1, "If -> [('test', 'Attribute'), ('body', ['ImportFrom', 'Assign']), ('orelse', ['Assign'])]": 2, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Num', 'Num', 'Attribute'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'If', 'Assign', 'If', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'For', 'For', 'If', 'Return']), ('decorator_list', [])]": 1, "Subscript -> [('value', 'Attribute'), ('slice', 'ExtSlice'), ('ctx', 'Load')]": 46, "Assign -> [('targets', ['Subscript', 'Name']), ('value', 'Dict')]": 4, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'For']), ('orelse', ['Assign', 'Assign', 'FunctionDef', 'For'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'For', 'TryExcept']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign']), ('orelse', ['Assign', 'Assert'])]": 2, "BoolOp -> [('op', 'And'), ('values', ['Call', 'Name', 'Compare'])]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'ImportFrom', 'Import', 'Import', 'Import', 'ClassDef'])]": 1, "If -> [('test', 'Compare'), ('body', ['For', 'Return']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'With']), ('decorator_list', [])]": 1, "If -> [('test', 'Name'), ('body', ['Assert', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'If']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'If', 'Assign', 'If', 'TryExcept', 'If', 'Assign', 'If', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['FunctionDef', 'If', 'Assign', 'Assign', 'Expr']), ('decorator_list', ['Name'])]": 1, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['AugAssign', 'If', 'If', 'If', 'Assign', 'If', 'Assign']), ('orelse', [])]": 1, "List -> [('elts', ['Str', 'Name', 'Str', 'Name']), ('ctx', 'Load')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'List'), ('body', ['Assign', 'Assign', 'For']), ('orelse', [])]": 2, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Str', 'Name', 'Name', 'Num', 'Name', 'Name', 'Str', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Call -> [('func', 'Name'), ('args', ['List']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 7, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['FunctionDef', 'Import', 'Expr', 'Expr']), ('decorator_list', [])]": 2, "Subscript -> [('value', 'BinOp'), ('slice', 'Slice'), ('ctx', 'Load')]": 3, "Call -> [('func', 'Attribute'), ('args', ['Num', 'Tuple']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 6, "If -> [('test', 'Compare'), ('body', ['Import', 'FunctionDef', 'FunctionDef', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'For', 'For', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'FunctionDef', 'Assign', 'Assign', 'For', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('orelse', ['Print'])]": 1, "If -> [('test', 'Compare'), ('body', ['For']), ('orelse', ['Raise'])]": 1, "If -> [('test', 'BoolOp'), ('body', ['Assign', 'While', 'Expr', 'Assign']), ('orelse', [])]": 1, "If -> [('test', 'BoolOp'), ('body', ['TryExcept', 'Assign', 'Expr']), ('orelse', [])]": 2, "If -> [('test', 'Name'), ('body', ['Print', 'Print', 'Print', 'Print', 'Print', 'Print', 'Break']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'If', 'If']), ('decorator_list', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 53, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'Assign', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 2, "Compare -> [('left', 'Attribute'), ('ops', ['Eq']), ('comparators', ['List'])]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'If', 'If', 'If', 'Expr', 'Assign', 'Return']), ('decorator_list', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', []), ('body', ['Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "Slice -> [('lower', 'Name'), ('upper', 'BinOp'), ('step', 'NoneType')]": 37, "Call -> [('func', 'Attribute'), ('args', ['Str', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 819, "If -> [('test', 'BoolOp'), ('body', ['Assign']), ('orelse', [])]": 241, "Tuple -> [('elts', ['Attribute', 'Call', 'Attribute']), ('ctx', 'Load')]": 8, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['List', 'Str', 'Dict'])]": 1, "List -> [('elts', ['Str', 'Str', 'Str']), ('ctx', 'Load')]": 189, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assert', 'Assign', 'Assign', 'Assign', 'Assert', 'Assert']), ('decorator_list', [])]": 1, "Tuple -> [('elts', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('ctx', 'Load')]": 1, "If -> [('test', 'Name'), ('body', ['Assign', 'For', 'Assign', 'Expr', 'Expr']), ('orelse', ['If'])]": 1, "If -> [('test', 'BoolOp'), ('body', ['Expr']), ('orelse', ['For'])]": 2, "Print -> [('dest', 'NoneType'), ('values', ['Str', 'Subscript']), ('nl', 'bool')]": 5, "Compare -> [('left', 'Attribute'), ('ops', ['IsNot']), ('comparators', ['Num'])]": 3, "ExceptHandler -> [('type', 'Tuple'), ('name', 'NoneType'), ('body', ['Assign', 'Expr', 'Continue'])]": 1, "ExceptHandler -> [('type', 'Name'), ('name', 'Name'), ('body', ['Assign', 'Assign', 'Expr', 'Return'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "Module -> [('body', ['Import', 'ImportFrom', 'Import', 'Import', 'Import', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'ClassDef', 'If'])]": 1, "If -> [('test', 'Name'), ('body', ['Assign', 'Expr']), ('orelse', ['Assign', 'Expr'])]": 2, "TryExcept -> [('body', ['Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Return']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 1, "TryExcept -> [('body', ['Expr', 'Assign', 'Assign', 'Assign']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 2, "If -> [('test', 'Compare'), ('body', ['Assign', 'Expr']), ('orelse', ['Assert'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Expr', 'Expr', 'If', 'Return']), ('decorator_list', [])]": 1, "While -> [('test', 'Compare'), ('body', ['AugAssign', 'AugAssign', 'Assign']), ('orelse', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Expr', 'Assign', 'Expr', 'Expr']), ('orelse', [])]": 12, "Call -> [('func', 'Name'), ('args', ['Name', 'Subscript', 'Subscript']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'Assign', 'If', 'If', 'Assign', 'If', 'Return']), ('decorator_list', [])]": 1, "List -> [('elts', ['Attribute', 'Attribute', 'Attribute']), ('ctx', 'Load')]": 6, "Print -> [('dest', 'NoneType'), ('values', ['Call']), ('nl', 'bool')]": 109, "BoolOp -> [('op', 'Or'), ('values', ['Compare', 'UnaryOp', 'UnaryOp'])]": 4, "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'Break']), ('orelse', [])]": 3, "For -> [('target', 'Tuple'), ('iter', 'Name'), ('body', ['If', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'If', 'If', 'Expr', 'Assign']), ('orelse', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign']), ('orelse', ['Assign', 'Assign'])]": 31, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Assign', 'If', 'Assign', 'If']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Global', 'Assign', 'If', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "Tuple -> [('elts', ['Name', 'Subscript', 'Dict']), ('ctx', 'Load')]": 2, "List -> [('elts', ['Attribute', 'Str', 'Str']), ('ctx', 'Load')]": 17, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'Assign', 'If', 'Assign', 'If', 'Return']), ('decorator_list', ['Name'])]": 1, "If -> [('test', 'Compare'), ('body', ['Expr', 'Expr', 'Return']), ('orelse', [])]": 7, "BoolOp -> [('op', 'And'), ('values', ['UnaryOp', 'UnaryOp', 'UnaryOp'])]": 5, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'If', 'Assign', 'Assign', 'For', 'Assign', 'Expr', 'For', 'If', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'Name'), ('body', ['Assign']), ('orelse', ['If', 'If'])]": 2, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['If', 'AugAssign', 'While']), ('orelse', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Print', 'If']), ('orelse', [])]": 1, "If -> [('test', 'Name'), ('body', ['If']), ('orelse', ['If', 'Expr'])]": 1, "Assign -> [('targets', ['Subscript', 'Subscript']), ('value', 'List')]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Num', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['If', 'Assign', 'Assign', 'If', 'Assign', 'If']), ('orelse', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Call', 'BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 6, "If -> [('test', 'Name'), ('body', ['Assign', 'Assign', 'TryExcept', 'If', 'Assign', 'Expr', 'Assign', 'AugAssign']), ('orelse', ['AugAssign'])]": 1, "TryExcept -> [('body', ['Assign', 'If', 'Assign', 'Expr']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 1, "Compare -> [('left', 'Attribute'), ('ops', ['Lt']), ('comparators', ['BinOp'])]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Expr', 'Expr', 'Assign', 'Return']), ('decorator_list', ['Name'])]": 1, "If -> [('test', 'Compare'), ('body', ['If', 'Assign', 'Assign', 'Expr']), ('orelse', ['Raise'])]": 1, "Tuple -> [('elts', ['List', 'Str', 'Num', 'Num', 'BinOp', 'BinOp']), ('ctx', 'Load')]": 1, "BinOp -> [('left', 'Attribute'), ('op', 'BitAnd'), ('right', 'UnaryOp')]": 1, "If -> [('test', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Expr', 'Return']), ('orelse', [])]": 1, "Print -> [('dest', 'NoneType'), ('values', ['Str', 'Name', 'Name']), ('nl', 'bool')]": 11, "Call -> [('func', 'Name'), ('args', ['Name', 'Call', 'BinOp']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "While -> [('test', 'Compare'), ('body', ['Assign', 'Expr', 'Assign', 'AugAssign']), ('orelse', [])]": 1, "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Expr']), ('orelse', ['Expr'])]": 3, "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'Import', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'If'])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Print']), ('orelse', ['If'])]": 1, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Print']), ('orelse', [])]": 5, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "Call -> [('func', 'Name'), ('args', ['List', 'Subscript', 'Subscript']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 4, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'With', 'Return']), ('decorator_list', ['Name'])]": 1, "ImportFrom -> [('module', 'str'), ('names', ['alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias']), ('level', 'int')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assert', 'Assign', 'Assign', 'ImportFrom', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assert', 'Assign', 'Assign', 'Assert', 'Assert', 'Assert', 'Assert', 'Assert', 'If', 'If', 'Assign', 'Assert', 'Assert', 'Assign', 'Assert', 'For']), ('decorator_list', [])]": 1, "If -> [('test', 'Call'), ('body', ['If', 'AugAssign', 'AugAssign', 'AugAssign']), ('orelse', ['Assign'])]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'ImportFrom', 'Assign', 'ClassDef'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'FunctionDef', 'FunctionDef', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'If', 'Assign', 'If', 'If', 'Assign', 'Assign', 'For', 'If', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'Expr', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'If', 'Expr', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'For', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'For', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', ['Name'])]": 1, "BoolOp -> [('op', 'Or'), ('values', ['Compare', 'UnaryOp'])]": 17, "If -> [('test', 'BoolOp'), ('body', ['Assign']), ('orelse', ['If'])]": 64, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]": 2, "If -> [('test', 'Name'), ('body', ['Assert', 'Assign']), ('orelse', ['Assign'])]": 6, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'Assign', 'If']), ('orelse', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'TryExcept']), ('orelse', [])]": 1, "BoolOp -> [('op', 'And'), ('values', ['Attribute', 'UnaryOp', 'Compare'])]": 4, "If -> [('test', 'Attribute'), ('body', ['Expr', 'Assign']), ('orelse', [])]": 8, "Call -> [('func', 'Attribute'), ('args', ['Attribute']), ('keywords', []), ('starargs', 'Name'), ('kwargs', 'NoneType')]": 6, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Expr', 'Expr', 'Assign']), ('decorator_list', [])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name'])]": 2, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'For', 'Expr', 'Expr', 'Assign', 'Expr']), ('orelse', [])]": 1, "Tuple -> [('elts', ['Subscript', 'Subscript', 'Name', 'Name']), ('ctx', 'Load')]": 1, "Tuple -> [('elts', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('ctx', 'Load')]": 16, "If -> [('test', 'Name'), ('body', ['Assign']), ('orelse', ['Assert'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'ImportFrom', 'Assign', 'If', 'If', 'If', 'Assign', 'Assign', 'If', 'Assign']), ('decorator_list', [])]": 1, "IfExp -> [('test', 'Name'), ('body', 'Name'), ('orelse', 'Name')]": 2, "Module -> [('body', ['Import', 'ImportFrom', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr'])]": 1, "If -> [('test', 'BoolOp'), ('body', ['Assign', 'If', 'Assign']), ('orelse', [])]": 2, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Str', 'Name', 'Name', 'List', 'List', 'List', 'List', 'List', 'List', 'List', 'Name', 'List', 'List', 'Dict', 'Name', 'Name', 'Name'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Call', 'Call', 'Name', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Call -> [('func', 'Name'), ('args', ['Name', 'Name', 'Dict']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 7, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'While']), ('orelse', [])]": 1, "List -> [('elts', ['BinOp', 'Num', 'Num']), ('ctx', 'Load')]": 1, "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['If', 'Assert']), ('orelse', [])]": 1, "UnaryOp -> [('op', 'UAdd'), ('operand', 'Num')]": 4, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'Import', 'Assign', 'Assign', 'FunctionDef', 'ClassDef', 'ClassDef', 'FunctionDef', 'FunctionDef'])]": 1, "AugAssign -> [('target', 'Attribute'), ('op', 'Add'), ('value', 'Name')]": 21, "AugAssign -> [('target', 'Attribute'), ('op', 'Mult'), ('value', 'Num')]": 7, "If -> [('test', 'Name'), ('body', ['Expr', 'Expr', 'Expr']), ('orelse', [])]": 8, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 83, "If -> [('test', 'BoolOp'), ('body', ['Expr', 'For']), ('orelse', ['If'])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Expr']), ('orelse', ['For'])]": 1, "Compare -> [('left', 'Str'), ('ops', ['Eq']), ('comparators', ['Attribute'])]": 5, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Global', 'Print', 'Assign', 'TryExcept', 'Print', 'Return']), ('decorator_list', [])]": 1, "Or -> <NULL>": 1535, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Tuple', 'Name', 'Tuple', 'Dict', 'Num', 'Tuple', 'Num'])]": 2, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'Assign']), ('orelse', ['Assign', 'Assign', 'Assign'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Dict']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 6, "Dict -> [('keys', ['Str', 'Str']), ('values', ['Dict', 'Name'])]": 1, "If -> [('test', 'Name'), ('body', ['Expr', 'Continue']), ('orelse', [])]": 3, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Expr', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'FunctionDef', 'FunctionDef', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Import', 'Assign', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Return']), ('orelse', ['Assign', 'If', 'Assign', 'For', 'Return'])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'If']), ('orelse', ['Return'])]": 1, "If -> [('test', 'Name'), ('body', ['Expr', 'Return']), ('orelse', ['Expr', 'Return'])]": 1, "BinOp -> [('left', 'BinOp'), ('op', 'Sub'), ('right', 'Name')]": 23, "If -> [('test', 'Num'), ('body', ['Assign', 'Assign', 'Expr', 'Print', 'Expr']), ('orelse', ['Assign', 'Print', 'Print', 'Expr'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'If', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'BoolOp'), ('body', ['Import', 'Import', 'Import', 'Import', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Print', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'For', 'Expr']), ('orelse', [])]": 1, "If -> [('test', 'BoolOp'), ('body', ['Assign', 'If', 'Assign', 'Expr']), ('orelse', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Name', 'Attribute']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "ListComp -> [('elt', 'UnaryOp'), ('generators', ['comprehension'])]": 5, "BoolOp -> [('op', 'And'), ('values', ['Call', 'Compare', 'UnaryOp'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'Return']), ('decorator_list', ['Call', 'Call', 'Name', 'Call', 'Call'])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name', 'Name']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "If -> [('test', 'Call'), ('body', ['Assign', 'If', 'Assign', 'If']), ('orelse', ['Assign', 'If', 'Expr'])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "BinOp -> [('left', 'Tuple'), ('op', 'Add'), ('right', 'Subscript')]": 1, "Tuple -> [('elts', ['Attribute', 'Num']), ('ctx', 'Load')]": 7, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'FunctionDef', 'Assign', 'Assign', 'Expr']), ('decorator_list', ['Name'])]": 1, "BoolOp -> [('op', 'Or'), ('values', ['Call', 'Call', 'Call', 'Call'])]": 2, "TryExcept -> [('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 1, "For -> [('target', 'Tuple'), ('iter', 'Name'), ('body', ['Assign', 'If', 'Expr', 'If']), ('orelse', [])]": 1, "If -> [('test', 'Name'), ('body', ['Assign']), ('orelse', ['Assign', 'For', 'Assign'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 6500, "BinOp -> [('left', 'Subscript'), ('op', 'Add'), ('right', 'Subscript')]": 50, "TryExcept -> [('body', ['If', 'If', 'Expr']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Subscript'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'TryExcept']), ('orelse', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Num', 'Num', 'Name', 'BinOp']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "Module -> [('body', ['Import', 'Import', 'Import', 'Expr', 'Assign', 'Expr', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'If', 'Return']), ('decorator_list', ['Name'])]": 1, "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['Print', 'Assign'])]": 6, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'Assign', 'If', 'Assign', 'For', 'If', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]": 1, "BinOp -> [('left', 'BinOp'), ('op', 'Pow'), ('right', 'Name')]": 3, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'AugAssign', 'AugAssign']), ('orelse', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Pass']), ('orelse', ['Pass'])]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['FunctionDef', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Name', 'Name', 'Str', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 10, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'If', 'Assign', 'If', 'Expr', 'Assign', 'If', 'Assign', 'If', 'If', 'Assign', 'Return']), ('decorator_list', [])]": 1, "IfExp -> [('test', 'Compare'), ('body', 'Name'), ('orelse', 'Call')]": 6, "Call -> [('func', 'Attribute'), ('args', ['Compare', 'BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 29, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'FunctionDef', 'FunctionDef', 'Assign', 'Assign', 'Assign'])]": 1, "Assert -> [('test', 'Subscript'), ('msg', 'NoneType')]": 15, "If -> [('test', 'BinOp'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For']), ('orelse', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Print', 'Expr']), ('orelse', ['Raise'])]": 1, "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['Assign', 'Assign', 'Assign', 'Assign'])]": 1, "IfExp -> [('test', 'Name'), ('body', 'Name'), ('orelse', 'Attribute')]": 6, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 3, "Tuple -> [('elts', ['Tuple', 'Tuple', 'Call']), ('ctx', 'Load')]": 2, "Tuple -> [('elts', ['BoolOp', 'Subscript', 'BoolOp']), ('ctx', 'Load')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'For', 'If']), ('decorator_list', [])]": 5, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'For', 'Assign', 'Assign']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Return']), ('orelse', ['Expr', 'Return'])]": 5, "If -> [('test', 'Name'), ('body', ['Assign', 'TryFinally']), ('orelse', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'While', 'Pass']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 6, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['For']), ('decorator_list', ['Name'])]": 9, "BinOp -> [('left', 'Num'), ('op', 'Mult'), ('right', 'UnaryOp')]": 2, "Call -> [('func', 'Name'), ('args', ['Num', 'Attribute', 'Num', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Tuple -> [('elts', ['Call', 'Call', 'BinOp', 'BinOp', 'BinOp', 'BinOp', 'BinOp', 'BinOp', 'BinOp', 'BinOp', 'BinOp', 'BinOp', 'BinOp', 'BinOp']), ('ctx', 'Load')]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'For']), ('orelse', ['For', 'Assign', 'Expr'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'UnaryOp', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "Module -> [('body', ['Import', 'ImportFrom', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'FunctionDef', 'ClassDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'ClassDef', 'FunctionDef', 'Assign'])]": 1, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'If', 'Assign']), ('orelse', [])]": 1, "TryExcept -> [('body', ['Delete']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 8, "Call -> [('func', 'Attribute'), ('args', ['Subscript', 'Subscript']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 19, "BinOp -> [('left', 'Str'), ('op', 'Mult'), ('right', 'Subscript')]": 5, "BoolOp -> [('op', 'And'), ('values', ['UnaryOp', 'Str'])]": 9, "If -> [('test', 'Name'), ('body', ['Assign']), ('orelse', ['Assign', 'Expr', 'Assign'])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'If', 'AugAssign']), ('orelse', [])]": 2, "ExceptHandler -> [('type', 'Attribute'), ('name', 'NoneType'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr'])]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'If', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'FunctionDef', 'While'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'For', 'Assign', 'For', 'For']), ('decorator_list', ['Name'])]": 1, "BinOp -> [('left', 'UnaryOp'), ('op', 'Div'), ('right', 'Num')]": 9, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'ImportFrom', 'ClassDef', 'FunctionDef'])]": 1, "Tuple -> [('elts', ['Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple']), ('ctx', 'Load')]": 1, "If -> [('test', 'Call'), ('body', ['Print', 'Expr']), ('orelse', ['Print'])]": 1, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Print']), ('orelse', [])]": 14, "If -> [('test', 'Name'), ('body', ['Expr', 'AugAssign']), ('orelse', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]": 2, "Compare -> [('left', 'BinOp'), ('ops', ['In']), ('comparators', ['Name'])]": 9, "If -> [('test', 'Name'), ('body', ['Assign', 'For', 'Expr', 'Return']), ('orelse', ['Return'])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', ['Call'])]": 2, "Call -> [('func', 'Attribute'), ('args', ['Call']), ('keywords', []), ('starargs', 'Name'), ('kwargs', 'NoneType')]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'ClassDef', 'Assign', 'FunctionDef', 'Assign', 'FunctionDef', 'Assign', 'Assign', 'FunctionDef', 'ClassDef'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Call', 'Name', 'Name', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['For']), ('decorator_list', ['Name', 'Name'])]": 1, "Call -> [('func', 'Call'), ('args', ['Dict', 'Dict']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 11, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['If', 'Assign', 'For', 'If']), ('orelse', [])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Tuple']), ('values', ['Str', 'Str', 'Str'])]": 2, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'ClassDef', 'ClassDef', 'ClassDef', 'Assign', 'ClassDef', 'ClassDef'])]": 1, "If -> [('test', 'Subscript'), ('body', ['Expr']), ('orelse', ['Expr'])]": 2, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Num', 'Str'])]": 2, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Assign', 'FunctionDef']), ('decorator_list', [])]": 8, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'TryExcept', 'If', 'If', 'For', 'Expr', 'Return']), ('decorator_list', ['Name', 'Name', 'Call', 'Call'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Call', 'Name', 'Num', 'Num', 'Num', 'Tuple', 'Tuple']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'If', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'Assign', 'Assign', 'For', 'Expr', 'Expr', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'Attribute'), ('body', ['Assign', 'If', 'Assign']), ('orelse', ['Assign'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Attribute', 'BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Name', 'Name', 'Name', 'Name'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Subscript', 'Name', 'Tuple']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'TryExcept', 'TryExcept', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'ClassDef', 'ClassDef'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'For', 'Expr']), ('decorator_list', [])]": 2, "If -> [('test', 'Call'), ('body', ['Return']), ('orelse', ['Return'])]": 58, "If -> [('test', 'Compare'), ('body', ['Assign', 'Expr', 'Assign', 'Expr', 'If']), ('orelse', [])]": 1, "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Import', 'FunctionDef', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'For']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'TryExcept', 'Expr', 'TryExcept']), ('decorator_list', [])]": 2, "If -> [('test', 'Call'), ('body', ['Raise']), ('orelse', ['Assign'])]": 2, "If -> [('test', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'Expr']), ('orelse', [])]": 1, "Dict -> [('keys', ['Str', 'Str']), ('values', ['Str', 'Dict'])]": 3, "If -> [('test', 'Name'), ('body', ['Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'If']), ('orelse', ['Expr'])]": 1, "Call -> [('func', 'Name'), ('args', []), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 3, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'AugAssign', 'If', 'If']), ('orelse', [])]": 1, "Tuple -> [('elts', ['Name', 'Name', 'Name', 'Call', 'Name']), ('ctx', 'Load')]": 1, "If -> [('test', 'BinOp'), ('body', ['Assign']), ('orelse', ['Assign', 'Assign'])]": 1, "ExceptHandler -> [('type', 'NoneType'), ('name', 'NoneType'), ('body', ['Expr', 'Expr', 'Print', 'Break'])]": 2, "If -> [('test', 'Call'), ('body', ['Assign', 'Assign']), ('orelse', ['Assign', 'Assign'])]": 13, "While -> [('test', 'Name'), ('body', ['Expr', 'Assign', 'Expr']), ('orelse', [])]": 1, "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'Assign', 'If']), ('orelse', [])]": 2, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Str', 'Name', 'Call'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If']), ('decorator_list', ['Attribute'])]": 2, "AugAssign -> [('target', 'Name'), ('op', 'Mult'), ('value', 'Attribute')]": 1, "BinOp -> [('left', 'List'), ('op', 'Mult'), ('right', 'Subscript')]": 5, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'TryExcept', 'Import', 'Import', 'Import', 'Import', 'Import', 'Global', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'BinOp', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 5, "Tuple -> [('elts', ['Name', 'Attribute', 'Attribute', 'Attribute']), ('ctx', 'Load')]": 2, "List -> [('elts', ['Str', 'Subscript', 'Call']), ('ctx', 'Load')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'TryExcept', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "If -> [('test', 'Call'), ('body', ['Assign', 'TryFinally']), ('orelse', [])]": 1, "For -> [('target', 'Name'), ('iter', 'BoolOp'), ('body', ['If']), ('orelse', [])]": 4, "If -> [('test', 'Compare'), ('body', ['If', 'Assign', 'Assign', 'Assign', 'For', 'Assign']), ('orelse', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Expr']), ('orelse', [])]": 73, "If -> [('test', 'BoolOp'), ('body', ['If', 'ClassDef', 'ClassDef', 'ClassDef']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 4, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'TryExcept', 'If', 'If', 'If', 'For', 'Expr', 'Return']), ('decorator_list', ['Name', 'Name', 'Call', 'Call'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Global', 'If', 'Return']), ('decorator_list', [])]": 3, "While -> [('test', 'Num'), ('body', ['If', 'Assign']), ('orelse', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Assert', 'For']), ('orelse', ['If'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'FunctionDef', 'FunctionDef', 'Return']), ('decorator_list', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Name', 'Name']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'Name')]": 1, "Module -> [('body', ['Import', 'Assign', 'Expr', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'For', 'Assign', 'Expr', 'Expr', 'Assign', 'For', 'Assign', 'For', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Expr', 'Expr'])]": 1, "TryExcept -> [('body', ['Assign', 'For', 'AugAssign', 'AugAssign', 'Assign']), ('handlers', ['ExceptHandler', 'ExceptHandler']), ('orelse', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'Assign', 'Expr', 'Assign', 'If', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Attribute', 'Str', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 23, "If -> [('test', 'Call'), ('body', ['Assign', 'TryExcept', 'For']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Return']), ('decorator_list', [])]": 319, "If -> [('test', 'Name'), ('body', ['Expr', 'AugAssign', 'For']), ('orelse', [])]": 1, "Tuple -> [('elts', ['Attribute', 'Call', 'Name']), ('ctx', 'Load')]": 1, "For -> [('target', 'Name'), ('iter', 'Subscript'), ('body', ['Assert']), ('orelse', [])]": 3, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', ['Call'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Num', 'Name', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 9, "Tuple -> [('elts', ['Num', 'Num', 'Name', 'Name']), ('ctx', 'Load')]": 5, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'While', 'Expr']), ('decorator_list', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Subscript', 'BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 4, "Call -> [('func', 'Name'), ('args', ['Attribute', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 31, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'Assign', 'AugAssign', 'AugAssign', 'Assign', 'AugAssign', 'AugAssign', 'Expr', 'Assign']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'ImportFrom', 'Assign', 'Assign', 'For', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 1, "Module -> [('body', ['Import', 'ImportFrom', 'Import', 'Import', 'Import', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Print', 'Print', 'Expr', 'Expr'])]": 1, "ClassDef -> [('name', 'str'), ('bases', []), ('body', ['Expr']), ('decorator_list', [])]": 1, "If -> [('test', 'Call'), ('body', ['If', 'Expr', 'Expr']), ('orelse', ['Expr'])]": 1, "List -> [('elts', ['Str', 'BinOp', 'Str', 'Str', 'Str']), ('ctx', 'Load')]": 1, "ClassDef -> [('name', 'str'), ('bases', []), ('body', ['Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "While -> [('test', 'Compare'), ('body', ['Assign', 'Expr', 'Assign', 'Assign', 'If']), ('orelse', [])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Call', 'Name', 'Name'])]": 3, "If -> [('test', 'Compare'), ('body', ['Assign', 'For', 'Return']), ('orelse', ['If'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['TryExcept', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Call']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 131, "If -> [('test', 'Attribute'), ('body', ['Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign']), ('orelse', [])]": 1, "TryFinally -> [('body', ['If', 'Assign', 'Expr', 'Expr']), ('finalbody', ['If'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'For']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Return']), ('decorator_list', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Subscript', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 54, "If -> [('test', 'Attribute'), ('body', ['Expr', 'If', 'Expr']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'For', 'Return']), ('decorator_list', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 2, "TryExcept -> [('body', ['If', 'Expr', 'For']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 1, "If -> [('test', 'BoolOp'), ('body', ['Expr', 'Return']), ('orelse', [])]": 20, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Global', 'TryExcept', 'Expr', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Attribute', 'Num', 'Attribute', 'Name'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Print']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['TryExcept', 'Assign']), ('decorator_list', [])]": 3, "TryFinally -> [('body', ['Assign', 'If', 'Assign', 'If']), ('finalbody', ['Assign'])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str'])]": 1, "BinOp -> [('left', 'Call'), ('op', 'Add'), ('right', 'Subscript')]": 6, "If -> [('test', 'Subscript'), ('body', ['Return']), ('orelse', ['Return'])]": 2, "Call -> [('func', 'Name'), ('args', ['Num', 'Num']), ('keywords', ['keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Attribute', 'Attribute', 'Call', 'Call', 'Attribute', 'Dict', 'Attribute'])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['BoolOp', 'BinOp', 'BinOp'])]": 1, "Expr -> [('value', 'Attribute')]": 59, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'FunctionDef', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "Tuple -> [('elts', ['Name', 'Str', 'Str', 'BinOp']), ('ctx', 'Load')]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "Tuple -> [('elts', ['Call', 'Num', 'Call', 'Name']), ('ctx', 'Load')]": 1, "If -> [('test', 'UnaryOp'), ('body', ['Expr', 'Expr', 'Expr']), ('orelse', [])]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Expr', 'For', 'Expr']), ('decorator_list', [])]": 1, "Dict -> [('keys', ['Attribute', 'Attribute', 'Attribute']), ('values', ['Num', 'Num', 'Num'])]": 1, "Call -> [('func', 'Name'), ('args', ['Name', 'Attribute', 'Call', 'Attribute', 'Attribute', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Tuple -> [('elts', ['Name', 'Name', 'Call']), ('ctx', 'Load')]": 41, "Compare -> [('left', 'Name'), ('ops', ['GtE']), ('comparators', ['Attribute'])]": 10, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "TryExcept -> [('body', ['Assign', 'Expr', 'Expr']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 6, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 3, "List -> [('elts', ['Name', 'Attribute']), ('ctx', 'Load')]": 8, "BinOp -> [('left', 'Attribute'), ('op', 'Add'), ('right', 'UnaryOp')]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'TryExcept', 'TryExcept', 'If']), ('decorator_list', [])]": 2, "ClassDef -> [('name', 'str'), ('bases', ['Name', 'Name']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 2, "If -> [('test', 'Compare'), ('body', ['ImportFrom', 'Assign', 'FunctionDef', 'Expr']), ('orelse', [])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Call'])]": 6, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Name', 'Name', 'Name', 'Call', 'Name', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 3, "Tuple -> [('elts', ['Name', 'Name', 'Name', 'Str', 'Str']), ('ctx', 'Load')]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "If -> [('test', 'BoolOp'), ('body', ['AugAssign']), ('orelse', ['Assign', 'Assign', 'If'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'TryExcept', 'If', 'If', 'If', 'If', 'Assign', 'TryExcept']), ('decorator_list', [])]": 1, "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['ClassDef', 'Assign'])]": 1, "Compare -> [('left', 'Attribute'), ('ops', ['NotEq']), ('comparators', ['BinOp'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'If', 'TryExcept', 'Return']), ('decorator_list', [])]": 1, "While -> [('test', 'Name'), ('body', ['TryExcept']), ('orelse', [])]": 8, "ClassDef -> [('name', 'str'), ('bases', ['Name', 'Name', 'Name']), ('body', ['Expr', 'FunctionDef']), ('decorator_list', [])]": 4, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'FunctionDef', 'TryFinally']), ('decorator_list', [])]": 1, "Tuple -> [('elts', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('ctx', 'Load')]": 1, "If -> [('test', 'BoolOp'), ('body', ['ImportFrom', 'Expr']), ('orelse', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Delete']), ('decorator_list', [])]": 4, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'FunctionDef', 'Assign', 'If', 'For', 'Return']), ('decorator_list', [])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['Call', 'Attribute', 'Name'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Call', 'Name', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "For -> [('target', 'Name'), ('iter', 'Subscript'), ('body', ['Assign', 'If', 'If', 'Assert', 'Expr']), ('orelse', [])]": 1, "If -> [('test', 'Call'), ('body', ['Assert']), ('orelse', [])]": 1, "Call -> [('func', 'Subscript'), ('args', ['Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 5, "Call -> [('func', 'Name'), ('args', ['Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2603, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Print', 'If']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]": 2, "TryExcept -> [('body', ['Expr']), ('handlers', ['ExceptHandler']), ('orelse', ['Expr'])]": 25, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'While', 'While', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'If', 'Return']), ('decorator_list', [])]": 1, "BinOp -> [('left', 'Attribute'), ('op', 'Mult'), ('right', 'Attribute')]": 12, "Call -> [('func', 'Attribute'), ('args', ['Num', 'Attribute', 'Attribute', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'ImportFrom', 'ClassDef', 'Assign', 'Assign', 'For']), ('decorator_list', [])]": 1, "Tuple -> [('elts', ['Attribute', 'Attribute', 'Call']), ('ctx', 'Load')]": 5, "Subscript -> [('value', 'Name'), ('slice', 'Index'), ('ctx', 'Del')]": 104, "Tuple -> [('elts', ['Attribute', 'Attribute', 'Call', 'Call']), ('ctx', 'Load')]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Expr', 'FunctionDef', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Expr', 'For', 'Expr']), ('orelse', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign']), ('orelse', ['Assign', 'If'])]": 7, "If -> [('test', 'Attribute'), ('body', ['Assign', 'For']), ('orelse', [])]": 3, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'If', 'If', 'If', 'Assign', 'Assign', 'Expr']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'Assign']), ('decorator_list', [])]": 2, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'Assign']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 50, "Call -> [('func', 'Attribute'), ('args', ['Name', 'List', 'Tuple']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'Expr', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'Return']), ('decorator_list', [])]": 1, "BoolOp -> [('op', 'And'), ('values', ['Call', 'Call', 'Call', 'UnaryOp'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'TryExcept']), ('decorator_list', [])]": 2, "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'FunctionDef', 'ClassDef'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'If', 'Expr', 'TryFinally', 'Return']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Print', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'Assign', 'FunctionDef', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "Call -> [('func', 'Call'), ('args', ['Attribute', 'Attribute', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'If', 'TryExcept', 'If', 'Assign', 'If', 'If', 'Raise']), ('decorator_list', [])]": 1, "Tuple -> [('elts', ['Attribute', 'Name', 'Lambda']), ('ctx', 'Load')]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Name'])]": 69, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Expr', 'Assign', 'FunctionDef']), ('decorator_list', [])]": 6, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]": 2, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Global', 'Assign', 'For', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]": 1, "BinOp -> [('left', 'Call'), ('op', 'BitOr'), ('right', 'BinOp')]": 3, "Call -> [('func', 'Name'), ('args', ['Num', 'Name', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 7, "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['Print', 'Expr'])]": 3, "Compare -> [('left', 'Name'), ('ops', ['NotEq']), ('comparators', ['Subscript'])]": 4, "TryExcept -> [('body', ['For', 'Expr']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Name', 'BoolOp', 'Name', 'Name', 'Num'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'FunctionDef', 'FunctionDef', 'If']), ('decorator_list', [])]": 2, "Call -> [('func', 'Attribute'), ('args', ['Num', 'Name', 'Name']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'If', 'Assign', 'Assign', 'If', 'For', 'Return']), ('decorator_list', [])]": 2, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "Tuple -> [('elts', ['Name', 'Name', 'Tuple']), ('ctx', 'Store')]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'Return']), ('decorator_list', [])]": 3, "If -> [('test', 'UnaryOp'), ('body', ['Assign']), ('orelse', ['If', 'Expr'])]": 1, "List -> [('elts', ['Name', 'Num', 'Name']), ('ctx', 'Load')]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'FunctionDef', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "BinOp -> [('left', 'Tuple'), ('op', 'Mult'), ('right', 'Name')]": 4, "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['Call', 'Call', 'Name'])]": 6, "IfExp -> [('test', 'Attribute'), ('body', 'Num'), ('orelse', 'Num')]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('orelse', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'While', 'Expr', 'Assign', 'Expr', 'If', 'Return']), ('decorator_list', ['Call'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Print', 'Assign', 'For', 'Print', 'Assign', 'Assign', 'If', 'Return']), ('decorator_list', [])]": 1, "TryFinally -> [('body', ['Expr', 'Exec']), ('finalbody', ['Assign'])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 62, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Str', 'Str', 'Str'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['For', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'If', 'For']), ('decorator_list', [])]": 1, "BoolOp -> [('op', 'Or'), ('values', ['Name', 'Tuple'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assert', 'Return']), ('decorator_list', [])]": 35, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'For', 'If', 'Assign', 'Return']), ('decorator_list', [])]": 1, "While -> [('test', 'Name'), ('body', ['If', 'Assign', 'Assign', 'TryExcept', 'Assign', 'Expr', 'Break']), ('orelse', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'While', 'Assign']), ('orelse', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['If', 'Expr', 'If', 'If', 'If', 'Expr', 'If', 'If', 'If', 'For', 'If']), ('orelse', [])]": 1, "If -> [('test', 'Name'), ('body', ['Assign', 'If']), ('orelse', ['Assign'])]": 14, "Call -> [('func', 'Attribute'), ('args', []), ('keywords', ['keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 348, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'ClassDef', 'ClassDef', 'FunctionDef'])]": 1, "Dict -> [('keys', ['Name']), ('values', ['Subscript'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assert', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Tuple', 'Num', 'Call', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Str', 'Call', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'Assign', 'Assign', 'If', 'If', 'If', 'If', 'If', 'Return']), ('decorator_list', [])]": 1, "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['Expr', 'Return'])]": 24, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 3, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'List', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'If', 'If', 'If']), ('orelse', [])]": 1, "TryExcept -> [('body', ['Assign', 'Assign', 'Assign', 'With', 'Assign', 'Expr']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 1, "TryExcept -> [('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 2, "If -> [('test', 'Call'), ('body', ['Expr', 'Return']), ('orelse', ['If'])]": 2, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'ClassDef', 'FunctionDef']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]": 3, "Call -> [('func', 'Attribute'), ('args', ['Num', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 97, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]": 2, "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['If', 'Pass'])]": 1, "Compare -> [('left', 'Attribute'), ('ops', ['NotEq']), ('comparators', ['Call'])]": 8, "If -> [('test', 'BoolOp'), ('body', ['Raise']), ('orelse', ['If'])]": 4, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name'])]": 3, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'TryExcept', 'TryExcept', 'Import', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'If', 'ClassDef', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'ClassDef', 'ClassDef', 'ClassDef', 'FunctionDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'FunctionDef', 'FunctionDef'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assert', 'AugAssign', 'Expr', 'AugAssign']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Str', 'Name']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 10, "Tuple -> [('elts', ['Attribute', 'Str', 'Num']), ('ctx', 'Load')]": 24, "TryExcept -> [('body', ['Assign']), ('handlers', ['ExceptHandler']), ('orelse', ['Assign', 'If'])]": 2, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]": 1, "If -> [('test', 'Call'), ('body', ['TryExcept', 'Assign']), ('orelse', ['TryExcept'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assert', 'Assign', 'If', 'Assign', 'Assign', 'Expr', 'Assign', 'Return']), ('decorator_list', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Attribute', 'Attribute']), ('body', ['Pass']), ('decorator_list', [])]": 1, "If -> [('test', 'BoolOp'), ('body', ['Assign', 'If', 'Assign', 'For', 'If', 'Assign', 'If', 'If']), ('orelse', ['If'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Return']), ('decorator_list', [])]": 7, "ExceptHandler -> [('type', 'NoneType'), ('name', 'NoneType'), ('body', ['ClassDef'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'If', 'If', 'Assign', 'Assign', 'For', 'Return']), ('decorator_list', [])]": 1, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Print']), ('orelse', [])]": 1, "Module -> [('body', ['Import', 'ImportFrom', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'If', 'Expr', 'Return']), ('decorator_list', [])]": 2, "ExceptHandler -> [('type', 'Name'), ('name', 'Name'), ('body', ['If', 'If', 'Return'])]": 1, "BinOp -> [('left', 'Attribute'), ('op', 'Div'), ('right', 'Num')]": 59, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'TryExcept']), ('decorator_list', [])]": 4, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['Name', 'Compare', 'Name'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign']), ('decorator_list', [])]": 1, "While -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Print', 'Assign', 'If', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign']), ('orelse', [])]": 1, "If -> [('test', 'Attribute'), ('body', ['Assign', 'Assign']), ('orelse', ['Assign', 'Assign'])]": 4, "Call -> [('func', 'Name'), ('args', ['Compare']), ('keywords', []), ('starargs', 'Name'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 3, "Call -> [('func', 'Attribute'), ('args', ['Num', 'Num', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 66, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assert', 'Assign', 'Assign', 'Assign', 'Expr', 'Assert']), ('decorator_list', [])]": 1, "BoolOp -> [('op', 'Or'), ('values', ['Compare', 'Compare', 'UnaryOp'])]": 3, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'Name')]": 71, "TryExcept -> [('body', ['Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('handlers', ['ExceptHandler', 'ExceptHandler']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 2, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'ClassDef', 'ClassDef', 'Assign', 'FunctionDef', 'ClassDef', 'ClassDef', 'FunctionDef'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Subscript', 'BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 9, "For -> [('target', 'Name'), ('iter', 'List'), ('body', ['Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'Assign', 'If', 'If', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['For', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'TryExcept', 'If', 'Assign', 'Return']), ('decorator_list', ['Name', 'Name', 'Call', 'Call'])]": 1, "For -> [('target', 'Name'), ('iter', 'Subscript'), ('body', ['Assign', 'Expr']), ('orelse', [])]": 4, "Yield -> [('value', 'Subscript')]": 11, "Assert -> [('test', 'Num'), ('msg', 'Str')]": 5, "Compare -> [('left', 'Tuple'), ('ops', ['NotIn']), ('comparators', ['Attribute'])]": 2, "Call -> [('func', 'Name'), ('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Print', 'Assign', 'Expr', 'Print']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Return']), ('decorator_list', ['Call'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Tuple', 'Name']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 8, "Dict -> [('keys', ['Str', 'Str']), ('values', ['Name', 'Name'])]": 103, "For -> [('target', 'Name'), ('iter', 'List'), ('body', ['Assign', 'For', 'Assign', 'For']), ('orelse', [])]": 1, "Tuple -> [('elts', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('ctx', 'Load')]": 1, "Module -> [('body', ['Import', 'ImportFrom', 'Import', 'Import', 'Import', 'ImportFrom', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'Import', 'Assign', 'ClassDef', 'ClassDef', 'FunctionDef', 'Expr'])]": 1, "While -> [('test', 'Name'), ('body', ['If', 'While', 'If', 'If']), ('orelse', [])]": 1, "Module -> [('body', ['Import', 'Expr', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]": 1, "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Expr']), ('orelse', ['Assign'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Global', 'Assign', 'TryExcept', 'Return']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Import', 'Assign', 'Import', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "BinOp -> [('left', 'Call'), ('op', 'Mult'), ('right', 'Num')]": 45, "If -> [('test', 'Compare'), ('body', ['Return']), ('orelse', ['Assign', 'Expr', 'Assign', 'Return'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'If', 'Expr', 'Assign', 'If', 'Assign', 'Assign', 'If', 'Assign', 'If', 'If', 'If', 'TryExcept', 'If', 'ImportFrom', 'Assign', 'Return']), ('decorator_list', ['Call', 'Name'])]": 1, "If -> [('test', 'Compare'), ('body', ['Expr', 'Assign', 'Expr', 'Assign', 'Expr']), ('orelse', [])]": 2, "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'If']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 4, "List -> [('elts', ['Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Name', 'Attribute', 'Attribute']), ('ctx', 'Load')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Num', 'Num', 'Num', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 11, "BinOp -> [('left', 'Num'), ('op', 'Sub'), ('right', 'Num')]": 8, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'With', 'With', 'With']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'TryExcept']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Expr', 'Expr', 'Assign', 'Expr']), ('orelse', [])]": 1, "TryExcept -> [('body', ['Expr']), ('handlers', ['ExceptHandler', 'ExceptHandler']), ('orelse', [])]": 18, "If -> [('test', 'Compare'), ('body', ['Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr']), ('orelse', ['Assign', 'Assign', 'Assign', 'Expr', 'Expr'])]": 1, "Yield -> [('value', 'Num')]": 5, "Call -> [('func', 'Attribute'), ('args', ['Name', 'BinOp', 'Name', 'Name', 'Num', 'Attribute', 'Name', 'Name', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "If -> [('test', 'Num'), ('body', ['Assign', 'Expr', 'Expr', 'Expr']), ('orelse', ['Assign', 'Expr'])]": 1, "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'TryExcept', 'TryExcept', 'ImportFrom', 'FunctionDef', 'ClassDef'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'If', 'Return']), ('decorator_list', [])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Attribute', 'Attribute', 'Call'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Return']), ('decorator_list', [])]": 118, "If -> [('test', 'Compare'), ('body', ['AugAssign', 'If', 'Return']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'Expr', 'TryFinally']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['AugAssign', 'AugAssign']), ('orelse', [])]": 2, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['If', 'If', 'Assign', 'If', 'If']), ('orelse', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Num', 'Dict']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'TryExcept', 'Import', 'ImportFrom', 'ImportFrom', 'ClassDef'])]": 1, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'ClassDef', 'ClassDef', 'ClassDef'])]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'ImportFrom', 'ImportFrom', 'ClassDef'])]": 1, "For -> [('target', 'Name'), ('iter', 'BinOp'), ('body', ['Expr']), ('orelse', [])]": 7, "If -> [('test', 'Name'), ('body', ['Assign', 'For', 'If', 'Return', 'Assign', 'For', 'If', 'Return']), ('orelse', [])]": 1, "ExceptHandler -> [('type', 'Tuple'), ('name', 'Name'), ('body', ['Expr', 'Assign'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'Call'), ('body', ['Assign']), ('orelse', ['Assign'])]": 202, "If -> [('test', 'Name'), ('body', ['Assign', 'For', 'If', 'If']), ('orelse', ['Assign', 'Assign', 'Assign'])]": 1, "BinOp -> [('left', 'List'), ('op', 'Add'), ('right', 'Attribute')]": 7, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'ImportFrom', 'Expr', 'ImportFrom', 'Expr', 'ImportFrom', 'If', 'ImportFrom', 'If', 'For', 'Return']), ('decorator_list', [])]": 1, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['AugAssign', 'AugAssign']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assert', 'Assign', 'For', 'Return']), ('decorator_list', ['Name'])]": 1, "Module -> [('body', ['Import', 'TryExcept', 'Import', 'ImportFrom', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 5, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Expr']), ('orelse', [])]": 1, "If -> [('test', 'Attribute'), ('body', ['Assign', 'Expr', 'Expr']), ('orelse', ['Expr'])]": 1, "If -> [('test', 'UnaryOp'), ('body', ['Expr', 'Assign', 'Expr']), ('orelse', [])]": 1, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'If', 'ClassDef', 'ImportFrom', 'ImportFrom', 'ImportFrom'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'If', 'Assign', 'If', 'Assign', 'If', 'If', 'Return']), ('decorator_list', [])]": 1, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef'])]": 3, "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'For']), ('orelse', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Expr', 'Return']), ('orelse', ['Assign', 'If'])]": 1, "Assign -> [('targets', ['Subscript']), ('value', 'Tuple')]": 65, "Compare -> [('left', 'Attribute'), ('ops', ['NotIn']), ('comparators', ['Name'])]": 25, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Dict', 'Dict', 'Dict', 'Dict', 'Dict', 'Dict', 'Dict', 'Dict', 'Dict', 'Dict', 'Dict', 'Dict'])]": 1, "Subscript -> [('value', 'Subscript'), ('slice', 'ExtSlice'), ('ctx', 'Load')]": 5, "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr']), ('orelse', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['Assign', 'If', 'If', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'AugAssign']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'If', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "If -> [('test', 'Name'), ('body', ['Assign', 'Assign', 'Expr', 'For']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 4, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Expr', 'Assign', 'Assign']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'If']), ('decorator_list', ['Name'])]": 2, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Print', 'For', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Print', 'Expr', 'Assign', 'Expr', 'Expr', 'If']), ('orelse', [])]": 1, "While -> [('test', 'BoolOp'), ('body', ['Expr', 'AugAssign', 'AugAssign']), ('orelse', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Subscript', 'Attribute', 'Attribute', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "TryExcept -> [('body', ['Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'If']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 3, "Call -> [('func', 'Attribute'), ('args', ['Call']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'Name')]": 1, "BinOp -> [('left', 'Name'), ('op', 'Add'), ('right', 'Name')]": 272, "BinOp -> [('left', 'Name'), ('op', 'FloorDiv'), ('right', 'Attribute')]": 1, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'TryExcept', 'Return']), ('decorator_list', ['Name'])]": 1, "ClassDef -> [('name', 'str'), ('bases', []), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "Assign -> [('targets', ['Attribute']), ('value', 'Dict')]": 359, "If -> [('test', 'Name'), ('body', ['Return']), ('orelse', ['Assign', 'Return'])]": 1, "Call -> [('func', 'Name'), ('args', ['List']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 166, "BoolOp -> [('op', 'And'), ('values', ['Compare', 'Name', 'Attribute'])]": 1, "If -> [('test', 'Compare'), ('body', ['Expr', 'If']), ('orelse', ['Raise'])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'Assign']), ('orelse', ['Print', 'Return'])]": 1, "Compare -> [('left', 'Subscript'), ('ops', ['Is']), ('comparators', ['Name'])]": 26, "Call -> [('func', 'Name'), ('args', ['Attribute', 'Attribute', 'Attribute', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 3, "While -> [('test', 'Compare'), ('body', ['Assign', 'While', 'Assign']), ('orelse', [])]": 3, "Call -> [('func', 'Name'), ('args', ['Name', 'Name', 'Attribute', 'Name']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "Call -> [('func', 'Attribute'), ('args', []), ('keywords', []), ('starargs', 'Name'), ('kwargs', 'Name')]": 132, "If -> [('test', 'UnaryOp'), ('body', ['If']), ('orelse', ['Expr', 'Expr', 'For'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['FunctionDef', 'Expr', 'For']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Subscript', 'Subscript', 'Subscript', 'List']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Return']), ('decorator_list', [])]": 3, "IfExp -> [('test', 'Attribute'), ('body', 'Attribute'), ('orelse', 'Call')]": 1, "List -> [('elts', ['Name', 'Name', 'Name', 'Call', 'Name']), ('ctx', 'Load')]": 2, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'For', 'For', 'Expr']), ('orelse', [])]": 2, "Call -> [('func', 'Attribute'), ('args', ['ListComp', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Call -> [('func', 'Name'), ('args', ['Call', 'BinOp']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 5, "Call -> [('func', 'Attribute'), ('args', ['List', 'Attribute', 'List', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "If -> [('test', 'Compare'), ('body', ['If', 'Assign', 'Assign', 'Expr']), ('orelse', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Print', 'Assign']), ('orelse', [])]": 4, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'If']), ('decorator_list', [])]": 9, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'TryExcept', 'Assign', 'If', 'Assign', 'If', 'Return']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'ClassDef', 'Expr', 'Expr', 'FunctionDef', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'ImportFrom', 'ImportFrom', 'TryFinally', 'TryExcept', 'Return']), ('decorator_list', [])]": 2, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['If', 'Expr', 'Assign', 'Assign', 'For', 'Assign']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Return']), ('decorator_list', ['Attribute'])]": 3, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['If', 'TryExcept', 'TryExcept', 'If', 'If', 'If', 'If', 'Expr', 'Assign', 'Assign', 'Expr']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'Assign', 'For']), ('decorator_list', [])]": 2, "BinOp -> [('left', 'BoolOp'), ('op', 'Add'), ('right', 'BoolOp')]": 1, "Compare -> [('left', 'Attribute'), ('ops', ['IsNot']), ('comparators', ['Name'])]": 243, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Str', 'Str', 'Str', 'Str', 'Name'])]": 2, "Call -> [('func', 'Attribute'), ('args', ['Str', 'Attribute', 'Attribute', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If']), ('decorator_list', ['Name'])]": 20, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Print', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]": 1, "Return -> [('value', 'Lambda')]": 4, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'If']), ('decorator_list', [])]": 14, "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Return']), ('orelse', ['Assign', 'Assign', 'Assign', 'TryExcept', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Expr', 'Expr'])]": 1, "If -> [('test', 'Call'), ('body', ['Assign', 'If', 'Expr', 'Expr', 'Return']), ('orelse', [])]": 1, "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['Import', 'Import'])]": 1, "arguments -> [('args', ['Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Dict'])]": 4, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'Assign', 'Expr', 'Return']), ('decorator_list', ['Name'])]": 1, "Compare -> [('left', 'Attribute'), ('ops', ['NotIn']), ('comparators', ['Call'])]": 6, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'For', 'If', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Assign', 'If']), ('decorator_list', [])]": 6, "List -> [('elts', ['Dict', 'Dict', 'Dict', 'Dict', 'Dict']), ('ctx', 'Load')]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'ImportFrom', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'For', 'Assign', 'For', 'Expr', 'If', 'Expr', 'Expr', 'If', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'If', 'Assign', 'Import', 'Assign', 'Expr']), ('decorator_list', [])]": 2, "Assign -> [('targets', ['Name', 'Tuple']), ('value', 'Call')]": 3, "BoolOp -> [('op', 'Or'), ('values', ['BoolOp', 'Name'])]": 32, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'If', 'Assign', 'If', 'Assign', 'If', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Print']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'For', 'For', 'Return']), ('decorator_list', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Subscript', 'UnaryOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Expr', 'If', 'If', 'Expr', 'If', 'Expr', 'Assign', 'If', 'Expr', 'Return']), ('decorator_list', ['Call'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'If', 'Assign']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Expr', 'Return']), ('orelse', ['Assign', 'Expr', 'Expr'])]": 1, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Assign', 'If', 'Expr', 'Assign', 'Assign', 'Expr']), ('orelse', [])]": 1, "While -> [('test', 'Name'), ('body', ['Assign', 'For']), ('orelse', [])]": 2, "Call -> [('func', 'Name'), ('args', ['Str', 'Attribute', 'Name', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 6, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'If', 'Assign', 'Assign', 'If', 'Return']), ('decorator_list', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name', 'Name', 'Name', 'Name', 'Name']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', ['Call'])]": 1, "Call -> [('func', 'Name'), ('args', ['Num', 'Num', 'Num', 'Name']), ('keywords', ['keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 3, "Call -> [('func', 'Name'), ('args', ['Name']), ('keywords', ['keyword']), ('starargs', 'Name'), ('kwargs', 'Name')]": 1, "If -> [('test', 'BoolOp'), ('body', ['Print', 'Continue']), ('orelse', [])]": 2, "For -> [('target', 'Name'), ('iter', 'ListComp'), ('body', ['Assign', 'If']), ('orelse', [])]": 1, "Tuple -> [('elts', ['Str', 'Subscript']), ('ctx', 'Load')]": 4, "Call -> [('func', 'Name'), ('args', []), ('keywords', ['keyword']), ('starargs', 'Name'), ('kwargs', 'NoneType')]": 3, "If -> [('test', 'Subscript'), ('body', ['Expr']), ('orelse', ['Expr', 'If'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 4, "If -> [('test', 'Compare'), ('body', ['Assign']), ('orelse', ['Return'])]": 4, "Compare -> [('left', 'BinOp'), ('ops', ['In']), ('comparators', ['Subscript'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'If', 'Expr', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'ImportFrom', 'Assign', 'Expr', 'Assign', 'If', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'UnaryOp'), ('body', ['Expr']), ('orelse', ['Assign', 'For', 'Expr'])]": 5, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'TryExcept', 'Assign', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 2, "ClassDef -> [('name', 'str'), ('bases', []), ('body', ['Assign', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 7, "Call -> [('func', 'Name'), ('args', ['BinOp', 'Str', 'Dict']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Attribute -> [('value', 'BinOp'), ('attr', 'str'), ('ctx', 'Load')]": 51, "Call -> [('func', 'Name'), ('args', ['Attribute', 'BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 27, "Call -> [('func', 'Name'), ('args', ['Name', 'BinOp', 'BinOp', 'Num', 'Name']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Break']), ('orelse', ['Assert'])]": 1, "If -> [('test', 'Name'), ('body', ['Assign', 'Assign']), ('orelse', ['Assign', 'Expr', 'Assign', 'Assign', 'Expr'])]": 1, "If -> [('test', 'Compare'), ('body', ['If', 'Expr', 'Expr', 'Expr']), ('orelse', ['Expr', 'Expr'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'TryExcept', 'TryExcept', 'Assign', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 1, "ExceptHandler -> [('type', 'Name'), ('name', 'Name'), ('body', ['Expr'])]": 98, "If -> [('test', 'Call'), ('body', ['Assign', 'Assign']), ('orelse', ['Assign', 'Expr'])]": 3, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'For', 'Expr', 'Expr']), ('orelse', [])]": 1, "TryExcept -> [('body', ['Expr', 'Assert']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 6, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['TryExcept', 'Assign', 'Assign', 'Expr', 'Return']), ('decorator_list', [])]": 3, "If -> [('test', 'Call'), ('body', ['Assign', 'If']), ('orelse', ['Expr', 'Expr'])]": 1, "Call -> [('func', 'Name'), ('args', []), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 3, "ExceptHandler -> [('type', 'Attribute'), ('name', 'NoneType'), ('body', ['Expr', 'Assign'])]": 4, "With -> [('context_expr', 'Attribute'), ('optional_vars', 'NoneType'), ('body', ['Expr', 'Return'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Return']), ('decorator_list', [])]": 1, "List -> [('elts', ['Num', 'Num', 'BinOp', 'BinOp']), ('ctx', 'Load')]": 1, "If -> [('test', 'Compare'), ('body', ['If', 'Assign', 'For']), ('orelse', [])]": 2, "BinOp -> [('left', 'UnaryOp'), ('op', 'Add'), ('right', 'Name')]": 1, "Tuple -> [('elts', ['Name', 'Name', 'Subscript', 'Name']), ('ctx', 'Load')]": 1, "Tuple -> [('elts', ['Call', 'Attribute', 'Attribute', 'Attribute']), ('ctx', 'Load')]": 1, "keyword -> [('arg', 'str'), ('value', 'Compare')]": 13, "If -> [('test', 'Call'), ('body', ['If', 'Return']), ('orelse', ['If'])]": 2, "While -> [('test', 'BoolOp'), ('body', ['If', 'For']), ('orelse', [])]": 1, "BinOp -> [('left', 'BinOp'), ('op', 'Sub'), ('right', 'Attribute')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Expr', 'Assign', 'Assign', 'For', 'For', 'Assign', 'Assign']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'ClassDef', 'Assign', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['FunctionDef', 'Assign', 'Assign', 'Return']), ('decorator_list', ['Name'])]": 1, "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'Assign', 'Assign', 'Assign', 'Assign', 'ClassDef', 'ClassDef', 'ClassDef', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]": 1, "Dict -> [('keys', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('values', ['Num', 'Num', 'Num', 'Num', 'Num', 'Num'])]": 2, "Module -> [('body', ['Import', 'Import', 'TryExcept', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef'])]": 1, "Raise -> [('type', 'Call'), ('inst', 'NoneType'), ('tback', 'NoneType')]": 1468, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assert', 'Assign', 'Assign', 'For', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'BoolOp'), ('body', ['For', 'Delete', 'Delete', 'Delete', 'If', 'Assign', 'Expr']), ('orelse', ['AugAssign'])]": 1, "If -> [('test', 'Compare'), ('body', ['Expr', 'Expr', 'Assign']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assert', 'Assign', 'Assign', 'If']), ('decorator_list', [])]": 1, "TryFinally -> [('body', ['Return']), ('finalbody', ['Expr', 'Expr'])]": 1, "TryExcept -> [('body', ['Assign', 'If', 'If']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 2, "If -> [('test', 'UnaryOp'), ('body', ['If', 'Expr', 'Continue']), ('orelse', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'ClassDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef']), ('decorator_list', [])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Dict', 'Attribute', 'Call'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Import', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ClassDef', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Name', 'Name', 'Name', 'Name'])]": 5, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Return']), ('decorator_list', [])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Name', 'Name', 'Name'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Print', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Print']), ('decorator_list', [])]": 1, "Tuple -> [('elts', ['Attribute', 'Attribute', 'Attribute']), ('ctx', 'Store')]": 8, "Compare -> [('left', 'Name'), ('ops', ['IsNot']), ('comparators', ['Attribute'])]": 2, "If -> [('test', 'BoolOp'), ('body', ['If', 'Assign']), ('orelse', ['Assign'])]": 2, "Call -> [('func', 'Name'), ('args', []), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Import -> [('names', ['alias', 'alias'])]": 117, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'TryExcept', 'Assign', 'If', 'Assign', 'Assign', 'If', 'Assign', 'If', 'If', 'Expr', 'Expr', 'For', 'Assign', 'Assign', 'Assign', 'Expr', 'If', 'Assign', 'Assign', 'Expr', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Name', 'Name', 'Name', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "Tuple -> [('elts', ['Num', 'BinOp', 'Num']), ('ctx', 'Load')]": 2, "If -> [('test', 'Compare'), ('body', ['Assign', 'For']), ('orelse', [])]": 20, "If -> [('test', 'Compare'), ('body', ['Assign', 'Expr', 'Expr', 'Expr']), ('orelse', ['Expr', 'Assign', 'Expr'])]": 1, "Assign -> [('targets', ['Tuple']), ('value', 'IfExp')]": 5, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "TryExcept -> [('body', ['Expr', 'For']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['TryExcept', 'If', 'Assign', 'Assign', 'Expr', 'Return']), ('decorator_list', ['Name', 'Name', 'Call', 'Call'])]": 1, "Tuple -> [('elts', ['Num', 'Lambda']), ('ctx', 'Load')]": 5, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 28, "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Print', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'If', 'Assign', 'For', 'Return']), ('decorator_list', [])]": 2, "BoolOp -> [('op', 'And'), ('values', ['UnaryOp', 'UnaryOp', 'UnaryOp', 'UnaryOp', 'BoolOp'])]": 1, "BinOp -> [('left', 'BoolOp'), ('op', 'Add'), ('right', 'Name')]": 4, "Assign -> [('targets', ['Tuple']), ('value', 'Attribute')]": 37, "Call -> [('func', 'Name'), ('args', ['Name', 'Attribute', 'Name']), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "Print -> [('dest', 'NoneType'), ('values', ['Name', 'Str']), ('nl', 'bool')]": 4, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Return']), ('orelse', ['If'])]": 2, "ExceptHandler -> [('type', 'Name'), ('name', 'Name'), ('body', ['Raise'])]": 57, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'If', 'Assign', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'Import', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "List -> [('elts', ['Call', 'Name', 'Str']), ('ctx', 'Load')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'For', 'For', 'For', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assert', 'Assign', 'Assign', 'For', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assert']), ('decorator_list', [])]": 1, "TryExcept -> [('body', ['Expr', 'Assign', 'If', 'Assign', 'For', 'Expr']), ('handlers', ['ExceptHandler', 'ExceptHandler']), ('orelse', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Name', 'Attribute', 'List']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 4, "If -> [('test', 'Name'), ('body', ['Assign', 'For', 'Assign']), ('orelse', ['Assign'])]": 4, "Call -> [('func', 'Attribute'), ('args', ['Str', 'Name', 'Call', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Call -> [('func', 'Attribute'), ('args', ['Call', 'Subscript']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Compare', 'Compare', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Num', 'Attribute', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'Assign']), ('orelse', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Expr', 'For', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'If', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'TryExcept', 'If', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]": 7, "Compare -> [('left', 'Subscript'), ('ops', ['Eq']), ('comparators', ['List'])]": 29, "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['Dict', 'Dict', 'Dict'])]": 15, "Compare -> [('left', 'Name'), ('ops', ['Is']), ('comparators', ['Attribute'])]": 12, "Tuple -> [('elts', ['Name', 'BinOp', 'BinOp']), ('ctx', 'Load')]": 2, "Tuple -> [('elts', ['Str', 'Attribute', 'Call', 'Attribute', 'Attribute', 'Attribute', 'BinOp', 'Attribute', 'Str', 'Num', 'Num']), ('ctx', 'Load')]": 1, "If -> [('test', 'Compare'), ('body', ['Print', 'Print']), ('orelse', [])]": 1, "Attribute -> [('value', 'Name'), ('attr', 'str'), ('ctx', 'Store')]": 9626, "If -> [('test', 'Name'), ('body', ['Assert']), ('orelse', [])]": 2, "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['Assert']), ('orelse', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'TryExcept', 'If', 'TryExcept', 'Assign', 'Assign', 'Assign', 'Expr', 'Return']), ('decorator_list', ['Name'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 123, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['If', 'Assign', 'For']), ('orelse', [])]": 2, "ExceptHandler -> [('type', 'Attribute'), ('name', 'Tuple'), ('body', ['Print'])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'str'), ('defaults', ['Num'])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 2, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Call', 'Tuple', 'Name', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "TryExcept -> [('body', ['Assign', 'Expr', 'For']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 1, "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('orelse', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Delete', 'If', 'For']), ('orelse', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'Assert', 'Assign', 'Assert', 'Assert']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'For']), ('decorator_list', [])]": 9, "Call -> [('func', 'Name'), ('args', ['Name', 'Name']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 35, "BinOp -> [('left', 'Name'), ('op', 'Add'), ('right', 'Tuple')]": 8, "BoolOp -> [('op', 'And'), ('values', ['Call', 'Attribute', 'Compare'])]": 4, "BinOp -> [('left', 'Call'), ('op', 'Div'), ('right', 'Call')]": 48, "Tuple -> [('elts', ['IfExp', 'Name', 'Name']), ('ctx', 'Load')]": 3, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'str'), ('defaults', ['Str', 'Num', 'Str'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'Assign', 'Assign', 'TryExcept', 'If', 'Assign', 'Expr', 'Return']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Str', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'Assign', 'AugAssign']), ('orelse', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Subscript', 'Call']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'str'), ('defaults', ['Name', 'Call', 'List', 'Name', 'Name', 'Name', 'Name'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'TryFinally']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Str', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 4, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'For', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'For', 'Expr', 'Expr', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'Call'), ('body', ['Raise']), ('orelse', ['If'])]": 1, "If -> [('test', 'Subscript'), ('body', ['Assign', 'Assign']), ('orelse', ['Assign', 'Assign', 'Assign', 'Assign', 'If', 'If', 'Assign', 'If', 'If', 'Assign', 'If', 'Assign', 'Assign', 'If', 'Expr', 'Expr'])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'AugAssign']), ('orelse', [])]": 4, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign']), ('decorator_list', [])]": 1, "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('orelse', [])]": 1, "Call -> [('func', 'Name'), ('args', ['UnaryOp', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Str', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 15, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Import', 'Import', 'Assign', 'Expr', 'Assign', 'Assert']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Attribute', 'Name']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'Expr', 'Assign', 'Return']), ('decorator_list', [])]": 1, "TryFinally -> [('body', ['Expr', 'TryExcept']), ('finalbody', ['Expr', 'Expr'])]": 2, "Module -> [('body', ['Import', 'Expr', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'If', 'Expr', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'ClassDef', 'Assign', 'ClassDef', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'FunctionDef', 'FunctionDef', 'ClassDef'])]": 1, "Subscript -> [('value', 'Tuple'), ('slice', 'Index'), ('ctx', 'Load')]": 9, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'For', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'Call'), ('body', ['Assign', 'Continue']), ('orelse', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 6, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Return']), ('decorator_list', [])]": 1, "For -> [('target', 'Tuple'), ('iter', 'Name'), ('body', ['Print', 'Expr']), ('orelse', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'If', 'Assign', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'If', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'If', 'Expr', 'Assign', 'FunctionDef', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'If', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'TryExcept', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'FunctionDef', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Return']), ('decorator_list', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Call', 'Tuple', 'Name', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "TryExcept -> [('body', ['If', 'If', 'Assign', 'Assign']), ('handlers', ['ExceptHandler', 'ExceptHandler']), ('orelse', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'TryExcept', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "Tuple -> [('elts', ['Attribute', 'Name', 'Name', 'Name', 'BoolOp']), ('ctx', 'Load')]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'str'), ('kwarg', 'str'), ('defaults', ['Name'])]": 1, "For -> [('target', 'Name'), ('iter', 'BinOp'), ('body', ['If']), ('orelse', [])]": 3, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['If']), ('orelse', ['Expr', 'Expr'])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'str'), ('defaults', ['Name', 'Str'])]": 1, "If -> [('test', 'Name'), ('body', ['Assign', 'Assign', 'If']), ('orelse', ['Assign'])]": 2, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr']), ('orelse', [])]": 1, "With -> [('context_expr', 'Call'), ('optional_vars', 'Name'), ('body', ['Assign', 'Expr'])]": 2, "If -> [('test', 'BoolOp'), ('body', ['For']), ('orelse', ['Assign', 'Assign'])]": 1, "Call -> [('func', 'Name'), ('args', ['Name']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 269, "If -> [('test', 'Compare'), ('body', ['Assign', 'Expr', 'For']), ('orelse', ['If'])]": 1, "For -> [('target', 'Tuple'), ('iter', 'List'), ('body', ['Assign', 'Assign', 'For']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Assign', 'If', 'If', 'FunctionDef', 'Expr']), ('decorator_list', [])]": 1, "If -> [('test', 'Name'), ('body', ['Assign', 'If', 'Return']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Call']), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 3, "comprehension -> [('target', 'Name'), ('iter', 'Attribute'), ('ifs', ['Compare'])]": 22, "TryExcept -> [('body', ['Assign', 'Assign', 'Expr', 'For', 'Expr', 'Expr']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If']), ('decorator_list', ['Call'])]": 2, "Assign -> [('targets', ['Attribute', 'Name']), ('value', 'Dict')]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 2, "If -> [('test', 'Name'), ('body', ['Assign', 'If', 'Assign']), ('orelse', ['Assign'])]": 3, "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr']), ('orelse', [])]": 1, "With -> [('context_expr', 'Call'), ('optional_vars', 'NoneType'), ('body', ['Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Expr', 'Expr', 'Assign', 'For', 'Expr', 'TryExcept', 'If', 'For', 'For', 'If']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', []), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'Name')]": 3, "If -> [('test', 'Compare'), ('body', ['AugAssign', 'Assign']), ('orelse', ['Assign'])]": 4, "BoolOp -> [('op', 'Or'), ('values', ['Attribute', 'Attribute', 'Attribute'])]": 5, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'TryExcept', 'If', 'If', 'If', 'Assign', 'If', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Delete', 'If'])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Attribute', 'Name', 'Name'])]": 4, "Tuple -> [('elts', ['Str', 'Tuple', 'Str', 'Str', 'Num']), ('ctx', 'Load')]": 1, "With -> [('context_expr', 'Call'), ('optional_vars', 'Name'), ('body', ['Assign', 'Assign', 'For'])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'ClassDef']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Str', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "List -> [('elts', ['BinOp', 'Str', 'Name', 'Name']), ('ctx', 'Load')]": 1, "If -> [('test', 'Compare'), ('body', ['Expr']), ('orelse', ['Print', 'Raise'])]": 3, "Module -> [('body', ['Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign'])]": 1, "If -> [('test', 'Compare'), ('body', ['Expr']), ('orelse', ['Expr', 'Assign', 'Expr', 'Expr'])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Attribute', 'Attribute'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['List', 'Subscript']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "Assert -> [('test', 'BoolOp'), ('msg', 'BinOp')]": 3, "If -> [('test', 'Name'), ('body', ['AugAssign', 'If']), ('orelse', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['TryExcept', 'If']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'For', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'ClassDef', 'FunctionDef', 'FunctionDef', 'ClassDef'])]": 1, "Expr -> [('value', 'Tuple')]": 9, "Module -> [('body', ['Import', 'ImportFrom', 'ClassDef', 'ClassDef', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign'])]": 1, "If -> [('test', 'Name'), ('body', ['Expr', 'Expr', 'Return']), ('orelse', ['Return'])]": 3, "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'ClassDef', 'ClassDef', 'Assign', 'ClassDef', 'ClassDef', 'Assign', 'ClassDef', 'Assign', 'ClassDef', 'Assign', 'ClassDef', 'Assign', 'ClassDef', 'Assign', 'ClassDef', 'Assign', 'ClassDef', 'Assign', 'ClassDef', 'Assign', 'ClassDef', 'Assign', 'ClassDef', 'ClassDef', 'Assign', 'ClassDef', 'Assign', 'ClassDef', 'Assign', 'ClassDef', 'Assign', 'ClassDef', 'Assign', 'ClassDef', 'Assign', 'ClassDef', 'Assign', 'ClassDef', 'Assign', 'ClassDef', 'Assign', 'ClassDef', 'ClassDef', 'Assign', 'ClassDef', 'ClassDef', 'Assign', 'ClassDef', 'Assign', 'ClassDef', 'ClassDef', 'Assign', 'ClassDef', 'Assign', 'ClassDef', 'Assign', 'ClassDef', 'ClassDef', 'Assign', 'ClassDef', 'Assign', 'ClassDef', 'Assign', 'ClassDef', 'ClassDef', 'Assign', 'ClassDef', 'Assign', 'ClassDef', 'Assign', 'ClassDef', 'Assign', 'ClassDef', 'Assign', 'ClassDef', 'Assign', 'ClassDef', 'Assign', 'ClassDef', 'Assign', 'ClassDef', 'Assign', 'ClassDef', 'Assign', 'ClassDef', 'Assign', 'Assign', 'ClassDef', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Print', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Expr']), ('decorator_list', [])]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Print', 'Print']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['If', 'Return']), ('orelse', ['Assert'])]": 1, "Compare -> [('left', 'Num'), ('ops', ['Gt', 'Gt']), ('comparators', ['Attribute', 'Num'])]": 3, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'If']), ('orelse', [])]": 2, "Call -> [('func', 'Yield'), ('args', ['Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 4, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'If', 'Expr']), ('decorator_list', [])]": 1, "Call -> [('func', 'Name'), ('args', ['List', 'List', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "BinOp -> [('left', 'BinOp'), ('op', 'Sub'), ('right', 'Num')]": 55, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'For', 'If', 'Return']), ('decorator_list', [])]": 1, "TryExcept -> [('body', ['ImportFrom', 'Expr', 'ImportFrom']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['Str', 'Str', 'Dict'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Num', 'Str', 'Tuple']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 3, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Expr', 'Assign', 'Assign', 'If']), ('orelse', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Attribute', 'Attribute', 'Attribute']), ('keywords', []), ('starargs', 'Name'), ('kwargs', 'Name')]": 1, "If -> [('test', 'Name'), ('body', ['If', 'Print', 'If']), ('orelse', [])]": 1, "ImportFrom -> [('module', 'str'), ('names', ['alias']), ('level', 'int')]": 5902, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef']), ('decorator_list', [])]": 3, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Dict', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'If']), ('orelse', [])]": 1, "arguments -> [('args', []), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', [])]": 682, "Call -> [('func', 'Attribute'), ('args', ['Str', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 174, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['TryExcept', 'If', 'If', 'Assign', 'Assign', 'If', 'Return']), ('decorator_list', [])]": 1, "Tuple -> [('elts', ['Name', 'Name', 'Name', 'Name', 'Name']), ('ctx', 'Load')]": 24, "Dict -> [('keys', ['Str', 'Str']), ('values', ['BinOp', 'Attribute'])]": 3, "Call -> [('func', 'Name'), ('args', ['Num', 'BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 115, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef'])]": 1, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['If', 'Assign', 'If', 'If']), ('orelse', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Subscript', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 10, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'If', 'Assign', 'Assign', 'Expr', 'Assign', 'Return']), ('decorator_list', [])]": 2, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 2, "For -> [('target', 'Name'), ('iter', 'BinOp'), ('body', ['If', 'Assign', 'If']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'If', 'Assign', 'If', 'Assign', 'Assign', 'If', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'Attribute'), ('body', ['Continue']), ('orelse', [])]": 6, "Compare -> [('left', 'Attribute'), ('ops', ['Gt']), ('comparators', ['Call'])]": 3, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'Print', 'Print', 'Print']), ('orelse', ['If'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'For', 'For', 'Return']), ('decorator_list', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Call', 'Name', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "Call -> [('func', 'Name'), ('args', ['Name', 'Name']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'Name')]": 8, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr']), ('decorator_list', ['Name'])]": 9, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'BinOp']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'Expr', 'For']), ('decorator_list', [])]": 3, "BoolOp -> [('op', 'Or'), ('values', ['Subscript', 'Name'])]": 13, "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'If', 'Assign', 'Assign']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assert', 'Assign', 'Assign', 'For', 'Return']), ('decorator_list', [])]": 1, "Call -> [('func', 'Call'), ('args', ['Attribute', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'For']), ('orelse', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Subscript'), ('body', ['For']), ('orelse', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assert', 'Assert']), ('decorator_list', [])]": 8, "List -> [('elts', ['BinOp', 'Name', 'Num']), ('ctx', 'Load')]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'For', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]": 2, "For -> [('target', 'Name'), ('iter', 'ListComp'), ('body', ['Expr']), ('orelse', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'For', 'For', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'For', 'Assign', 'Assign', 'For']), ('decorator_list', [])]": 1, "If -> [('test', 'BoolOp'), ('body', ['Print']), ('orelse', ['Assign'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Num', 'BinOp']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "List -> [('elts', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('ctx', 'Load')]": 1, "Tuple -> [('elts', ['Call', 'BoolOp']), ('ctx', 'Load')]": 1, "For -> [('target', 'Name'), ('iter', 'Tuple'), ('body', ['Assign', 'Assign', 'If']), ('orelse', [])]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'ImportFrom', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'For']), ('decorator_list', [])]": 1, "If -> [('test', 'Call'), ('body', ['Expr']), ('orelse', ['Assert', 'Expr'])]": 1, "Tuple -> [('elts', ['Num', 'Dict', 'Dict']), ('ctx', 'Load')]": 4, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'If', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'If', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]": 4, "Expr -> [('value', 'Name')]": 38, "BinOp -> [('left', 'Num'), ('op', 'Div'), ('right', 'Call')]": 7, "Module -> [('body', ['Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'Import', 'ImportFrom', 'Import', 'ImportFrom', 'Import', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ImportFrom', 'ClassDef', 'ClassDef', 'ClassDef', 'If'])]": 1, "ExceptHandler -> [('type', 'Tuple'), ('name', 'Name'), ('body', ['Expr'])]": 4, "If -> [('test', 'BoolOp'), ('body', ['Assign', 'If', 'If', 'If', 'Assign', 'Delete', 'Assign', 'Break']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'For', 'Expr']), ('decorator_list', [])]": 2, "If -> [('test', 'Compare'), ('body', ['Expr', 'Assign', 'Assign', 'AugAssign', 'AugAssign']), ('orelse', ['Assign', 'Assign', 'Assign', 'Assign', 'Break'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'FunctionDef', 'Assign', 'If', 'If', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Return']), ('decorator_list', ['Attribute'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Num', 'List']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 4, "If -> [('test', 'Name'), ('body', ['Assign', 'Assign', 'Expr', 'For', 'Assign', 'If', 'Assign', 'Assign']), ('orelse', ['Assign', 'Assign', 'Assign'])]": 1, "If -> [('test', 'Call'), ('body', ['Expr', 'If']), ('orelse', [])]": 4, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'TryExcept', 'If', 'Assign', 'Assign', 'Assign', 'For']), ('decorator_list', [])]": 1, "While -> [('test', 'BoolOp'), ('body', ['If', 'If']), ('orelse', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'If', 'Print']), ('orelse', [])]": 2, "Dict -> [('keys', ['Name', 'Name', 'Str', 'Str']), ('values', ['Str', 'Str', 'Str', 'Str'])]": 1, "Tuple -> [('elts', ['Attribute', 'UnaryOp']), ('ctx', 'Load')]": 3, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str']), ('values', ['Attribute', 'Attribute', 'Str', 'Call'])]": 1, "TryExcept -> [('body', ['Assign', 'Expr']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 45, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'Assign', 'Assign', 'For', 'Expr', 'Return']), ('decorator_list', [])]": 2, "TryExcept -> [('body', ['Assign', 'TryFinally']), ('handlers', ['ExceptHandler', 'ExceptHandler', 'ExceptHandler']), ('orelse', [])]": 1, "List -> [('elts', ['Str']), ('ctx', 'Load')]": 754, "Compare -> [('left', 'Name'), ('ops', ['LtE']), ('comparators', ['Call'])]": 10, "Call -> [('func', 'Attribute'), ('args', ['Lambda', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "If -> [('test', 'Num'), ('body', ['Assign', 'Expr']), ('orelse', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', ['Name'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'For', 'Return']), ('decorator_list', ['Name'])]": 1, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'ClassDef'])]": 1, "If -> [('test', 'Call'), ('body', ['Expr', 'Expr']), ('orelse', ['Assign'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'If', 'Assign', 'Assign', 'Assign', 'For', 'Expr', 'Return']), ('decorator_list', [])]": 1, "Tuple -> [('elts', ['Str', 'Str', 'List']), ('ctx', 'Load')]": 35, "Call -> [('func', 'Name'), ('args', ['Str']), ('keywords', []), ('starargs', 'Name'), ('kwargs', 'NoneType')]": 2, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Print', 'Print', 'Assign', 'Print', 'Print', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Print']), ('orelse', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['Assign', 'If', 'If', 'Assign', 'If']), ('orelse', [])]": 2, "With -> [('context_expr', 'Call'), ('optional_vars', 'Name'), ('body', ['Assign', 'With', 'For', 'Expr'])]": 1, "If -> [('test', 'Name'), ('body', ['Assign']), ('orelse', ['Expr'])]": 5, "Call -> [('func', 'Attribute'), ('args', ['Num', 'Str', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 4, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Expr', 'Assign', 'If', 'Assign', 'Assign', 'For', 'Assign', 'Assign', 'Assign', 'For', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'FunctionDef', 'TryExcept', 'Return']), ('decorator_list', [])]": 1, "ImportFrom -> [('module', 'str'), ('names', ['alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias']), ('level', 'int')]": 18, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'If', 'Return']), ('decorator_list', [])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Attribute', 'Attribute', 'Dict', 'Str'])]": 1, "Tuple -> [('elts', ['Num', 'Name', 'Name']), ('ctx', 'Load')]": 17, "RShift -> <NULL>": 161, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Print', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 2, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Str', 'Name', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Tuple -> [('elts', ['Attribute', 'Attribute']), ('ctx', 'Load')]": 292, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'Expr', 'If', 'Assign', 'For', 'Expr', 'Return']), ('decorator_list', [])]": 1, "TryExcept -> [('body', ['ImportFrom', 'Import', 'Assign']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Expr', 'Assign']), ('decorator_list', [])]": 2, "TryFinally -> [('body', ['Assign', 'For', 'With']), ('finalbody', ['Expr'])]": 1, "ExceptHandler -> [('type', 'Name'), ('name', 'Name'), ('body', ['If', 'TryExcept', 'Assign', 'Assign'])]": 1, "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Name', 'Name']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 5, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'If', 'If', 'Assign', 'Assign']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Attribute', 'Str', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "If -> [('test', 'Name'), ('body', ['Assign', 'Assign', 'Assign', 'Delete']), ('orelse', [])]": 1, "If -> [('test', 'Attribute'), ('body', ['Print']), ('orelse', ['Print', 'For'])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'If', 'If']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assert', 'Assign', 'Assert', 'Assert', 'Assert', 'Assert', 'If', 'If', 'Assign', 'Assert']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Print', 'Break']), ('orelse', [])]": 1, "AugAssign -> [('target', 'Name'), ('op', 'Sub'), ('value', 'Call')]": 13, "TryExcept -> [('body', ['ImportFrom', 'ImportFrom']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assert']), ('decorator_list', [])]": 6, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'If', 'If', 'Assign', 'If']), ('orelse', [])]": 1, "BinOp -> [('left', 'Name'), ('op', 'BitOr'), ('right', 'Attribute')]": 17, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'TryExcept', 'Expr', 'Assign', 'If', 'Return']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Name']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 8, "AugAssign -> [('target', 'Name'), ('op', 'Add'), ('value', 'List')]": 28, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ClassDef', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 4, "List -> [('elts', ['BinOp', 'Name', 'BinOp']), ('ctx', 'Load')]": 1, "TryExcept -> [('body', ['ImportFrom', 'Return']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Name', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 874, "Call -> [('func', 'Name'), ('args', ['Dict']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'Attribute')]": 8, "Exec -> [('body', 'Name'), ('globals', 'NoneType'), ('locals', 'NoneType')]": 2, "Call -> [('func', 'Attribute'), ('args', ['Num', 'Attribute', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 3, "TryFinally -> [('body', ['Assign', 'Assign', 'Expr', 'Assign', 'ClassDef', 'FunctionDef', 'Expr']), ('finalbody', ['Expr'])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'str'), ('defaults', ['Name', 'Num', 'Name', 'Str', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name'])]": 3, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name']), ('vararg', 'str'), ('kwarg', 'str'), ('defaults', ['Tuple', 'Name'])]": 1, "TryExcept -> [('body', ['Assign', 'Assign', 'If', 'Expr', 'Assign', 'Assign', 'If', 'Expr', 'Assign', 'Assign', 'If', 'Expr', 'If', 'Assign', 'Expr', 'Expr', 'For']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 1, "Tuple -> [('elts', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('ctx', 'Store')]": 7, "Call -> [('func', 'Attribute'), ('args', ['Compare', 'Compare', 'Compare']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Tuple -> [('elts', ['Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num']), ('ctx', 'Load')]": 1, "Call -> [('func', 'Attribute'), ('args', ['Call', 'Name']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 5, "If -> [('test', 'Name'), ('body', ['Import', 'Assign', 'Expr']), ('orelse', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Str', 'Str', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'Assign', 'Assign', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'Expr', 'Expr'])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'For', 'AugAssign']), ('orelse', [])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['List'])]": 5, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Dict']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 66, "If -> [('test', 'Compare'), ('body', ['Continue']), ('orelse', [])]": 166, "ExceptHandler -> [('type', 'Name'), ('name', 'Name'), ('body', ['Print'])]": 9, "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'List']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 161, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'If', 'Assign', 'Assign', 'Assign', 'ClassDef', 'Assign', 'TryExcept', 'Return']), ('decorator_list', ['Name'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Attribute', 'Attribute', 'Attribute', 'BinOp', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'If', 'If', 'Return']), ('orelse', ['If', 'Assign'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'If', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'If', 'Assign', 'If', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'If']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'TryExcept', 'If', 'Return']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['BinOp', 'List', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "If -> [('test', 'Name'), ('body', ['Return']), ('orelse', ['Raise'])]": 4, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Tuple', 'ListComp', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Name', 'Name', 'Name']), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'For']), ('decorator_list', ['Name', 'Name', 'Name'])]": 1, "BoolOp -> [('op', 'Or'), ('values', ['Compare', 'UnaryOp', 'Compare'])]": 1, "While -> [('test', 'BoolOp'), ('body', ['For', 'Assign', 'For', 'Expr', 'Expr', 'Expr']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'If', 'For', 'Raise']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'If', 'Assign', 'If']), ('decorator_list', [])]": 1, "ExceptHandler -> [('type', 'Attribute'), ('name', 'NoneType'), ('body', ['Expr', 'Assign', 'Expr'])]": 1, "Tuple -> [('elts', ['Subscript', 'Subscript']), ('ctx', 'Load')]": 77, "TryFinally -> [('body', ['Assign', 'Expr', 'Assign', 'While', 'Return']), ('finalbody', ['Expr'])]": 1, "If -> [('test', 'Call'), ('body', ['Raise']), ('orelse', ['Return'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Str', 'Name', 'Attribute', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'Assign', 'Print', 'Assign', 'Return']), ('decorator_list', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Tuple', 'Tuple', 'Name', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "While -> [('test', 'Name'), ('body', ['Assign', 'Assign', 'For', 'If', 'If']), ('orelse', [])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Tuple', 'Name', 'Name', 'Tuple', 'Name', 'Tuple', 'Dict', 'Num'])]": 4, "List -> [('elts', ['Name', 'Str', 'Str', 'Str', 'Name', 'Str', 'Str']), ('ctx', 'Load')]": 2, "If -> [('test', 'Compare'), ('body', ['Assign', 'Return']), ('orelse', ['Assign', 'Assign', 'Assign', 'Return'])]": 1, "If -> [('test', 'Subscript'), ('body', ['Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('orelse', [])]": 1, "Module -> [('body', ['Import', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'ImportFrom', 'TryExcept', 'Import', 'Import', 'Import', 'Import', 'TryExcept', 'FunctionDef', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'If', 'If', 'If', 'If', 'FunctionDef', 'If', 'If', 'If'])]": 1, "If -> [('test', 'Compare'), ('body', ['If', 'Break']), ('orelse', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Expr', 'ClassDef', 'FunctionDef']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['List', 'List', 'List']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 3, "BinOp -> [('left', 'Name'), ('op', 'BitOr'), ('right', 'BinOp')]": 2, "Call -> [('func', 'Attribute'), ('args', ['Call', 'Name', 'Name', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 5, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'Assign', 'FunctionDef']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'For', 'For', 'Assign', 'For', 'If', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'If', 'If', 'If', 'If', 'If', 'If', 'Expr']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'TryExcept', 'Expr', 'TryExcept', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'FunctionDef', 'Return']), ('decorator_list', [])]": 17, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'UnaryOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 4, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef']), ('decorator_list', [])]": 1, "If -> [('test', 'Call'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'If', 'Assert', 'Assign']), ('orelse', [])]": 1, "If -> [('test', 'Name'), ('body', ['If', 'Delete']), ('orelse', [])]": 1, "BoolOp -> [('op', 'Or'), ('values', ['BoolOp', 'List'])]": 11, "Tuple -> [('elts', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Attribute']), ('ctx', 'Load')]": 2, "Tuple -> [('elts', ['Num', 'Call', 'Name', 'Call']), ('ctx', 'Load')]": 1, "Tuple -> [('elts', ['Tuple', 'List', 'List', 'Str', 'Num']), ('ctx', 'Load')]": 1, "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('orelse', ['If'])]": 2, "Module -> [('body', ['Import', 'ImportFrom', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'ClassDef', 'ClassDef', 'FunctionDef'])]": 2, "If -> [('test', 'Subscript'), ('body', ['Expr', 'Assign']), ('orelse', [])]": 1, "TryFinally -> [('body', ['TryExcept']), ('finalbody', ['Expr', 'Expr', 'If'])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign']), ('orelse', ['AugAssign'])]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'ClassDef'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'TryExcept', 'Expr', 'For', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Return']), ('decorator_list', [])]": 1, "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'FunctionDef', 'ClassDef', 'FunctionDef', 'FunctionDef', 'ClassDef'])]": 1, "Tuple -> [('elts', ['Name', 'BinOp', 'BinOp', 'BinOp']), ('ctx', 'Load')]": 2, "Call -> [('func', 'Name'), ('args', ['Str', 'Name', 'Name', 'Name', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "BinOp -> [('left', 'Num'), ('op', 'Add'), ('right', 'Num')]": 36, "Compare -> [('left', 'Name'), ('ops', ['In']), ('comparators', ['Attribute'])]": 214, "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'ClassDef'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Return']), ('decorator_list', ['Call'])]": 2, "With -> [('context_expr', 'Call'), ('optional_vars', 'NoneType'), ('body', ['For'])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Str', 'Num'])]": 2, "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['Expr', 'Assign', 'Expr', 'Break'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Expr']), ('decorator_list', ['Name'])]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'For']), ('decorator_list', [])]": 1, "List -> [('elts', ['Num', 'Num', 'Num', 'Num', 'Num', 'Num']), ('ctx', 'Load')]": 8, "Compare -> [('left', 'Str'), ('ops', ['NotIn']), ('comparators', ['Attribute'])]": 26, "With -> [('context_expr', 'Call'), ('optional_vars', 'NoneType'), ('body', ['Return'])]": 5, "List -> [('elts', ['Str', 'Str', 'Str', 'Str', 'BinOp', 'Str', 'Str', 'BinOp', 'Str', 'Str']), ('ctx', 'Load')]": 2, "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'TryExcept', 'Assign', 'Assign', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'FunctionDef', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]": 1, "If -> [('test', 'Num'), ('body', ['Print', 'Print']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr']), ('decorator_list', [])]": 699, "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['Import', 'Expr', 'Return'])]": 4, "Module -> [('body', ['Import', 'ImportFrom', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'Import', 'Assign', 'ClassDef'])]": 2, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'For', 'Expr']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'Assign', 'Assign']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Num', 'Call', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 3, "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'Return']), ('orelse', ['Expr'])]": 1, "Dict -> [('keys', ['Str']), ('values', ['Name'])]": 270, "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['Str', 'Attribute', 'List'])]": 2, "ClassDef -> [('name', 'str'), ('bases', []), ('body', ['Expr', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Tuple'), ('body', ['Assign', 'If']), ('orelse', ['Raise'])]": 1, "List -> [('elts', ['Call', 'Name']), ('ctx', 'Load')]": 9, "If -> [('test', 'Name'), ('body', ['Expr', 'Expr']), ('orelse', ['Assign', 'Assign', 'Expr'])]": 1, "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef'])]": 1, "For -> [('target', 'Tuple'), ('iter', 'Name'), ('body', ['Assign', 'If', 'Assign', 'Expr', 'If']), ('orelse', [])]": 1, "Dict -> [('keys', ['Num']), ('values', ['List'])]": 2, "IfExp -> [('test', 'Compare'), ('body', 'Str'), ('orelse', 'Str')]": 13, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Expr', 'Expr', 'Return']), ('decorator_list', [])]": 1, "Assert -> [('test', 'Attribute'), ('msg', 'NoneType')]": 23, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 3, "If -> [('test', 'Attribute'), ('body', ['Pass']), ('orelse', ['If'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'While', 'For', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 8, "ExceptHandler -> [('type', 'Name'), ('name', 'Name'), ('body', ['Import', 'Expr', 'Break'])]": 1, "Call -> [('func', 'Subscript'), ('args', ['Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 4, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Return']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'If', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'For', 'For', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr']), ('decorator_list', ['Name', 'Name', 'Name'])]": 2, "If -> [('test', 'Attribute'), ('body', ['Expr', 'Assign', 'If']), ('orelse', ['If'])]": 1, "TryExcept -> [('body', ['Expr', 'AugAssign']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 1, "List -> [('elts', ['Name', 'Name', 'Name', 'Name', 'Num']), ('ctx', 'Load')]": 2, "Call -> [('func', 'Name'), ('args', ['Attribute', 'Attribute']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "If -> [('test', 'BoolOp'), ('body', ['Assign']), ('orelse', ['Expr'])]": 4, "If -> [('test', 'UnaryOp'), ('body', ['Return']), ('orelse', ['Assign', 'Assign', 'Expr', 'Return'])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Expr', 'If', 'If', 'If', 'Assign']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'Assign', 'If', 'If', 'Assign', 'Return']), ('decorator_list', [])]": 1, "Tuple -> [('elts', ['Name', 'Name', 'Subscript', 'Attribute']), ('ctx', 'Load')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'AugAssign', 'TryFinally', 'Assign']), ('decorator_list', [])]": 2, "ExceptHandler -> [('type', 'Attribute'), ('name', 'NoneType'), ('body', ['AugAssign', 'Raise'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['BinOp']), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "Call -> [('func', 'Name'), ('args', ['Attribute', 'Attribute', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 36, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'ClassDef'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'For', 'Assign', 'Expr', 'Return']), ('decorator_list', [])]": 2, "Assert -> [('test', 'Compare'), ('msg', 'Subscript')]": 27, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]": 1, "If -> [('test', 'BoolOp'), ('body', ['If', 'Assign']), ('orelse', [])]": 3, "ClassDef -> [('name', 'str'), ('bases', []), ('body', ['FunctionDef', 'FunctionDef', 'Assign']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Str', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'Name')]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['For', 'Assign', 'If', 'Assign', 'If', 'If', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 192, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Print', 'Return']), ('decorator_list', [])]": 3, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Name', 'Name']), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Import', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "Tuple -> [('elts', ['Attribute', 'Call']), ('ctx', 'Load')]": 83, "Attribute -> [('value', 'Call'), ('attr', 'str'), ('ctx', 'Store')]": 40, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Print', 'Pass']), ('decorator_list', [])]": 4, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'If', 'Expr', 'Assign', 'For', 'Expr', 'For', 'Expr', 'If']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Return']), ('decorator_list', ['Call', 'Name', 'Call'])]": 1, "If -> [('test', 'BoolOp'), ('body', ['Expr', 'Expr', 'Return']), ('orelse', ['If'])]": 1, "Assign -> [('targets', ['Name']), ('value', 'Name')]": 2926, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Print', 'Assign', 'TryExcept']), ('orelse', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Call', 'Str', 'Str', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'TryExcept', 'Assign', 'Assign', 'If', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'FunctionDef', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "If -> [('test', 'BoolOp'), ('body', ['Continue']), ('orelse', ['If'])]": 2, "Call -> [('func', 'Attribute'), ('args', ['Subscript', 'Name']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 3, "ExceptHandler -> [('type', 'Attribute'), ('name', 'Name'), ('body', ['Assign', 'Expr', 'Raise'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Assign', 'If', 'If', 'If', 'If', 'Return']), ('decorator_list', [])]": 1, "Compare -> [('left', 'Subscript'), ('ops', ['Eq']), ('comparators', ['Num'])]": 46, "List -> [('elts', ['ListComp']), ('ctx', 'Load')]": 2, "While -> [('test', 'Compare'), ('body', ['Assign', 'AugAssign', 'AugAssign', 'If', 'Assign']), ('orelse', [])]": 1, "Tuple -> [('elts', ['Name', 'Subscript', 'Attribute']), ('ctx', 'Load')]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'If', 'Assign', 'If', 'Return']), ('decorator_list', ['Call', 'Name', 'Call', 'Call'])]": 1, "Call -> [('func', 'Name'), ('args', ['Attribute', 'Tuple', 'Dict']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "List -> [('elts', ['Call', 'Call', 'Call', 'Call', 'Name']), ('ctx', 'Load')]": 2, "BoolOp -> [('op', 'And'), ('values', ['Compare', 'BoolOp'])]": 22, "Tuple -> [('elts', ['Attribute', 'Name']), ('ctx', 'Store')]": 4, "BinOp -> [('left', 'Call'), ('op', 'Mult'), ('right', 'UnaryOp')]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'If', 'If', 'Assign', 'If', 'Assign', 'If', 'If', 'If', 'If', 'If', 'Assign', 'Assign', 'If', 'If', 'Expr', 'If', 'If', 'Expr', 'Expr', 'Assign', 'If', 'Assign', 'Expr', 'Expr', 'Assign', 'If', 'If', 'If', 'If', 'If', 'For', 'If', 'Expr', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'Expr', 'Expr', 'If', 'If', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'Name'), ('body', ['Assign', 'Assign']), ('orelse', ['If'])]": 8, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'Expr', 'If', 'Return']), ('decorator_list', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Attribute', 'List']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 48, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assert', 'Assert']), ('decorator_list', [])]": 5, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'If', 'If', 'If', 'If', 'If', 'Return']), ('decorator_list', [])]": 2, "Call -> [('func', 'Name'), ('args', ['BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'Dict')]": 2, "Index -> [('value', 'UnaryOp')]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign']), ('decorator_list', [])]": 17, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ClassDef', 'ClassDef', 'ClassDef', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'ClassDef', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'If', 'Expr', 'Expr', 'Expr', 'For']), ('decorator_list', [])]": 1, "Repr -> [('value', 'BinOp')]": 2, "If -> [('test', 'Compare'), ('body', ['Print', 'Assign', 'Print', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Print', 'Assign', 'Print', 'Assign', 'Expr', 'Assign', 'For', 'For', 'Expr', 'Expr', 'Print', 'Assign', 'Assign', 'For', 'Expr', 'Print', 'Assign', 'Assign', 'For', 'Expr', 'Print', 'Assign', 'Assign', 'For', 'Expr', 'Print', 'Assign', 'Assign', 'For', 'Expr', 'Expr', 'Expr']), ('orelse', ['Pass'])]": 1, "If -> [('test', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Print']), ('orelse', [])]": 1, "BinOp -> [('left', 'Attribute'), ('op', 'Div'), ('right', 'BinOp')]": 16, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'If', 'If', 'If', 'If', 'Raise']), ('decorator_list', [])]": 2, "If -> [('test', 'Call'), ('body', ['Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign']), ('orelse', ['Expr', 'Expr', 'Assign', 'Assign', 'Assign'])]": 2, "TryFinally -> [('body', ['For']), ('finalbody', ['AugAssign'])]": 2, "Tuple -> [('elts', ['Subscript', 'Name']), ('ctx', 'Load')]": 28, "IfExp -> [('test', 'Call'), ('body', 'Compare'), ('orelse', 'Compare')]": 1, "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef'])]": 1, "If -> [('test', 'Name'), ('body', ['Assign']), ('orelse', ['Assign', 'Assign', 'Assign'])]": 1, "BinOp -> [('left', 'UnaryOp'), ('op', 'Sub'), ('right', 'Name')]": 1, "ExceptHandler -> [('type', 'Name'), ('name', 'Name'), ('body', ['Print', 'Print', 'Continue'])]": 1, "If -> [('test', 'Attribute'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign']), ('orelse', ['If', 'Assign', 'If', 'Assign'])]": 1, "GeneratorExp -> [('elt', 'Attribute'), ('generators', ['comprehension'])]": 23, "AugAssign -> [('target', 'Name'), ('op', 'Add'), ('value', 'BinOp')]": 217, "If -> [('test', 'Compare'), ('body', ['For', 'Expr']), ('orelse', ['If'])]": 2, "Call -> [('func', 'Name'), ('args', ['BinOp', 'Subscript', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Str', 'Str', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 7, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Assign']), ('orelse', [])]": 2, "BinOp -> [('left', 'Subscript'), ('op', 'Add'), ('right', 'BinOp')]": 34, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'Expr', 'If', 'Assign', 'Expr', 'Expr', 'Assign', 'For', 'Expr']), ('decorator_list', [])]": 1, "TryExcept -> [('body', ['Assign', 'Assign', 'Assign']), ('handlers', ['ExceptHandler', 'ExceptHandler']), ('orelse', [])]": 3, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Delete', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "If -> [('test', 'Name'), ('body', ['If', 'If', 'Expr']), ('orelse', [])]": 1, "BinOp -> [('left', 'Call'), ('op', 'Mult'), ('right', 'Name')]": 52, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'str'), ('kwarg', 'str'), ('defaults', ['Name'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]": 25, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'Name')]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'TryExcept', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Str', 'Name', 'Name', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 12, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'Assign', 'Assign', 'ClassDef', 'FunctionDef']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'Assign', 'If', 'Return']), ('decorator_list', ['Name'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 5, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'For', 'TryFinally']), ('decorator_list', [])]": 1, "TryExcept -> [('body', ['Assign', 'Assign', 'Expr']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 15, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'Return']), ('decorator_list', ['Name'])]": 8, "Assign -> [('targets', ['Name']), ('value', 'Dict')]": 1563, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'For', 'Assign', 'If', 'If', 'Return']), ('decorator_list', [])]": 1, "List -> [('elts', ['Str', 'Str', 'BinOp']), ('ctx', 'Load')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'If', 'Raise']), ('decorator_list', [])]": 1, "If -> [('test', 'Name'), ('body', ['Expr', 'AugAssign', 'Expr']), ('orelse', [])]": 2, "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['Name', 'Attribute', 'Name'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Subscript', 'BinOp']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name']), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 4, "Return -> [('value', 'Subscript')]": 329, "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'If']), ('orelse', [])]": 1, "Dict -> [('keys', ['Str', 'Str']), ('values', ['BinOp', 'Str'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Expr', 'Return']), ('decorator_list', ['Name'])]": 1, "Call -> [('func', 'Name'), ('args', ['ListComp']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 5, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign']), ('decorator_list', ['Name'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign']), ('decorator_list', ['Name'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['TryFinally']), ('decorator_list', [])]": 14, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', [])]": 2, "If -> [('test', 'Call'), ('body', ['Assign', 'Assign']), ('orelse', ['Return'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'If', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'If', 'Return']), ('decorator_list', [])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Str', 'Str', 'Str', 'Str', 'Str', 'List', 'Str', 'Str', 'Name', 'Name', 'Str', 'Str', 'BinOp', 'Name'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'List']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "comprehension -> [('target', 'Tuple'), ('iter', 'Attribute'), ('ifs', [])]": 10, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['For', 'For', 'Delete', 'For', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "BoolOp -> [('op', 'Or'), ('values', ['Call', 'Name'])]": 26, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 2, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Num', 'Str', 'Num'])]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'ClassDef', 'Assign', 'Assign', 'ClassDef', 'If'])]": 1, "TryExcept -> [('body', ['For', 'Assign']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'Assign', 'Expr', 'For', 'Assign', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Expr', 'Expr', 'Assert']), ('orelse', [])]": 1, "If -> [('test', 'Call'), ('body', ['Assign', 'Assign', 'Expr', 'AugAssign', 'AugAssign']), ('orelse', [])]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Assign', 'Assign', 'Assign', 'Print', 'Assign', 'Assign', 'Print', 'Assign', 'Assign', 'Expr', 'Expr', 'Print', 'Print', 'Assign', 'For', 'Print', 'Assign', 'Print', 'Print'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Attribute', 'Tuple', 'Tuple']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['Call', 'Num', 'Num'])]": 5, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'ImportFrom', 'Import', 'ImportFrom', 'Import', 'Import', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'If', 'ClassDef', 'Assign', 'FunctionDef', 'FunctionDef', 'Assign'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'For', 'For', 'If']), ('decorator_list', [])]": 1, "Tuple -> [('elts', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('ctx', 'Load')]": 1, "If -> [('test', 'Compare'), ('body', ['Return']), ('orelse', ['If', 'Return'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assert', 'Import', 'Assign', 'Assign', 'Assign', 'Assert', 'Assign', 'For']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr']), ('decorator_list', ['Name'])]": 2, "Assign -> [('targets', ['Name', 'Tuple']), ('value', 'Tuple')]": 7, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "Assign -> [('targets', ['Name', 'Attribute']), ('value', 'Call')]": 20, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'While', 'Assert', 'Print']), ('decorator_list', [])]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'ClassDef', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "List -> [('elts', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('ctx', 'Load')]": 1, "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['Print', 'If']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'For', 'Return']), ('decorator_list', ['Attribute'])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['BinOp', 'BinOp', 'BinOp'])]": 1, "Call -> [('func', 'Name'), ('args', []), ('keywords', []), ('starargs', 'BinOp'), ('kwargs', 'NoneType')]": 1, "If -> [('test', 'UnaryOp'), ('body', ['If', 'Assign']), ('orelse', ['Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'If', 'Assign'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'If', 'Assign', 'If', 'Expr', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Print']), ('orelse', [])]": 2, "List -> [('elts', ['Num', 'Num', 'Num', 'Num', 'Num']), ('ctx', 'Load')]": 22, "Tuple -> [('elts', ['Subscript', 'Str', 'Tuple']), ('ctx', 'Load')]": 2, "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['Assign', 'TryExcept', 'If', 'If']), ('orelse', [])]": 2, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Attribute', 'Str', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 3, "If -> [('test', 'Compare'), ('body', ['Expr', 'Assign']), ('orelse', ['Expr'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'Attribute'), ('body', ['Expr']), ('orelse', ['If', 'Expr', 'Expr'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'Assign', 'If', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'If']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Str', 'Attribute', 'Num', 'Attribute', 'Name', 'Name', 'Name', 'Attribute', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Return']), ('decorator_list', [])]": 138, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'If', 'Return']), ('decorator_list', ['Call'])]": 1, "If -> [('test', 'Compare'), ('body', ['Expr']), ('orelse', ['Assign', 'Assign'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'For', 'Print']), ('decorator_list', [])]": 1, "If -> [('test', 'BoolOp'), ('body', ['Expr', 'Expr', 'Return']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assert', 'FunctionDef', 'Assign', 'Assign', 'For', 'Expr', 'Return']), ('decorator_list', ['Attribute'])]": 1, "Call -> [('func', 'Name'), ('args', ['Name', 'Name', 'Name']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 28, "TryExcept -> [('body', ['If', 'Assign', 'Assign']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 3, "If -> [('test', 'Call'), ('body', ['Assign', 'TryExcept', 'Assign', 'AugAssign', 'Assign', 'Return']), ('orelse', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Str', 'Str', 'BoolOp', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Call', 'Tuple']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "While -> [('test', 'Name'), ('body', ['Assign', 'Print', 'If', 'If', 'Print', 'Expr']), ('orelse', [])]": 6, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'FunctionDef', 'Expr', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'TryExcept', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr']), ('decorator_list', ['Name'])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Expr', 'Assign', 'If', 'Assign', 'Assign']), ('orelse', ['Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'If', 'Assign', 'Expr'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['FunctionDef', 'Assign', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'If', 'Expr', 'Return']), ('decorator_list', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'TryExcept', 'For', 'If']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'If', 'If', 'Assign']), ('orelse', ['If'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'For']), ('decorator_list', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For']), ('decorator_list', [])]": 3, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'ImportFrom', 'Import', 'Expr', 'Import', 'FunctionDef', 'ClassDef', 'ClassDef'])]": 1, "Call -> [('func', 'Name'), ('args', ['BinOp', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 19, "If -> [('test', 'BinOp'), ('body', ['Return']), ('orelse', [])]": 2, "TryExcept -> [('body', ['Import', 'Import', 'Import', 'Import']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 2, "If -> [('test', 'BoolOp'), ('body', ['Assign']), ('orelse', ['Assign', 'For', 'If'])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'If', 'Continue']), ('orelse', [])]": 2, "If -> [('test', 'Subscript'), ('body', ['Expr', 'Expr', 'Expr']), ('orelse', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'TryExcept', 'If', 'Assign', 'FunctionDef', 'Assign', 'Assign', 'If', 'If', 'If', 'Expr', 'Assign', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'If', 'If', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Return']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Print', 'Assign', 'Expr', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'If', 'Assign', 'Assign', 'For']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Return']), ('decorator_list', [])]": 6, "BoolOp -> [('op', 'And'), ('values', ['Compare', 'Num'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'AugAssign', 'Assign', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Call', 'Call', 'Call', 'Call', 'Call'])]": 11, "ExceptHandler -> [('type', 'Name'), ('name', 'Name'), ('body', ['Import', 'Expr'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'TryExcept', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'TryExcept', 'Return']), ('decorator_list', [])]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assert', 'Assign', 'Assert', 'Assert', 'Assert', 'Assert', 'If', 'If', 'Assign', 'Assert']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Import', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Num', 'Name', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'If', 'Assign', 'If', 'If']), ('decorator_list', ['Name'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'TryExcept', 'If', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Return']), ('decorator_list', [])]": 1, "Tuple -> [('elts', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('ctx', 'Load')]": 1, "If -> [('test', 'UnaryOp'), ('body', ['FunctionDef']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'Assign', 'For', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Name', 'Call', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 3, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Assign', 'If', 'For']), ('orelse', [])]": 2, "If -> [('test', 'Name'), ('body', ['Expr']), ('orelse', ['If', 'Print'])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Expr']), ('orelse', [])]": 20, "If -> [('test', 'Compare'), ('body', ['Assign', 'For', 'Print']), ('orelse', [])]": 2, "For -> [('target', 'Name'), ('iter', 'Subscript'), ('body', ['TryExcept', 'Expr']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'Assert', 'Assign', 'Assign', 'Delete', 'Assign', 'Assign', 'Assign', 'Assign', 'Assert', 'Assign', 'Assert', 'Assign', 'Assign', 'Assert', 'Assert', 'Assert', 'Assert', 'Assert', 'If', 'If', 'Assign', 'Assert', 'Assign', 'Assert', 'Assign', 'Assert', 'Assign', 'Assert', 'Assign', 'Assert', 'Assert', 'Assert']), ('decorator_list', [])]": 1, "If -> [('test', 'Name'), ('body', ['Assign', 'Assign', 'TryFinally']), ('orelse', [])]": 1, "For -> [('target', 'Tuple'), ('iter', 'Name'), ('body', ['Assign', 'For']), ('orelse', [])]": 1, "If -> [('test', 'Attribute'), ('body', ['Expr', 'Assign', 'If']), ('orelse', ['Expr'])]": 1, "Load -> <NULL>": 454014, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'If', 'Expr']), ('decorator_list', [])]": 3, "BoolOp -> [('op', 'Or'), ('values', ['UnaryOp', 'UnaryOp', 'Compare', 'Compare', 'Compare'])]": 1, "Compare -> [('left', 'Str'), ('ops', ['In']), ('comparators', ['Subscript'])]": 47, "Compare -> [('left', 'Subscript'), ('ops', ['NotIn']), ('comparators', ['Tuple'])]": 8, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Str', 'Str', 'Str', 'Call', 'Str'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['BinOp', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 15, "Tuple -> [('elts', ['Str', 'Str', 'Call']), ('ctx', 'Load')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'While']), ('decorator_list', [])]": 2, "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'For']), ('orelse', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'Name'), ('body', ['Import', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'TryExcept']), ('orelse', ['Assign', 'Assign', 'If', 'Assign', 'If', 'Assign', 'Expr'])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Print', 'Expr']), ('orelse', [])]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'Expr', 'If', 'Assign', 'Assign', 'For']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'Assign', 'For', 'If', 'If']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'TryExcept', 'TryExcept', 'If', 'Return']), ('decorator_list', [])]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'If', 'For', 'Assign', 'If', 'Return']), ('decorator_list', [])]": 1, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'If', 'Expr', 'If', 'Expr', 'Expr', 'Assign', 'For']), ('orelse', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'ListComp', 'Call', 'Attribute', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['If', 'AugAssign']), ('orelse', [])]": 2, "If -> [('test', 'Attribute'), ('body', ['If', 'Assign', 'Assign', 'If']), ('orelse', ['Assign'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Assign', 'If', 'Assign', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'If', 'If', 'Assign', 'If', 'Return']), ('decorator_list', [])]": 1, "ExceptHandler -> [('type', 'NoneType'), ('name', 'NoneType'), ('body', ['Assign', 'Expr'])]": 3, "TryExcept -> [('body', ['Assign', 'AugAssign', 'If', 'AugAssign', 'Expr', 'AugAssign']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'If']), ('orelse', [])]": 1, "If -> [('test', 'Name'), ('body', ['If', 'Assign']), ('orelse', ['Assign'])]": 2, "If -> [('test', 'Compare'), ('body', ['Expr']), ('orelse', ['For'])]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Expr']), ('decorator_list', [])]": 15, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'Expr', 'Return']), ('decorator_list', ['Name'])]": 1, "If -> [('test', 'Compare'), ('body', ['TryExcept', 'Assign', 'Assign']), ('orelse', ['If'])]": 1, "Call -> [('func', 'Name'), ('args', ['Tuple', 'Call', 'Tuple']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Call -> [('func', 'Attribute'), ('args', ['Call', 'Lambda']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 23, "BoolOp -> [('op', 'And'), ('values', ['Compare', 'Attribute', 'Attribute', 'Attribute'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Return', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'Call'), ('body', ['If', 'Assign', 'Assign', 'Expr', 'Expr', 'Return']), ('orelse', [])]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'If', 'ImportFrom', 'ImportFrom', 'Import', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'If'])]": 1, "Call -> [('func', 'Name'), ('args', ['Call', 'Subscript']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['Name', 'BoolOp', 'Name'])]": 5, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'If', 'If', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]": 1, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['For', 'For', 'For']), ('orelse', [])]": 1, "List -> [('elts', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('ctx', 'Load')]": 1, "Call -> [('func', 'Attribute'), ('args', ['Num', 'Name', 'Name', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Return', 'Import']), ('decorator_list', [])]": 1, "Assert -> [('test', 'Call'), ('msg', 'Name')]": 6, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('orelse', ['If'])]": 5, "BinOp -> [('left', 'Name'), ('op', 'RShift'), ('right', 'Num')]": 142, "While -> [('test', 'Num'), ('body', ['AugAssign', 'Assign', 'Assign', 'TryExcept', 'If', 'If']), ('orelse', [])]": 1, "Subscript -> [('value', 'Subscript'), ('slice', 'Index'), ('ctx', 'Store')]": 122, "ExceptHandler -> [('type', 'Name'), ('name', 'Name'), ('body', ['Print', 'Print', 'Print', 'Print', 'Print', 'Expr'])]": 2, "If -> [('test', 'Name'), ('body', ['Assign', 'Assign']), ('orelse', ['Assign', 'Assign', 'Assign'])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Expr']), ('orelse', ['If'])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign']), ('orelse', ['Assign'])]": 382, "If -> [('test', 'Compare'), ('body', ['If']), ('orelse', ['If', 'Assign'])]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Expr', 'If', 'If', 'For']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 30, "For -> [('target', 'Name'), ('iter', 'List'), ('body', ['For']), ('orelse', [])]": 32, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'Print', 'Assign', 'For', 'For', 'Assign']), ('decorator_list', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Str', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 96, "For -> [('target', 'Name'), ('iter', 'Subscript'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr']), ('orelse', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Expr', 'For', 'Expr', 'Expr']), ('orelse', [])]": 1, "Return -> [('value', 'Attribute')]": 665, "For -> [('target', 'Tuple'), ('iter', 'Name'), ('body', ['Assign', 'Expr', 'Expr', 'If', 'AugAssign', 'Expr', 'Expr']), ('orelse', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr']), ('orelse', [])]": 2, "Call -> [('func', 'Name'), ('args', ['Name', 'BinOp', 'Tuple']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'TryExcept', 'While', 'Return']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'TryExcept', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'For', 'If', 'Return']), ('decorator_list', [])]": 1, "Print -> [('dest', 'NoneType'), ('values', ['Attribute', 'Str', 'Name']), ('nl', 'bool')]": 1, "BoolOp -> [('op', 'Or'), ('values', ['BoolOp', 'Call'])]": 18, "ExceptHandler -> [('type', 'Name'), ('name', 'Name'), ('body', ['Assign', 'Expr', 'Expr'])]": 4, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'If']), ('decorator_list', [])]": 1, "If -> [('test', 'Name'), ('body', ['Print', 'If']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Return', 'If', 'Return']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Attribute']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 4, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'TryExcept', 'TryExcept', 'TryExcept', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'If', 'Assign', 'Assign', 'Assign', 'ClassDef', 'ClassDef', 'ClassDef'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Expr', 'If', 'Assign', 'If', 'Return']), ('decorator_list', [])]": 1, "TryExcept -> [('body', ['Assign', 'Assign', 'Assign', 'Expr']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 4, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Expr']), ('orelse', [])]": 57, "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['Expr', 'Expr'])]": 7, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'FunctionDef', 'Assign', 'Expr', 'Expr', 'Assign', 'FunctionDef', 'For', 'Assign', 'Expr', 'Expr', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 7, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'TryExcept', 'Return']), ('decorator_list', ['Call'])]": 2, "If -> [('test', 'Attribute'), ('body', ['Assign', 'If', 'Return']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Expr', 'Assign']), ('decorator_list', [])]": 4, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'For', 'If', 'For']), ('orelse', [])]": 1, "Call -> [('func', 'Attribute'), ('args', []), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "If -> [('test', 'BinOp'), ('body', ['Expr', 'Expr', 'Expr']), ('orelse', [])]": 4, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "Module -> [('body', ['Import', 'ImportFrom', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'Assign', 'ClassDef'])]": 1, "If -> [('test', 'Call'), ('body', ['Assign', 'If', 'Assign', 'If', 'Assign']), ('orelse', ['If'])]": 1, "List -> [('elts', ['Str', 'BinOp', 'Str', 'Str']), ('ctx', 'Load')]": 3, "List -> [('elts', ['Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num']), ('ctx', 'Load')]": 5, "For -> [('target', 'Name'), ('iter', 'List'), ('body', ['Assign', 'Expr', 'Assign', 'Assign', 'If', 'For']), ('orelse', [])]": 1, "If -> [('test', 'Compare'), ('body', ['For']), ('orelse', ['For'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'Assign', 'If', 'Assign', 'If', 'Return']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Call', 'Str', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'If']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'If', 'Assign', 'Return']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['TryExcept', 'Assign', 'Assign', 'If']), ('orelse', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Call', 'Call', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 17, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assert']), ('orelse', [])]": 2, "List -> [('elts', ['Name', 'Num', 'Name', 'Name']), ('ctx', 'Load')]": 2, "If -> [('test', 'Compare'), ('body', ['If', 'TryExcept', 'Expr', 'TryExcept', 'TryExcept', 'Expr', 'Expr']), ('orelse', [])]": 2, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Assign', 'Assert', 'Assign', 'If']), ('orelse', [])]": 2, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'TryExcept', 'ImportFrom', 'ClassDef'])]": 1, "Compare -> [('left', 'BinOp'), ('ops', ['GtE']), ('comparators', ['Name'])]": 6, "Subscript -> [('value', 'Subscript'), ('slice', 'Index'), ('ctx', 'Del')]": 9, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['TryExcept', 'Assign', 'Assign', 'If', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'TryExcept', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Str']), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Attribute', 'Attribute', 'Str'])]": 2, "TryFinally -> [('body', ['Assign', 'Expr']), ('finalbody', ['With', 'Expr', 'Expr'])]": 2, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Attribute', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 19, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'For']), ('decorator_list', ['Name'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'For', 'Expr', 'Assign', 'Assign']), ('decorator_list', [])]": 2, "TryExcept -> [('body', ['Assign', 'If', 'Assign', 'For', 'If', 'If']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'For', 'Assign', 'Assign', 'Assign', 'For', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Raise']), ('decorator_list', [])]": 1, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Pass']), ('orelse', [])]": 4, "If -> [('test', 'Attribute'), ('body', ['Assign', 'If']), ('orelse', ['Assign'])]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'Expr', 'For']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'If', 'If', 'Assign', 'For', 'Assign', 'If']), ('decorator_list', ['Name', 'Name', 'Name'])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Subscript'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ClassDef', 'Assign', 'If', 'Return']), ('decorator_list', [])]": 1, "IfExp -> [('test', 'Name'), ('body', 'Dict'), ('orelse', 'Dict')]": 2, "If -> [('test', 'Attribute'), ('body', ['If']), ('orelse', [])]": 23, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'If', 'Return']), ('decorator_list', ['Name'])]": 2, "If -> [('test', 'Compare'), ('body', ['ImportFrom', 'TryExcept', 'Raise']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'TryExcept', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'If', 'If', 'Assign', 'Assign', 'For', 'Return']), ('decorator_list', [])]": 2, "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'TryExcept', 'Assign', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Expr', 'Expr', 'Expr'])]": 1, "If -> [('test', 'Call'), ('body', ['Assign']), ('orelse', ['Raise'])]": 12, "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'FunctionDef', 'FunctionDef', 'ClassDef', 'Assign', 'Expr', 'Expr'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assert', 'Expr', 'Assign', 'Assign']), ('decorator_list', [])]": 2, "BinOp -> [('left', 'Name'), ('op', 'Add'), ('right', 'Attribute')]": 67, "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'Assign', 'If', 'Assign']), ('orelse', ['Assign', 'Assign'])]": 1, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'If', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'For', 'If', 'Return']), ('decorator_list', [])]": 2, "BinOp -> [('left', 'BinOp'), ('op', 'BitOr'), ('right', 'Attribute')]": 37, "IfExp -> [('test', 'Subscript'), ('body', 'Subscript'), ('orelse', 'Str')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'Assign', 'If', 'If', 'Return']), ('decorator_list', ['Name', 'Attribute'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Lambda']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str']), ('values', ['List', 'Call', 'Name', 'Dict'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'TryFinally']), ('decorator_list', [])]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'If', 'Assign', 'Assign', 'For', 'For']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'TryExcept', 'Expr', 'If', 'Assign', 'Assign', 'If', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'List'), ('body', ['For', 'FunctionDef', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'If', 'Assign', 'For', 'Return']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Subscript', 'Num', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 2, "comprehension -> [('target', 'Name'), ('iter', 'Call'), ('ifs', ['Name'])]": 8, "For -> [('target', 'Tuple'), ('iter', 'Name'), ('body', ['If', 'Assign', 'If']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "Dict -> [('keys', ['Str']), ('values', ['Dict'])]": 83, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'If', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'If', 'Assign', 'Return']), ('decorator_list', ['Name'])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assert', 'Assign', 'Expr']), ('orelse', [])]": 1, "Compare -> [('left', 'Call'), ('ops', ['NotIn']), ('comparators', ['Call'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'If', 'If', 'If', 'If']), ('decorator_list', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef']), ('decorator_list', [])]": 1, "If -> [('test', 'BoolOp'), ('body', ['Break']), ('orelse', [])]": 11, "TryExcept -> [('body', ['Expr', 'Assign', 'Expr']), ('handlers', ['ExceptHandler', 'ExceptHandler']), ('orelse', [])]": 1, "TryExcept -> [('body', ['Expr', 'If', 'Assign', 'Expr', 'Assign', 'Expr', 'If']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'ClassDef', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Str', 'Num', 'Str', 'Str', 'Num', 'Name', 'Num'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'If', 'Assign', 'Assign', 'Print', 'For']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "Compare -> [('left', 'Attribute'), ('ops', ['Eq']), ('comparators', ['Name'])]": 244, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Expr']), ('decorator_list', ['Attribute', 'Attribute'])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name'])]": 2, "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['If']), ('orelse', ['Raise', 'Expr', 'Expr'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Print', 'Assign', 'TryExcept', 'Assign', 'Print']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Return']), ('decorator_list', ['Call', 'Name', 'Call'])]": 3, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 4, "If -> [('test', 'UnaryOp'), ('body', ['Assign']), ('orelse', ['If'])]": 9, "Dict -> [('keys', ['Call']), ('values', ['List'])]": 1, "If -> [('test', 'Compare'), ('body', ['Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr']), ('orelse', [])]": 1, "TryExcept -> [('body', ['Assign', 'Assign', 'Assign', 'Assign', 'If', 'If', 'If', 'Print', 'Expr']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If']), ('decorator_list', [])]": 51, "BinOp -> [('left', 'Name'), ('op', 'Add'), ('right', 'List')]": 20, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'If', 'If', 'Assign', 'Assign']), ('decorator_list', [])]": 1, "ExceptHandler -> [('type', 'Attribute'), ('name', 'NoneType'), ('body', ['Assign', 'Assign', 'Expr', 'Return'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'If', 'Return']), ('decorator_list', [])]": 9, "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign', 'Assign', 'Print', 'Import', 'Expr', 'Expr', 'Return']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'If', 'If', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "Param -> <NULL>": 34138, "Dict -> [('keys', ['Attribute', 'Attribute', 'Attribute']), ('values', ['Name', 'Name', 'Name'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'If', 'Assign', 'If', 'Expr', 'If']), ('decorator_list', [])]": 1, "BinOp -> [('left', 'Num'), ('op', 'Pow'), ('right', 'Num')]": 37, "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Expr']), ('orelse', [])]": 1, "If -> [('test', 'UnaryOp'), ('body', ['Expr']), ('orelse', ['Assign', 'Assign', 'Expr'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['TryExcept']), ('decorator_list', [])]": 140, "Call -> [('func', 'Name'), ('args', ['Name', 'Attribute', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 14, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'FunctionDef', 'If', 'Expr', 'Assign', 'Return']), ('decorator_list', [])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['Dict', 'Str', 'Name'])]": 4, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['If', 'Expr']), ('orelse', ['Raise'])]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['If', 'If', 'Assign', 'If']), ('orelse', [])]": 3, "If -> [('test', 'Compare'), ('body', ['Break']), ('orelse', [])]": 81, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'ImportFrom', 'Expr', 'If']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'Return']), ('decorator_list', [])]": 12, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'TryExcept', 'Assign', 'Expr', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Num', 'Attribute', 'BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "If -> [('test', 'Subscript'), ('body', ['Expr', 'Assign', 'Assign']), ('orelse', ['Expr', 'Expr'])]": 1, "List -> [('elts', ['Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple']), ('ctx', 'Load')]": 2, "Call -> [('func', 'Attribute'), ('args', ['Name', 'List', 'Attribute']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Call -> [('func', 'Name'), ('args', ['Subscript', 'Name', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "While -> [('test', 'Num'), ('body', ['If', 'Assign', 'Assign', 'If']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['TryExcept', 'Assign', 'TryExcept']), ('decorator_list', [])]": 1, "BoolOp -> [('op', 'And'), ('values', ['BoolOp', 'Compare'])]": 2, "Raise -> [('type', 'Str'), ('inst', 'NoneType'), ('tback', 'NoneType')]": 6, "Call -> [('func', 'Attribute'), ('args', ['Subscript', 'Subscript', 'Name', 'Name', 'List', 'Tuple', 'Num', 'Name', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "IfExp -> [('test', 'Call'), ('body', 'Str'), ('orelse', 'Str')]": 9, "If -> [('test', 'UnaryOp'), ('body', ['For', 'Return']), ('orelse', ['Return'])]": 1, "Tuple -> [('elts', ['Name', 'List', 'Name']), ('ctx', 'Load')]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Name', 'List']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'AugAssign', 'Expr']), ('orelse', [])]": 2, "If -> [('test', 'Compare'), ('body', ['Assign']), ('orelse', ['Assign', 'Expr', 'Expr'])]": 1, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assert', 'Expr']), ('orelse', [])]": 1, "TryExcept -> [('body', ['Expr', 'Return']), ('handlers', ['ExceptHandler', 'ExceptHandler', 'ExceptHandler']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'Assign', 'If']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'TryExcept', 'If', 'If', 'If', 'For', 'Expr', 'Expr', 'Return']), ('decorator_list', ['Name', 'Name', 'Call', 'Call'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If']), ('decorator_list', ['Call'])]": 5, "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign', 'TryExcept', 'Expr']), ('orelse', ['Raise'])]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef'])]": 1, "BinOp -> [('left', 'Name'), ('op', 'BitAnd'), ('right', 'UnaryOp')]": 2, "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['If', 'If', 'If']), ('orelse', [])]": 2, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Str', 'Num', 'Name'])]": 2, "If -> [('test', 'Call'), ('body', ['Assign']), ('orelse', ['Assign', 'Assign', 'Assign', 'Assign'])]": 1, "If -> [('test', 'Name'), ('body', ['TryExcept', 'Expr']), ('orelse', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name', 'Attribute']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Delete']), ('decorator_list', [])]": 13, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]": 1, "While -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'If']), ('orelse', [])]": 1, "BinOp -> [('left', 'Attribute'), ('op', 'Mod'), ('right', 'Dict')]": 13, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'If', 'If', 'If', 'If', 'Assign', 'If', 'Assign', 'If', 'If', 'Assign', 'Assign', 'If', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'Assign', 'If', 'Assign', 'Return']), ('decorator_list', ['Name'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Print', 'Assign', 'Assign', 'If']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Str', 'Name', 'Name', 'Num', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['Assign', 'Assign', 'Expr', 'Expr']), ('orelse', [])]": 2, "If -> [('test', 'Attribute'), ('body', ['Expr']), ('orelse', ['Assign', 'If', 'If'])]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'FunctionDef', 'FunctionDef', 'ClassDef', 'FunctionDef', 'If'])]": 1, "arguments -> [('args', ['Name', 'Tuple', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', [])]": 1, "List -> [('elts', ['Call', 'Call', 'Call']), ('ctx', 'Load')]": 27, "Assign -> [('targets', ['Tuple']), ('value', 'GeneratorExp')]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Assign', 'For', 'If']), ('orelse', [])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Str', 'Num', 'Num', 'Num', 'Str', 'List'])]": 3, "If -> [('test', 'Compare'), ('body', ['Assign']), ('orelse', ['Assign', 'Expr', 'Assign'])]": 2, "BinOp -> [('left', 'Subscript'), ('op', 'Sub'), ('right', 'Call')]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If']), ('decorator_list', ['Attribute'])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Attribute', 'Attribute', 'Attribute', 'Str', 'Str', 'Attribute', 'Name'])]": 2, "If -> [('test', 'BoolOp'), ('body', ['AugAssign']), ('orelse', ['Break'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'For', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 2, "List -> [('elts', ['Subscript', 'Str', 'Attribute', 'Str', 'Call', 'Str', 'Call', 'Str', 'Call']), ('ctx', 'Load')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'Assign', 'For']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Print', 'Assign', 'AugAssign', 'For', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr']), ('orelse', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Assign', 'Expr']), ('orelse', [])]": 19, "Call -> [('func', 'Name'), ('args', ['Attribute', 'Str', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "If -> [('test', 'Call'), ('body', ['TryExcept', 'If']), ('orelse', [])]": 6, "Assign -> [('targets', ['Name', 'Name', 'Name']), ('value', 'Str')]": 2, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Num', 'Num', 'Name'])]": 1, "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'Assign', 'Assign', 'FunctionDef', 'Import', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]": 1, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'For', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr']), ('orelse', [])]": 2, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'If', 'ImportFrom', 'Assign', 'Assign', 'Return']), ('orelse', ['If'])]": 1, "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Assign', 'Expr', 'If']), ('decorator_list', [])]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'If', 'TryExcept', 'If', 'Expr', 'Expr', 'Return']), ('decorator_list', [])]": 1, "Tuple -> [('elts', ['Subscript', 'Str']), ('ctx', 'Load')]": 8, "List -> [('elts', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('ctx', 'Load')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', ['Name'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'ImportFrom', 'ImportFrom', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', ['Call'])]": 1, "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'AugAssign']), ('orelse', [])]": 2, "If -> [('test', 'Compare'), ('body', ['Expr', 'If', 'AugAssign', 'Assign']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Print', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Return']), ('decorator_list', [])]": 1, "Dict -> [('keys', ['Str', 'Attribute']), ('values', ['Attribute', 'Name'])]": 1, "If -> [('test', 'Compare'), ('body', ['Expr']), ('orelse', ['Expr'])]": 74, "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['Name', 'Name', 'Name'])]": 53, "TryExcept -> [('body', ['Import', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'TryExcept', 'If', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Return']), ('handlers', ['ExceptHandler', 'ExceptHandler', 'ExceptHandler', 'ExceptHandler']), ('orelse', [])]": 1, "For -> [('target', 'Tuple'), ('iter', 'Name'), ('body', ['If', 'Assign']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'Return']), ('decorator_list', ['Name'])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'If', 'Assign', 'If', 'Assign', 'Expr', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'If']), ('orelse', ['For'])]": 1, "For -> [('target', 'Tuple'), ('iter', 'List'), ('body', ['Assign', 'Expr', 'Assign', 'For']), ('orelse', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['If', 'If', 'Assign', 'If', 'If', 'If']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'If', 'If', 'Assign', 'If', 'Assign', 'If', 'If']), ('decorator_list', [])]": 1, "Dict -> [('keys', ['Name', 'Name']), ('values', ['Name', 'Attribute'])]": 2, "If -> [('test', 'Name'), ('body', ['Assign']), ('orelse', ['For', 'Assign'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'While']), ('decorator_list', [])]": 1, "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'ClassDef'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Print', 'Return']), ('decorator_list', [])]": 4, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Expr', 'TryFinally']), ('decorator_list', [])]": 1, "Compare -> [('left', 'BinOp'), ('ops', ['LtE']), ('comparators', ['BinOp'])]": 2, "BoolOp -> [('op', 'Or'), ('values', ['Name', 'Str'])]": 47, "arguments -> [('args', ['Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'str'), ('defaults', ['Str'])]": 8, "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['If', 'If', 'If', 'If']), ('orelse', [])]": 1, "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['Raise'])]": 135, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'For', 'If']), ('decorator_list', ['Name', 'Name'])]": 2, "BinOp -> [('left', 'Name'), ('op', 'Pow'), ('right', 'BinOp')]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'TryExcept'])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'If', 'If', 'If', 'If', 'If', 'If']), ('orelse', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Str'), ('body', ['Expr']), ('orelse', [])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Str', 'Str'])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'If', 'If', 'Print', 'If', 'Assign', 'Assign', 'Expr']), ('orelse', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['Expr', 'Expr', 'If']), ('orelse', [])]": 1, "IfExp -> [('test', 'Attribute'), ('body', 'Str'), ('orelse', 'Str')]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'Expr']), ('decorator_list', [])]": 9, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['If', 'If', 'Expr']), ('orelse', [])]": 2, "If -> [('test', 'Name'), ('body', ['Expr', 'Expr']), ('orelse', ['Assign', 'Return'])]": 1, "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Return']), ('orelse', [])]": 1, "Compare -> [('left', 'Name'), ('ops', ['Eq']), ('comparators', ['Tuple'])]": 6, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['For', 'For', 'AugAssign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Assign', 'Assign', 'For', 'If', 'If']), ('orelse', [])]": 1, "BoolOp -> [('op', 'Or'), ('values', ['Name', 'Num'])]": 3, "If -> [('test', 'BoolOp'), ('body', ['Delete']), ('orelse', ['If'])]": 1, "ExceptHandler -> [('type', 'Tuple'), ('name', 'NoneType'), ('body', ['Assign', 'Assign', 'If'])]": 1, "If -> [('test', 'Compare'), ('body', ['Expr']), ('orelse', ['Assign', 'Assign', 'Expr'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 2, "If -> [('test', 'Name'), ('body', ['Assign', 'Assign', 'For', 'Assign', 'Assign', 'If', 'Assign', 'Assign']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', ['Name'])]": 1, "Compare -> [('left', 'Call'), ('ops', ['Gt']), ('comparators', ['Num'])]": 320, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'For', 'Assign', 'Expr']), ('orelse', [])]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'TryExcept', 'If', 'TryExcept', 'Assign', 'Assign', 'TryExcept', 'Assign', 'Expr', 'Assign', 'If']), ('decorator_list', ['Name', 'Name', 'Call', 'Call'])]": 3, "Call -> [('func', 'Name'), ('args', ['Name', 'Str', 'Name', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'ImportFrom', 'Assign', 'Assign', 'For', 'Return']), ('decorator_list', [])]": 4, "BinOp -> [('left', 'Name'), ('op', 'Div'), ('right', 'BinOp')]": 29, "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign', 'Assign']), ('orelse', [])]": 11, "Call -> [('func', 'Name'), ('args', ['Name', 'Name', 'Name', 'Dict']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 4, "If -> [('test', 'BoolOp'), ('body', ['Assign', 'If', 'AugAssign', 'AugAssign', 'AugAssign']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Expr', 'Assign', 'Return']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 241, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assert', 'If', 'Import', 'Assign']), ('decorator_list', [])]": 1, "Tuple -> [('elts', ['Call', 'Attribute', 'Attribute']), ('ctx', 'Load')]": 4, "TryExcept -> [('body', ['Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign']), ('handlers', ['ExceptHandler', 'ExceptHandler']), ('orelse', [])]": 1, "List -> [('elts', ['Str', 'Str', 'Str', 'Attribute', 'Str', 'Name']), ('ctx', 'Load')]": 1, "If -> [('test', 'Compare'), ('body', ['If', 'Expr']), ('orelse', ['Expr', 'Return'])]": 1, "BinOp -> [('left', 'Num'), ('op', 'Sub'), ('right', 'Call')]": 13, "List -> [('elts', ['Attribute', 'Call', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute']), ('ctx', 'Load')]": 2, "Call -> [('func', 'Name'), ('args', ['Str', 'Name']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 7, "TryExcept -> [('body', ['Assign', 'Expr', 'For', 'Assign', 'Expr', 'If', 'Expr', 'Expr']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Print']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['FunctionDef', 'Expr']), ('decorator_list', [])]": 48, "ExceptHandler -> [('type', 'NoneType'), ('name', 'NoneType'), ('body', ['Print', 'Return'])]": 2, "Slice -> [('lower', 'Name'), ('upper', 'NoneType'), ('step', 'NoneType')]": 68, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'Expr']), ('decorator_list', [])]": 5, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'If', 'TryExcept', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Return']), ('decorator_list', [])]": 1, "BinOp -> [('left', 'List'), ('op', 'Add'), ('right', 'Name')]": 45, "If -> [('test', 'Attribute'), ('body', ['Assign', 'Expr']), ('orelse', [])]": 11, "BinOp -> [('left', 'Subscript'), ('op', 'Div'), ('right', 'Name')]": 8, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "While -> [('test', 'Attribute'), ('body', ['Assign', 'For', 'While']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'TryExcept', 'If', 'For', 'Expr', 'Return']), ('decorator_list', ['Name', 'Name', 'Call', 'Call'])]": 3, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 7, "Call -> [('func', 'Name'), ('args', ['Name', 'Dict', 'Dict', 'List']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'If', 'If', 'Return']), ('decorator_list', [])]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'Assign', 'Assign', 'If', 'If', 'Return']), ('decorator_list', [])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Name', 'Num', 'Name', 'Name'])]": 1, "If -> [('test', 'BoolOp'), ('body', ['Expr', 'Expr']), ('orelse', ['Expr', 'If'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 2, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'For', 'If']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['TryExcept', 'TryExcept', 'Expr', 'Expr', 'Expr', 'Return']), ('decorator_list', ['Name', 'Name', 'Call'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'If', 'Return']), ('decorator_list', ['Call'])]": 2, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Dict', 'List'])]": 1, "If -> [('test', 'Name'), ('body', ['Assign', 'Raise']), ('orelse', [])]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'If', 'Return']), ('decorator_list', [])]": 1, "IfExp -> [('test', 'Attribute'), ('body', 'Call'), ('orelse', 'Call')]": 5, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'Return']), ('decorator_list', [])]": 6, "Call -> [('func', 'Call'), ('args', ['Dict', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "If -> [('test', 'Call'), ('body', ['Assign', 'Expr', 'Return']), ('orelse', [])]": 6, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name']), ('vararg', 'str'), ('kwarg', 'str'), ('defaults', ['List', 'Name', 'Name'])]": 1, "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'Assign']), ('orelse', ['If', 'Assign', 'For', 'Assign'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 12, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Global', 'Assign', 'While']), ('decorator_list', [])]": 1, "Tuple -> [('elts', ['Attribute', 'Call', 'Attribute', 'Attribute', 'Attribute', 'Attribute']), ('ctx', 'Load')]": 1, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Expr', 'Expr', 'Expr', 'If', 'Assign']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', ['Name'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'If', 'For', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Assign', 'For', 'Expr']), ('orelse', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Str', 'Call', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 5, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'TryExcept', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'Raise']), ('decorator_list', [])]": 1, "Compare -> [('left', 'Attribute'), ('ops', ['NotEq']), ('comparators', ['List'])]": 4, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'If', 'Assign', 'If', 'If']), ('decorator_list', [])]": 2, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Str', 'Attribute', 'Str', 'Name', 'Name']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'BinOp']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign', 'If']), ('orelse', ['Assign', 'If'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Global', 'Assign', 'If', 'Return']), ('decorator_list', ['Attribute'])]": 1, "If -> [('test', 'Call'), ('body', ['Break']), ('orelse', [])]": 19, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['With']), ('orelse', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'Expr', 'Assign', 'If']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['FunctionDef']), ('orelse', [])]": 2, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Print', 'Expr']), ('orelse', [])]": 1, "Tuple -> [('elts', ['Attribute', 'Str', 'Call']), ('ctx', 'Load')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'For', 'Return']), ('decorator_list', [])]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'ClassDef', 'If'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Import', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Str', 'Str', 'Name', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 3, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'TryExcept', 'Assign', 'Assign', 'FunctionDef', 'Assign', 'Assign', 'Return']), ('decorator_list', ['Name'])]": 1, "ClassDef -> [('name', 'str'), ('bases', []), ('body', ['Expr', 'FunctionDef']), ('decorator_list', [])]": 2, "If -> [('test', 'Attribute'), ('body', ['Assign', 'Assign', 'Assign', 'TryExcept']), ('orelse', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'For']), ('decorator_list', [])]": 1, "If -> [('test', 'Subscript'), ('body', ['For']), ('orelse', [])]": 1, "If -> [('test', 'Call'), ('body', ['If', 'Assign', 'Assign', 'Return']), ('orelse', ['If'])]": 1, "Call -> [('func', 'Name'), ('args', ['Name', 'Name', 'Name']), ('keywords', []), ('starargs', 'Name'), ('kwargs', 'Name')]": 1, "Call -> [('func', 'Name'), ('args', ['Call', 'Name', 'Name', 'Name', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "If -> [('test', 'UnaryOp'), ('body', ['If', 'If']), ('orelse', [])]": 11, "If -> [('test', 'Attribute'), ('body', ['For']), ('orelse', [])]": 19, "Tuple -> [('elts', ['Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute']), ('ctx', 'Load')]": 2, "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign', 'While', 'Expr', 'Return']), ('orelse', [])]": 1, "If -> [('test', 'Name'), ('body', ['Import', 'Expr']), ('orelse', [])]": 3, "TryExcept -> [('body', ['Assign', 'If', 'Assign', 'If', 'Assign', 'Assign', 'Expr']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'If', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Print', 'Print', 'Print']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'For']), ('decorator_list', [])]": 18, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'For', 'Assign', 'For', 'Expr', 'If', 'Expr', 'Expr', 'If', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'Name'), ('body', ['FunctionDef', 'Assign', 'Expr', 'Expr', 'Expr']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'For', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'Assign', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 16, "If -> [('test', 'Call'), ('body', ['Assign', 'Expr', 'Expr', 'If', 'Expr', 'For']), ('orelse', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Tuple'), ('body', ['Assign', 'Assign', 'Expr', 'Expr', 'Expr']), ('orelse', [])]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'ClassDef', 'FunctionDef', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "Tuple -> [('elts', ['Attribute', 'Attribute', 'Call', 'Attribute', 'Call']), ('ctx', 'Load')]": 1, "With -> [('context_expr', 'Call'), ('optional_vars', 'Name'), ('body', ['Return'])]": 3, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "If -> [('test', 'UnaryOp'), ('body', ['Print', 'Continue']), ('orelse', ['TryExcept'])]": 1, "Call -> [('func', 'Name'), ('args', ['BinOp', 'Tuple', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "Dict -> [('keys', ['Str', 'Str']), ('values', ['Dict', 'Dict'])]": 23, "If -> [('test', 'BoolOp'), ('body', ['Expr', 'Assign']), ('orelse', [])]": 14, "IfExp -> [('test', 'Name'), ('body', 'Call'), ('orelse', 'Tuple')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'ImportFrom', 'Assign', 'Expr', 'Return']), ('decorator_list', [])]": 2, "Call -> [('func', 'Attribute'), ('args', ['Call', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 362, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'For']), ('decorator_list', ['Name'])]": 5, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'If', 'If', 'For', 'If', 'Assign', 'If', 'If', 'Return']), ('decorator_list', [])]": 1, "Dict -> [('keys', ['Str']), ('values', ['Tuple'])]": 7, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'If', 'Assign', 'Assign', 'Expr', 'Return']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Tuple'), ('body', ['Assign', 'If', 'Assign', 'Assign', 'Assert', 'Assert', 'Assert']), ('orelse', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'For', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]": 1, "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'ClassDef', 'ClassDef', 'FunctionDef', 'If'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'AugAssign', 'Assign', 'While', 'Expr', 'Return']), ('decorator_list', [])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'str'), ('defaults', ['Name', 'Name', 'Name'])]": 2, "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['Str', 'Name', 'List'])]": 2, "Module -> [('body', ['Import', 'Assign', 'Expr', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Assign', 'Assign'])]": 1, "Compare -> [('left', 'Call'), ('ops', ['Is']), ('comparators', ['Num'])]": 2, "arguments -> [('args', ['Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Dict'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'For', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'AugAssign', 'Assign', 'Return']), ('orelse', [])]": 1, "For -> [('target', 'Tuple'), ('iter', 'Name'), ('body', ['Expr', 'If']), ('orelse', [])]": 1, "Compare -> [('left', 'Call'), ('ops', ['Eq']), ('comparators', ['Tuple'])]": 5, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For']), ('decorator_list', [])]": 1, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Assign', 'If', 'Assign', 'Expr']), ('orelse', [])]": 1, "If -> [('test', 'Name'), ('body', ['If']), ('orelse', ['Expr'])]": 4, "Call -> [('func', 'Attribute'), ('args', ['Name']), ('keywords', []), ('starargs', 'Name'), ('kwargs', 'Name')]": 153, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Str', 'Name', 'Name', 'Str', 'Name', 'Name', 'Name'])]": 1, "If -> [('test', 'Compare'), ('body', ['Print', 'Expr']), ('orelse', ['Print', 'Expr'])]": 3, "Call -> [('func', 'Attribute'), ('args', ['Call', 'Name', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 3, "Call -> [('func', 'Name'), ('args', ['UnaryOp', 'UnaryOp', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Str', 'Str', 'Str', 'Call', 'Str', 'Str', 'Str', 'Str', 'Str'])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'For', 'If', 'Expr']), ('orelse', ['Expr'])]": 1, "AugAssign -> [('target', 'Name'), ('op', 'Div'), ('value', 'Num')]": 5, "TryExcept -> [('body', ['Assign', 'Expr', 'Expr', 'Assign', 'Return']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 2, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'For', 'If', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "Dict -> [('keys', ['Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute']), ('values', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str'])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Str', 'Str', 'Str', 'Str', 'Attribute'])]": 1, "ClassDef -> [('name', 'str'), ('bases', []), ('body', ['Expr', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "For -> [('target', 'Tuple'), ('iter', 'Subscript'), ('body', ['Delete', 'Assign']), ('orelse', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['Expr', 'If', 'Expr']), ('orelse', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 11, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'For', 'For', 'If', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['If']), ('orelse', ['Expr'])]": 15, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name'])]": 1, "Compare -> [('left', 'Attribute'), ('ops', ['Is']), ('comparators', ['Str'])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Dict', 'Attribute', 'Attribute', 'Attribute', 'Attribute'])]": 1, "Tuple -> [('elts', ['Call', 'Call', 'Call', 'Call', 'Call']), ('ctx', 'Load')]": 3, "If -> [('test', 'Compare'), ('body', ['Assign', 'Return']), ('orelse', ['If'])]": 6, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'AugAssign', 'For', 'Assign', 'If', 'If', 'For', 'AugAssign']), ('decorator_list', [])]": 2, "If -> [('test', 'Name'), ('body', ['Expr']), ('orelse', ['For'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assert', 'Assert', 'Expr']), ('decorator_list', [])]": 1, "Subscript -> [('value', 'Call'), ('slice', 'ExtSlice'), ('ctx', 'Load')]": 5, "If -> [('test', 'Attribute'), ('body', ['Assign', 'If', 'If']), ('orelse', [])]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'ClassDef', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "If -> [('test', 'BoolOp'), ('body', ['Assign']), ('orelse', ['Expr', 'Assign'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['While', 'Expr']), ('decorator_list', [])]": 2, "If -> [('test', 'Name'), ('body', ['If']), ('orelse', ['If', 'Assign', 'If', 'If', 'If', 'Expr', 'Assign'])]": 1, "Assign -> [('targets', ['Subscript']), ('value', 'Dict')]": 66, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assert', 'If', 'ImportFrom', 'Assign', 'Assign', 'If', 'If', 'If', 'Assign', 'If', 'Return']), ('decorator_list', [])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name'])]": 1, "Call -> [('func', 'Name'), ('args', ['Subscript', 'Subscript', 'Lambda']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "If -> [('test', 'Compare'), ('body', ['While', 'Return']), ('orelse', ['If'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Import', 'Expr', 'Assign', 'For', 'Return']), ('decorator_list', [])]": 2, "Call -> [('func', 'Name'), ('args', ['Num', 'Str', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Expr', 'Expr', 'If', 'Return']), ('decorator_list', [])]": 1, "BinOp -> [('left', 'Attribute'), ('op', 'RShift'), ('right', 'Num')]": 8, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Expr', 'For']), ('decorator_list', [])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Str', 'Name', 'Name', 'Name'])]": 2, "TryExcept -> [('body', ['Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Raise']), ('decorator_list', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Pass']), ('decorator_list', ['Call'])]": 7, "Call -> [('func', 'Attribute'), ('args', ['Num', 'Name', 'Attribute', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Call -> [('func', 'Name'), ('args', ['Num', 'Name', 'Name', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "Module -> [('body', ['Import', 'ImportFrom', 'Import', 'ImportFrom', 'Import', 'Import', 'ImportFrom', 'Import', 'ImportFrom', 'FunctionDef', 'ClassDef', 'Assign', 'Assign', 'ClassDef', 'If'])]": 1, "arguments -> [('args', ['Name']), ('vararg', 'str'), ('kwarg', 'NoneType'), ('defaults', [])]": 126, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Global', 'Assign', 'Expr', 'Assign', 'If', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'For', 'Assign', 'If', 'Assign', 'TryExcept', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'If', 'Expr', 'Expr', 'Delete', 'Assign', 'Assign', 'Assign', 'If', 'Expr', 'Expr', 'Assign', 'Assign', 'While', 'Expr', 'If']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'If', 'If', 'Return']), ('decorator_list', [])]": 2, "If -> [('test', 'Attribute'), ('body', ['Expr', 'Assign', 'Expr', 'Expr', 'Assign']), ('orelse', [])]": 1, "If -> [('test', 'Call'), ('body', ['Assign', 'If', 'Assign', 'Assign', 'If', 'For']), ('orelse', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Expr', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 8, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', ['Name'])]": 1, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'If', 'Expr', 'AugAssign']), ('orelse', [])]": 1, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'FunctionDef', 'Expr', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assert', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Assign', 'Pass']), ('decorator_list', [])]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'Assign', 'Assign'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Print', 'Expr']), ('decorator_list', [])]": 1, "While -> [('test', 'Call'), ('body', ['Assign', 'Assert', 'Expr', 'Assign']), ('orelse', [])]": 1, "If -> [('test', 'Name'), ('body', ['Assign', 'AugAssign']), ('orelse', ['Assign', 'AugAssign'])]": 2, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Subscript', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'TryExcept', 'Return']), ('decorator_list', ['Call'])]": 1, "TryExcept -> [('body', ['Assign', 'Assign', 'If', 'Assign']), ('handlers', ['ExceptHandler', 'ExceptHandler']), ('orelse', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'For', 'For']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'Assign', 'Assign', 'For']), ('decorator_list', ['Attribute'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Assign', 'If', 'If', 'Expr', 'TryExcept', 'TryExcept']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'TryExcept']), ('decorator_list', [])]": 21, "TryExcept -> [('body', ['If', 'If', 'If']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'If'])]": 2, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Num', 'Num', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 21, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "Tuple -> [('elts', ['BoolOp', 'BoolOp']), ('ctx', 'Load')]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assert', 'Assert', 'Assign', 'Assert', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Expr', 'Assign', 'TryExcept', 'If', 'Assign', 'If', 'Assign', 'Assign', 'If', 'Assign', 'For', 'If', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'If', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign']), ('decorator_list', [])]": 1, "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['Print', 'Raise'])]": 3, "Call -> [('func', 'Name'), ('args', ['Attribute', 'Call']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Print', 'Assign', 'For']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'Assign', 'Assign', 'If', 'Return']), ('decorator_list', [])]": 3, "TryExcept -> [('body', ['Import']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 50, "Module -> [('body', ['Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'ClassDef', 'Assign', 'Assign', 'FunctionDef'])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Name', 'Tuple', 'Attribute', 'Name', 'Call', 'Attribute', 'Attribute', 'Attribute', 'Call', 'Call', 'Call', 'Call', 'Call'])]": 1, "Tuple -> [('elts', ['List', 'List', 'List', 'List', 'List']), ('ctx', 'Load')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'For', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]": 1, "Call -> [('func', 'Call'), ('args', ['Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'Name')]": 1, "arguments -> [('args', ['Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Num'])]": 9, "If -> [('test', 'Compare'), ('body', ['TryExcept', 'If']), ('orelse', ['If'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'BinOp', 'BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 6, "Assign -> [('targets', ['Attribute']), ('value', 'Call')]": 2407, "BoolOp -> [('op', 'And'), ('values', ['Name', 'Compare', 'BoolOp'])]": 1, "Subscript -> [('value', 'Name'), ('slice', 'Slice'), ('ctx', 'Load')]": 994, "Tuple -> [('elts', ['Subscript']), ('ctx', 'Load')]": 6, "If -> [('test', 'Compare'), ('body', ['Assign']), ('orelse', ['Assign', 'Assign', 'Expr'])]": 1, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['For', 'Assign', 'Assign', 'If', 'Assign', 'Expr', 'Expr', 'For']), ('orelse', [])]": 1, "ExceptHandler -> [('type', 'Name'), ('name', 'Name'), ('body', ['Expr', 'If', 'If'])]": 2, "Assign -> [('targets', ['Subscript']), ('value', 'UnaryOp')]": 2, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Str', 'Str', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['Return', 'Assign'])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'If', 'If']), ('orelse', ['If'])]": 1, "ClassDef -> [('name', 'str'), ('bases', []), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 2, "If -> [('test', 'Compare'), ('body', ['If', 'If']), ('orelse', [])]": 24, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'str'), ('defaults', ['Name', 'Name', 'Name', 'Str', 'Str', 'Str', 'Subscript', 'Str', 'Str', 'Name'])]": 1, "Call -> [('func', 'Attribute'), ('args', []), ('keywords', []), ('starargs', 'BinOp'), ('kwargs', 'Name')]": 1, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Expr', 'Expr', 'Expr', 'Expr']), ('orelse', [])]": 3, "Compare -> [('left', 'Call'), ('ops', ['Is']), ('comparators', ['Name'])]": 59, "If -> [('test', 'Compare'), ('body', ['Expr', 'Expr', 'Expr', 'Expr']), ('orelse', [])]": 2, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'FunctionDef', 'FunctionDef', 'Assign', 'Assign', 'Assign'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'For', 'For', 'Assign', 'For', 'For']), ('decorator_list', [])]": 1, "If -> [('test', 'UnaryOp'), ('body', ['Expr']), ('orelse', ['Assign', 'If', 'If'])]": 1, "Compare -> [('left', 'Name'), ('ops', ['Lt']), ('comparators', ['Num'])]": 106, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'If'])]": 1, "ExceptHandler -> [('type', 'Attribute'), ('name', 'NoneType'), ('body', ['Assign', 'Expr', 'Raise'])]": 1, "ClassDef -> [('name', 'str'), ('bases', []), ('body', ['Assign', 'Expr', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Str', 'Str', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 5, "For -> [('target', 'Name'), ('iter', 'Subscript'), ('body', ['For', 'For', 'Expr', 'Expr']), ('orelse', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'If', 'Assign']), ('orelse', [])]": 6, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['AugAssign', 'Expr']), ('orelse', [])]": 3, "If -> [('test', 'Attribute'), ('body', ['Assign', 'Assign', 'AugAssign', 'If']), ('orelse', [])]": 1, "If -> [('test', 'Subscript'), ('body', ['Assign']), ('orelse', ['Assign', 'Expr', 'If'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]": 21, "If -> [('test', 'BoolOp'), ('body', ['Delete']), ('orelse', [])]": 11, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'If', 'Assign', 'TryExcept', 'If', 'If', 'If', 'If']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Global', 'ImportFrom', 'ImportFrom', 'If', 'Assign', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['If']), ('orelse', ['Assign', 'Assign', 'For', 'Return'])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Expr', 'ClassDef', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "Tuple -> [('elts', ['Name', 'Call', 'Name', 'Name']), ('ctx', 'Load')]": 4, "For -> [('target', 'Tuple'), ('iter', 'Tuple'), ('body', ['Assign', 'Assign', 'Expr', 'Assign', 'Expr']), ('orelse', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'Expr', 'Expr']), ('orelse', [])]": 1, "For -> [('target', 'Tuple'), ('iter', 'Subscript'), ('body', ['Assign', 'Assign', 'Expr', 'Expr']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]": 2, "Call -> [('func', 'Name'), ('args', ['Num', 'Num', 'Num', 'BinOp', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'Assign', 'FunctionDef', 'ClassDef'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'Return']), ('decorator_list', [])]": 6, "Print -> [('dest', 'NoneType'), ('values', ['Subscript', 'Str']), ('nl', 'bool')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'If', 'If', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'If']), ('decorator_list', [])]": 1, "ExceptHandler -> [('type', 'Name'), ('name', 'Tuple'), ('body', ['If'])]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'Import', 'ImportFrom', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'FunctionDef', 'FunctionDef', 'ClassDef', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'Assign', 'FunctionDef', 'ClassDef', 'ClassDef', 'ClassDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'ClassDef', 'ClassDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'If'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'If', 'TryExcept', 'Return']), ('decorator_list', [])]": 1, "Num -> [('n', 'float')]": 4012, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'AugAssign', 'While', 'Assign']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['FunctionDef', 'Assign', 'Return']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'If', 'If', 'Assign', 'Expr']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'If', 'Assign', 'Assign', 'For', 'Assign', 'Return']), ('decorator_list', [])]": 1, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Expr']), ('orelse', [])]": 138, "If -> [('test', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('orelse', ['If'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['TryExcept', 'Assign', 'If', 'Assign', 'If', 'If', 'Assign', 'If', 'Return']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Attribute', 'Name', 'Name']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 3, "List -> [('elts', ['Tuple', 'Tuple']), ('ctx', 'Load')]": 71, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['AugAssign', 'AugAssign', 'Assign', 'If']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "Assign -> [('targets', ['Subscript']), ('value', 'Str')]": 298, "If -> [('test', 'Call'), ('body', ['Expr']), ('orelse', ['If'])]": 65, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Expr', 'Assign', 'If', 'If', 'Expr']), ('orelse', ['If'])]": 1, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Assign', 'If', 'If', 'Expr']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Print', 'Assign', 'Assign', 'ClassDef', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'For']), ('decorator_list', ['Name', 'Name'])]": 4, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Assert', 'Assign', 'Assign', 'Assign', 'If', 'If']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Print', 'Assign', 'Assign', 'Expr', 'Assign', 'Print', 'Print', 'For', 'Print', 'Print', 'Print', 'Assign', 'Expr', 'Print', 'Print', 'If', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'For']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'TryFinally']), ('decorator_list', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['FunctionDef', 'FunctionDef']), ('decorator_list', ['Attribute'])]": 1, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'For', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'For', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'For', 'For', 'Assign', 'Expr', 'Expr', 'Expr'])]": 1, "If -> [('test', 'Call'), ('body', ['Assign', 'Assign', 'Return']), ('orelse', ['If'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['FunctionDef', 'Global', 'Expr', 'FunctionDef', 'If', 'Expr', 'If', 'TryExcept']), ('decorator_list', [])]": 1, "List -> [('elts', ['Dict', 'Dict', 'Dict', 'Dict', 'Dict', 'Dict', 'Dict', 'Dict', 'Dict', 'Dict', 'Dict']), ('ctx', 'Load')]": 1, "If -> [('test', 'UnaryOp'), ('body', ['Expr', 'Expr', 'Return']), ('orelse', [])]": 7, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str']), ('values', ['Tuple', 'Tuple', 'Tuple', 'Tuple'])]": 7, "Tuple -> [('elts', ['Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call']), ('ctx', 'Load')]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Dict', 'Dict', 'Dict', 'Dict', 'Dict', 'Dict'])]": 4, "Assert -> [('test', 'Compare'), ('msg', 'Tuple')]": 9, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'BinOp', 'List', 'List', 'Num'])]": 1, "BoolOp -> [('op', 'Or'), ('values', ['UnaryOp', 'UnaryOp'])]": 48, "If -> [('test', 'Name'), ('body', ['If', 'Expr']), ('orelse', ['Expr'])]": 1, "Tuple -> [('elts', ['Attribute', 'BinOp', 'Str']), ('ctx', 'Load')]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'For']), ('decorator_list', [])]": 42, "Expr -> [('value', 'Compare')]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'Import', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'ClassDef'])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Name', 'Call'])]": 2, "ExceptHandler -> [('type', 'Attribute'), ('name', 'Name'), ('body', ['If', 'Print'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'If', 'Return']), ('decorator_list', [])]": 1, "Import -> [('names', ['alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias'])]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'ClassDef', 'ClassDef'])]": 1, "BinOp -> [('left', 'BinOp'), ('op', 'Add'), ('right', 'Call')]": 280, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'Assign', 'If', 'Expr', 'If']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'TryExcept', 'TryExcept', 'TryExcept', 'TryExcept', 'TryExcept', 'Assign', 'Return']), ('decorator_list', [])]": 2, "ClassDef -> [('name', 'str'), ('bases', ['Name', 'Name']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "Dict -> [('keys', ['Name', 'Str', 'Str']), ('values', ['Name', 'Attribute', 'Name'])]": 2, "While -> [('test', 'Num'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'AugAssign']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['For', 'Return']), ('decorator_list', ['Name'])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str']), ('values', ['Str', 'Str', 'Str', 'Num'])]": 2, "Module -> [('body', ['Import', 'ImportFrom', 'Import', 'ImportFrom', 'ImportFrom', 'Import', 'TryExcept', 'TryExcept', 'Assign', 'Assign', 'Expr', 'For'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assert', 'For']), ('decorator_list', [])]": 1, "List -> [('elts', ['Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call']), ('ctx', 'Load')]": 1, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['For', 'For']), ('orelse', [])]": 1, "Call -> [('func', 'Name'), ('args', ['UnaryOp', 'UnaryOp', 'UnaryOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'ImportFrom', 'FunctionDef', 'If', 'Assign', 'For', 'Return']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'BoolOp'), ('body', ['Expr']), ('orelse', [])]": 3, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'Expr'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'Assign', 'Assert', 'Assign', 'For', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign']), ('orelse', ['Assign', 'Assign', 'Assign', 'Assign'])]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'TryExcept', 'ClassDef'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'If', 'Raise']), ('decorator_list', [])]": 4, "For -> [('target', 'Name'), ('iter', 'Tuple'), ('body', ['Assign', 'If', 'If', 'If', 'Return']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Print', 'Print', 'Print', 'Print']), ('decorator_list', [])]": 1, "TryExcept -> [('body', ['If', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 1, "If -> [('test', 'Name'), ('body', ['Assign', 'Assign']), ('orelse', ['Assign', 'Assign'])]": 30, "If -> [('test', 'UnaryOp'), ('body', ['Print']), ('orelse', [])]": 8, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 5, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assert', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "If -> [('test', 'Num'), ('body', ['Assign', 'Expr', 'Expr', 'Assign']), ('orelse', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Expr', 'If', 'Assign', 'Assign', 'Assign']), ('orelse', [])]": 1, "If -> [('test', 'Call'), ('body', ['Expr', 'Expr', 'If']), ('orelse', [])]": 2, "Compare -> [('left', 'Attribute'), ('ops', ['Eq']), ('comparators', ['Str'])]": 381, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'For', 'Return']), ('decorator_list', [])]": 8, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Print', 'Assign', 'Assign', 'Print', 'Assign', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Expr', 'If', 'Expr']), ('orelse', ['Assign', 'Expr', 'If'])]": 1, "ExceptHandler -> [('type', 'NoneType'), ('name', 'NoneType'), ('body', ['TryFinally'])]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'While', 'Assign', 'Return']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'For', 'Expr', 'Assign', 'Expr', 'Expr', 'For', 'For', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'If', 'If', 'If', 'Expr', 'Assign', 'For', 'For', 'For', 'Assign', 'Assign', 'While', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'If', 'TryExcept', 'TryExcept', 'Assign', 'If', 'FunctionDef', 'FunctionDef', 'If', 'Assign', 'If', 'Assign', 'If', 'If', 'If', 'If', 'If', 'If', 'TryExcept', 'TryExcept', 'If', 'TryExcept', 'TryExcept', 'Import', 'If', 'If', 'FunctionDef'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 5, "Compare -> [('left', 'Subscript'), ('ops', ['Gt']), ('comparators', ['Subscript'])]": 6, "AugAssign -> [('target', 'Name'), ('op', 'Div'), ('value', 'BinOp')]": 3, "If -> [('test', 'Compare'), ('body', ['Print', 'Expr']), ('orelse', [])]": 14, "TryFinally -> [('body', ['For']), ('finalbody', ['If'])]": 2, "Print -> [('dest', 'NoneType'), ('values', ['Attribute', 'Str', 'Attribute']), ('nl', 'bool')]": 1, "ExceptHandler -> [('type', 'Attribute'), ('name', 'NoneType'), ('body', ['Raise'])]": 20, "arguments -> [('args', ['Name', 'Name']), ('vararg', 'str'), ('kwarg', 'NoneType'), ('defaults', [])]": 21, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', ['Call'])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', [])]": 15, "Module -> [('body', ['Import', 'ImportFrom', 'Import', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'Import', 'FunctionDef', 'ClassDef', 'ClassDef', 'ClassDef', 'FunctionDef', 'FunctionDef', 'ImportFrom', 'ClassDef', 'ClassDef'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'TryExcept', 'Raise']), ('decorator_list', [])]": 1, "Tuple -> [('elts', ['Call', 'Call', 'Attribute', 'Call']), ('ctx', 'Load')]": 1, "Call -> [('func', 'Name'), ('args', ['Str', 'Tuple', 'Tuple']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 4, "For -> [('target', 'Name'), ('iter', 'Tuple'), ('body', ['If']), ('orelse', ['Continue'])]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('orelse', [])]": 2, "BoolOp -> [('op', 'Or'), ('values', ['Attribute', 'BoolOp', 'Attribute'])]": 1, "BinOp -> [('left', 'Attribute'), ('op', 'BitAnd'), ('right', 'Attribute')]": 3, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute'])]": 7, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 10, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'If', 'If', 'Assign', 'Assign', 'If', 'Expr']), ('orelse', [])]": 1, "If -> [('test', 'Compare'), ('body', ['FunctionDef', 'Assign']), ('orelse', ['Assign'])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Str', 'Str', 'Str', 'Call', 'BinOp'])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign']), ('decorator_list', [])]": 2, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'TryExcept', 'TryExcept', 'Assign', 'Expr']), ('orelse', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Assign', 'Assign', 'Assign']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 4, "If -> [('test', 'UnaryOp'), ('body', ['If', 'Expr', 'Return']), ('orelse', ['Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'If', 'If', 'Return'])]": 1, "Call -> [('func', 'Name'), ('args', ['Dict']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 86, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'ClassDef', 'ClassDef', 'FunctionDef', 'Assign', 'Assign', 'If'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name']), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['FunctionDef', 'FunctionDef', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign']), ('orelse', ['Assign', 'If'])]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'If', 'Assign', 'TryExcept', 'Assign', 'If', 'Assign', 'If', 'Assign', 'Return']), ('decorator_list', [])]": 1, "Compare -> [('left', 'Str'), ('ops', ['Eq']), ('comparators', ['Name'])]": 5, "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'Import', 'Assign', 'FunctionDef', 'ClassDef', 'ClassDef', 'Assign', 'Assign', 'Assign', 'ClassDef', 'Assign'])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('orelse', ['Print', 'Return'])]": 1, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]": 1, "Tuple -> [('elts', ['Attribute', 'Attribute', 'Name', 'Name']), ('ctx', 'Load')]": 1, "List -> [('elts', ['Name', 'BinOp']), ('ctx', 'Load')]": 3, "BinOp -> [('left', 'Name'), ('op', 'Div'), ('right', 'IfExp')]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Name', 'Tuple'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'List'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'For']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'If', 'For', 'For', 'For', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'TryExcept', 'Return']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'For', 'If', 'Expr']), ('orelse', [])]": 2, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'Assign', 'ClassDef', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 2, "BoolOp -> [('op', 'And'), ('values', ['Call', 'UnaryOp', 'UnaryOp'])]": 1, "Call -> [('func', 'Subscript'), ('args', ['Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "BinOp -> [('left', 'Subscript'), ('op', 'Sub'), ('right', 'Subscript')]": 73, "If -> [('test', 'Call'), ('body', ['Expr', 'Assign', 'Expr']), ('orelse', ['If'])]": 2, "Call -> [('func', 'Attribute'), ('args', ['Name']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'Name')]": 6, "If -> [('test', 'Name'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('orelse', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign'])]": 1, "If -> [('test', 'Call'), ('body', ['Assign', 'If', 'Expr', 'Return']), ('orelse', [])]": 2, "ClassDef -> [('name', 'str'), ('bases', ['Attribute', 'Name']), ('body', ['Expr', 'FunctionDef', 'Assign']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Expr']), ('decorator_list', ['Name'])]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'For', 'Expr']), ('orelse', [])]": 1, "If -> [('test', 'Name'), ('body', ['Assign', 'Assign', 'Assign', 'FunctionDef', 'For', 'Expr']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'TryExcept', 'Assign', 'Assign', 'TryExcept', 'Expr', 'Return']), ('decorator_list', ['Name'])]": 1, "While -> [('test', 'Call'), ('body', ['Expr', 'Assign']), ('orelse', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Expr']), ('orelse', ['If'])]": 21, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assert', 'If', 'Assert', 'Assign']), ('decorator_list', [])]": 1, "While -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign']), ('orelse', [])]": 1, "List -> [('elts', ['Name', 'Str', 'Str', 'Str', 'Name']), ('ctx', 'Load')]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'For', 'Expr', 'For', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', []), ('body', ['Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Print', 'Assign', 'For', 'Return']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Expr', 'Assign', 'Print', 'Assign', 'Print', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'If']), ('orelse', [])]": 1, "If -> [('test', 'Attribute'), ('body', ['If', 'Assign', 'Assign']), ('orelse', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Break']), ('orelse', [])]": 1, "Tuple -> [('elts', ['Str', 'Str', 'Dict']), ('ctx', 'Load')]": 7, "If -> [('test', 'Name'), ('body', ['ImportFrom', 'Expr']), ('orelse', ['Expr'])]": 1, "Continue -> <NULL>": 565, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'If', 'Expr', 'Expr', 'If']), ('decorator_list', [])]": 2, "If -> [('test', 'Call'), ('body', ['Assign', 'Assign', 'Expr', 'Return']), ('orelse', ['Expr', 'Return'])]": 1, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Assign', 'AugAssign', 'AugAssign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Expr']), ('orelse', [])]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Assign', 'ClassDef', 'ClassDef', 'ClassDef'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'TryFinally', 'Expr', 'Expr', 'Expr', 'Print', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'TryExcept', 'Expr', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'For', 'Expr']), ('decorator_list', [])]": 3, "BinOp -> [('left', 'Subscript'), ('op', 'Add'), ('right', 'Tuple')]": 8, "Compare -> [('left', 'Num'), ('ops', ['Lt', 'LtE']), ('comparators', ['Name', 'Num'])]": 3, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Assign', 'If', 'If', 'If', 'If', 'If', 'Assign']), ('orelse', [])]": 1, "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'Import', 'ClassDef'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', ['Call'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ClassDef', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assert', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 5, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'TryExcept', 'If', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'If', 'Return']), ('decorator_list', ['Name'])]": 1, "If -> [('test', 'Compare'), ('body', ['TryExcept', 'TryExcept', 'Print', 'For']), ('orelse', ['Raise'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'Return']), ('decorator_list', [])]": 5, "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['If', 'Expr', 'If', 'Assign', 'If', 'Assign', 'If']), ('orelse', [])]": 1, "comprehension -> [('target', 'Name'), ('iter', 'Attribute'), ('ifs', ['Attribute'])]": 5, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Assign', 'Return']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Expr']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'ImportFrom', 'ImportFrom', 'If', 'Assign', 'If', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Import', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str']), ('values', ['Attribute', 'Attribute', 'Str', 'Dict'])]": 1, "Tuple -> [('elts', ['Subscript', 'BinOp', 'BinOp', 'Subscript']), ('ctx', 'Load')]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Tuple', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 3, "List -> [('elts', ['Num', 'Name', 'Attribute', 'Tuple', 'Name']), ('ctx', 'Load')]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'If', 'Return']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'ListComp'), ('body', ['If', 'Expr']), ('orelse', [])]": 1, "Tuple -> [('elts', ['Attribute', 'Name', 'Name', 'Name', 'Attribute']), ('ctx', 'Load')]": 1, "Lambda -> [('args', 'arguments'), ('body', 'List')]": 4, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Name', 'Name', 'Name', 'Name'])]": 8, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Assign', 'If', 'If']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['List', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 19, "For -> [('target', 'Tuple'), ('iter', 'Attribute'), ('body', ['Expr', 'Expr']), ('orelse', [])]": 3, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Name', 'Subscript']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Call -> [('func', 'Name'), ('args', ['Attribute', 'Attribute', 'Num', 'Num', 'Num', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Return']), ('decorator_list', [])]": 5, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Return']), ('decorator_list', [])]": 1, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['If', 'Assign', 'Expr']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'If']), ('decorator_list', [])]": 8, "Module -> [('body', ['Import', 'ClassDef', 'Assign', 'Assign', 'Assign', 'For', 'Expr', 'Expr', 'Expr'])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Str', 'Name', 'Name'])]": 2, "Tuple -> [('elts', ['Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call']), ('ctx', 'Load')]": 1, "If -> [('test', 'Compare'), ('body', ['AugAssign', 'If', 'AugAssign']), ('orelse', ['AugAssign'])]": 2, "Slice -> [('lower', 'BinOp'), ('upper', 'Name'), ('step', 'NoneType')]": 9, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'Assign']), ('orelse', [])]": 4, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr']), ('orelse', [])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Str', 'Str', 'Str', 'Call', 'Str', 'List', 'Str', 'Str', 'Str'])]": 1, "List -> [('elts', ['Name', 'Name', 'Name', 'Call', 'Call']), ('ctx', 'Load')]": 1, "Call -> [('func', 'Attribute'), ('args', ['Attribute']), ('keywords', ['keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 34, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "While -> [('test', 'Compare'), ('body', ['TryExcept', 'Assign']), ('orelse', [])]": 1, "Tuple -> [('elts', ['Num', 'Name', 'Tuple', 'Dict', 'Tuple', 'Str']), ('ctx', 'Load')]": 6, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'ClassDef', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'Assign', 'Assign', 'For', 'Return']), ('decorator_list', [])]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'TryExcept', 'TryExcept', 'If']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'For', 'Return']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'List'), ('body', ['Expr', 'Expr', 'Expr', 'For']), ('orelse', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "Assign -> [('targets', ['Attribute']), ('value', 'Repr')]": 1, "If -> [('test', 'Compare'), ('body', ['If', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'Assign', 'Expr', 'Expr', 'For']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['With', 'ImportFrom', 'ClassDef', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Return']), ('decorator_list', ['Attribute', 'Name'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'While', 'Assign', 'Assign', 'Expr', 'If']), ('decorator_list', [])]": 1, "If -> [('test', 'Call'), ('body', ['Return']), ('orelse', ['If', 'Return'])]": 2, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['For', 'If', 'Expr']), ('orelse', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['BinOp']), ('keywords', ['keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "BinOp -> [('left', 'Call'), ('op', 'Mod'), ('right', 'Attribute')]": 15, "For -> [('target', 'Tuple'), ('iter', 'Attribute'), ('body', ['Assign', 'For', 'If', 'If']), ('orelse', [])]": 2, "If -> [('test', 'Num'), ('body', ['Expr', 'Expr']), ('orelse', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Attribute', 'BinOp', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "ExceptHandler -> [('type', 'NoneType'), ('name', 'NoneType'), ('body', ['Expr', 'Return'])]": 9, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'Assign', 'Return']), ('decorator_list', ['Name'])]": 3, "AugAssign -> [('target', 'Subscript'), ('op', 'Add'), ('value', 'Subscript')]": 4, "TryFinally -> [('body', ['TryExcept']), ('finalbody', ['Expr', 'Print', 'Print', 'Print'])]": 2, "If -> [('test', 'Compare'), ('body', ['If']), ('orelse', ['Assign'])]": 6, "Call -> [('func', 'Attribute'), ('args', ['Call', 'Attribute', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 5, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['If', 'Expr']), ('orelse', [])]": 8, "comprehension -> [('target', 'Name'), ('iter', 'Call'), ('ifs', ['UnaryOp'])]": 9, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['If', 'Assign']), ('orelse', [])]": 8, "Dict -> [('keys', ['Str', 'Str']), ('values', ['Name', 'Dict'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['BoolOp', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "ExceptHandler -> [('type', 'Name'), ('name', 'Name'), ('body', ['Print', 'Raise'])]": 5, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Name', 'Str', 'Str'])]": 1, "ExceptHandler -> [('type', 'Name'), ('name', 'Name'), ('body', ['Expr', 'TryExcept', 'Continue'])]": 1, "ExceptHandler -> [('type', 'Name'), ('name', 'Name'), ('body', ['FunctionDef', 'Assign', 'Expr', 'Expr', 'Expr'])]": 1, "If -> [('test', 'Name'), ('body', ['Assign']), ('orelse', ['AugAssign'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'AugAssign']), ('decorator_list', [])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Tuple', 'Name', 'Attribute'])]": 1, "Module -> [('body', ['Import', 'TryExcept', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'ClassDef', 'ClassDef'])]": 1, "Yield -> [('value', 'Call')]": 174, "List -> [('elts', ['Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num']), ('ctx', 'Load')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Return']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'If', 'Assign', 'TryExcept', 'Assign', 'TryExcept', 'Return']), ('decorator_list', ['Name'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'Assign', 'Assign', 'FunctionDef', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', []), ('body', ['Assign']), ('decorator_list', ['Call'])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Name', 'Name'])]": 37, "If -> [('test', 'Name'), ('body', ['Expr', 'For']), ('orelse', [])]": 4, "Call -> [('func', 'Attribute'), ('args', ['Str', 'Str', 'Str', 'Str', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 4, "If -> [('test', 'BoolOp'), ('body', ['Assign']), ('orelse', ['Raise'])]": 4, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Expr', 'For', 'Return']), ('decorator_list', [])]": 2, "Tuple -> [('elts', ['Call', 'Attribute', 'Name', 'Name']), ('ctx', 'Load')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'ClassDef', 'Assign', 'Assign', 'Expr', 'TryExcept']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'TryExcept', 'Return']), ('decorator_list', [])]": 2, "If -> [('test', 'Call'), ('body', ['While', 'If']), ('orelse', [])]": 1, "If -> [('test', 'Name'), ('body', ['Expr', 'Pass']), ('orelse', ['Expr'])]": 1, "If -> [('test', 'Compare'), ('body', ['Import', 'ClassDef', 'Expr']), ('orelse', [])]": 1, "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef'])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Str', 'Name', 'Name', 'Name', 'List', 'Name'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'ClassDef', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'If', 'Return']), ('decorator_list', ['Name', 'Name'])]": 1, "If -> [('test', 'Call'), ('body', ['With', 'Assign', 'Assign', 'For', 'Return']), ('orelse', ['Print', 'Return'])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign']), ('decorator_list', [])]": 1, "If -> [('test', 'Subscript'), ('body', ['Print', 'Expr']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['Assign'])]": 174, "Import -> [('names', ['alias', 'alias', 'alias', 'alias', 'alias', 'alias'])]": 6, "Tuple -> [('elts', ['Str', 'Str', 'Name', 'Num']), ('ctx', 'Load')]": 1, "If -> [('test', 'UnaryOp'), ('body', ['Expr', 'Assign', 'If']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['Assign', 'Expr', 'Expr']), ('orelse', [])]": 5, "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Expr', 'Return']), ('orelse', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Call', 'Name', 'BinOp', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['Assign', 'Assign', 'If']), ('orelse', [])]": 13, "If -> [('test', 'Compare'), ('body', ['Assert', 'Assert']), ('orelse', ['Assert', 'Assert'])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "Call -> [('func', 'Name'), ('args', ['BinOp', 'Num', 'UnaryOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'If', 'Assign', 'For', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Expr', 'Expr', 'Expr']), ('orelse', ['Raise'])]": 1, "BoolOp -> [('op', 'And'), ('values', ['Attribute', 'Compare', 'Compare'])]": 6, "BinOp -> [('left', 'UnaryOp'), ('op', 'Div'), ('right', 'Name')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Subscript'), ('body', ['Expr', 'If']), ('orelse', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['If', 'If', 'Assign', 'TryExcept', 'If', 'Assign', 'FunctionDef', 'If']), ('orelse', [])]": 1, "Compare -> [('left', 'Attribute'), ('ops', ['Is']), ('comparators', ['Attribute'])]": 26, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Expr', 'If']), ('orelse', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'For', 'Assign', 'For', 'Print']), ('orelse', [])]": 1, "BinOp -> [('left', 'UnaryOp'), ('op', 'Sub'), ('right', 'Num')]": 4, "Call -> [('func', 'Attribute'), ('args', ['Name', 'List', 'BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'AugAssign', 'Assign', 'Assign', 'Assign', 'Expr', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign']), ('orelse', ['If'])]": 50, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'ClassDef'])]": 1, "Call -> [('func', 'Name'), ('args', ['Num', 'Str', 'Name', 'Str', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'TryFinally']), ('orelse', [])]": 1, "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'Expr', 'Expr', 'Expr', 'Assign']), ('orelse', [])]": 1, "TryExcept -> [('body', ['Expr', 'Return']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 14, "If -> [('test', 'Call'), ('body', ['TryExcept', 'Assign']), ('orelse', ['Assign'])]": 1, "BinOp -> [('left', 'BinOp'), ('op', 'Add'), ('right', 'List')]": 21, "If -> [('test', 'Attribute'), ('body', ['ImportFrom', 'Expr']), ('orelse', [])]": 1, "If -> [('test', 'UnaryOp'), ('body', ['Return']), ('orelse', ['Assign', 'Assign', 'Assign', 'Return'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['BinOp', 'Subscript', 'Subscript', 'Subscript', 'Name', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Tuple -> [('elts', ['Str', 'Str', 'Attribute', 'Str', 'List', 'Str', 'Name']), ('ctx', 'Load')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Delete', 'Delete', 'For']), ('decorator_list', [])]": 1, "Module -> [('body', ['Import', 'Expr', 'ImportFrom', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef'])]": 1, "Dict -> [('keys', ['Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute']), ('values', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'ImportFrom', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "UnaryOp -> [('op', 'USub'), ('operand', 'Call')]": 31, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'If', 'Return']), ('decorator_list', [])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Dict', 'Name', 'Name'])]": 1, "GeneratorExp -> [('elt', 'Subscript'), ('generators', ['comprehension'])]": 14, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Num', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 7, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'For', 'Assign', 'Assign', 'For', 'Assign', 'For', 'Expr']), ('decorator_list', [])]": 1, "If -> [('test', 'Call'), ('body', ['Assign', 'TryExcept', 'AugAssign']), ('orelse', ['If'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'If', 'Assign', 'Expr', 'Expr', 'Expr', 'For']), ('decorator_list', [])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Name', 'Name', 'Str', 'Name'])]": 1, "List -> [('elts', ['Tuple', 'Call', 'Tuple', 'Tuple', 'Call']), ('ctx', 'Load')]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]": 4, "For -> [('target', 'Tuple'), ('iter', 'Name'), ('body', ['Assign', 'Assign']), ('orelse', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Print', 'Assign', 'Expr']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'Assert', 'Assign', 'Assign', 'For', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Expr', 'Raise']), ('orelse', ['If'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['FunctionDef', 'Assign', 'Assign', 'If', 'Assign', 'Return']), ('decorator_list', [])]": 1, "ExceptHandler -> [('type', 'Tuple'), ('name', 'Name'), ('body', ['Expr', 'Expr'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'For', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'For', 'Expr', 'Assign', 'Assign', 'Assign', 'For', 'If', 'For', 'If', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'Call'), ('body', ['TryExcept']), ('orelse', ['Return'])]": 1, "Call -> [('func', 'Name'), ('args', ['Call', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 46, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'Assign', 'Expr', 'Expr', 'Assign', 'If', 'Assign', 'Assign', 'If', 'If', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 3, "If -> [('test', 'Attribute'), ('body', ['Expr', 'Return']), ('orelse', [])]": 5, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'While', 'If', 'Return']), ('decorator_list', [])]": 3, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('orelse', ['Assign', 'Assign', 'Assign'])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'If', 'Assign', 'Return']), ('orelse', ['If'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'If', 'If', 'For', 'For', 'If', 'If', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'Call'), ('body', ['Expr']), ('orelse', ['Expr', 'Expr'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['TryExcept', 'If', 'Assign', 'Assign', 'If']), ('decorator_list', [])]": 1, "List -> [('elts', ['Name', 'Str', 'Str', 'Str', 'Name', 'Str']), ('ctx', 'Load')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'If', 'If', 'Assign', 'Assign', 'If', 'Return']), ('decorator_list', [])]": 1, "While -> [('test', 'BoolOp'), ('body', ['Assign', 'AugAssign', 'Expr']), ('orelse', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2186, "ClassDef -> [('name', 'str'), ('bases', []), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 10, "Call -> [('func', 'Attribute'), ('args', ['Num', 'BinOp', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "BinOp -> [('left', 'Str'), ('op', 'Mod'), ('right', 'Tuple')]": 1948, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assert', 'Assert', 'Assign', 'Assert', 'Assert', 'Assert', 'Assert', 'Assert', 'Assert', 'Assert', 'Assert', 'Assert', 'Assert', 'Assign', 'Assign', 'Assign', 'Assert', 'Assert', 'Assign', 'Assert', 'Assert', 'Assert', 'Assert', 'Assign', 'Assign', 'Assign', 'Assert', 'Assert', 'Assign', 'Assert', 'Assert', 'Assert', 'Assert', 'Assign', 'Assign', 'Assign', 'Assert']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Expr', 'If', 'If']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Attribute', 'Num', 'Name', 'Attribute', 'Num', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 4, "While -> [('test', 'Name'), ('body', ['If', 'Assign', 'Assign', 'For', 'If', 'AugAssign']), ('orelse', [])]": 1, "BoolOp -> [('op', 'And'), ('values', ['Name', 'Str'])]": 13, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef'])]": 1, "Call -> [('func', 'Name'), ('args', []), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 242, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Return']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Attribute', 'Name', 'Name', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Str', 'Call', 'Num', 'Num', 'Num'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Print', 'Expr']), ('decorator_list', [])]": 6, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'If', 'If', 'If', 'If', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'If', 'If']), ('orelse', ['Assign', 'Assign'])]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'If', 'Assign', 'Expr', 'If']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'If', 'Assign', 'Assign', 'Print', 'Assign', 'Assign', 'Expr', 'Print']), ('decorator_list', [])]": 1, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'If', 'If', 'If', 'Assign', 'For']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "TryFinally -> [('body', ['Assign', 'Assign', 'Expr', 'Assign', 'Expr']), ('finalbody', ['Expr', 'Assign'])]": 2, "Call -> [('func', 'Name'), ('args', ['BinOp', 'Name', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "If -> [('test', 'Compare'), ('body', ['Assign']), ('orelse', ['Expr', 'Break'])]": 1, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'If', 'TryExcept']), ('orelse', [])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str']), ('values', ['Call', 'BinOp', 'Name', 'List'])]": 2, "Tuple -> [('elts', ['Name', 'Name', 'BinOp', 'Name', 'Name']), ('ctx', 'Load')]": 1, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'If', 'If']), ('orelse', [])]": 1, "TryFinally -> [('body', ['Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'If', 'If', 'Expr']), ('finalbody', ['Expr'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['FunctionDef', 'Assign', 'FunctionDef', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Str', 'Call', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['Import', 'Expr', 'Raise'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'TryExcept', 'Assign', 'TryExcept']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'For']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Print', 'Return']), ('orelse', ['Print', 'ImportFrom', 'Assign', 'Expr', 'Assign', 'Print', 'Assign', 'Assign', 'If', 'Assign', 'Print', 'Expr', 'Expr', 'Expr'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'TryExcept', 'Assign', 'TryExcept']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['For', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "While -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'If', 'Assign', 'Assign']), ('orelse', [])]": 1, "If -> [('test', 'Name'), ('body', ['Assign', 'If', 'Assign', 'Assign']), ('orelse', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['If', 'For', 'AugAssign']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['For', 'Return']), ('decorator_list', [])]": 38, "List -> [('elts', ['Attribute', 'Str', 'BinOp']), ('ctx', 'Load')]": 4, "AugAssign -> [('target', 'Name'), ('op', 'BitAnd'), ('value', 'Name')]": 2, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Str', 'Name', 'Str', 'Str', 'Name'])]": 1, "If -> [('test', 'Subscript'), ('body', ['If']), ('orelse', ['Expr'])]": 1, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Expr', 'Expr', 'Expr', 'Expr']), ('orelse', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Expr', 'Import', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'For', 'TryFinally']), ('decorator_list', [])]": 1, "List -> [('elts', ['Num', 'BinOp', 'Num']), ('ctx', 'Load')]": 1, "If -> [('test', 'Call'), ('body', ['Assign', 'Assign']), ('orelse', ['If'])]": 10, "Call -> [('func', 'Name'), ('args', ['Str', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Expr', 'Expr', 'If', 'If']), ('orelse', [])]": 2, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'If']), ('orelse', ['Raise'])]": 2, "If -> [('test', 'Compare'), ('body', ['Expr', 'Assign', 'Assign', 'If', 'Assign', 'Expr']), ('orelse', ['If'])]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'With', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Expr']), ('orelse', ['Assign', 'Assign', 'Assign', 'Expr', 'If'])]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'ImportFrom', 'If', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef'])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Expr', 'Return']), ('orelse', ['Return'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'If', 'Expr', 'Print', 'Assign', 'Assign', 'For']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'TryExcept', 'If', 'FunctionDef', 'If']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Expr', 'For', 'If', 'Assign', 'If', 'Expr', 'For', 'If', 'Return']), ('decorator_list', [])]": 1, "Call -> [('func', 'Call'), ('args', ['Name', 'Name', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'Assign', 'If', 'If']), ('orelse', [])]": 1, "If -> [('test', 'Name'), ('body', ['Expr', 'Expr', 'Assign', 'Expr', 'Expr']), ('orelse', ['If'])]": 1, "List -> [('elts', ['Name', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Call', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num']), ('ctx', 'Load')]": 1, "Tuple -> [('elts', ['Name', 'Name', 'Num', 'Str', 'Dict']), ('ctx', 'Load')]": 1, "ExtSlice -> [('dims', ['Index', 'Slice'])]": 21, "BinOp -> [('left', 'Str'), ('op', 'Mult'), ('right', 'Attribute')]": 3, "If -> [('test', 'Compare'), ('body', ['Raise']), ('orelse', ['Assign', 'Assign', 'TryExcept', 'Assign', 'Assign', 'If'])]": 1, "If -> [('test', 'Name'), ('body', ['Assign']), ('orelse', ['Continue'])]": 2, "If -> [('test', 'BoolOp'), ('body', ['Pass']), ('orelse', ['Expr', 'Return'])]": 2, "List -> [('elts', ['Num', 'Num', 'Call']), ('ctx', 'Load')]": 2, "If -> [('test', 'Attribute'), ('body', ['Return']), ('orelse', ['Expr', 'If', 'Return'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'For']), ('decorator_list', [])]": 5, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Num', 'Num', 'Name', 'Num'])]": 2, "Dict -> [('keys', ['Subscript']), ('values', ['Dict'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['TryExcept']), ('decorator_list', ['Name', 'Call'])]": 1, "For -> [('target', 'Tuple'), ('iter', 'Name'), ('body', ['Assign', 'Assign', 'AugAssign']), ('orelse', [])]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'TryExcept', 'ClassDef', 'TryExcept', 'If', 'If', 'FunctionDef'])]": 1, "If -> [('test', 'Compare'), ('body', ['Expr']), ('orelse', ['Break'])]": 4, "Tuple -> [('elts', ['Str', 'Name', 'Str']), ('ctx', 'Load')]": 1, "If -> [('test', 'BoolOp'), ('body', ['Pass']), ('orelse', ['Assign', 'Expr', 'Assign'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['TryExcept', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "If -> [('test', 'Name'), ('body', ['Raise']), ('orelse', [])]": 56, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Expr', 'If', 'Assign', 'Expr', 'Return']), ('decorator_list', ['Call'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'If', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'If', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'If', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'If', 'Expr', 'Expr', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'If']), ('decorator_list', [])]": 1, "BinOp -> [('left', 'BinOp'), ('op', 'Div'), ('right', 'BinOp')]": 42, "TryExcept -> [('body', ['Assign', 'Assign', 'Assign', 'If', 'If', 'AugAssign', 'Expr', 'For', 'Expr']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 1, "Compare -> [('left', 'Subscript'), ('ops', ['Gt']), ('comparators', ['Call'])]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'If', 'If', 'If', 'If', 'Assign', 'If', 'Expr']), ('orelse', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Tuple', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 27, "Call -> [('func', 'Attribute'), ('args', ['Str', 'Name', 'List']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 3, "Call -> [('func', 'Name'), ('args', ['Tuple', 'Name', 'Tuple']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'If', 'Assign', 'For', 'For', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'Attribute'), ('body', ['Global', 'If', 'If', 'Return']), ('orelse', ['Assign'])]": 2, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str']), ('values', ['Str', 'Str', 'Call', 'Str'])]": 1, "ExceptHandler -> [('type', 'NoneType'), ('name', 'NoneType'), ('body', ['Assign', 'Assign', 'Assign'])]": 3, "For -> [('target', 'Tuple'), ('iter', 'Name'), ('body', ['Assign', 'Assign', 'If', 'If', 'Assign', 'Assign', 'If', 'If']), ('orelse', [])]": 1, "If -> [('test', 'Attribute'), ('body', ['Assign', 'If', 'Expr']), ('orelse', ['Assign', 'Expr'])]": 1, "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['If', 'Expr'])]": 2, "Call -> [('func', 'Attribute'), ('args', ['BinOp', 'Subscript']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "If -> [('test', 'Call'), ('body', ['If', 'TryExcept']), ('orelse', [])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'str'), ('defaults', ['Str', 'Str', 'Str'])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str']), ('values', ['Attribute', 'Name', 'Name', 'Attribute'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assert', 'Assert', 'Assert', 'Assert']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'If', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Import', 'FunctionDef', 'Expr', 'Return']), ('decorator_list', [])]": 2, "If -> [('test', 'Compare'), ('body', ['Assign', 'Expr', 'Expr', 'Assign', 'Assert', 'If']), ('orelse', [])]": 1, "Call -> [('func', 'Subscript'), ('args', []), ('keywords', []), ('starargs', 'GeneratorExp'), ('kwargs', 'NoneType')]": 1, "Call -> [('func', 'Attribute'), ('args', ['Str', 'Name', 'BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['Str', 'Num', 'Num'])]": 5, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assert', 'AugAssign', 'Expr', 'AugAssign']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['Assign', 'Assign', 'Assign', 'If']), ('orelse', [])]": 2, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', [])]": 44, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Return']), ('decorator_list', [])]": 1, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Assign', 'Expr', 'Expr', 'Expr']), ('orelse', [])]": 4, "Call -> [('func', 'Name'), ('args', ['Str']), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 19, "BoolOp -> [('op', 'Or'), ('values', ['Name', 'Name', 'Name'])]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'Expr', 'TryExcept', 'Assign', 'Return']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Dict']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Attribute', 'Name']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'For', 'Return']), ('decorator_list', ['Name'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'While', 'Expr', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'For']), ('decorator_list', [])]": 2, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Str', 'Dict'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'Expr', 'Return']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'If', 'If', 'Assign', 'Assign', 'If', 'FunctionDef', 'If', 'If', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Dict', 'Attribute', 'Name'])]": 1, "If -> [('test', 'Call'), ('body', ['Assign', 'Assign', 'If', 'Expr', 'If']), ('orelse', [])]": 1, "BinOp -> [('left', 'Attribute'), ('op', 'Mod'), ('right', 'Tuple')]": 3, "Tuple -> [('elts', ['Name', 'Name']), ('ctx', 'Load')]": 1578, "If -> [('test', 'BoolOp'), ('body', ['If', 'If']), ('orelse', ['Assign'])]": 2, "ExceptHandler -> [('type', 'Tuple'), ('name', 'NoneType'), ('body', ['Pass'])]": 18, "BinOp -> [('left', 'List'), ('op', 'Add'), ('right', 'ListComp')]": 9, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Expr', 'For', 'Assign', 'Return']), ('decorator_list', [])]": 2, "For -> [('target', 'Tuple'), ('iter', 'Attribute'), ('body', ['Assign', 'Assign', 'If', 'If', 'Assign', 'If', 'If', 'Assign', 'Assign', 'TryExcept', 'Assign', 'Assign', 'AugAssign', 'Assign', 'For', 'Assign', 'AugAssign']), ('orelse', [])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Str', 'Call', 'BoolOp', 'Str', 'Call'])]": 4, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'Assign', 'Assign', 'Assign', 'For', 'If', 'For', 'If', 'Assign', 'Assign', 'For', 'Expr', 'If', 'Assign', 'Assign', 'AugAssign', 'AugAssign', 'Assign', 'Import', 'Assign', 'For', 'Assert', 'TryFinally', 'Expr']), ('decorator_list', [])]": 1, "Dict -> [('keys', ['Attribute', 'Attribute', 'Attribute', 'Name', 'Name']), ('values', ['Str', 'Str', 'Str', 'Str', 'Str'])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Expr', 'Expr']), ('orelse', ['Expr'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'TryExcept', 'Assign', 'For', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "Tuple -> [('elts', ['Name', 'Name', 'Num']), ('ctx', 'Load')]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'UnaryOp'), ('body', ['FunctionDef', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr']), ('orelse', [])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['Num', 'Str', 'Num'])]": 10, "While -> [('test', 'BoolOp'), ('body', ['Expr', 'Assign', 'Assert', 'If']), ('orelse', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Tuple', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "If -> [('test', 'Call'), ('body', ['Print']), ('orelse', ['If'])]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Pass']), ('orelse', ['Assign'])]": 3, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Num'])]": 5, "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['Assign', 'Assign', 'Expr'])]": 1, "BinOp -> [('left', 'BinOp'), ('op', 'Div'), ('right', 'Num')]": 66, "Call -> [('func', 'Attribute'), ('args', ['Call', 'Subscript']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 8, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Str', 'Str', 'Name', 'Name', 'Name', 'Name'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'If', 'If', 'Expr']), ('decorator_list', [])]": 2, "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'Import', 'ImportFrom', 'ImportFrom', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Return']), ('decorator_list', [])]": 16, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'ClassDef', 'ClassDef', 'ClassDef', 'Assign'])]": 1, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'TryExcept', 'TryExcept', 'TryExcept', 'ClassDef', 'FunctionDef'])]": 1, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['If', 'Assign', 'Assign', 'Expr', 'Assign', 'If', 'If', 'If']), ('orelse', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Subscript', 'Num', 'Name', 'Subscript']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "List -> [('elts', ['Str', 'Str', 'Str', 'BinOp']), ('ctx', 'Load')]": 1, "Tuple -> [('elts', ['Name', 'Name', 'Num', 'Num']), ('ctx', 'Load')]": 2, "Call -> [('func', 'Name'), ('args', ['List', 'BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Global', 'If', 'Assign', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Global', 'Assign', 'Assign', 'Print', 'Assign', 'Print', 'If']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'If', 'Assign', 'Assign', 'Assign', 'For']), ('orelse', [])]": 1, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'TryExcept', 'ClassDef', 'FunctionDef'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Name', 'Num', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "Call -> [('func', 'Attribute'), ('args', []), ('keywords', ['keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'Call')]": 1, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'TryExcept', 'Assign', 'Assign', 'Assign', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'FunctionDef'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Attribute', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 61, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'If', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'If', 'If']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Str', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 327, "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef'])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Name', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'Expr', 'Expr']), ('decorator_list', ['Name'])]": 1, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'Import', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'ClassDef', 'ClassDef'])]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'ImportFrom', 'Import', 'ImportFrom', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'FunctionDef', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]": 1, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Expr']), ('orelse', [])]": 4, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['FunctionDef', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Return']), ('orelse', ['Assign', 'Assign', 'Return'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'Assign', 'If', 'TryExcept']), ('decorator_list', [])]": 1, "If -> [('test', 'Name'), ('body', ['Import', 'Assign']), ('orelse', ['Assign'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['FunctionDef', 'Assign', 'Assign', 'For', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'ClassDef', 'ClassDef', 'ClassDef'])]": 2, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'str'), ('kwarg', 'str'), ('defaults', ['Name', 'Name', 'Name', 'Name'])]": 1, "Call -> [('func', 'Name'), ('args', ['BinOp']), ('keywords', []), ('starargs', 'Subscript'), ('kwargs', 'NoneType')]": 10, "Call -> [('func', 'Attribute'), ('args', ['Num', 'BinOp', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['Str', 'Num', 'Str'])]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'Expr'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For']), ('decorator_list', [])]": 1, "TryExcept -> [('body', ['Assign', 'Assign', 'Assign', 'For', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['Str', 'List', 'Name'])]": 1, "arguments -> [('args', ['Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Attribute', 'Name'])]": 1, "While -> [('test', 'Name'), ('body', ['If', 'Assign', 'Assign']), ('orelse', [])]": 2, "If -> [('test', 'Compare'), ('body', ['TryExcept', 'If']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'If', 'Assign', 'For', 'Assign', 'If', 'ImportFrom', 'Assign', 'Assign', 'If', 'If', 'If', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Delete', 'Expr']), ('decorator_list', [])]": 1, "While -> [('test', 'Name'), ('body', ['Expr', 'Assign']), ('orelse', [])]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'While', 'Return']), ('decorator_list', [])]": 4, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'For', 'Delete']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Call', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 19, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'TryExcept', 'If', 'Return']), ('decorator_list', [])]": 4, "If -> [('test', 'Name'), ('body', ['If']), ('orelse', ['Assign', 'Assign'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['IfExp', 'BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "If -> [('test', 'Call'), ('body', ['Assign', 'Break']), ('orelse', [])]": 21, "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['Str', 'Call', 'Num'])]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['If', 'Assign', 'Expr']), ('orelse', [])]": 3, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'Expr']), ('orelse', [])]": 7, "arguments -> [('args', ['Tuple', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', [])]": 4, "Assign -> [('targets', ['Name', 'Name', 'Name', 'Name']), ('value', 'Call')]": 1, "Compare -> [('left', 'Subscript'), ('ops', ['GtE']), ('comparators', ['Num'])]": 5, "List -> [('elts', ['Str', 'Str', 'Name', 'Attribute', 'Str', 'Attribute']), ('ctx', 'Load')]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'If']), ('orelse', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'If', 'For', 'For', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'If', 'Assign', 'Expr', 'Expr', 'If', 'Return']), ('decorator_list', [])]": 1, "List -> [('elts', ['Name', 'Attribute', 'Attribute']), ('ctx', 'Load')]": 2, "Call -> [('func', 'Name'), ('args', ['Name']), ('keywords', ['keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 79, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'If', 'Assign', 'If', 'Expr', 'Assign', 'Assign', 'If', 'Assign', 'If', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'BoolOp'), ('body', ['If', 'If', 'For']), ('orelse', ['If'])]": 3, "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['If']), ('orelse', ['Expr'])]": 1, "If -> [('test', 'Call'), ('body', ['Return']), ('orelse', ['FunctionDef', 'Return'])]": 4, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'If', 'Return']), ('decorator_list', ['Name', 'Name'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Lambda']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 9, "Module -> [('body', ['Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'If'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Return']), ('decorator_list', [])]": 1, "Tuple -> [('elts', ['Name', 'Name', 'BoolOp']), ('ctx', 'Load')]": 2, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'ClassDef', 'FunctionDef'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'If', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Assign'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'If', 'If', 'Assign']), ('decorator_list', [])]": 2, "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'Return']), ('orelse', ['If', 'Assign', 'Expr', 'For', 'Assign', 'Expr', 'For', 'Return'])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'TryExcept', 'Expr', 'Assign', 'Assign', 'Assign', 'If', 'If', 'Expr']), ('decorator_list', ['Name'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'For', 'If']), ('decorator_list', ['Name'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Name']), ('keywords', ['keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 3, "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'Assign', 'Assign']), ('orelse', [])]": 8, "Call -> [('func', 'Name'), ('args', ['Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'Name')]": 27, "For -> [('target', 'Name'), ('iter', 'Subscript'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'Expr', 'Expr', 'Assign', 'For', 'Expr']), ('decorator_list', ['Name', 'Name', 'Name', 'Name'])]": 1, "If -> [('test', 'Attribute'), ('body', ['Assign']), ('orelse', ['TryExcept'])]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['TryExcept', 'Assign', 'If', 'Assign', 'Assign', 'TryExcept', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'Assign', 'Assign', 'For', 'For', 'Return']), ('decorator_list', [])]": 1, "While -> [('test', 'Call'), ('body', ['If', 'If']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'Assign', 'Assign', 'Expr', 'If', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'If', 'Expr', 'Expr', 'Assign', 'For', 'Assign', 'Assign', 'For']), ('decorator_list', [])]": 1, "Dict -> [('keys', ['Attribute', 'Attribute']), ('values', ['List', 'List'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'Assign']), ('decorator_list', ['Call'])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assert', 'If']), ('orelse', ['Assign', 'Assign'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'Assign', 'For', 'Return']), ('decorator_list', [])]": 6, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'AugAssign', 'If', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'For', 'FunctionDef', 'Assign', 'For', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "ExceptHandler -> [('type', 'Attribute'), ('name', 'Name'), ('body', ['Expr', 'If'])]": 2, "Slice -> [('lower', 'Num'), ('upper', 'NoneType'), ('step', 'Num')]": 4, "Call -> [('func', 'Name'), ('args', ['Str', 'Str', 'Str', 'Str', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 6, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'TryExcept', 'Assign', 'Assign', 'For', 'Assign', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'BoolOp'), ('body', ['Assert']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'If']), ('decorator_list', [])]": 6, "ExceptHandler -> [('type', 'Attribute'), ('name', 'Name'), ('body', ['Print', 'Return'])]": 1, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'While', 'FunctionDef', 'Assign', 'Assign', 'FunctionDef', 'For', 'For', 'For', 'For', 'Expr', 'Assign', 'For', 'Assign', 'Expr']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assert', 'Assign', 'Assert', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "BoolOp -> [('op', 'And'), ('values', ['UnaryOp', 'Call'])]": 39, "If -> [('test', 'Name'), ('body', ['ImportFrom']), ('orelse', [])]": 1, "TryExcept -> [('body', ['Assign', 'Assign', 'Assign']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 8, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'While', 'Assign']), ('orelse', [])]": 1, "Call -> [('func', 'Yield'), ('args', ['Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 10, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Import', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Assign', 'Assign', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 3, "Compare -> [('left', 'Name'), ('ops', ['Gt']), ('comparators', ['Call'])]": 13, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Str'])]": 6, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ClassDef'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'If', 'Return']), ('decorator_list', [])]": 1, "While -> [('test', 'Name'), ('body', ['Assign', 'TryExcept', 'Assign', 'Assign', 'Return']), ('orelse', [])]": 1, "BoolOp -> [('op', 'And'), ('values', ['Call', 'UnaryOp'])]": 36, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Assign']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'For', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'While', 'Return']), ('decorator_list', [])]": 1, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Assign', 'AugAssign', 'AugAssign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Expr']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Delete']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'If', 'TryExcept', 'Return']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'If', 'FunctionDef', 'Assign', 'For', 'Return']), ('decorator_list', [])]": 2, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Attribute', 'Num', 'Num', 'Num', 'Num', 'Num', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 5, "If -> [('test', 'BoolOp'), ('body', ['Print']), ('orelse', [])]": 6, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'If', 'If', 'If', 'If', 'If']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Raise']), ('orelse', [])]": 6, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'If', 'With']), ('orelse', [])]": 1, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef'])]": 1, "Compare -> [('left', 'Call'), ('ops', ['NotIn']), ('comparators', ['Attribute'])]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'For', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('orelse', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['BinOp', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 31, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['Call', 'Name', 'Call'])]": 3, "keyword -> [('arg', 'str'), ('value', 'Name')]": 8256, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'If', 'For', 'For', 'For', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "While -> [('test', 'Name'), ('body', ['Assign', 'If', 'TryExcept', 'Expr']), ('orelse', [])]": 1, "If -> [('test', 'Compare'), ('body', ['If', 'Continue']), ('orelse', [])]": 5, "If -> [('test', 'Call'), ('body', ['If', 'If', 'If', 'If', 'Raise']), ('orelse', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Expr']), ('orelse', ['Expr', 'Expr', 'Expr'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'For']), ('decorator_list', ['Name'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Print', 'Return']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'Assign']), ('decorator_list', [])]": 2, "Compare -> [('left', 'Call'), ('ops', ['Gt']), ('comparators', ['Attribute'])]": 13, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['If', 'Assign', 'If', 'Assign', 'If', 'If']), ('orelse', [])]": 2, "Call -> [('func', 'Attribute'), ('args', ['Name']), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "With -> [('context_expr', 'Call'), ('optional_vars', 'Name'), ('body', ['For'])]": 8, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Num', 'Num', 'Str', 'Str', 'Str'])]": 1, "Module -> [('body', ['Import', 'ImportFrom', 'Import', 'Import', 'Import', 'Import', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]": 1, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Print', 'Assign', 'Expr', 'Assign']), ('orelse', [])]": 1, "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['Import', 'Assign', 'Assign', 'Expr', 'Expr'])]": 1, "If -> [('test', 'Call'), ('body', ['Assign', 'If']), ('orelse', ['Raise'])]": 3, "If -> [('test', 'Name'), ('body', ['Assign', 'Assign', 'Expr']), ('orelse', ['For'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'Assign', 'Assign', 'If', 'Assign', 'If', 'Expr']), ('decorator_list', [])]": 1, "If -> [('test', 'BoolOp'), ('body', ['For', 'If', 'If']), ('orelse', [])]": 1, "If -> [('test', 'Call'), ('body', ['If']), ('orelse', ['Return'])]": 3, "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'Expr', 'Expr', 'Expr', 'FunctionDef', 'ClassDef', 'FunctionDef', 'FunctionDef'])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 2, "If -> [('test', 'Compare'), ('body', ['If', 'Expr', 'Assign', 'For', 'Expr', 'Assign', 'For', 'Expr', 'For', 'Expr']), ('orelse', ['If'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign']), ('decorator_list', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['ClassDef']), ('decorator_list', [])]": 1, "arguments -> [('args', ['Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name'])]": 469, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Return']), ('decorator_list', [])]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'Expr', 'FunctionDef', 'Return']), ('decorator_list', [])]": 1, "TryFinally -> [('body', ['If', 'Assign', 'Assign', 'If', 'Expr', 'Return']), ('finalbody', ['Expr'])]": 1, "Call -> [('func', 'Attribute'), ('args', []), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 16359, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['If', 'If', 'Expr']), ('orelse', [])]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'If']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Str', 'UnaryOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Subscript', 'BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['FunctionDef', 'FunctionDef']), ('decorator_list', ['Call'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'If', 'Return']), ('decorator_list', ['Name'])]": 1, "Call -> [('func', 'Name'), ('args', ['Attribute', 'Name', 'Name']), ('keywords', []), ('starargs', 'Name'), ('kwargs', 'Name')]": 1, "TryExcept -> [('body', ['Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Assign', 'ClassDef', 'FunctionDef', 'FunctionDef', 'If'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'BinOp', 'BinOp', 'Num', 'Name', 'Name', 'Attribute', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr']), ('decorator_list', ['Name'])]": 2, "Global -> [('names', ['str'])]": 78, "Tuple -> [('elts', ['Name', 'Name', 'Name', 'Str']), ('ctx', 'Load')]": 2, "If -> [('test', 'BoolOp'), ('body', ['If', 'If', 'Return']), ('orelse', [])]": 2, "Dict -> [('keys', ['Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute']), ('values', ['Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num'])]": 2, "Tuple -> [('elts', ['Str', 'Num', 'Num', 'Num', 'Num']), ('ctx', 'Load')]": 8, "Call -> [('func', 'Attribute'), ('args', ['Str', 'IfExp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "For -> [('target', 'Tuple'), ('iter', 'Name'), ('body', ['Assign', 'For', 'If', 'Assign', 'If', 'If']), ('orelse', [])]": 2, "If -> [('test', 'Compare'), ('body', ['Assign', 'If', 'Assign', 'Assign']), ('orelse', ['Assign', 'Assign'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'ClassDef', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "Tuple -> [('elts', ['Call', 'List']), ('ctx', 'Load')]": 10, "List -> [('elts', ['Num', 'Num', 'BinOp']), ('ctx', 'Load')]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'For', 'Break']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'If', 'If', 'Assign', 'Assign', 'Expr', 'Assign', 'If']), ('decorator_list', [])]": 1, "If -> [('test', 'Call'), ('body', ['Expr', 'ClassDef', 'Delete', 'Raise']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'Assign', 'Assign', 'If', 'Assign']), ('decorator_list', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Str', 'Name', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Assert -> [('test', 'Num'), ('msg', 'BinOp')]": 3, "Module -> [('body', ['Expr', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ClassDef'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Assign', 'If', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'If', 'Assign', 'TryFinally']), ('decorator_list', [])]": 1, "List -> [('elts', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('ctx', 'Store')]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Attribute', 'BoolOp', 'Call'])]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['For']), ('orelse', [])]": 73, "If -> [('test', 'Compare'), ('body', ['Print', 'Assign', 'If']), ('orelse', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Num', 'Num', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Module -> [('body', ['Import', 'ImportFrom', 'Expr', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'TryExcept', 'TryExcept', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'ClassDef', 'ClassDef'])]": 1, "If -> [('test', 'BoolOp'), ('body', ['Expr', 'Expr']), ('orelse', ['Assign', 'For', 'Assign', 'Expr', 'Assign'])]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'FunctionDef', 'Expr'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'Assign', 'For', 'For', 'Expr', 'Expr', 'For']), ('decorator_list', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 2, "List -> [('elts', ['BinOp']), ('ctx', 'Load')]": 39, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'TryExcept', 'For', 'Return']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Str', 'Name', 'Attribute', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Expr', 'Import', 'ClassDef', 'FunctionDef', 'If'])]": 2, "BinOp -> [('left', 'List'), ('op', 'Add'), ('right', 'Subscript')]": 7, "Call -> [('func', 'Name'), ('args', ['Name', 'Subscript', 'Name', 'Name', 'Subscript', 'Subscript', 'Name', 'BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "For -> [('target', 'Name'), ('iter', 'List'), ('body', ['For', 'Expr']), ('orelse', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Num', 'Num', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "BinOp -> [('left', 'Subscript'), ('op', 'Mult'), ('right', 'Call')]": 11, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'Expr', 'Expr']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'If', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'For', 'FunctionDef', 'Assign', 'Assign', 'For', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "BinOp -> [('left', 'Name'), ('op', 'FloorDiv'), ('right', 'BinOp')]": 2, "comprehension -> [('target', 'Tuple'), ('iter', 'Name'), ('ifs', ['Call'])]": 2, "Compare -> [('left', 'Subscript'), ('ops', ['NotIn']), ('comparators', ['Attribute'])]": 4, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'Assign', 'If', 'Assign']), ('orelse', ['Assign', 'Return'])]": 2, "ExceptHandler -> [('type', 'Attribute'), ('name', 'NoneType'), ('body', ['Assign'])]": 31, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Name', 'Str', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Tuple -> [('elts', ['Name', 'Name', 'Name', 'BoolOp', 'Call', 'Name']), ('ctx', 'Load')]": 2, "BoolOp -> [('op', 'And'), ('values', ['BoolOp', 'BoolOp'])]": 2, "TryExcept -> [('body', ['Assign', 'Assign', 'AugAssign', 'Assign', 'Expr', 'Assign', 'Assign', 'If', 'Return']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'For', 'Assign', 'Assign', 'For', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 2, "If -> [('test', 'Name'), ('body', ['If', 'Assign']), ('orelse', [])]": 4, "Assign -> [('targets', ['Attribute', 'Attribute', 'Attribute']), ('value', 'Name')]": 3, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name'])]": 3, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Call', 'Call', 'Call', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Return']), ('decorator_list', ['Name', 'Call'])]": 5, "ClassDef -> [('name', 'str'), ('bases', []), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'TryExcept', 'Expr', 'Assign', 'Assign', 'Assign', 'TryFinally', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'BinOp'), ('body', ['Assign', 'For', 'Assign', 'Print']), ('orelse', [])]": 1, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['If', 'Assign', 'Assign', 'Expr']), ('orelse', [])]": 4, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign']), ('orelse', [])]": 2, "If -> [('test', 'Attribute'), ('body', ['ImportFrom', 'ImportFrom', 'Assign', 'Assign']), ('orelse', ['Assign'])]": 1, "If -> [('test', 'Compare'), ('body', ['Expr', 'TryFinally']), ('orelse', [])]": 1, "If -> [('test', 'Compare'), ('body', ['If', 'Return']), ('orelse', ['If', 'Return'])]": 1, "If -> [('test', 'BoolOp'), ('body', ['If', 'If', 'Assign', 'Assign', 'If', 'If']), ('orelse', [])]": 2, "If -> [('test', 'Name'), ('body', ['If', 'Assign']), ('orelse', ['Assign', 'Assign'])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['BinOp', 'Str', 'Str'])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 2, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Str'])]": 5, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Str', 'Call', 'Call', 'Call', 'Name', 'Name'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "BoolOp -> [('op', 'And'), ('values', ['Name', 'Call', 'Call', 'Compare'])]": 1, "If -> [('test', 'BoolOp'), ('body', ['Assign', 'If', 'If', 'Return']), ('orelse', [])]": 1, "While -> [('test', 'Compare'), ('body', ['If']), ('orelse', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'For']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'If', 'If', 'Assign', 'For', 'AugAssign', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'If']), ('orelse', ['Return'])]": 1, "If -> [('test', 'Name'), ('body', ['If', 'Expr']), ('orelse', [])]": 11, "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['Num', 'Num', 'Num'])]": 2, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'If', 'Raise']), ('decorator_list', ['Name', 'Call'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Print', 'For']), ('decorator_list', [])]": 2, "Print -> [('dest', 'NoneType'), ('values', ['Compare']), ('nl', 'bool')]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'If', 'If', 'If']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'If', 'Assign', 'Assign', 'If']), ('decorator_list', [])]": 1, "If -> [('test', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'Return']), ('orelse', ['Return'])]": 1, "If -> [('test', 'Call'), ('body', ['Assign', 'If', 'Assign', 'If']), ('orelse', ['If'])]": 1, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'ClassDef'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Str']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'If', 'If', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Return']), ('decorator_list', [])]": 1, "TryExcept -> [('body', ['Expr', 'Expr', 'Break']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 1, "Tuple -> [('elts', ['Name', 'Str', 'Str', 'Str']), ('ctx', 'Load')]": 5, "While -> [('test', 'Call'), ('body', ['Pass']), ('orelse', [])]": 1, "BoolOp -> [('op', 'Or'), ('values', ['BoolOp', 'Attribute'])]": 4, "If -> [('test', 'Call'), ('body', ['Assign', 'For', 'Expr']), ('orelse', [])]": 2, "Module -> [('body', ['Import', 'ImportFrom', 'Expr', 'Import', 'Expr', 'ImportFrom', 'Import', 'Assign', 'For'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'Assign', 'Expr', 'Assign', 'For', 'Expr']), ('decorator_list', [])]": 1, "ExceptHandler -> [('type', 'NoneType'), ('name', 'NoneType'), ('body', ['Expr', 'Expr'])]": 5, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'If', 'Assign', 'Return']), ('decorator_list', [])]": 2, "Tuple -> [('elts', ['Str', 'Str', 'Str', 'Name']), ('ctx', 'Load')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'FunctionDef', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'Assign', 'For', 'Assign', 'For']), ('decorator_list', [])]": 2, "Exec -> [('body', 'Attribute'), ('globals', 'Attribute'), ('locals', 'Attribute')]": 2, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'If'])]": 1, "ExceptHandler -> [('type', 'Attribute'), ('name', 'Name'), ('body', ['Print', 'Raise'])]": 2, "While -> [('test', 'Name'), ('body', ['Assign', 'For', 'AugAssign']), ('orelse', [])]": 1, "TryFinally -> [('body', ['Assign', 'If', 'If']), ('finalbody', ['Expr'])]": 1, "Call -> [('func', 'Name'), ('args', ['Lambda', 'List']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 4, "BinOp -> [('left', 'Call'), ('op', 'Add'), ('right', 'List')]": 16, "Call -> [('func', 'Name'), ('args', ['Call', 'Name', 'BinOp', 'Name', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Print', 'Assign', 'Print', 'Assign', 'Expr', 'Assign', 'For', 'For', 'Print', 'Assign', 'Assign', 'For', 'Expr', 'Print', 'Assign', 'Assign', 'For', 'Print', 'Assign', 'Assign', 'For', 'Expr', 'Print', 'Assign', 'Assign', 'For', 'Expr', 'Expr', 'Expr']), ('orelse', ['If'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 1, "Call -> [('func', 'Name'), ('args', ['BinOp']), ('keywords', []), ('starargs', 'Name'), ('kwargs', 'NoneType')]": 4, "If -> [('test', 'Compare'), ('body', ['For']), ('orelse', ['Assign'])]": 4, "ExceptHandler -> [('type', 'NoneType'), ('name', 'NoneType'), ('body', ['If'])]": 9, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Num', 'Num', 'Num', 'Num', 'Num', 'Num'])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Subscript', 'Subscript', 'Subscript', 'Subscript', 'Subscript', 'Subscript', 'Subscript'])]": 2, "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign', 'Assign']), ('orelse', ['If'])]": 4, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'For', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "If -> [('test', 'Attribute'), ('body', ['Assign', 'Assign']), ('orelse', ['If'])]": 1, "List -> [('elts', ['Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num']), ('ctx', 'Load')]": 2, "If -> [('test', 'Call'), ('body', ['Assign', 'Expr', 'AugAssign', 'Assign', 'Expr']), ('orelse', ['Assign'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assert', 'Assign', 'Assign', 'TryExcept', 'Expr', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['If', 'If', 'Expr', 'Expr', 'Return']), ('orelse', ['If'])]": 1, "If -> [('test', 'Name'), ('body', ['Assign', 'Expr', 'Expr']), ('orelse', ['Expr'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'TryExcept', 'Assign', 'Assign', 'FunctionDef', 'Assign', 'Assign', 'Return']), ('decorator_list', ['Name'])]": 1, "If -> [('test', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If']), ('orelse', [])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Num', 'Num', 'Num'])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Str', 'Name', 'Name'])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'Assign', 'Assign', 'Assign', 'ImportFrom', 'Import', 'Assign', 'Assign', 'FunctionDef', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'Assign', 'For', 'Assign', 'Assign', 'For', 'If']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('orelse', [])]": 4, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'Import', 'Assign', 'ClassDef', 'ClassDef', 'ClassDef'])]": 1, "For -> [('target', 'Name'), ('iter', 'List'), ('body', ['Expr', 'If', 'If']), ('orelse', [])]": 2, "TryExcept -> [('body', ['Assign', 'If', 'Expr']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 3, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Name', 'Name'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 25, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'Assign', 'If', 'Return']), ('decorator_list', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Name', 'Name', 'Tuple', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Tuple -> [('elts', ['Num', 'Name', 'Dict']), ('ctx', 'Load')]": 6, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'Import', 'Import', 'Import', 'Import', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Import', 'Assign', 'Assign', 'For', 'Expr']), ('decorator_list', [])]": 1, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assert', 'If', 'Assign', 'Assign', 'If', 'If']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['BinOp', 'BinOp', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Dict -> [('keys', ['Name', 'Str', 'Str']), ('values', ['Name', 'Subscript', 'Subscript'])]": 1, "Tuple -> [('elts', ['Name', 'IfExp']), ('ctx', 'Load')]": 3, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'If'])]": 2, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 3, "Tuple -> [('elts', ['BinOp', 'Name', 'Attribute']), ('ctx', 'Load')]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute'])]": 1, "TryExcept -> [('body', ['For', 'For', 'For', 'For']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 1, "IfExp -> [('test', 'UnaryOp'), ('body', 'Num'), ('orelse', 'Num')]": 4, "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'TryExcept', 'While', 'Return']), ('decorator_list', [])]": 2, "If -> [('test', 'BoolOp'), ('body', ['TryExcept', 'Expr', 'Expr', 'Expr', 'Expr', 'If', 'Expr']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'ImportFrom', 'Import', 'Assign', 'Assign', 'FunctionDef', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name'])]": 3, "For -> [('target', 'Tuple'), ('iter', 'Tuple'), ('body', ['Assign']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'If', 'Expr']), ('decorator_list', ['Name'])]": 1, "TryExcept -> [('body', ['Import']), ('handlers', ['ExceptHandler']), ('orelse', ['Import', 'Expr', 'Expr'])]": 2, "Tuple -> [('elts', ['Name']), ('ctx', 'Load')]": 167, "If -> [('test', 'Attribute'), ('body', ['Expr', 'Assign']), ('orelse', ['If'])]": 1, "Call -> [('func', 'Name'), ('args', ['Subscript', 'Subscript']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 79, "If -> [('test', 'Compare'), ('body', ['Print', 'Return']), ('orelse', ['Return'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 3, "List -> [('elts', ['Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num']), ('ctx', 'Load')]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Expr', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 2, "Assign -> [('targets', ['Attribute']), ('value', 'Lambda')]": 23, "ExceptHandler -> [('type', 'Name'), ('name', 'Name'), ('body', ['Expr', 'Assign'])]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "BinOp -> [('left', 'BinOp'), ('op', 'Div'), ('right', 'Subscript')]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'Assign', 'If', 'Expr', 'Return']), ('decorator_list', [])]": 2, "Module -> [('body', ['Import', 'Import', 'Expr', 'ImportFrom', 'Import', 'ImportFrom', 'Import', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'ClassDef', 'Assign'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Return']), ('decorator_list', [])]": 25, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Expr', 'Assign', 'Expr', 'Return']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['BinOp', 'Tuple']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Return']), ('decorator_list', ['Name'])]": 2, "For -> [('target', 'Name'), ('iter', 'GeneratorExp'), ('body', ['If', 'Expr']), ('orelse', [])]": 6, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Expr', 'Expr', 'For']), ('decorator_list', [])]": 1, "arguments -> [('args', ['Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'str'), ('defaults', ['Name'])]": 29, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'AugAssign']), ('orelse', [])]": 2, "If -> [('test', 'Attribute'), ('body', ['Assign', 'If']), ('orelse', ['Expr'])]": 1, "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'If', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'For', 'For']), ('orelse', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Num', 'Attribute', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "If -> [('test', 'Name'), ('body', ['Expr']), ('orelse', ['Expr', 'Expr', 'Expr'])]": 2, "If -> [('test', 'Compare'), ('body', ['If']), ('orelse', [])]": 164, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'Expr', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Expr', 'Import']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('orelse', [])]": 1, "If -> [('test', 'UnaryOp'), ('body', ['If', 'If']), ('orelse', ['While'])]": 1, "If -> [('test', 'Call'), ('body', ['Assign', 'FunctionDef']), ('orelse', ['FunctionDef'])]": 1, "If -> [('test', 'Call'), ('body', ['Expr', 'Expr', 'Return']), ('orelse', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Call', 'Tuple']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 45, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['With', 'Return']), ('decorator_list', [])]": 2, "If -> [('test', 'BinOp'), ('body', ['Assign']), ('orelse', [])]": 16, "Call -> [('func', 'Attribute'), ('args', ['Str', 'Name', 'BinOp', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'Assign', 'For']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'For', 'For', 'Return']), ('decorator_list', [])]": 2, "List -> [('elts', ['Str', 'Subscript', 'Subscript', 'Subscript', 'Subscript']), ('ctx', 'Load')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'If', 'TryExcept', 'Global', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Print', 'Expr', 'Print', 'Print', 'Print', 'Assign', 'Print', 'Assign', 'Print', 'Expr', 'Assign', 'Print', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'If', 'If', 'Print', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Print', 'Expr', 'Expr', 'Expr', 'Print', 'Expr', 'AugAssign']), ('decorator_list', [])]": 1, "BoolOp -> [('op', 'Or'), ('values', ['Call', 'Attribute'])]": 20, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'ClassDef', 'ClassDef', 'ClassDef', 'FunctionDef', 'Expr', 'Expr', 'Expr', 'Expr'])]": 1, "If -> [('test', 'Name'), ('body', ['Assign', 'Assign']), ('orelse', [])]": 28, "If -> [('test', 'BoolOp'), ('body', ['TryExcept', 'If', 'If']), ('orelse', [])]": 1, "Compare -> [('left', 'Str'), ('ops', ['In']), ('comparators', ['ListComp'])]": 1, "Delete -> [('targets', ['Subscript'])]": 182, "For -> [('target', 'Tuple'), ('iter', 'Tuple'), ('body', ['Assign', 'If']), ('orelse', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Name']), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "Dict -> [('keys', ['Str', 'Str']), ('values', ['List', 'Num'])]": 10, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 2, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr']), ('orelse', [])]": 2, "arguments -> [('args', ['Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['List', 'Name'])]": 6, "If -> [('test', 'UnaryOp'), ('body', ['Assign']), ('orelse', ['If', 'If', 'If'])]": 1, "AugAssign -> [('target', 'Attribute'), ('op', 'Add'), ('value', 'BinOp')]": 34, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 101, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 4, "For -> [('target', 'Name'), ('iter', 'Subscript'), ('body', ['Assign']), ('orelse', [])]": 9, "If -> [('test', 'Name'), ('body', ['Assign', 'If', 'If']), ('orelse', ['Assign', 'If'])]": 2, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Expr', 'Expr', 'Assign', 'If', 'Expr']), ('orelse', [])]": 1, "List -> [('elts', ['Name', 'Str', 'Name', 'Str', 'Str', 'Str', 'Str']), ('ctx', 'Load')]": 1, "If -> [('test', 'BoolOp'), ('body', ['Assign', 'If', 'Expr']), ('orelse', ['ImportFrom', 'Assign', 'If', 'Assign', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'If', 'Expr'])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 2, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'BinOp']), ('keywords', ['keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "Tuple -> [('elts', ['Num', 'Num', 'Num', 'Num']), ('ctx', 'Load')]": 151, "Tuple -> [('elts', ['Name', 'Attribute', 'Str']), ('ctx', 'Load')]": 1, "Dict -> [('keys', ['Str', 'Str']), ('values', ['List', 'Name'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['FunctionDef', 'Expr', 'Assign', 'While', 'If']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Expr', 'For', 'For', 'Assign', 'For']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'For', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('decorator_list', ['Name'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['If', 'If']), ('orelse', ['If'])]": 7, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "comprehension -> [('target', 'Name'), ('iter', 'Call'), ('ifs', ['Call'])]": 11, "Call -> [('func', 'Name'), ('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 11, "Compare -> [('left', 'Attribute'), ('ops', ['Lt']), ('comparators', ['Num'])]": 29, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'For', 'If', 'If', 'Return']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('orelse', [])]": 2, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 53, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 42, "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'FunctionDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'Import', 'Assign', 'Assign', 'ClassDef', 'If'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign']), ('decorator_list', [])]": 1, "Tuple -> [('elts', ['Name', 'Attribute', 'Call']), ('ctx', 'Load')]": 3, "Index -> [('value', 'Str')]": 6284, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'If', 'For', 'Assign', 'If']), ('decorator_list', [])]": 1, "IfExp -> [('test', 'Call'), ('body', 'Name'), ('orelse', 'Name')]": 1, "TryExcept -> [('body', ['Assign', 'Assign', 'If', 'Expr']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 3, "Call -> [('func', 'Attribute'), ('args', ['Str', 'Str', 'Subscript', 'Str', 'Attribute', 'BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Call -> [('func', 'Attribute'), ('args', ['Str', 'Str', 'Dict']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 5, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'ImportFrom', 'For', 'For', 'Assign', 'Assign', 'Return']), ('decorator_list', ['Name'])]": 1, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'If'])]": 1, "ExceptHandler -> [('type', 'Attribute'), ('name', 'NoneType'), ('body', ['Break'])]": 4, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Expr', 'Expr', 'Assign', 'Return']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['List', 'Call', 'Name', 'List', 'Name', 'List']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Subscript', 'Subscript', 'Attribute', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Tuple -> [('elts', ['List', 'Num']), ('ctx', 'Load')]": 2, "While -> [('test', 'Name'), ('body', ['TryExcept', 'Assign', 'Assign', 'If', 'If', 'Break']), ('orelse', [])]": 1, "Compare -> [('left', 'Call'), ('ops', ['NotIn']), ('comparators', ['Name'])]": 6, "keyword -> [('arg', 'str'), ('value', 'UnaryOp')]": 21, "Call -> [('func', 'Name'), ('args', []), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 25, "If -> [('test', 'Name'), ('body', ['Assign', 'Assign', 'Assign', 'For']), ('orelse', [])]": 1, "TryExcept -> [('body', ['Expr', 'Expr', 'Assign', 'Expr', 'Expr']), ('handlers', ['ExceptHandler']), ('orelse', ['Expr'])]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'ClassDef'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'TryExcept', 'Assign', 'If', 'Return']), ('decorator_list', [])]": 2, "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign', 'If', 'Expr', 'Assign', 'If', 'Expr']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'ClassDef', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['TryExcept', 'Assign', 'Assign', 'Assign', 'If', 'Expr', 'Expr', 'Expr', 'Return']), ('decorator_list', ['Name'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Return']), ('decorator_list', ['Attribute'])]": 8, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If']), ('decorator_list', [])]": 38, "ClassDef -> [('name', 'str'), ('bases', ['Name', 'Attribute']), ('body', ['Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "If -> [('test', 'Attribute'), ('body', ['Expr']), ('orelse', [])]": 169, "BinOp -> [('left', 'Subscript'), ('op', 'Add'), ('right', 'Str')]": 100, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'If', 'TryExcept', 'Assign']), ('orelse', [])]": 1, "BoolOp -> [('op', 'And'), ('values', ['Attribute', 'BoolOp', 'Compare'])]": 1, "While -> [('test', 'Name'), ('body', ['Assign', 'Assign', 'If']), ('orelse', [])]": 4, "Tuple -> [('elts', []), ('ctx', 'Load')]": 221, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'If', 'For']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'ImportFrom', 'If', 'If', 'Assign', 'If', 'If', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 3, "Tuple -> [('elts', ['Str', 'UnaryOp']), ('ctx', 'Load')]": 1, "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['Return'])]": 193, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'If', 'Assign', 'Assign']), ('decorator_list', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', []), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'Assign', 'Raise']), ('decorator_list', [])]": 1, "Subscript -> [('value', 'List'), ('slice', 'Index'), ('ctx', 'Load')]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'Expr', 'If', 'For']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'If', 'Assign', 'Assign', 'If', 'Assign', 'If', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'TryExcept']), ('decorator_list', [])]": 1, "Module -> [('body', ['Expr', 'Assign', 'Assign', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'Import', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'FunctionDef', 'FunctionDef', 'If'])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Str', 'Num', 'Str', 'Str', 'List', 'Name', 'Str', 'List', 'List', 'Str', 'Str'])]": 1, "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign', 'For', 'AugAssign', 'Expr']), ('orelse', ['If'])]": 1, "Tuple -> [('elts', ['Name', 'Name', 'Lambda']), ('ctx', 'Load')]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'TryExcept']), ('orelse', ['Assign', 'Expr'])]": 1, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Assign', 'Expr', 'If', 'Assign', 'If', 'Assign', 'Expr', 'Assign', 'If']), ('orelse', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Print', 'Expr', 'Assign']), ('orelse', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Name', 'Call', 'Name', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "If -> [('test', 'Compare'), ('body', ['Assign', 'If', 'Assign', 'Assign', 'If', 'Assign', 'If', 'Assign', 'If', 'If']), ('orelse', [])]": 1, "If -> [('test', 'Name'), ('body', ['If', 'If', 'If']), ('orelse', [])]": 2, "ExceptHandler -> [('type', 'NoneType'), ('name', 'NoneType'), ('body', ['Delete'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'While']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['AugAssign']), ('orelse', ['If'])]": 8, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'AugAssign', 'Assign', 'Assign', 'Expr', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assert', 'Assert']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'If', 'Return']), ('decorator_list', ['Name'])]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'TryExcept', 'TryExcept']), ('decorator_list', [])]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'TryExcept', 'Return']), ('decorator_list', [])]": 2, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'ImportFrom', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'FunctionDef', 'If'])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 3, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Assign', 'Expr', 'Print']), ('orelse', [])]": 1, "If -> [('test', 'Attribute'), ('body', ['Print', 'Assign', 'Expr']), ('orelse', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'Call')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'FunctionDef', 'If', 'If']), ('decorator_list', [])]": 2, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Num', 'Name', 'Tuple', 'Dict', 'Num', 'Tuple', 'Name', 'Tuple'])]": 4, "List -> [('elts', ['Name', 'Str', 'BinOp']), ('ctx', 'Load')]": 1, "If -> [('test', 'Compare'), ('body', ['If']), ('orelse', ['Assign', 'For'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Expr', 'Assign']), ('decorator_list', ['Attribute'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'Import', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ClassDef', 'Return']), ('decorator_list', [])]": 9, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'If', 'For', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'Assign']), ('orelse', ['If'])]": 13, "TryExcept -> [('body', ['Assign', 'Assign', 'Assign']), ('handlers', ['ExceptHandler', 'ExceptHandler', 'ExceptHandler', 'ExceptHandler', 'ExceptHandler', 'ExceptHandler', 'ExceptHandler']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', ['Name'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'If', 'If', 'Expr', 'Return']), ('decorator_list', [])]": 1, "List -> [('elts', ['Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute']), ('ctx', 'Load')]": 1, "Module -> [('body', ['Import', 'Expr', 'Expr', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Expr', 'Expr', 'Import', 'ClassDef', 'ClassDef'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'If', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'FunctionDef', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Delete', 'Delete', 'Expr', 'If', 'Expr', 'Expr', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Expr']), ('orelse', ['Expr', 'Assign', 'Assign'])]": 1, "Call -> [('func', 'Name'), ('args', ['Num', 'Num', 'Num', 'Name']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'If']), ('orelse', ['If'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'Assign', 'Assign', 'TryFinally']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'If', 'Expr', 'Expr', 'Assign', 'Expr']), ('decorator_list', ['Name'])]": 2, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'If', 'Assign', 'If', 'Expr']), ('orelse', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'If']), ('decorator_list', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "If -> [('test', 'Name'), ('body', ['Assign', 'If', 'Assign', 'Return']), ('orelse', ['TryExcept', 'Assign', 'Assign', 'If', 'If', 'TryExcept'])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'ClassDef', 'FunctionDef', 'Assign', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "Assign -> [('targets', ['Attribute', 'Attribute']), ('value', 'Num')]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['Attribute', 'Attribute', 'Str'])]": 11, "If -> [('test', 'Compare'), ('body', ['Assign', 'Expr', 'Expr', 'Return']), ('orelse', [])]": 1, "Dict -> [('keys', ['Name', 'Name', 'Name']), ('values', ['Tuple', 'Tuple', 'Tuple'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Print', 'Print', 'Print', 'Print', 'Print', 'If', 'If', 'If', 'Return']), ('decorator_list', [])]": 1, "Import -> [('names', ['alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias'])]": 1, "BinOp -> [('left', 'Attribute'), ('op', 'Mult'), ('right', 'Subscript')]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Assign', 'Assign', 'Print', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'TryExcept', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Print'])]": 1, "If -> [('test', 'Call'), ('body', ['If', 'Assign', 'If']), ('orelse', ['Expr'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "If -> [('test', 'Attribute'), ('body', ['Assign', 'If', 'Expr', 'Expr']), ('orelse', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'Assign', 'FunctionDef', 'ClassDef']), ('decorator_list', [])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Num', 'Name'])]": 13, "If -> [('test', 'BoolOp'), ('body', ['Print', 'Return']), ('orelse', [])]": 5, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'For', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "Tuple -> [('elts', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('ctx', 'Load')]": 6, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "Call -> [('func', 'Name'), ('args', ['BinOp']), ('keywords', ['keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 6, "If -> [('test', 'Call'), ('body', ['Expr', 'If', 'If']), ('orelse', ['If'])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 7, "ExceptHandler -> [('type', 'Name'), ('name', 'Name'), ('body', ['Expr', 'Expr', 'Expr'])]": 1, "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'ClassDef'])]": 2, "BinOp -> [('left', 'Num'), ('op', 'Div'), ('right', 'Attribute')]": 4, "Call -> [('func', 'Name'), ('args', ['ListComp', 'Lambda']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Global', 'Assign', 'Print', 'If']), ('decorator_list', [])]": 1, "If -> [('test', 'Call'), ('body', ['Expr', 'Assign', 'Expr', 'If', 'If', 'Return']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'If', 'If']), ('decorator_list', [])]": 2, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'FunctionDef', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'If', 'Expr', 'If', 'Assign', 'If', 'Assign', 'If', 'For', 'Assign', 'Assign', 'If', 'Assign', 'For', 'If', 'Expr', 'Expr', 'Return']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'If', 'Assign']), ('decorator_list', [])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Str', 'Str', 'Call', 'Str', 'Str', 'Dict'])]": 1, "If -> [('test', 'Compare'), ('body', ['Expr', 'Expr', 'If', 'Return']), ('orelse', [])]": 1, "Assign -> [('targets', ['Name', 'Name']), ('value', 'BinOp')]": 1, "Tuple -> [('elts', ['Attribute', 'Num', 'Num']), ('ctx', 'Load')]": 6, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Import', 'Expr', 'ImportFrom', 'ImportFrom', 'Assign', 'If', 'Return']), ('decorator_list', [])]": 2, "If -> [('test', 'Name'), ('body', ['Assign', 'For']), ('orelse', ['Assign', 'For'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'Name'), ('body', ['Assign']), ('orelse', ['If', 'Expr'])]": 1, "BinOp -> [('left', 'Name'), ('op', 'BitAnd'), ('right', 'Num')]": 106, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "If -> [('test', 'Name'), ('body', ['Expr']), ('orelse', ['Assign'])]": 11, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Print', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Tuple'), ('body', ['Assign', 'Expr', 'Expr']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'ImportFrom', 'Assign', 'Assign', 'If', 'Assign', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['If', 'Expr', 'Expr', 'Expr', 'Return']), ('orelse', [])]": 1, "Compare -> [('left', 'Num'), ('ops', ['LtE', 'LtE']), ('comparators', ['Name', 'Call'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'For']), ('orelse', [])]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['For', 'Pass']), ('orelse', [])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'str'), ('defaults', ['Name', 'Name', 'Name'])]": 5, "Compare -> [('left', 'Attribute'), ('ops', ['NotIn']), ('comparators', ['Attribute'])]": 9, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Expr', 'Assign', 'Expr']), ('orelse', [])]": 3, "ExceptHandler -> [('type', 'NoneType'), ('name', 'NoneType'), ('body', ['ImportFrom', 'FunctionDef'])]": 1, "If -> [('test', 'Name'), ('body', ['Assign']), ('orelse', ['If'])]": 36, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Name', 'List']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Str', 'Name', 'Name', 'Str', 'Name', 'Name'])]": 1, "Call -> [('func', 'Name'), ('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 2, "If -> [('test', 'Compare'), ('body', ['Expr', 'Expr', 'Expr']), ('orelse', ['Expr', 'Expr', 'Expr', 'Expr'])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Print', 'Expr']), ('orelse', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'If', 'Assert', 'Expr', 'Expr']), ('orelse', [])]": 1, "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'TryExcept', 'Assign', 'FunctionDef', 'FunctionDef', 'ClassDef'])]": 2, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Attribute', 'Call', 'Call', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 2, "If -> [('test', 'Name'), ('body', ['Expr', 'Expr', 'Return']), ('orelse', ['Expr', 'Return'])]": 2, "If -> [('test', 'Name'), ('body', ['Expr', 'Assign']), ('orelse', ['Expr', 'Expr'])]": 1, "If -> [('test', 'Name'), ('body', ['FunctionDef']), ('orelse', ['Assign'])]": 1, "BinOp -> [('left', 'UnaryOp'), ('op', 'Sub'), ('right', 'BinOp')]": 2, "Call -> [('func', 'Name'), ('args', ['Call', 'List']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 4, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'FunctionDef', 'Return']), ('decorator_list', ['Name'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'For', 'Expr', 'Expr']), ('decorator_list', [])]": 2, "If -> [('test', 'Call'), ('body', ['Assign', 'Expr', 'TryExcept']), ('orelse', [])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['Str', 'Name', 'BinOp'])]": 1, "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign', 'If', 'If']), ('orelse', [])]": 2, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'ListComp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Num', 'Name', 'Tuple', 'Num', 'Num', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Module -> [('body', ['Import', 'ImportFrom', 'TryExcept', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'FunctionDef'])]": 1, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'For', 'If']), ('orelse', [])]": 2, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Name'])]": 21, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'For', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Assign']), ('decorator_list', [])]": 1, "If -> [('test', 'Attribute'), ('body', ['Break']), ('orelse', [])]": 2, "Call -> [('func', 'Attribute'), ('args', ['Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'Subscript')]": 2, "Call -> [('func', 'Attribute'), ('args', ['UnaryOp', 'UnaryOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'FunctionDef', 'FunctionDef', 'ClassDef']), ('decorator_list', [])]": 1, "List -> [('elts', ['Subscript', 'Subscript']), ('ctx', 'Load')]": 4, "Call -> [('func', 'Name'), ('args', ['Str', 'Tuple', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "Compare -> [('left', 'BinOp'), ('ops', ['GtE']), ('comparators', ['Num'])]": 3, "If -> [('test', 'Compare'), ('body', ['Expr', 'Assign', 'Expr', 'Print', 'Assign', 'Expr']), ('orelse', [])]": 1, "BinOp -> [('left', 'Subscript'), ('op', 'Sub'), ('right', 'Name')]": 4, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Name', 'BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 4, "Tuple -> [('elts', ['Name', 'BinOp', 'Name']), ('ctx', 'Load')]": 1, "If -> [('test', 'Call'), ('body', ['Expr', 'If']), ('orelse', ['Expr', 'If'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Pass']), ('decorator_list', [])]": 185, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]": 16, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Return']), ('orelse', ['Raise'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'With']), ('decorator_list', ['Call'])]": 1, "If -> [('test', 'Compare'), ('body', ['Expr', 'Expr', 'Break']), ('orelse', [])]": 1, "If -> [('test', 'BinOp'), ('body', ['Expr', 'Assign', 'Expr', 'Expr']), ('orelse', [])]": 1, "TryExcept -> [('body', ['Expr']), ('handlers', ['ExceptHandler', 'ExceptHandler']), ('orelse', ['Raise'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'FunctionDef', 'Assign', 'Assign', 'For', 'If']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Call']), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'Name'), ('kwargs', 'Name')]": 1, "Module -> [('body', ['Import', 'FunctionDef', 'ImportFrom', 'FunctionDef', 'FunctionDef', 'If'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'FunctionDef', 'If']), ('decorator_list', [])]": 2, "Tuple -> [('elts', ['Call', 'BoolOp', 'BinOp']), ('ctx', 'Load')]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 3, "If -> [('test', 'Compare'), ('body', ['Print', 'Import']), ('orelse', ['If'])]": 6, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'ImportFrom', 'TryExcept', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'TryExcept', 'Expr', 'Assign', 'ClassDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Subscript', 'Subscript', 'Subscript', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Expr', 'Pass']), ('decorator_list', [])]": 2, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Print', 'Assign', 'For', 'Print']), ('orelse', [])]": 1, "BoolOp -> [('op', 'And'), ('values', ['Compare', 'Subscript', 'Compare'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 55, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 12, "If -> [('test', 'BoolOp'), ('body', ['Return']), ('orelse', ['If'])]": 27, "If -> [('test', 'Name'), ('body', ['Expr', 'Expr']), ('orelse', ['TryExcept'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', ['Call'])]": 3, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Str', 'Str', 'Str', 'List', 'List', 'Name', 'Dict'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'For', 'If', 'Return']), ('decorator_list', [])]": 3, "Call -> [('func', 'Attribute'), ('args', ['Num', 'Str', 'Name', 'Str', 'Str']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Call -> [('func', 'Name'), ('args', ['Name', 'Name', 'Name', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 43, "If -> [('test', 'Compare'), ('body', ['Import']), ('orelse', ['Import'])]": 2, "TryFinally -> [('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'If', 'Expr']), ('finalbody', ['Assign', 'Expr'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Name', 'Attribute', 'Attribute', 'BinOp', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "If -> [('test', 'Attribute'), ('body', ['TryExcept', 'Assign']), ('orelse', [])]": 1, "Yield -> [('value', 'Tuple')]": 48, "Call -> [('func', 'Attribute'), ('args', ['Call', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 447, "Dict -> [('keys', ['Str', 'Str']), ('values', ['Call', 'ListComp'])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Name', 'List', 'Dict'])]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['If', 'Expr', 'Expr']), ('orelse', [])]": 2, "Call -> [('func', 'Name'), ('args', ['Attribute', 'Call', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "TryExcept -> [('body', ['Assign', 'Expr']), ('handlers', ['ExceptHandler']), ('orelse', ['Expr'])]": 3, "If -> [('test', 'Compare'), ('body', ['Expr', 'Expr', 'Return']), ('orelse', ['If'])]": 2, "If -> [('test', 'Name'), ('body', ['ClassDef', 'ClassDef', 'Assign', 'Assign', 'Assign', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef']), ('orelse', [])]": 1, "ExceptHandler -> [('type', 'Attribute'), ('name', 'Name'), ('body', ['If', 'Expr', 'Return'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'If', 'Expr']), ('decorator_list', [])]": 1, "If -> [('test', 'Name'), ('body', ['TryExcept']), ('orelse', ['Return'])]": 4, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'Attribute')]": 1, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['TryExcept', 'Expr']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'For', 'Assign', 'While', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'For', 'Assign', 'For', 'Return']), ('decorator_list', ['Name', 'Name'])]": 1, "List -> [('elts', ['Str', 'Str', 'Str', 'Attribute']), ('ctx', 'Load')]": 2, "If -> [('test', 'UnaryOp'), ('body', ['Assign']), ('orelse', ['Assign', 'If'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assert', 'Assert', 'Assert', 'Import', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'For', 'If', 'For', 'If', 'For', 'For', 'If', 'If']), ('decorator_list', ['Name'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'If', 'TryExcept', 'If', 'If', 'TryExcept', 'If', 'If']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'BinOp', 'Attribute', 'Name']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "arguments -> [('args', ['Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'str'), ('defaults', ['Name'])]": 18, "Return -> [('value', 'IfExp')]": 14, "Module -> [('body', ['Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef'])]": 1, "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['Assign', 'Assign', 'Assign', 'AugAssign', 'AugAssign', 'Expr']), ('orelse', [])]": 1, "If -> [('test', 'UnaryOp'), ('body', ['ClassDef']), ('orelse', [])]": 2, "ClassDef -> [('name', 'str'), ('bases', ['Name', 'Name']), ('body', ['Expr', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "TryExcept -> [('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'With', 'Assign', 'Expr']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 2, "If -> [('test', 'Name'), ('body', ['Expr', 'If']), ('orelse', [])]": 7, "TryFinally -> [('body', ['Expr']), ('finalbody', ['AugAssign'])]": 6, "While -> [('test', 'Name'), ('body', ['TryExcept', 'Delete']), ('orelse', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'Assign']), ('decorator_list', [])]": 1, "IfExp -> [('test', 'Name'), ('body', 'Call'), ('orelse', 'Call')]": 3, "Call -> [('func', 'Attribute'), ('args', ['Str', 'Str']), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 8, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'TryFinally']), ('decorator_list', ['Name'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'TryExcept', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'For', 'For', 'Expr']), ('orelse', [])]": 2, "Assign -> [('targets', ['Attribute', 'Name']), ('value', 'Num')]": 1, "If -> [('test', 'Compare'), ('body', ['Assign']), ('orelse', ['Assign', 'If', 'Assign'])]": 3, "Tuple -> [('elts', ['Num', 'Name']), ('ctx', 'Load')]": 49, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str']), ('values', ['Call', 'Subscript', 'Subscript', 'Subscript'])]": 1, "ClassDef -> [('name', 'str'), ('bases', []), ('body', ['Expr', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assert', 'Return']), ('decorator_list', ['Name'])]": 4, "If -> [('test', 'Compare'), ('body', ['For', 'AugAssign']), ('orelse', ['For'])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str']), ('values', ['Str', 'Str', 'Str', 'Str'])]": 18, "Call -> [('func', 'Attribute'), ('args', ['Lambda']), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'If', 'Assign']), ('orelse', [])]": 3, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Attribute', 'Name', 'Name', 'Name', 'Name', 'Call', 'Name', 'Call', 'Num', 'Name', 'Name', 'Name', 'Name', 'Name', 'Tuple', 'Name', 'Name', 'Name'])]": 1, "If -> [('test', 'UnaryOp'), ('body', ['Delete']), ('orelse', [])]": 3, "Call -> [('func', 'Name'), ('args', ['Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1956, "TryExcept -> [('body', ['Assign', 'Assign', 'For', 'Expr', 'Return']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['TryExcept', 'Assign', 'Expr', 'Expr', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Print', 'Assign', 'Assign', 'Assign', 'For']), ('decorator_list', [])]": 1, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ClassDef'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'TryFinally', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'ClassDef', 'FunctionDef', 'FunctionDef', 'Assign']), ('decorator_list', [])]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'If', 'ClassDef', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 1, "BoolOp -> [('op', 'And'), ('values', ['Name', 'UnaryOp', 'Compare'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'For', 'Assign', 'Return']), ('decorator_list', [])]": 2, "TryExcept -> [('body', ['Assign', 'If', 'Assign', 'Return']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 1, "BoolOp -> [('op', 'Or'), ('values', ['BoolOp', 'Compare'])]": 10, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 6, "If -> [('test', 'Name'), ('body', ['Assign', 'While', 'If']), ('orelse', ['If'])]": 1, "Call -> [('func', 'Attribute'), ('args', []), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 22, "Call -> [('func', 'Attribute'), ('args', ['Subscript', 'Attribute', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 4, "If -> [('test', 'Compare'), ('body', ['Assign', 'Expr', 'Assign']), ('orelse', ['Assign'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assert', 'Assert', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'FunctionDef', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "BoolOp -> [('op', 'Or'), ('values', ['Call', 'BoolOp'])]": 6, "Call -> [('func', 'Name'), ('args', ['Str', 'Dict']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 25, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'If']), ('decorator_list', [])]": 1, "If -> [('test', 'UnaryOp'), ('body', ['For', 'Expr']), ('orelse', ['For', 'Expr'])]": 1, "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['If', 'Return'])]": 4, "ExtSlice -> [('dims', ['Index', 'Slice', 'Slice'])]": 2, "List -> [('elts', ['List', 'List', 'List', 'List', 'List', 'List']), ('ctx', 'Load')]": 2, "If -> [('test', 'Call'), ('body', ['Expr', 'Expr', 'Expr']), ('orelse', [])]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Expr', 'Expr', 'Assign', 'If', 'If', 'If', 'Expr', 'Assign', 'Assign', 'If', 'If', 'If', 'Assign', 'Expr', 'Assign', 'Print']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'For']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'For', 'Expr', 'If', 'Expr', 'Expr', 'Expr', 'Expr', 'Return']), ('decorator_list', [])]": 1, "BoolOp -> [('op', 'Or'), ('values', ['Name', 'Subscript'])]": 12, "If -> [('test', 'Call'), ('body', ['For']), ('orelse', ['Assign', 'Expr'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'ImportFrom', 'Assign', 'Expr', 'Assign', 'Return']), ('decorator_list', ['Name'])]": 1, "List -> [('elts', ['Call', 'Call', 'Str', 'Call', 'Str', 'Call']), ('ctx', 'Load')]": 19, "Call -> [('func', 'Name'), ('args', ['Name', 'Name', 'Name', 'List']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'Assign', 'If', 'If', 'Assign', 'If', 'If', 'If', 'If', 'Assign', 'TryExcept', 'Return']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['If']), ('orelse', [])]": 193, "Compare -> [('left', 'Call'), ('ops', ['Lt']), ('comparators', ['Name'])]": 34, "BoolOp -> [('op', 'Or'), ('values', ['UnaryOp', 'Compare', 'BoolOp', 'BoolOp'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'ImportFrom', 'Expr', 'If']), ('decorator_list', [])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Name', 'Attribute', 'Attribute', 'Attribute'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Num', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 6, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'str'), ('defaults', ['List', 'Name', 'Name'])]": 1, "UnaryOp -> [('op', 'Not'), ('operand', 'Subscript')]": 62, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Expr', 'If', 'Expr']), ('orelse', [])]": 1, "While -> [('test', 'BoolOp'), ('body', ['AugAssign', 'If', 'Assign']), ('orelse', [])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Attribute', 'Attribute', 'Attribute'])]": 1, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'ClassDef', 'ClassDef', 'ClassDef'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assert', 'Assert', 'Assign', 'Assign', 'If', 'Assign', 'For', 'Expr']), ('decorator_list', ['Attribute'])]": 1, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'While', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr']), ('orelse', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'With']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'For', 'If', 'If', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'Call'), ('body', ['If', 'Assign', 'Assign', 'Assign', 'Assign']), ('orelse', [])]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'Import', 'Assign', 'Assign', 'ClassDef'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'Assign', 'Import', 'Expr']), ('decorator_list', [])]": 1, "TryExcept -> [('body', ['Assign', 'If', 'If', 'If', 'For', 'TryExcept']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Subscript']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 4, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'FunctionDef', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 2, "For -> [('target', 'Name'), ('iter', 'List'), ('body', ['Expr']), ('orelse', [])]": 24, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'If', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'Call'), ('body', ['AugAssign', 'AugAssign']), ('orelse', ['If'])]": 1, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Assign', 'If', 'Expr']), ('orelse', [])]": 1, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['If', 'Assign', 'If', 'If', 'If', 'Expr']), ('orelse', [])]": 1, "Tuple -> [('elts', ['Name', 'Subscript', 'Call']), ('ctx', 'Load')]": 3, "BoolOp -> [('op', 'Or'), ('values', ['BoolOp', 'BinOp'])]": 1, "ClassDef -> [('name', 'str'), ('bases', []), ('body', ['Expr', 'Assign', 'Assign', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Subscript'), ('body', ['Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('orelse', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Name', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 38, "BinOp -> [('left', 'List'), ('op', 'Mult'), ('right', 'Call')]": 10, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'FunctionDef'])]": 1, "Dict -> [('keys', ['Str', 'Str']), ('values', ['List', 'Subscript'])]": 1, "With -> [('context_expr', 'Call'), ('optional_vars', 'NoneType'), ('body', ['Assign', 'Expr', 'Assign', 'Expr'])]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'If', 'Assign', 'Assign', 'If', 'Return']), ('decorator_list', [])]": 1, "Dict -> [('keys', ['Subscript']), ('values', ['Call'])]": 1, "If -> [('test', 'UnaryOp'), ('body', ['Expr']), ('orelse', ['Expr', 'Return'])]": 1, "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'If']), ('orelse', [])]": 1, "If -> [('test', 'UnaryOp'), ('body', ['ImportFrom']), ('orelse', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'TryExcept', 'Assign', 'If', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 2, "Call -> [('func', 'Attribute'), ('args', ['Tuple', 'Attribute', 'Str', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Tuple'])]": 2, "Call -> [('func', 'Name'), ('args', ['Name', 'Name', 'Name', 'Subscript', 'Subscript', 'Subscript']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Exec -> [('body', 'BinOp'), ('globals', 'Name'), ('locals', 'NoneType')]": 1, "If -> [('test', 'UnaryOp'), ('body', ['Expr', 'Continue']), ('orelse', [])]": 6, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['For', 'Expr', 'Expr', 'Expr', 'Return']), ('decorator_list', [])]": 1, "Tuple -> [('elts', ['Num', 'Str']), ('ctx', 'Load')]": 71, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'ImportFrom', 'Expr', 'Expr']), ('decorator_list', [])]": 2, "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['Name', 'BinOp', 'Attribute'])]": 1, "IfExp -> [('test', 'Subscript'), ('body', 'Str'), ('orelse', 'Str')]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Attribute', 'BoolOp', 'Name'])]": 4, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['TryExcept']), ('decorator_list', ['Attribute'])]": 3, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Expr', 'Assign', 'Expr']), ('orelse', [])]": 1, "If -> [('test', 'Compare'), ('body', ['ImportFrom', 'AugAssign']), ('orelse', ['If'])]": 2, "For -> [('target', 'Tuple'), ('iter', 'Attribute'), ('body', ['Assign', 'Assign', 'If']), ('orelse', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'For', 'Return']), ('decorator_list', [])]": 5, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'If']), ('orelse', [])]": 11, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'If', 'If', 'Assign', 'For', 'Return']), ('decorator_list', [])]": 1, "TryExcept -> [('body', ['Assign', 'Assign', 'For']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 2, "Tuple -> [('elts', ['Call', 'Name', 'Call', 'Attribute']), ('ctx', 'Load')]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'For', 'Print', 'For', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'AugAssign', 'For', 'Import', 'FunctionDef', 'Assign', 'Assign', 'For', 'If', 'If']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'If', 'Assign', 'If']), ('decorator_list', [])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['Name', 'Str', 'Dict'])]": 1, "If -> [('test', 'Name'), ('body', ['Assign']), ('orelse', ['Assign', 'Expr'])]": 1, "TryExcept -> [('body', ['Assign', 'Print', 'Assign', 'If', 'Assign', 'Expr', 'Expr']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Expr', 'Expr']), ('orelse', [])]": 7, "If -> [('test', 'Name'), ('body', ['Assign', 'Assign', 'Expr', 'Expr']), ('orelse', [])]": 2, "While -> [('test', 'Name'), ('body', ['Assign', 'If', 'Expr']), ('orelse', [])]": 5, "Slice -> [('lower', 'Call'), ('upper', 'UnaryOp'), ('step', 'NoneType')]": 6, "ExceptHandler -> [('type', 'Attribute'), ('name', 'NoneType'), ('body', ['Expr', 'Expr', 'Expr', 'Expr', 'Continue'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'TryExcept', 'Expr', 'TryFinally']), ('decorator_list', [])]": 2, "Call -> [('func', 'Attribute'), ('args', ['Call', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'ClassDef', 'ClassDef', 'If'])]": 1, "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Print', 'Assign', 'Print', 'For']), ('decorator_list', [])]": 3, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]": 1, "BoolOp -> [('op', 'And'), ('values', ['Attribute', 'Call', 'Call'])]": 3, "IfExp -> [('test', 'Compare'), ('body', 'Subscript'), ('orelse', 'Subscript')]": 1, "arguments -> [('args', ['Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'str'), ('defaults', ['Dict'])]": 8, "Compare -> [('left', 'Name'), ('ops', ['Gt']), ('comparators', ['Name'])]": 80, "Tuple -> [('elts', ['Attribute', 'Call', 'Call', 'Attribute']), ('ctx', 'Load')]": 2, "Call -> [('func', 'Name'), ('args', ['Name', 'Name', 'Name', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Call -> [('func', 'Attribute'), ('args', ['Subscript', 'Subscript', 'Subscript', 'Subscript', 'Subscript', 'Subscript']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 8, "If -> [('test', 'Call'), ('body', ['Expr', 'Expr', 'TryExcept']), ('orelse', [])]": 1, "If -> [('test', 'Name'), ('body', ['If', 'Assign']), ('orelse', ['If', 'Assign'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'TryExcept', 'If', 'TryExcept', 'Return']), ('decorator_list', [])]": 1, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'IfExp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['FunctionDef', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'For']), ('orelse', [])]": 1, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['For']), ('orelse', [])]": 40, "List -> [('elts', ['Call', 'Num']), ('ctx', 'Load')]": 5, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'Expr', 'If']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'If', 'Assign', 'Assign', 'If', 'If', 'Expr', 'Assign', 'Expr', 'Return']), ('decorator_list', [])]": 2, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'ClassDef', 'FunctionDef'])]": 1, "Call -> [('func', 'Name'), ('args', ['BinOp', 'Attribute']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 5, "arguments -> [('args', ['Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Num', 'Call'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "While -> [('test', 'UnaryOp'), ('body', ['Assign', 'Expr']), ('orelse', [])]": 3, "NotEq -> <NULL>": 1034, "For -> [('target', 'Name'), ('iter', 'List'), ('body', ['Assign', 'If', 'For']), ('orelse', [])]": 1, "List -> [('elts', ['BinOp', 'BinOp', 'Str', 'Str']), ('ctx', 'Load')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 5, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'For', 'For', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]": 1, "Raise -> [('type', 'Attribute'), ('inst', 'Tuple'), ('tback', 'NoneType')]": 3, "Module -> [('body', ['Import', 'Import', 'Import', 'TryExcept', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'FunctionDef', 'FunctionDef', 'ClassDef', 'ClassDef', 'ClassDef'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Str']), ('keywords', []), ('starargs', 'Name'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'Expr']), ('decorator_list', [])]": 2, "While -> [('test', 'Name'), ('body', ['If', 'Assign', 'If', 'Assign']), ('orelse', [])]": 1, "Print -> [('dest', 'NoneType'), ('values', ['Str', 'Attribute', 'Attribute']), ('nl', 'bool')]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Assert', 'Assert', 'Assert']), ('decorator_list', [])]": 1, "If -> [('test', 'Subscript'), ('body', ['Expr', 'Return']), ('orelse', ['If'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'Assign', 'For', 'Return']), ('decorator_list', ['Call'])]": 1, "BinOp -> [('left', 'Subscript'), ('op', 'Mult'), ('right', 'Attribute')]": 6, "If -> [('test', 'Name'), ('body', ['Print', 'Return']), ('orelse', [])]": 2, "If -> [('test', 'Attribute'), ('body', ['Return']), ('orelse', ['Expr', 'Expr', 'If', 'Assign', 'Return'])]": 1, "ImportFrom -> [('module', 'NoneType'), ('names', ['alias']), ('level', 'int')]": 18, "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['Call', 'Name', 'Str'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'FunctionDef', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "Dict -> [('keys', ['Name', 'Name', 'Name']), ('values', ['Call', 'BinOp', 'Call'])]": 1, "If -> [('test', 'Call'), ('body', ['Assign', 'Expr', 'If', 'If', 'Expr']), ('orelse', ['Expr', 'Expr'])]": 12, "If -> [('test', 'Compare'), ('body', ['Expr']), ('orelse', ['Assign', 'If'])]": 3, "If -> [('test', 'Compare'), ('body', ['Expr', 'Print', 'Expr']), ('orelse', [])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Str', 'Name', 'Call', 'Name', 'Name'])]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['If', 'TryExcept', 'TryExcept', 'If', 'Assign', 'AugAssign']), ('orelse', [])]": 1, "Dict -> [('keys', ['Name']), ('values', ['Dict'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assert', 'Assert', 'Import', 'Assign', 'Assign', 'If', 'If', 'Return']), ('decorator_list', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "If -> [('test', 'Name'), ('body', ['Assign']), ('orelse', ['Assign', 'If'])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['List', 'Name', 'Name'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'ImportFrom', 'For']), ('decorator_list', [])]": 4, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 2, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Call', 'Call'])]": 1, "If -> [('test', 'Compare'), ('body', ['Return']), ('orelse', ['Assign', 'Assign', 'Assign', 'For', 'Return'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'For', 'Return']), ('decorator_list', [])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'str'), ('defaults', ['Name', 'Str', 'Str', 'Name', 'Name', 'Name', 'Name', 'Num', 'Num', 'Num', 'Num'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Print', 'Assign', 'Break']), ('orelse', [])]": 1, "If -> [('test', 'Call'), ('body', ['Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr']), ('orelse', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Expr', 'If', 'Assign', 'Expr']), ('orelse', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'If', 'TryExcept']), ('orelse', [])]": 2, "If -> [('test', 'BoolOp'), ('body', ['Assign', 'If', 'If', 'Return']), ('orelse', ['If'])]": 1, "Call -> [('func', 'Name'), ('args', ['Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'Name')]": 8, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'FunctionDef', 'Assign', 'Return']), ('decorator_list', ['Call'])]": 1, "If -> [('test', 'Compare'), ('body', ['Expr']), ('orelse', ['Assign'])]": 16, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 3, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 11, "Tuple -> [('elts', ['Str', 'Dict', 'BinOp']), ('ctx', 'Load')]": 11, "If -> [('test', 'BoolOp'), ('body', ['For']), ('orelse', ['Expr'])]": 3, "Assign -> [('targets', ['Name']), ('value', 'Yield')]": 40, "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'Return']), ('orelse', [])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Attribute', 'Str', 'Str', 'Str', 'Str'])]": 2, "If -> [('test', 'Name'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'Expr']), ('orelse', ['Expr'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'TryFinally']), ('decorator_list', [])]": 1, "If -> [('test', 'UnaryOp'), ('body', ['Return']), ('orelse', ['Return'])]": 11, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'str'), ('defaults', ['Name', 'Name', 'Name', 'Name', 'Num', 'Str'])]": 1, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'For', 'Expr', 'Assign', 'Expr', 'If']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'For']), ('decorator_list', [])]": 3, "BoolOp -> [('op', 'Or'), ('values', ['UnaryOp', 'Call'])]": 19, "Call -> [('func', 'Attribute'), ('args', ['Str', 'Call']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 3, "Dict -> [('keys', ['Str', 'Str']), ('values', ['Name', 'BoolOp'])]": 8, "If -> [('test', 'Compare'), ('body', ['If', 'Assign', 'Expr', 'Assign']), ('orelse', [])]": 1, "ExceptHandler -> [('type', 'NoneType'), ('name', 'NoneType'), ('body', ['Print', 'Expr'])]": 6, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Expr']), ('decorator_list', ['Name'])]": 2, "BoolOp -> [('op', 'And'), ('values', ['Compare', 'Compare', 'Compare', 'Compare'])]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assert', 'Expr']), ('decorator_list', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Expr', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Name', 'Name', 'Name', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "If -> [('test', 'BoolOp'), ('body', ['Assign', 'If', 'Return']), ('orelse', [])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Name', 'Attribute'])]": 1, "IfExp -> [('test', 'Call'), ('body', 'Call'), ('orelse', 'Str')]": 1, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['If', 'AugAssign']), ('orelse', [])]": 2, "If -> [('test', 'Name'), ('body', ['Assign', 'For', 'If', 'If', 'While', 'Expr']), ('orelse', [])]": 2, "Call -> [('func', 'Name'), ('args', ['Name', 'ListComp', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'Assign', 'If', 'Assign', 'If']), ('decorator_list', [])]": 1, "For -> [('target', 'Tuple'), ('iter', 'Name'), ('body', ['Assign', 'Assign', 'Assign', 'Expr']), ('orelse', [])]": 1, "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['Import', 'Assign', 'TryExcept', 'If', 'Expr'])]": 2, "BoolOp -> [('op', 'And'), ('values', ['Name', 'Call', 'Call'])]": 3, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 5, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'If']), ('decorator_list', [])]": 1, "If -> [('test', 'UnaryOp'), ('body', ['Assign']), ('orelse', ['Expr'])]": 3, "arguments -> [('args', ['Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Attribute'])]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['TryExcept', 'Assign', 'Expr', 'If', 'Assign', 'Assign', 'While', 'Raise']), ('decorator_list', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Str', 'Name', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "BinOp -> [('left', 'Subscript'), ('op', 'Pow'), ('right', 'Attribute')]": 4, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Print', 'Assign', 'Assign', 'For']), ('decorator_list', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Attribute', 'Attribute', 'Name']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assert', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assert', 'Assert', 'Assert']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Num', 'Attribute', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 8, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'FunctionDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'If'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'If', 'If', 'If', 'Return']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'If', 'Assign', 'If']), ('decorator_list', ['Name'])]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['If']), ('orelse', ['Raise'])]": 1, "List -> [('elts', ['Str', 'Str', 'Attribute', 'Tuple', 'Name']), ('ctx', 'Load')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'For', 'Return']), ('decorator_list', [])]": 11, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Assign', 'For']), ('decorator_list', [])]": 2, "Tuple -> [('elts', ['Str', 'Name', 'Str', 'Str', 'Num']), ('ctx', 'Load')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'FunctionDef', 'Assign', 'Assign', 'If', 'Assign', 'For', 'Return']), ('decorator_list', [])]": 1, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef'])]": 3, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'ClassDef']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['For', 'Print']), ('orelse', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Name', 'BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 82, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Str', 'Num'])]": 1, "TryExcept -> [('body', ['Assign', 'AugAssign', 'Assign', 'Expr']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 1, "TryFinally -> [('body', ['Assign', 'Expr', 'Expr', 'Assign', 'Expr']), ('finalbody', ['Expr'])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'For', 'If', 'If']), ('orelse', [])]": 2, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Str', 'Str', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name'])]": 2, "If -> [('test', 'Compare'), ('body', ['If', 'Assign', 'Assign', 'Expr']), ('orelse', ['If'])]": 3, "AugAssign -> [('target', 'Name'), ('op', 'Add'), ('value', 'Name')]": 74, "Yield -> [('value', 'NoneType')]": 6, "Tuple -> [('elts', ['Call', 'Call', 'Call', 'Name']), ('ctx', 'Load')]": 5, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'ClassDef'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assert', 'Assert', 'Assert', 'Assert', 'Assert', 'Assert']), ('decorator_list', [])]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'If'])]": 2, "ExceptHandler -> [('type', 'Name'), ('name', 'Name'), ('body', ['Print', 'Expr'])]": 6, "Module -> [('body', ['Import', 'Print'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'For', 'For', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'For']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'Assign', 'Assign', 'If', 'Assign', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'Assign', 'If', 'TryExcept', 'Return']), ('decorator_list', ['Name'])]": 1, "ExceptHandler -> [('type', 'Attribute'), ('name', 'Name'), ('body', ['Print', 'Print', 'Expr'])]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'FunctionDef', 'Assign', 'FunctionDef'])]": 1, "Call -> [('func', 'Name'), ('args', ['Name', 'Call', 'Str', 'Str', 'Name', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ClassDef', 'If'])]": 1, "If -> [('test', 'Call'), ('body', ['Assign']), ('orelse', ['Print'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]": 1, "If -> [('test', 'Name'), ('body', ['Assign', 'Expr', 'If']), ('orelse', ['Expr'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign']), ('decorator_list', [])]": 1, "BoolOp -> [('op', 'And'), ('values', ['Subscript', 'Subscript'])]": 7, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'For', 'Assert', 'For']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['If', 'For']), ('orelse', [])]": 5, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'BinOp', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'FunctionDef', 'Assign', 'Assign', 'TryExcept']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Expr', 'TryExcept']), ('decorator_list', [])]": 2, "If -> [('test', 'Compare'), ('body', ['If', 'Assign', 'Expr', 'Assign', 'TryFinally']), ('orelse', [])]": 1, "List -> [('elts', ['Name', 'Name', 'Name', 'Str']), ('ctx', 'Load')]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'Assign', 'FunctionDef', 'Assign', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "BinOp -> [('left', 'UnaryOp'), ('op', 'Mult'), ('right', 'Attribute')]": 1, "Call -> [('func', 'Attribute'), ('args', ['Tuple', 'Subscript']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 5, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Num', 'Num', 'Name', 'Name', 'Attribute'])]": 1, "Call -> [('func', 'Name'), ('args', ['Name', 'Name', 'Attribute', 'List']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 4, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'Expr', 'If', 'If']), ('orelse', [])]": 1, "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'Import', 'ClassDef', 'If'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['TryExcept']), ('decorator_list', ['Call'])]": 2, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['If', 'Expr', 'If']), ('orelse', [])]": 2, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "TryFinally -> [('body', ['Assign', 'Expr', 'Assign', 'Print', 'If', 'Expr']), ('finalbody', ['Expr'])]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'ImportFrom', 'TryExcept', 'ClassDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'TryExcept'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Import', 'Expr']), ('decorator_list', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Num', 'BinOp', 'Num', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 3, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['If', 'Assign', 'If', 'Expr']), ('orelse', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Attribute', 'Attribute', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 24, "If -> [('test', 'BoolOp'), ('body', ['Expr']), ('orelse', ['Break'])]": 1, "Call -> [('func', 'Name'), ('args', ['Attribute', 'Dict']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assert', 'Assign', 'Assign', 'Assert', 'Assert', 'Assert', 'Assert', 'Assert', 'If', 'If', 'Assign', 'Assert', 'Assign', 'Assert', 'Assign', 'Assert', 'Assert', 'Assert', 'Assert']), ('decorator_list', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "If -> [('test', 'Name'), ('body', ['Assign', 'Assign', 'Expr', 'Return']), ('orelse', ['Return'])]": 2, "Call -> [('func', 'Name'), ('args', ['Name', 'BinOp', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 12, "List -> [('elts', ['Name', 'Name', 'Call', 'Call']), ('ctx', 'Load')]": 1, "TryExcept -> [('body', ['Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 1, "If -> [('test', 'Name'), ('body', ['Assign', 'If']), ('orelse', ['Assert'])]": 2, "Call -> [('func', 'Attribute'), ('args', ['Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 11146, "Call -> [('func', 'Name'), ('args', ['Call', 'Attribute', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Call -> [('func', 'Attribute'), ('args', ['BinOp', 'Str', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 6, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'Expr', 'Assign', 'Assign', 'TryExcept', 'If', 'Assign', 'ImportFrom', 'Assign', 'Assign', 'For', 'Assign', 'For', 'Assign', 'For', 'FunctionDef', 'AugAssign'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'If', 'Return']), ('decorator_list', [])]": 9, "If -> [('test', 'Compare'), ('body', ['AugAssign']), ('orelse', ['AugAssign'])]": 11, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Name', 'Name', 'Name'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Tuple', 'Tuple', 'Name', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "BinOp -> [('left', 'Attribute'), ('op', 'Add'), ('right', 'BinOp')]": 48, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'FunctionDef', 'Expr', 'ClassDef', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['Assign', 'Return'])]": 6, "AugAssign -> [('target', 'Name'), ('op', 'BitAnd'), ('value', 'UnaryOp')]": 1, "If -> [('test', 'Call'), ('body', ['Assign', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'Assign', 'If', 'If', 'If', 'If', 'If', 'If', 'Assign', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'Assign', 'If', 'Return']), ('orelse', ['Raise'])]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'If', 'Assign', 'If', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr']), ('orelse', [])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str']), ('values', ['Call', 'Str', 'Name', 'List'])]": 2, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'Assign', 'Assign', 'FunctionDef', 'ClassDef']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr']), ('decorator_list', [])]": 290, "ExtSlice -> [('dims', ['Slice', 'Slice', 'Index'])]": 102, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Print', 'Assign', 'For', 'Print']), ('decorator_list', [])]": 2, "If -> [('test', 'Compare'), ('body', ['Assign', 'If', 'Assign', 'Assign']), ('orelse', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Call', 'Str']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 4, "Call -> [('func', 'Name'), ('args', ['Name', 'Name', 'Name', 'Name', 'Str', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'BoolOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 3, "If -> [('test', 'Call'), ('body', ['Expr', 'Break']), ('orelse', [])]": 10, "Call -> [('func', 'Attribute'), ('args', []), ('keywords', ['keyword', 'keyword']), ('starargs', 'Name'), ('kwargs', 'Name')]": 3, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'ClassDef']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'If', 'TryExcept', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'TryExcept', 'Assign', 'Return']), ('decorator_list', [])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'str'), ('defaults', ['Name', 'Name', 'Num'])]": 1, "ExceptHandler -> [('type', 'Tuple'), ('name', 'Name'), ('body', ['Pass'])]": 1, "GeneratorExp -> [('elt', 'Call'), ('generators', ['comprehension'])]": 79, "ExceptHandler -> [('type', 'Tuple'), ('name', 'NoneType'), ('body', ['Assign', 'Assign'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Num', 'Name', 'Num', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'If']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'While', 'FunctionDef', 'Expr', 'If', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'For', 'Expr', 'Assign']), ('orelse', [])]": 1, "IfExp -> [('test', 'Compare'), ('body', 'Attribute'), ('orelse', 'Attribute')]": 2, "comprehension -> [('target', 'Name'), ('iter', 'Name'), ('ifs', [])]": 491, "Compare -> [('left', 'Name'), ('ops', ['Eq']), ('comparators', ['BinOp'])]": 19, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Expr', 'Return']), ('decorator_list', ['Call'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'FunctionDef', 'If', 'If', 'Return']), ('decorator_list', [])]": 2, "Dict -> [('keys', ['Str', 'Str']), ('values', ['Tuple', 'Tuple'])]": 5, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Return']), ('orelse', ['Assign'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign']), ('decorator_list', [])]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'Assign', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Attribute', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 5, "Call -> [('func', 'Name'), ('args', ['Name', 'Name', 'Subscript', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'Name')]": 1, "Compare -> [('left', 'Subscript'), ('ops', ['In']), ('comparators', ['Subscript'])]": 3, "If -> [('test', 'Call'), ('body', ['Return']), ('orelse', ['Assign', 'Expr', 'Return'])]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'For', 'For']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'If', 'If', 'Assign', 'If', 'Assign', 'Assign', 'If', 'If', 'For', 'Return']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['List']), ('keywords', []), ('starargs', 'Name'), ('kwargs', 'Name')]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Str', 'Name'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['If', 'If', 'For']), ('orelse', [])]": 1, "If -> [('test', 'BoolOp'), ('body', ['TryExcept', 'If', 'Expr']), ('orelse', [])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Dict', 'Dict', 'Dict', 'Dict', 'Dict'])]": 5, "TryExcept -> [('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('handlers', ['ExceptHandler', 'ExceptHandler']), ('orelse', [])]": 2, "While -> [('test', 'Compare'), ('body', ['Expr', 'AugAssign']), ('orelse', [])]": 3, "If -> [('test', 'Call'), ('body', ['Assign', 'If', 'If', 'AugAssign', 'AugAssign']), ('orelse', [])]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'If'])]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Expr', 'Expr', 'If']), ('orelse', [])]": 2, "If -> [('test', 'Call'), ('body', ['If']), ('orelse', ['Assign', 'Assign', 'Assign', 'If', 'If'])]": 1, "Call -> [('func', 'Name'), ('args', ['Name', 'Str', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 23, "List -> [('elts', ['Str', 'List']), ('ctx', 'Load')]": 1, "List -> [('elts', ['Name', 'Str']), ('ctx', 'Load')]": 8, "Call -> [('func', 'Name'), ('args', ['Name', 'Attribute']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'If']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'TryExcept', 'Expr', 'ImportFrom', 'If', 'Expr', 'If']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Return']), ('orelse', ['Assign', 'Return'])]": 1, "For -> [('target', 'Tuple'), ('iter', 'Attribute'), ('body', ['Assign', 'Assign', 'Expr']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Expr', 'Expr', 'Return']), ('decorator_list', [])]": 2, "List -> [('elts', ['Str', 'Str', 'Str', 'Str', 'Call']), ('ctx', 'Load')]": 2, "If -> [('test', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'Assign']), ('orelse', ['Assign'])]": 2, "If -> [('test', 'Attribute'), ('body', ['If', 'For']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Return']), ('decorator_list', [])]": 1, "TryExcept -> [('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Expr', 'For']), ('orelse', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 26, "Call -> [('func', 'Name'), ('args', ['Subscript', 'Str']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 5, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'TryExcept', 'ImportFrom', 'ImportFrom', 'Assign', 'ClassDef', 'ClassDef', 'ClassDef'])]": 1, "BoolOp -> [('op', 'Or'), ('values', ['Name', 'BinOp'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'TryExcept', 'Assign', 'Assign', 'If']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'Assign', 'Print', 'Assign', 'Assign', 'Expr', 'Expr', 'Return']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Str', 'List']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 184, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Attribute', 'Attribute', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Compare -> [('left', 'Name'), ('ops', ['NotIn']), ('comparators', ['Attribute'])]": 59, "If -> [('test', 'Compare'), ('body', ['While']), ('orelse', [])]": 2, "Call -> [('func', 'Attribute'), ('args', ['Str', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 31, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'If', 'Assign', 'Assign', 'For', 'Assign', 'If', 'If', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Name', 'List']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Assert', 'Print']), ('orelse', [])]": 1, "If -> [('test', 'Name'), ('body', ['Return']), ('orelse', ['TryExcept'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assert', 'Assert', 'Assign', 'Assert', 'Assert', 'Assert', 'Assert', 'Assert', 'Assert', 'Assert', 'Assert']), ('decorator_list', [])]": 1, "If -> [('test', 'BoolOp'), ('body', ['If', 'AugAssign']), ('orelse', ['Assign'])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['BinOp', 'Call', 'Name'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'TryExcept', 'Expr', 'Expr', 'TryExcept', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['ListComp', 'Name', 'Name'])]": 2, "Module -> [('body', ['Import', 'Expr', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'ClassDef', 'If'])]": 1, "Module -> [('body', ['Import', 'ImportFrom', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 4, "Call -> [('func', 'Name'), ('args', ['Tuple', 'Lambda']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 10, "If -> [('test', 'BoolOp'), ('body', ['Expr', 'Expr']), ('orelse', ['If'])]": 1, "If -> [('test', 'Attribute'), ('body', ['Expr', 'Assign', 'If']), ('orelse', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'For', 'For', 'If', 'If', 'For', 'Return']), ('decorator_list', [])]": 2, "For -> [('target', 'Name'), ('iter', 'List'), ('body', ['If']), ('orelse', [])]": 10, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 2, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'BoolOp', 'Call', 'Call'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Str']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'Name')]": 1, "Module -> [('body', ['Import', 'ImportFrom', 'Import', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'Import', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef'])]": 1, "TryExcept -> [('body', ['ImportFrom', 'Assign']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 11, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'Assign']), ('orelse', [])]": 8, "If -> [('test', 'Compare'), ('body', ['Expr']), ('orelse', [])]": 720, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Num', 'Str', 'Str', 'Num', 'Num', 'Num', 'Name', 'Str', 'Str', 'Num', 'Attribute', 'Num', 'Num'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['TryExcept', 'Assign', 'Assign']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'Assign', 'For', 'Return']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assert']), ('decorator_list', [])]": 1, "If -> [('test', 'Subscript'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'ImportFrom', 'ImportFrom', 'If', 'If', 'If']), ('decorator_list', [])]": 2, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Str', 'Str', 'Str', 'Str', 'Call', 'Str', 'Str', 'Str', 'Dict'])]": 2, "Compare -> [('left', 'Subscript'), ('ops', ['NotEq']), ('comparators', ['Num'])]": 7, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ClassDef', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Expr', 'Expr']), ('orelse', [])]": 13, "List -> [('elts', ['Str', 'Subscript', 'Subscript']), ('ctx', 'Load')]": 1, "Call -> [('func', 'Attribute'), ('args', ['Call', 'List', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 3, "Call -> [('func', 'Attribute'), ('args', ['BinOp', 'Name']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Assign', 'If', 'If', 'If', 'If', 'If', 'Assign', 'For', 'Assign', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'BoolOp'), ('body', ['If', 'Assign', 'Assign']), ('orelse', ['Assign', 'Assign'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Return']), ('decorator_list', ['Call', 'Name', 'Call'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'If', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'If', 'If', 'Expr', 'Assign', 'Assign', 'If', 'If']), ('decorator_list', [])]": 1, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'If'])]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign']), ('orelse', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'TryExcept', 'Expr']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['With']), ('orelse', [])]": 2, "List -> [('elts', ['Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple']), ('ctx', 'Load')]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'Expr', 'Return']), ('decorator_list', [])]": 3, "If -> [('test', 'Compare'), ('body', ['Expr', 'Raise']), ('orelse', ['Assign', 'Expr', 'Raise'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'AugAssign', 'For', 'Return']), ('decorator_list', [])]": 1, "ExceptHandler -> [('type', 'Name'), ('name', 'Name'), ('body', ['Expr', 'Expr'])]": 10, "If -> [('test', 'BoolOp'), ('body', ['For', 'Delete', 'Delete', 'If', 'Assign', 'Expr']), ('orelse', ['AugAssign'])]": 3, "If -> [('test', 'Compare'), ('body', ['Expr', 'Expr', 'For']), ('orelse', ['Assign', 'If', 'If', 'For'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Print', 'If', 'Return']), ('decorator_list', [])]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Assign', 'FunctionDef', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Import', 'Assign', 'FunctionDef', 'FunctionDef', 'Assign', 'For', 'Expr', 'Expr', 'Expr', 'Expr', 'For', 'Assert']), ('orelse', [])]": 1, "Tuple -> [('elts', ['Tuple', 'Subscript']), ('ctx', 'Load')]": 1, "Assign -> [('targets', ['Subscript', 'Subscript']), ('value', 'Num')]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Assign', 'If', 'If', 'Expr']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'If', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'If']), ('decorator_list', [])]": 1, "List -> [('elts', ['Str', 'Str', 'Call']), ('ctx', 'Load')]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Expr', 'Assign', 'Expr', 'If', 'Assign', 'If']), ('decorator_list', [])]": 2, "IfExp -> [('test', 'Call'), ('body', 'Subscript'), ('orelse', 'Name')]": 1, "Call -> [('func', 'Name'), ('args', ['ListComp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 192, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['FunctionDef', 'Return']), ('decorator_list', [])]": 60, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'ClassDef', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "Tuple -> [('elts', ['Name', 'Subscript', 'Name', 'Num']), ('ctx', 'Load')]": 6, "If -> [('test', 'Name'), ('body', ['If', 'If']), ('orelse', [])]": 10, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'Import', 'If', 'Assign', 'Assign', 'For', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "Module -> [('body', ['Import', 'Expr', 'Import', 'Import', 'Expr', 'ImportFrom', 'Expr', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Expr', 'Expr', 'Expr', 'ImportFrom', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign'])]": 1, "Assign -> [('targets', ['Name']), ('value', 'BinOp')]": 2954, "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'ClassDef', 'ClassDef'])]": 1, "Tuple -> [('elts', ['Attribute', 'Attribute', 'Call', 'Call', 'Call']), ('ctx', 'Load')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 3, "Lambda -> [('args', 'arguments'), ('body', 'Call')]": 301, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'If']), ('decorator_list', ['Name', 'Name'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr']), ('decorator_list', ['Attribute'])]": 9, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 6, "Call -> [('func', 'Name'), ('args', ['BinOp', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 20, "If -> [('test', 'Name'), ('body', ['Assign', 'If', 'Assign']), ('orelse', [])]": 11, "If -> [('test', 'Call'), ('body', ['Expr']), ('orelse', ['Expr', 'Expr', 'Expr'])]": 1, "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['Delete', 'Assign', 'If'])]": 1, "ExceptHandler -> [('type', 'Name'), ('name', 'Name'), ('body', ['Print', 'Assign', 'Expr'])]": 1, "If -> [('test', 'Compare'), ('body', ['Print', 'Return']), ('orelse', ['If'])]": 1, "If -> [('test', 'Name'), ('body', ['Assign', 'Assign', 'Assign', 'Assign']), ('orelse', ['Assign'])]": 4, "Call -> [('func', 'Name'), ('args', ['List']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 26, "keyword -> [('arg', 'str'), ('value', 'BinOp')]": 188, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Attribute', 'BoolOp', 'Name', 'Name'])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Expr', 'Assign', 'Assign', 'FunctionDef', 'ClassDef']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 2, "Call -> [('func', 'Name'), ('args', ['Subscript', 'Subscript', 'Num', 'Num', 'Attribute']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'If', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'If', 'If', 'If', 'Return']), ('decorator_list', [])]": 1, "Tuple -> [('elts', ['Name', 'Attribute', 'Call', 'Call']), ('ctx', 'Load')]": 1, "If -> [('test', 'Attribute'), ('body', ['Assign', 'Assign', 'If', 'Return']), ('orelse', [])]": 1, "Tuple -> [('elts', ['Subscript', 'BinOp']), ('ctx', 'Load')]": 6, "TryFinally -> [('body', ['Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('finalbody', ['Expr'])]": 1, "IfExp -> [('test', 'Compare'), ('body', 'Call'), ('orelse', 'Str')]": 1, "comprehension -> [('target', 'Tuple'), ('iter', 'Call'), ('ifs', [])]": 77, "IfExp -> [('test', 'Call'), ('body', 'Call'), ('orelse', 'Name')]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'If', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name'])]": 2, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str']), ('values', ['Call', 'Name', 'Dict', 'Str'])]": 4, "While -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign']), ('orelse', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr']), ('orelse', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Call', 'Attribute', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 14, "List -> [('elts', ['Call', 'Name', 'Name']), ('ctx', 'Load')]": 2, "If -> [('test', 'Attribute'), ('body', ['Assign', 'Assign', 'Assign', 'Return']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'If', 'Expr']), ('decorator_list', [])]": 2, "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'TryExcept', 'Import', 'ImportFrom', 'ImportFrom', 'Assign', 'TryExcept', 'Assign', 'ClassDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'ClassDef', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'If'])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "BoolOp -> [('op', 'Or'), ('values', ['Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute'])]": 1, "Tuple -> [('elts', ['BinOp', 'BinOp', 'BinOp', 'BinOp']), ('ctx', 'Load')]": 1, "Call -> [('func', 'Attribute'), ('args', ['BinOp', 'Subscript', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 4, "If -> [('test', 'Name'), ('body', ['Assign', 'Assert', 'Assign', 'Assign', 'TryFinally']), ('orelse', [])]": 1, "BinOp -> [('left', 'BinOp'), ('op', 'Mult'), ('right', 'Call')]": 49, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If']), ('decorator_list', ['Attribute'])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Expr', 'Return']), ('orelse', ['Return'])]": 1, "If -> [('test', 'Compare'), ('body', ['Expr', 'For', 'Expr']), ('orelse', ['Raise'])]": 1, "Dict -> [('keys', ['Str', 'Str']), ('values', ['Str', 'BinOp'])]": 4, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef']), ('decorator_list', [])]": 8, "Compare -> [('left', 'Attribute'), ('ops', ['NotEq']), ('comparators', ['Subscript'])]": 8, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Expr'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Print', 'For']), ('decorator_list', [])]": 6, "Call -> [('func', 'Name'), ('args', ['Str', 'Name', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "Compare -> [('left', 'BinOp'), ('ops', ['Lt']), ('comparators', ['Subscript'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Dict']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Call -> [('func', 'Attribute'), ('args', ['Str', 'Repr', 'Repr']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Call -> [('func', 'Attribute'), ('args', ['Str', 'Str', 'Str', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 4, "If -> [('test', 'Attribute'), ('body', ['Expr', 'Expr']), ('orelse', ['Expr'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'For', 'If', 'Assign', 'Expr', 'For', 'Return']), ('decorator_list', [])]": 1, "Tuple -> [('elts', ['Tuple', 'Name', 'Name']), ('ctx', 'Store')]": 2, "Tuple -> [('elts', ['Attribute', 'Attribute']), ('ctx', 'Store')]": 63, "Tuple -> [('elts', ['Call', 'BinOp']), ('ctx', 'Load')]": 9, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Subscript', 'Subscript', 'Subscript', 'Subscript', 'Subscript'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "If -> [('test', 'BoolOp'), ('body', ['Expr', 'Expr']), ('orelse', [])]": 9, "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign', 'Continue']), ('orelse', [])]": 2, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Print', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Return']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['TryExcept', 'TryExcept']), ('orelse', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Attribute', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 7, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['List', 'Str', 'Name', 'Name', 'Str', 'Str', 'List', 'Str', 'Str'])]": 1, "Tuple -> [('elts', ['Str', 'Str', 'Str', 'Str']), ('ctx', 'Load')]": 86, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 7, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef'])]": 1, "If -> [('test', 'Name'), ('body', ['Expr', 'Expr', 'Assign']), ('orelse', [])]": 1, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Assign', 'If', 'Assign', 'If', 'Assign', 'Assign', 'Expr']), ('orelse', [])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Str', 'Str', 'Str'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Str', 'Str', 'BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'If', 'Assign', 'For', 'If', 'Return']), ('decorator_list', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Name', 'Name', 'ListComp', 'ListComp', 'Str', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Num', 'Attribute', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'With', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'FunctionDef', 'ClassDef', 'ClassDef', 'ClassDef', 'FunctionDef'])]": 1, "If -> [('test', 'Compare'), ('body', ['Continue']), ('orelse', ['Assign', 'If'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['FunctionDef', 'ClassDef', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "Compare -> [('left', 'Subscript'), ('ops', ['NotEq']), ('comparators', ['Call'])]": 2, "Tuple -> [('elts', ['Attribute']), ('ctx', 'Store')]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 12, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'While', 'Assign', 'While', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'Name'), ('body', ['Expr']), ('orelse', ['Assign', 'Expr'])]": 2, "Assign -> [('targets', ['Tuple']), ('value', 'Name')]": 142, "Dict -> [('keys', ['Str', 'Str']), ('values', ['Str', 'List'])]": 4, "keyword -> [('arg', 'str'), ('value', 'Attribute')]": 1868, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'FunctionDef']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Expr', 'Expr']), ('orelse', ['If'])]": 3, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Str', 'Str', 'Str', 'Call', 'Call', 'Str'])]": 2, "Module -> [('body', ['Import', 'ImportFrom', 'ClassDef'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'Assign', 'TryFinally', 'Assign', 'Expr', 'With']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "Tuple -> [('elts', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('ctx', 'Store')]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str']), ('values', ['Dict', 'Dict', 'Dict', 'Dict'])]": 7, "UnaryOp -> [('op', 'Not'), ('operand', 'BinOp')]": 6, "Call -> [('func', 'Name'), ('args', ['Str', 'Call']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 13, "BoolOp -> [('op', 'And'), ('values', ['UnaryOp', 'Name'])]": 10, "For -> [('target', 'Name'), ('iter', 'List'), ('body', ['Assign', 'Assign', 'If']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'Expr', 'Assign']), ('decorator_list', [])]": 2, "If -> [('test', 'Compare'), ('body', ['Assign', 'AugAssign', 'Expr']), ('orelse', [])]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'If', 'Expr']), ('orelse', [])]": 9, "BinOp -> [('left', 'Str'), ('op', 'Mult'), ('right', 'BinOp')]": 21, "If -> [('test', 'Call'), ('body', ['Assign', 'Assign', 'If']), ('orelse', ['Expr', 'Expr'])]": 1, "If -> [('test', 'BoolOp'), ('body', ['If', 'If']), ('orelse', [])]": 5, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'For'])]": 1, "Call -> [('func', 'Call'), ('args', ['Name', 'Name']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'Expr', 'Return']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "If -> [('test', 'Call'), ('body', ['If', 'Expr', 'If', 'Return']), ('orelse', [])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Call'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'For', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['FunctionDef', 'FunctionDef', 'Assign', 'Expr']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'TryExcept', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Print', 'Expr']), ('decorator_list', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'ClassDef']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Assign', 'Print']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'Expr']), ('decorator_list', ['Name'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Num', 'Str', 'Tuple', 'Tuple']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Tuple -> [('elts', ['Call', 'Name', 'Attribute', 'Name', 'Attribute', 'Name']), ('ctx', 'Load')]": 2, "Expr -> [('value', 'List')]": 1, "If -> [('test', 'UnaryOp'), ('body', ['Assign']), ('orelse', ['Assign'])]": 33, "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['Call', 'Call', 'Call'])]": 21, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Assign', 'Expr', 'Assign', 'For']), ('orelse', [])]": 1, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign']), ('orelse', [])]": 2, "Tuple -> [('elts', ['Attribute', 'Str', 'Name', 'Str']), ('ctx', 'Load')]": 1, "For -> [('target', 'Name'), ('iter', 'Subscript'), ('body', ['If', 'Assign']), ('orelse', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'For', 'If', 'Expr', 'Assign', 'If', 'Assign', 'Assign', 'Expr', 'Assign', 'For', 'Expr']), ('orelse', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['If', 'Assign', 'If', 'Assign', 'Assign', 'Return']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'If', 'Expr', 'Assign']), ('decorator_list', [])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str']), ('values', ['Str', 'Str', 'Num', 'Call'])]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'If', 'Assign', 'If', 'Expr', 'Expr', 'Expr', 'Expr']), ('orelse', [])]": 1, "TryExcept -> [('body', ['If']), ('handlers', ['ExceptHandler', 'ExceptHandler']), ('orelse', [])]": 4, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'FunctionDef', 'FunctionDef', 'Assign', 'Assign', 'Return']), ('decorator_list', ['Name'])]": 1, "If -> [('test', 'BoolOp'), ('body', ['Expr', 'Assign', 'Expr', 'If']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign']), ('decorator_list', [])]": 3, "Tuple -> [('elts', ['Str']), ('ctx', 'Load')]": 170, "If -> [('test', 'Compare'), ('body', ['Print', 'Expr']), ('orelse', ['If'])]": 10, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 2, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assert', 'Assign', 'Assert', 'Assign', 'Assign', 'Assert', 'Assert', 'Assert', 'Assert', 'Assert', 'If', 'If', 'Assign', 'Assert', 'Assign', 'Assert', 'Assign', 'Assert', 'Assign', 'Assert', 'Assign', 'Assert', 'Assert', 'Assert']), ('decorator_list', [])]": 1, "If -> [('test', 'Call'), ('body', ['Assign', 'If', 'If', 'If', 'Raise']), ('orelse', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Str', 'Call', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'If', 'Expr']), ('decorator_list', ['Name'])]": 1, "Call -> [('func', 'Name'), ('args', ['Tuple', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['Expr', 'If', 'For']), ('orelse', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'FunctionDef', 'ClassDef', 'ClassDef', 'Assign', 'FunctionDef']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 29, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Expr', 'Assign', 'ImportFrom', 'Expr']), ('decorator_list', [])]": 1, "Dict -> [('keys', ['Tuple']), ('values', ['Str'])]": 3, "If -> [('test', 'BoolOp'), ('body', ['If', 'If']), ('orelse', ['If'])]": 4, "BinOp -> [('left', 'Attribute'), ('op', 'Div'), ('right', 'Name')]": 4, "Tuple -> [('elts', ['BinOp', 'Call']), ('ctx', 'Load')]": 5, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'For']), ('decorator_list', [])]": 2, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Call', 'Name', 'Call', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "TryFinally -> [('body', ['Expr', 'Expr']), ('finalbody', ['Expr'])]": 3, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'If', 'Assign', 'If', 'Assign', 'If', 'Assign', 'If']), ('orelse', [])]": 1, "BinOp -> [('left', 'BoolOp'), ('op', 'Add'), ('right', 'Call')]": 1, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Str', 'List']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 4, "If -> [('test', 'BoolOp'), ('body', ['Print', 'Expr']), ('orelse', ['If'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['BinOp', 'Str']), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'Assign', 'TryFinally', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 4, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Attribute', 'Name']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'FunctionDef'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'TryFinally']), ('decorator_list', [])]": 2, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Assign', 'For', 'Assign', 'For', 'Assign', 'If', 'Assign', 'Assign', 'If', 'If', 'Expr', 'If', 'If']), ('orelse', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['BinOp', 'BinOp']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 6, "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'Import', 'Import', 'FunctionDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef'])]": 1, "For -> [('target', 'Tuple'), ('iter', 'List'), ('body', ['Assign', 'Expr']), ('orelse', [])]": 2, "If -> [('test', 'BoolOp'), ('body', ['Return']), ('orelse', ['For', 'Return'])]": 1, "Dict -> [('keys', ['Str', 'Str']), ('values', ['Name', 'Str'])]": 291, "Tuple -> [('elts', ['IfExp', 'Subscript']), ('ctx', 'Load')]": 3, "ExceptHandler -> [('type', 'NoneType'), ('name', 'NoneType'), ('body', ['Print', 'Print', 'Expr'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'ImportFrom', 'If', 'Assign', 'If', 'Return']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', ['Name'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 7, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Raise']), ('decorator_list', [])]": 13, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 69, "List -> [('elts', ['List', 'List', 'List', 'List', 'List', 'List', 'List', 'List']), ('ctx', 'Load')]": 2, "Tuple -> [('elts', ['UnaryOp', 'Name']), ('ctx', 'Load')]": 1, "If -> [('test', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'If']), ('orelse', ['Assign', 'Return'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Expr']), ('decorator_list', [])]": 10, "arguments -> [('args', ['Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Num', 'Attribute'])]": 1, "ExceptHandler -> [('type', 'NoneType'), ('name', 'NoneType'), ('body', ['ImportFrom', 'Expr', 'Assign'])]": 1, "If -> [('test', 'Subscript'), ('body', ['Assign', 'Expr']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 13, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Assign', 'Assign', 'For', 'Return']), ('decorator_list', [])]": 1, "List -> [('elts', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('ctx', 'Load')]": 1, "If -> [('test', 'Name'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'If', 'If', 'Return']), ('orelse', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Attribute', 'Attribute', 'UnaryOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 3, "If -> [('test', 'UnaryOp'), ('body', ['Raise', 'Return']), ('orelse', [])]": 1, "Subscript -> [('value', 'Dict'), ('slice', 'Index'), ('ctx', 'Load')]": 14, "Tuple -> [('elts', ['BinOp']), ('ctx', 'Load')]": 13, "Dict -> [('keys', ['Attribute']), ('values', ['Name'])]": 37, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ClassDef', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign']), ('decorator_list', [])]": 2, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['If', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'If']), ('orelse', [])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Num'])]": 30, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('orelse', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Expr', 'If', 'Return']), ('decorator_list', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name', 'Name']), ('body', ['Expr', 'Assign']), ('decorator_list', [])]": 14, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ClassDef', 'Assign', 'FunctionDef', 'Expr', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "Dict -> [('keys', ['Str']), ('values', ['BinOp'])]": 11, "Mod -> <NULL>": 5505, "Call -> [('func', 'Name'), ('args', ['Subscript', 'Subscript', 'UnaryOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Call -> [('func', 'Name'), ('args', ['Name', 'Name', 'Subscript', 'Name']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'Name')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Assign', 'Assign', 'TryExcept', 'If']), ('decorator_list', ['Name'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Import', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Expr', 'For']), ('orelse', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "If -> [('test', 'Name'), ('body', ['Assign', 'Assign', 'AugAssign', 'If']), ('orelse', [])]": 1, "If -> [('test', 'Name'), ('body', ['AugAssign', 'Expr']), ('orelse', [])]": 2, "While -> [('test', 'Call'), ('body', ['Assign', 'Assign']), ('orelse', [])]": 1, "Tuple -> [('elts', ['Num', 'Name', 'Attribute', 'Attribute']), ('ctx', 'Load')]": 6, "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign', 'Expr', 'Expr']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'TryExcept', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Call']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'Name')]": 2, "List -> [('elts', ['Name', 'Attribute', 'Attribute', 'Attribute', 'Name']), ('ctx', 'Load')]": 2, "Call -> [('func', 'Name'), ('args', []), ('keywords', []), ('starargs', 'Subscript'), ('kwargs', 'NoneType')]": 6, "For -> [('target', 'Tuple'), ('iter', 'Name'), ('body', ['Expr', 'Expr']), ('orelse', [])]": 3, "Assign -> [('targets', ['Name']), ('value', 'List')]": 2151, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign']), ('orelse', ['Expr', 'Assign'])]": 1, "Call -> [('func', 'Name'), ('args', ['Name', 'Name', 'Str']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 12, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Name', 'Attribute', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 5, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'TryExcept', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'TryExcept', 'ImportFrom', 'Return']), ('decorator_list', ['Call'])]": 1, "TryFinally -> [('body', ['TryExcept']), ('finalbody', ['If'])]": 1, "Dict -> [('keys', ['Str', 'Str']), ('values', ['Subscript', 'Name'])]": 5, "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['Call', 'Name', 'Attribute'])]": 2, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str']), ('values', ['Attribute', 'Call', 'Call', 'Dict'])]": 1, "Dict -> [('keys', ['Str', 'Str']), ('values', ['ListComp', 'Name'])]": 2, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'If', 'If', 'If', 'Print', 'If', 'Assign', 'Assign', 'Assign', 'Expr']), ('orelse', ['If'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['TryExcept', 'Expr']), ('decorator_list', ['Attribute'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Print', 'Assign', 'For']), ('decorator_list', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Name', 'Num', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 9, "TryFinally -> [('body', ['Expr', 'Assign', 'Expr', 'Assign', 'Expr']), ('finalbody', ['Expr'])]": 1, "Tuple -> [('elts', ['Str', 'Name', 'Dict']), ('ctx', 'Load')]": 7, "Tuple -> [('elts', ['Attribute', 'Name', 'Name', 'Name']), ('ctx', 'Load')]": 5, "For -> [('target', 'Tuple'), ('iter', 'List'), ('body', ['Expr']), ('orelse', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Return']), ('decorator_list', ['Name'])]": 29, "For -> [('target', 'Name'), ('iter', 'List'), ('body', ['Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr']), ('orelse', [])]": 1, "Print -> [('dest', 'NoneType'), ('values', ['Subscript', 'BinOp']), ('nl', 'bool')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 10, "TryExcept -> [('body', ['Expr', 'Assign', 'Assign', 'For', 'Assign', 'Assign', 'Return']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 1, "TryFinally -> [('body', ['TryExcept']), ('finalbody', ['Assign'])]": 4, "If -> [('test', 'UnaryOp'), ('body', ['Raise']), ('orelse', [])]": 329, "For -> [('target', 'Name'), ('iter', 'Tuple'), ('body', ['If']), ('orelse', [])]": 17, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'ImportFrom', 'Expr', 'Assign', 'Expr']), ('decorator_list', ['Call'])]": 1, "If -> [('test', 'Call'), ('body', ['Assign', 'Assign', 'Break']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "BinOp -> [('left', 'Name'), ('op', 'Mod'), ('right', 'Tuple')]": 11, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Tuple', 'ListComp', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "ExceptHandler -> [('type', 'Name'), ('name', 'Name'), ('body', ['AugAssign', 'AugAssign'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'If', 'If', 'Expr', 'TryFinally', 'Return']), ('decorator_list', [])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Num', 'Name', 'Name', 'Name'])]": 3, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef'])]": 2, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Assign', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 7, "List -> [('elts', ['Name', 'Str', 'Name', 'Str']), ('ctx', 'Load')]": 2, "If -> [('test', 'Name'), ('body', ['Assign', 'Expr', 'Raise']), ('orelse', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'If', 'Expr']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Str', 'Attribute', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "IfExp -> [('test', 'Compare'), ('body', 'Name'), ('orelse', 'Attribute')]": 3, "While -> [('test', 'Name'), ('body', ['Assign', 'Assign', 'For', 'If']), ('orelse', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str'])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str'])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Attribute', 'Attribute', 'Attribute']), ('body', ['Expr', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'If', 'If', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'Call'), ('body', ['Assign', 'Assign', 'AugAssign']), ('orelse', ['If'])]": 1, "Call -> [('func', 'Attribute'), ('args', []), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'Attribute')]": 1, "With -> [('context_expr', 'Call'), ('optional_vars', 'NoneType'), ('body', ['Expr', 'Expr', 'Assign', 'Expr', 'With', 'Expr', 'Expr', 'Expr'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assert', 'Assert', 'Assert', 'Assign', 'Assign', 'Assert', 'Assert', 'Assert']), ('decorator_list', [])]": 3, "If -> [('test', 'Name'), ('body', ['Print', 'Print', 'Raise']), ('orelse', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Num']), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "BinOp -> [('left', 'Str'), ('op', 'Mod'), ('right', 'BoolOp')]": 5, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Assign', 'For', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['AugAssign']), ('orelse', [])]": 18, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'Assign']), ('decorator_list', [])]": 5, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'str'), ('kwarg', 'str'), ('defaults', ['Name', 'Name', 'Name', 'Dict'])]": 2, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Call', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'Import', 'Import', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'ClassDef', 'ClassDef', 'FunctionDef'])]": 1, "If -> [('test', 'UnaryOp'), ('body', ['Expr']), ('orelse', ['Assign', 'Expr', 'For'])]": 1, "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]": 1, "Call -> [('func', 'Name'), ('args', ['Attribute']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 20, "If -> [('test', 'Call'), ('body', ['Assign', 'If', 'If', 'Assign', 'Assign', 'TryFinally', 'Expr', 'If']), ('orelse', [])]": 1, "If -> [('test', 'Name'), ('body', ['ImportFrom', 'FunctionDef']), ('orelse', ['ImportFrom', 'FunctionDef'])]": 1, "Module -> [('body', ['Import'])]": 2, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['If', 'Assign', 'If', 'If']), ('orelse', [])]": 1, "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['Assign', 'Assign', 'Return'])]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['If', 'Assign', 'TryExcept', 'If', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Expr', 'Expr']), ('orelse', [])]": 1, "While -> [('test', 'Num'), ('body', ['Assign', 'If', 'Expr']), ('orelse', [])]": 2, "Call -> [('func', 'Name'), ('args', ['Str', 'Name']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 31, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Expr', 'Assign', 'Return']), ('orelse', ['Assign'])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Attribute', 'Name', 'BinOp', 'Name'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'For', 'If', 'If', 'For', 'For', 'For', 'If', 'If', 'If']), ('decorator_list', [])]": 1, "TryExcept -> [('body', ['If', 'Raise']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'TryFinally']), ('decorator_list', [])]": 3, "BoolOp -> [('op', 'And'), ('values', ['Name', 'Name', 'Name'])]": 6, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'If', 'If', 'If', 'Expr']), ('orelse', [])]": 1, "For -> [('target', 'Tuple'), ('iter', 'Name'), ('body', ['For']), ('orelse', [])]": 8, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "Tuple -> [('elts', ['Name', 'Str', 'List', 'Tuple', 'Dict']), ('ctx', 'Load')]": 1, "Module -> [('body', ['Import', 'ImportFrom', 'Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'Import', 'ImportFrom', 'Import', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]": 1, "List -> [('elts', ['Str', 'Str', 'Str', 'Str', 'Attribute']), ('ctx', 'Load')]": 1, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef'])]": 1, "If -> [('test', 'UnaryOp'), ('body', ['Print', 'TryExcept']), ('orelse', ['Print', 'Print'])]": 1, "If -> [('test', 'Name'), ('body', ['Assert', 'Expr']), ('orelse', [])]": 2, "Call -> [('func', 'Attribute'), ('args', ['Str']), ('keywords', ['keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 86, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'If']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Str']), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 6, "Call -> [('func', 'Attribute'), ('args', ['Attribute']), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'If', 'If', 'Expr', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'For']), ('decorator_list', [])]": 3, "If -> [('test', 'UnaryOp'), ('body', ['Return']), ('orelse', [])]": 541, "ListComp -> [('elt', 'Compare'), ('generators', ['comprehension'])]": 5, "If -> [('test', 'Subscript'), ('body', ['ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'TryExcept']), ('orelse', [])]": 1, "If -> [('test', 'Name'), ('body', ['Assign', 'Assign', 'Assign', 'Assign']), ('orelse', [])]": 3, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Str', 'Str', 'Str'])]": 2, "Tuple -> [('elts', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('ctx', 'Load')]": 5, "ImportFrom -> [('module', 'str'), ('names', ['alias', 'alias', 'alias']), ('level', 'int')]": 293, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'For', 'Return']), ('decorator_list', [])]": 2, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Expr', 'Expr', 'Delete', 'Assign', 'Expr', 'Expr']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Return']), ('decorator_list', [])]": 2, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Name', 'Str', 'Name'])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'Return']), ('orelse', ['Assign', 'Assign', 'Return'])]": 1, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Print', 'AugAssign']), ('orelse', [])]": 1, "If -> [('test', 'Attribute'), ('body', ['For']), ('orelse', ['Pass'])]": 1, "Tuple -> [('elts', ['Str', 'Name', 'Name', 'Name', 'Name']), ('ctx', 'Load')]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'While']), ('decorator_list', [])]": 20, "BoolOp -> [('op', 'Or'), ('values', ['Compare', 'Compare', 'Call'])]": 5, "List -> [('elts', ['Str', 'Str', 'Str', 'Str']), ('ctx', 'Load')]": 78, "If -> [('test', 'Call'), ('body', ['Expr', 'Expr']), ('orelse', ['Raise'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If']), ('decorator_list', [])]": 1, "Delete -> [('targets', ['Name', 'Name', 'Name'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'TryExcept', 'Assign', 'Assign', 'For', 'If', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'If', 'Assign', 'If', 'Assign', 'Assign', 'If', 'Assign', 'If', 'Return']), ('decorator_list', [])]": 1, "List -> [('elts', ['Attribute', 'Str', 'Str', 'Str']), ('ctx', 'Load')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'If', 'If', 'Expr', 'If']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'If', 'If', 'If', 'Raise']), ('decorator_list', [])]": 2, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]": 1, "TryExcept -> [('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Expr', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 5, "BinOp -> [('left', 'BinOp'), ('op', 'Mult'), ('right', 'BinOp')]": 66, "If -> [('test', 'Name'), ('body', ['Assign']), ('orelse', ['TryExcept'])]": 2, "If -> [('test', 'Compare'), ('body', ['Assign', 'Delete']), ('orelse', ['Assign'])]": 1, "ClassDef -> [('name', 'str'), ('bases', []), ('body', ['Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "If -> [('test', 'Call'), ('body', ['Assign', 'Assign']), ('orelse', ['Assign', 'Assign', 'If'])]": 1, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Expr', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'For', 'If']), ('orelse', [])]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Assign', 'Assign', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'FunctionDef', 'FunctionDef'])]": 1, "Call -> [('func', 'Name'), ('args', ['BinOp', 'Call']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 10, "Tuple -> [('elts', ['Str', 'Str', 'Str', 'Str', 'Str', 'Num', 'Attribute']), ('ctx', 'Load')]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Return']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'If', 'Expr', 'For', 'If', 'If', 'If', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'Attribute'), ('body', ['Expr', 'Expr', 'Assign']), ('orelse', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['TryExcept', 'Assign', 'If']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Expr', 'While', 'If']), ('orelse', ['If'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'If', 'Assign', 'Assign']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', ['Call'])]": 1, "Tuple -> [('elts', ['Attribute', 'Str']), ('ctx', 'Load')]": 23, "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['Assign', 'For', 'If', 'For']), ('orelse', [])]": 1, "TryFinally -> [('body', ['Assign', 'Expr', 'Assign']), ('finalbody', ['Delete'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr']), ('decorator_list', ['Call'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'For', 'Assign', 'Assign', 'Assign', 'For', 'For', 'Expr', 'Assign', 'Expr', 'Assign', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'For']), ('orelse', [])]": 1, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign'])]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'TryExcept', 'Assign', 'ClassDef', 'ClassDef'])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Attribute'])]": 1, "TryExcept -> [('body', ['Assign', 'Return']), ('handlers', ['ExceptHandler', 'ExceptHandler']), ('orelse', [])]": 3, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['If', 'If', 'If', 'Assign', 'TryExcept']), ('orelse', [])]": 1, "If -> [('test', 'Name'), ('body', ['Assign', 'If', 'Assign', 'Return']), ('orelse', ['Return'])]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'Import', 'Assign', 'ClassDef', 'ClassDef', 'FunctionDef', 'If'])]": 1, "If -> [('test', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign']), ('orelse', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'If']), ('decorator_list', [])]": 1, "If -> [('test', 'Call'), ('body', ['For', 'If']), ('orelse', [])]": 2, "Call -> [('func', 'Attribute'), ('args', ['Lambda']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 37, "If -> [('test', 'Compare'), ('body', ['If', 'If', 'Expr', 'If']), ('orelse', [])]": 1, "If -> [('test', 'Call'), ('body', ['Return']), ('orelse', ['Assign', 'Assign', 'Return'])]": 1, "Compare -> [('left', 'Name'), ('ops', ['Eq']), ('comparators', ['Attribute'])]": 136, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'For']), ('decorator_list', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 4, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'For', 'For', 'If']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'Assign', 'Assign', 'Assert', 'For', 'Return']), ('decorator_list', [])]": 1, "AugAssign -> [('target', 'Attribute'), ('op', 'Sub'), ('value', 'Attribute')]": 4, "If -> [('test', 'Call'), ('body', ['Assign', 'If', 'Assign', 'Assign', 'If', 'Expr']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'While', 'Expr']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'For', 'For', 'Assign', 'Assign', 'For', 'Assign', 'Return']), ('decorator_list', [])]": 2, "If -> [('test', 'Name'), ('body', ['If', 'Return']), ('orelse', ['If'])]": 1, "Module -> [('body', ['Import', 'Expr', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Call', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 5, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'Import', 'Import', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'Assign', 'FunctionDef', 'If'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'If', 'If', 'Return']), ('decorator_list', ['Name'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'If', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'For', 'Assign', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "With -> [('context_expr', 'Call'), ('optional_vars', 'Name'), ('body', ['Assign', 'If', 'If', 'If'])]": 1, "BinOp -> [('left', 'Call'), ('op', 'Div'), ('right', 'Subscript')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['For', 'For', 'Delete', 'For', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Delete']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Attribute', 'Num', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'If', 'Return']), ('decorator_list', [])]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Expr', 'Assign', 'For', 'Assign', 'Assign', 'If']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign']), ('decorator_list', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'If']), ('orelse', [])]": 23, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'If', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Expr', 'For', 'Assign', 'Assign', 'If', 'Expr', 'Expr', 'Return']), ('decorator_list', ['Attribute'])]": 1, "For -> [('target', 'Name'), ('iter', 'List'), ('body', ['Assign', 'Expr']), ('orelse', [])]": 5, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'Assign', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'ClassDef'])]": 1, "IfExp -> [('test', 'Call'), ('body', 'Tuple'), ('orelse', 'Name')]": 1, "Call -> [('func', 'Attribute'), ('args', ['Subscript', 'Attribute']), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "While -> [('test', 'Call'), ('body', ['If']), ('orelse', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Expr']), ('orelse', ['Assign', 'If'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['AugAssign', 'If', 'With', 'Return']), ('decorator_list', [])]": 1, "List -> [('elts', ['List']), ('ctx', 'Load')]": 38, "Call -> [('func', 'Name'), ('args', ['BinOp', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 28, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Assign', 'TryExcept']), ('orelse', [])]": 1, "If -> [('test', 'Attribute'), ('body', ['If', 'For', 'Assign']), ('orelse', [])]": 2, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 2, "ExceptHandler -> [('type', 'Attribute'), ('name', 'Name'), ('body', ['Raise'])]": 10, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Expr', 'Import', 'ClassDef', 'FunctionDef', 'If'])]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assert', 'Assert', 'Assert']), ('decorator_list', [])]": 1, "ExceptHandler -> [('type', 'NoneType'), ('name', 'NoneType'), ('body', ['Expr', 'Expr', 'Return'])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Str', 'Str', 'Str', 'Str', 'Str'])]": 10, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'If', 'If', 'Assign', 'If', 'If', 'If', 'Return']), ('decorator_list', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'Assign', 'Assign']), ('decorator_list', [])]": 10, "BoolOp -> [('op', 'And'), ('values', ['Call', 'Compare', 'Call'])]": 4, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Str', 'Str', 'Name', 'Name', 'Name', 'Name', 'Name', 'Str', 'Name', 'Name'])]": 2, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ClassDef'])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign']), ('orelse', ['Return'])]": 3, "IfExp -> [('test', 'Compare'), ('body', 'List'), ('orelse', 'Attribute')]": 1, "Tuple -> [('elts', ['Subscript', 'Name', 'Name', 'Name', 'Name', 'Name', 'Subscript', 'Subscript', 'Name', 'Name', 'Name', 'Name', 'Subscript']), ('ctx', 'Load')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['For', 'Assign', 'If']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'FunctionDef', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'Assign', 'Assign']), ('orelse', ['Assign'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Attribute', 'Num', 'Num', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'Assign', 'Expr', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Print']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'For', 'Assign', 'Assign', 'Expr', 'Return']), ('decorator_list', [])]": 1, "Subscript -> [('value', 'Call'), ('slice', 'Index'), ('ctx', 'Load')]": 1069, "TryExcept -> [('body', ['Import', 'ImportFrom']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 1, "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['Assign', 'Print'])]": 1, "Tuple -> [('elts', ['Subscript', 'Subscript', 'Name']), ('ctx', 'Load')]": 27, "Compare -> [('left', 'Tuple'), ('ops', ['In']), ('comparators', ['Call'])]": 1, "Compare -> [('left', 'Name'), ('ops', ['NotEq']), ('comparators', ['Dict'])]": 2, "IfExp -> [('test', 'Compare'), ('body', 'List'), ('orelse', 'List')]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'ClassDef', 'Assign', 'FunctionDef', 'If'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Print', 'TryExcept', 'Assign', 'Assign', 'For', 'For']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Expr', 'Assign', 'If', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Attribute', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 83, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'FunctionDef', 'FunctionDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'FunctionDef', 'ClassDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'Assign', 'Expr', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'If', 'For', 'Print', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Print', 'Print', 'Assign', 'Assign', 'Expr', 'For'])]": 1, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Assign', 'For', 'Assign', 'Expr', 'Assign', 'For', 'AugAssign']), ('orelse', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'For', 'If']), ('decorator_list', [])]": 2, "Tuple -> [('elts', ['Subscript', 'Subscript', 'Subscript', 'Subscript', 'Subscript', 'Call', 'Subscript', 'Subscript', 'Subscript']), ('ctx', 'Load')]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Attribute', 'Attribute']), ('body', ['Expr', 'Assign', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "If -> [('test', 'Call'), ('body', ['Expr', 'If', 'Expr', 'Assign', 'Break']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'Assign', 'Assign', 'If', 'Expr', 'Assign', 'Return']), ('decorator_list', [])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Attribute', 'Name', 'Name', 'Name', 'Name'])]": 1, "Module -> [('body', ['Import', 'Assign', 'Expr', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'For', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr'])]": 1, "BinOp -> [('left', 'Call'), ('op', 'Mod'), ('right', 'Call')]": 23, "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['Assign', 'Raise'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Tuple', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 28, "Print -> [('dest', 'NoneType'), ('values', ['Str', 'Name', 'Subscript', 'Str', 'Name']), ('nl', 'bool')]": 1, "Call -> [('func', 'Name'), ('args', ['Name', 'Name']), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'Name'), ('kwargs', 'Name')]": 1, "Print -> [('dest', 'NoneType'), ('values', ['Tuple']), ('nl', 'bool')]": 14, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'Assert', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Expr', 'Expr', 'If', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'For', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'If', 'Expr', 'If', 'Expr', 'If', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Return']), ('decorator_list', ['Attribute'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'If', 'Assign', 'Expr', 'Expr', 'If', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Num', 'Call', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "TryFinally -> [('body', ['For']), ('finalbody', ['Expr', 'If'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assert', 'Assign', 'Assign', 'Assign', 'If', 'If']), ('decorator_list', [])]": 2, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Tuple', 'Name', 'Name', 'Name'])]": 1, "comprehension -> [('target', 'Name'), ('iter', 'Attribute'), ('ifs', ['UnaryOp'])]": 4, "If -> [('test', 'Call'), ('body', ['Assign', 'TryExcept']), ('orelse', ['Assign'])]": 1, "Call -> [('func', 'Name'), ('args', []), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'Dict')]": 8, "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr']), ('orelse', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'For', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'List'), ('body', ['Expr', 'Expr', 'Assign', 'For']), ('orelse', [])]": 1, "If -> [('test', 'Call'), ('body', ['With']), ('orelse', [])]": 5, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Expr', 'Assign', 'Assign', 'ClassDef']), ('decorator_list', [])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name']), ('vararg', 'str'), ('kwarg', 'str'), ('defaults', ['Call'])]": 2, "If -> [('test', 'Name'), ('body', ['Expr', 'Expr']), ('orelse', [])]": 34, "Call -> [('func', 'Name'), ('args', ['Str', 'Name', 'Name']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'If'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['FunctionDef', 'Global', 'Assign', 'Return']), ('decorator_list', ['Call'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Subscript', 'Subscript', 'Str']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If']), ('decorator_list', ['Call'])]": 1, "If -> [('test', 'UnaryOp'), ('body', ['ClassDef', 'Assign', 'Expr']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'If', 'If', 'If', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 137, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'ClassDef', 'ClassDef', 'ClassDef'])]": 1, "If -> [('test', 'Call'), ('body', ['Assign', 'If', 'Assign', 'Assign', 'If', 'If', 'If']), ('orelse', ['Assign', 'Assign'])]": 2, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 2, "Dict -> [('keys', ['Num', 'Num']), ('values', ['Num', 'Num'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'With']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'If', 'Assign', 'Assign', 'Expr', 'If']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'For']), ('decorator_list', ['Name'])]": 2, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'ClassDef', 'If'])]": 1, "For -> [('target', 'Name'), ('iter', 'Subscript'), ('body', ['AugAssign', 'Assign', 'With', 'While']), ('orelse', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Attribute', 'Attribute', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "If -> [('test', 'Compare'), ('body', ['Expr']), ('orelse', ['Print', 'Expr'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign']), ('decorator_list', [])]": 2, "Print -> [('dest', 'NoneType'), ('values', ['Str', 'Name', 'Str', 'Name']), ('nl', 'bool')]": 5, "For -> [('target', 'Tuple'), ('iter', 'Name'), ('body', ['If', 'Assign', 'Assign', 'Assign', 'Expr', 'If']), ('orelse', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Attribute', 'List']), ('keywords', ['keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "If -> [('test', 'Call'), ('body', ['Assign']), ('orelse', ['Break'])]": 2, "If -> [('test', 'Name'), ('body', ['TryExcept', 'If', 'Raise']), ('orelse', ['TryExcept', 'Raise'])]": 1, "List -> [('elts', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('ctx', 'Load')]": 1, "arguments -> [('args', ['Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Tuple'])]": 3, "BoolOp -> [('op', 'Or'), ('values', ['Attribute', 'Num'])]": 4, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Global', 'Global', 'Assign', 'For', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['ImportFrom', 'Expr', 'Assign']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'TryExcept']), ('decorator_list', [])]": 2, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Name', 'Name', 'Name', 'Str', 'Str'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Call', 'Name']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Print -> [('dest', 'NoneType'), ('values', ['Name', 'Call']), ('nl', 'bool')]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'Expr'])]": 1, "TryExcept -> [('body', ['Expr']), ('handlers', ['ExceptHandler']), ('orelse', ['AugAssign'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'If', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'Attribute'), ('body', ['Expr', 'Raise']), ('orelse', [])]": 1, "BinOp -> [('left', 'Num'), ('op', 'Div'), ('right', 'Subscript')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'While', 'If']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['If', 'If', 'For']), ('orelse', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'If', 'Assign', 'For', 'Assign', 'Assign', 'For', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Assign', 'For', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Subscript', 'Name', 'Name', 'Name', 'Name'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assert', 'If', 'If', 'Assign', 'Expr', 'If']), ('decorator_list', [])]": 1, "Tuple -> [('elts', ['Name', 'Name', 'Num', 'Name']), ('ctx', 'Load')]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'If', 'ClassDef', 'ClassDef', 'If'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Str']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 3, "alias -> [('name', 'str'), ('asname', 'str')]": 819, "Module -> [('body', ['Import', 'ImportFrom', 'Import', 'Import', 'Import', 'TryExcept', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Expr', 'Expr', 'Expr', 'If', 'ClassDef'])]": 1, "If -> [('test', 'BoolOp'), ('body', ['Return']), ('orelse', ['Return'])]": 39, "Tuple -> [('elts', ['Attribute', 'Name', 'Call', 'Attribute']), ('ctx', 'Load')]": 1, "Module -> [('body', ['Import', 'ImportFrom', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'Assign', 'Expr', 'If'])]": 1, "Compare -> [('left', 'Subscript'), ('ops', ['IsNot']), ('comparators', ['Name'])]": 50, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Expr', 'Assign', 'Assign', 'For', 'AugAssign']), ('orelse', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Str', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 5, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign']), ('decorator_list', [])]": 1, "BinOp -> [('left', 'Name'), ('op', 'RShift'), ('right', 'BinOp')]": 4, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Return']), ('decorator_list', [])]": 2, "BinOp -> [('left', 'Name'), ('op', 'Add'), ('right', 'Call')]": 111, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Num', 'Num', 'Num', 'Num', 'Num'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Print', 'Import', 'Import', 'Assign', 'Assign', 'TryExcept']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Expr', 'Expr']), ('decorator_list', [])]": 2, "If -> [('test', 'UnaryOp'), ('body', ['Return']), ('orelse', ['ImportFrom', 'Return'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'For']), ('decorator_list', [])]": 50, "Tuple -> [('elts', ['Name', 'Subscript', 'Subscript', 'Subscript', 'Subscript', 'Subscript', 'Subscript', 'Subscript', 'Subscript']), ('ctx', 'Load')]": 2, "ExceptHandler -> [('type', 'Tuple'), ('name', 'NoneType'), ('body', ['If'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Import', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'For', 'Assign', 'For']), ('decorator_list', [])]": 1, "TryExcept -> [('body', ['Expr']), ('handlers', ['ExceptHandler']), ('orelse', ['Expr', 'Expr'])]": 3, "Tuple -> [('elts', ['Call', 'Dict']), ('ctx', 'Load')]": 1, "Assign -> [('targets', ['Subscript']), ('value', 'Call')]": 726, "Tuple -> [('elts', ['Num', 'Num', 'Num', 'Num', 'Num']), ('ctx', 'Load')]": 6, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'Assign', 'Assert', 'For', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', ['Name'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'AugAssign', 'AugAssign', 'AugAssign', 'AugAssign', 'AugAssign', 'Return']), ('decorator_list', [])]": 2, "If -> [('test', 'Name'), ('body', ['If', 'Assign']), ('orelse', ['Assert', 'Assign'])]": 1, "Call -> [('func', 'Name'), ('args', ['Name', 'Call', 'Call', 'List']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Call -> [('func', 'Attribute'), ('args', ['Tuple', 'Attribute', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign']), ('decorator_list', [])]": 1, "If -> [('test', 'Attribute'), ('body', ['If']), ('orelse', ['Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Return'])]": 1, "Tuple -> [('elts', ['UnaryOp', 'Subscript']), ('ctx', 'Load')]": 1, "Tuple -> [('elts', ['Call', 'Str', 'Name', 'Call', 'Name']), ('ctx', 'Load')]": 2, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'List']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 90, "If -> [('test', 'Attribute'), ('body', ['Print']), ('orelse', [])]": 22, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'If', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "Dict -> [('keys', ['Str', 'Str']), ('values', ['Name', 'BinOp'])]": 2, "Tuple -> [('elts', ['Name', 'BoolOp', 'Name']), ('ctx', 'Load')]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'ImportFrom', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef'])]": 1, "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign', 'If', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Return']), ('orelse', ['Return'])]": 2, "For -> [('target', 'Name'), ('iter', 'Subscript'), ('body', ['Expr']), ('orelse', [])]": 23, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'TryExcept', 'Expr', 'Return']), ('decorator_list', [])]": 1, "arguments -> [('args', ['Name']), ('vararg', 'str'), ('kwarg', 'str'), ('defaults', ['Name'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'For', 'Raise']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['AugAssign']), ('orelse', ['For'])]": 2, "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign', 'Expr', 'Expr']), ('orelse', ['If'])]": 2, "comprehension -> [('target', 'Name'), ('iter', 'List'), ('ifs', ['Name'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'If', 'Assign', 'Assign', 'While', 'If', 'Return']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Attribute', 'Str', 'Call', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'For', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]": 3, "If -> [('test', 'Compare'), ('body', ['Expr']), ('orelse', ['Assign', 'Expr'])]": 2, "Dict -> [('keys', ['Str', 'Str']), ('values', ['Call', 'BinOp'])]": 1, "For -> [('target', 'Tuple'), ('iter', 'Name'), ('body', ['Assign', 'If']), ('orelse', [])]": 9, "BinOp -> [('left', 'Tuple'), ('op', 'Add'), ('right', 'Tuple')]": 2, "If -> [('test', 'Call'), ('body', ['Expr']), ('orelse', ['For'])]": 6, "If -> [('test', 'Compare'), ('body', ['Expr', 'Expr']), ('orelse', [])]": 60, "If -> [('test', 'UnaryOp'), ('body', ['Expr']), ('orelse', ['Raise'])]": 1, "TryFinally -> [('body', ['If', 'If', 'If']), ('finalbody', ['AugAssign'])]": 2, "List -> [('elts', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('ctx', 'Load')]": 9, "For -> [('target', 'Tuple'), ('iter', 'Name'), ('body', ['Assign', 'If', 'Assign', 'Assign', 'Assign', 'Expr']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'Assign', 'If', 'TryExcept', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Print', 'For']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'If', 'Assign', 'For']), ('decorator_list', ['Name', 'Name', 'Name'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Return']), ('decorator_list', [])]": 2, "Compare -> [('left', 'Attribute'), ('ops', ['GtE']), ('comparators', ['Tuple'])]": 11, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'While', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'For', 'Expr', 'Assign']), ('decorator_list', [])]": 1, "Module -> [('body', ['Import', 'Expr', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'Assign', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'FunctionDef', 'ClassDef', 'ClassDef'])]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['If', 'Assign', 'For', 'Expr']), ('orelse', [])]": 1, "Index -> [('value', 'Name')]": 3427, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'TryExcept', 'Expr', 'Assign', 'Assign', 'TryExcept', 'TryExcept', 'Expr', 'Expr', 'Expr', 'TryExcept', 'Expr', 'Return']), ('decorator_list', [])]": 1, "BinOp -> [('left', 'Tuple'), ('op', 'Add'), ('right', 'Name')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Print', 'Assign', 'If', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Print', 'Print', 'Print', 'Print', 'Print']), ('decorator_list', [])]": 1, "If -> [('test', 'Name'), ('body', ['Assign', 'For', 'If']), ('orelse', [])]": 1, "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['Assign', 'Expr', 'Expr', 'Expr'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'Assign', 'If', 'If', 'Assign', 'If', 'Assign', 'Assign', 'If', 'If']), ('decorator_list', ['Attribute'])]": 1, "Repr -> [('value', 'Name')]": 2, "If -> [('test', 'Call'), ('body', ['Return']), ('orelse', ['Assign', 'Return'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'Expr', 'Assign', 'For', 'Return']), ('decorator_list', [])]": 2, "TryExcept -> [('body', ['Assign', 'TryFinally']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 3, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['If', 'TryExcept', 'Expr']), ('orelse', [])]": 3, "BoolOp -> [('op', 'Or'), ('values', ['BoolOp', 'BoolOp', 'Compare'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'For', 'Assign', 'Assign', 'Assign', 'Assign', 'While']), ('decorator_list', [])]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'ClassDef'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]": 1, "List -> [('elts', ['Call', 'Call', 'Call', 'Call']), ('ctx', 'Load')]": 13, "Compare -> [('left', 'Call'), ('ops', ['GtE']), ('comparators', ['Attribute'])]": 3, "If -> [('test', 'Call'), ('body', ['FunctionDef', 'Assign']), ('orelse', ['Assign'])]": 1, "Call -> [('func', 'Name'), ('args', ['Name', 'List']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 36, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'Assign', 'For', 'FunctionDef', 'Expr', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Pass']), ('orelse', [])]": 5, "ExceptHandler -> [('type', 'Attribute'), ('name', 'NoneType'), ('body', ['If'])]": 3, "If -> [('test', 'BoolOp'), ('body', ['Assign', 'If', 'If', 'Assign', 'Assign', 'Print']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'If']), ('decorator_list', [])]": 1, "If -> [('test', 'Call'), ('body', ['Print']), ('orelse', ['Expr'])]": 1, "BoolOp -> [('op', 'Or'), ('values', ['Attribute', 'Call'])]": 14, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Num', 'BinOp', 'Tuple']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr']), ('decorator_list', ['Attribute'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'For', 'Assign', 'Assign', 'Assert', 'If', 'Assert', 'Assign', 'Expr', 'Assign', 'Assert', 'Assign', 'For', 'Assert', 'Assign', 'Assign', 'For', 'Expr']), ('decorator_list', [])]": 1, "List -> [('elts', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('ctx', 'Load')]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'While', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Print', 'If', 'Assign', 'If', 'Assign', 'If', 'Print', 'If', 'For']), ('decorator_list', [])]": 5, "Call -> [('func', 'Attribute'), ('args', ['Num', 'Num', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 150, "If -> [('test', 'Name'), ('body', ['Raise']), ('orelse', ['Expr'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Return']), ('decorator_list', ['Name'])]": 28, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assert', 'Assert']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'TryExcept', 'Assign', 'AugAssign', 'AugAssign', 'TryExcept']), ('decorator_list', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', []), ('body', ['Expr', 'Assign', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "Call -> [('func', 'Name'), ('args', []), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 754, "If -> [('test', 'BoolOp'), ('body', ['If']), ('orelse', ['Assign', 'TryFinally'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'ImportFrom', 'If', 'If', 'Assign', 'For', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'If', 'If', 'If']), ('decorator_list', [])]": 1, "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Import', 'ClassDef', 'ClassDef', 'ClassDef'])]": 1, "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['TryExcept', 'Return'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', []), ('body', ['If']), ('decorator_list', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 8, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'ClassDef']), ('decorator_list', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', []), ('body', ['Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If']), ('decorator_list', [])]": 411, "If -> [('test', 'Call'), ('body', ['TryExcept']), ('orelse', ['Assign'])]": 4, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "ImportFrom -> [('module', 'NoneType'), ('names', ['alias', 'alias', 'alias']), ('level', 'int')]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef']), ('decorator_list', [])]": 1, "Assign -> [('targets', ['Name']), ('value', 'Compare')]": 72, "Call -> [('func', 'Name'), ('args', ['Call', 'Num', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "If -> [('test', 'Compare'), ('body', ['Print', 'Assign']), ('orelse', ['If'])]": 6, "If -> [('test', 'UnaryOp'), ('body', ['For']), ('orelse', [])]": 12, "Call -> [('func', 'Attribute'), ('args', ['Str']), ('keywords', []), ('starargs', 'Name'), ('kwargs', 'Dict')]": 2, "BoolOp -> [('op', 'Or'), ('values', ['Attribute', 'UnaryOp'])]": 9, "arguments -> [('args', ['Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Str', 'Name'])]": 11, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'If', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['If']), ('orelse', ['FunctionDef'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Return']), ('decorator_list', ['Name'])]": 4, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'TryExcept', 'ClassDef'])]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ClassDef', 'FunctionDef'])]": 1, "TryFinally -> [('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr']), ('finalbody', ['Assign'])]": 1, "ExceptHandler -> [('type', 'Attribute'), ('name', 'NoneType'), ('body', ['Expr', 'If'])]": 1, "For -> [('target', 'Name'), ('iter', 'Subscript'), ('body', ['Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('orelse', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Tuple'), ('body', ['Assign', 'Assign', 'Expr', 'Expr']), ('orelse', [])]": 4, "Call -> [('func', 'Attribute'), ('args', ['Call', 'Attribute', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "If -> [('test', 'UnaryOp'), ('body', ['Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'AugAssign', 'AugAssign']), ('orelse', ['Expr', 'Expr', 'Expr', 'Expr'])]": 1, "If -> [('test', 'Compare'), ('body', ['Continue']), ('orelse', ['If'])]": 5, "Module -> [('body', ['Import', 'Assign', 'Expr', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'For', 'Assign', 'Expr', 'Assign', 'For', 'Assign', 'For', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Expr', 'Expr'])]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'ClassDef'])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['BinOp', 'Attribute', 'Attribute'])]": 1, "If -> [('test', 'Compare'), ('body', ['Expr']), ('orelse', ['Import', 'Assign', 'Assign', 'Assign', 'Assign'])]": 2, "While -> [('test', 'Compare'), ('body', ['Assign', 'If']), ('orelse', [])]": 4, "If -> [('test', 'Call'), ('body', ['Assign', 'Assign', 'Expr', 'Expr', 'Expr']), ('orelse', [])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Subscript', 'Subscript', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Attribute'])]": 2, "If -> [('test', 'Compare'), ('body', ['If', 'If', 'Assign']), ('orelse', [])]": 2, "Assign -> [('targets', ['Name', 'Name', 'Name', 'Name', 'Name']), ('value', 'Name')]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef']), ('decorator_list', [])]": 1, "Compare -> [('left', 'Subscript'), ('ops', ['GtE']), ('comparators', ['Attribute'])]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Name', 'Call']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Str', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Tuple', 'Name', 'Name', 'Name', 'Name', 'Name'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Expr', 'For', 'Assign']), ('decorator_list', [])]": 1, "UnaryOp -> [('op', 'Not'), ('operand', 'Call')]": 1448, "If -> [('test', 'Compare'), ('body', ['Print', 'Raise']), ('orelse', [])]": 2, "If -> [('test', 'Compare'), ('body', ['Assign', 'Expr', 'Assign', 'Expr']), ('orelse', [])]": 1, "If -> [('test', 'Attribute'), ('body', ['Assign', 'Assign', 'Expr']), ('orelse', ['Assign', 'Assign', 'Expr'])]": 1, "If -> [('test', 'Call'), ('body', ['Assign', 'If', 'Expr', 'If', 'Return']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'TryExcept', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assert', 'Assign', 'Assign', 'Assign', 'Expr', 'For', 'Print']), ('decorator_list', [])]": 1, "If -> [('test', 'Call'), ('body', ['AugAssign', 'Break']), ('orelse', [])]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'If', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'If', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "If -> [('test', 'Name'), ('body', ['Assign', 'TryExcept', 'Expr', 'Expr']), ('orelse', ['Print'])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'If']), ('orelse', ['Assign', 'If'])]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'Expr', 'If', 'Return']), ('decorator_list', ['Call', 'Name', 'Call'])]": 1, "Tuple -> [('elts', ['BinOp', 'Attribute', 'BinOp', 'Call', 'Call']), ('ctx', 'Load')]": 1, "Call -> [('func', 'Name'), ('args', ['Attribute', 'Call', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "List -> [('elts', ['Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num']), ('ctx', 'Load')]": 4, "ClassDef -> [('name', 'str'), ('bases', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "Module -> [('body', ['Import', 'Expr', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef'])]": 1, "If -> [('test', 'Attribute'), ('body', ['Assign', 'Return']), ('orelse', ['Return'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'If', 'Return']), ('decorator_list', [])]": 8, "BoolOp -> [('op', 'Or'), ('values', ['Attribute', 'Dict'])]": 2, "Attribute -> [('value', 'Name'), ('attr', 'str'), ('ctx', 'Del')]": 57, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'For', 'If', 'If']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Name', 'Str']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 4, "If -> [('test', 'UnaryOp'), ('body', ['Return']), ('orelse', ['Assign'])]": 2, "TryExcept -> [('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Print', 'Expr', 'Assign', 'Assign', 'Expr', 'Print', 'Expr', 'Expr', 'Print', 'Expr', 'Assign', 'Print', 'Expr']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 2, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "TryFinally -> [('body', ['Return']), ('finalbody', ['Assign', 'Assign', 'Assign', 'If', 'Assign', 'TryExcept', 'Assign', 'Assign', 'TryExcept', 'Delete', 'Assign', 'Assign', 'If', 'Assign', 'If', 'Expr'])]": 1, "BoolOp -> [('op', 'Or'), ('values', ['Attribute', 'Str'])]": 16, "If -> [('test', 'Compare'), ('body', ['TryExcept', 'FunctionDef', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'ImportFrom', 'ImportFrom', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'For', 'Expr', 'Expr', 'Return']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['If', 'If', 'If', 'Assign', 'Expr', 'Expr']), ('orelse', [])]": 1, "Compare -> [('left', 'Call'), ('ops', ['Lt']), ('comparators', ['Attribute'])]": 9, "If -> [('test', 'Call'), ('body', ['Assign', 'Assign', 'Expr', 'Return']), ('orelse', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name']), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'Name')]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'AugAssign', 'Assign', 'Return']), ('orelse', [])]": 1, "Tuple -> [('elts', ['Name', 'Num', 'Num', 'Num']), ('ctx', 'Load')]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['Call', 'BinOp', 'Name'])]": 2, "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['Expr'])]": 131, "TryExcept -> [('body', ['Assign', 'Assign', 'Assign', 'Assign']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 3, "Call -> [('func', 'Attribute'), ('args', ['Call', 'BinOp', 'BinOp', 'Attribute', 'Name', 'Name']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "If -> [('test', 'Name'), ('body', ['Assign', 'Return']), ('orelse', ['Assign', 'Assign', 'If', 'Return'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ClassDef', 'Assign', 'Assign', 'Assign', 'Expr', 'TryExcept']), ('decorator_list', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Attribute', 'Dict', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "If -> [('test', 'Attribute'), ('body', ['Assign', 'TryExcept', 'Expr', 'If']), ('orelse', ['Assign', 'Expr', 'If'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Print', 'Assign', 'Assert', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assert', 'Assert', 'Assert']), ('decorator_list', [])]": 1, "IfExp -> [('test', 'Compare'), ('body', 'BinOp'), ('orelse', 'Num')]": 1, "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['For', 'Assign', 'For', 'If', 'Assign', 'For', 'If', 'Assign', 'Assign', 'For', 'Assign', 'ImportFrom'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'If', 'Expr']), ('decorator_list', [])]": 3, "If -> [('test', 'Call'), ('body', ['Assign', 'Return']), ('orelse', ['Return'])]": 8, "If -> [('test', 'Compare'), ('body', ['Print', 'Print', 'Print', 'Print', 'Print']), ('orelse', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Expr', 'FunctionDef']), ('decorator_list', [])]": 8, "For -> [('target', 'Name'), ('iter', 'List'), ('body', ['If', 'Expr']), ('orelse', [])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Str', 'Name', 'Name', 'Name'])]": 2, "If -> [('test', 'UnaryOp'), ('body', ['FunctionDef', 'FunctionDef']), ('orelse', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'If', 'Assign', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'Name'), ('body', ['Assign', 'Assign', 'For']), ('orelse', ['Assign'])]": 1, "Call -> [('func', 'Name'), ('args', ['List', 'List']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['For', 'If']), ('orelse', [])]": 2, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'If', 'Assign']), ('orelse', [])]": 2, "AugAssign -> [('target', 'Name'), ('op', 'BitOr'), ('value', 'Attribute')]": 6, "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Expr', 'Expr', 'For', 'Expr', 'Expr']), ('orelse', [])]": 1, "If -> [('test', 'Name'), ('body', ['ImportFrom', 'Expr', 'ImportFrom', 'Expr', 'Expr']), ('orelse', ['Expr'])]": 1, "If -> [('test', 'Attribute'), ('body', ['Assign', 'TryExcept', 'Expr']), ('orelse', ['Assign', 'Expr'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'List'), ('body', ['Assign', 'Expr', 'For', 'For']), ('orelse', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['List', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Return']), ('decorator_list', ['Name'])]": 3, "If -> [('test', 'Compare'), ('body', ['Expr', 'Raise']), ('orelse', [])]": 7, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Delete', 'Assign']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'If', 'Expr', 'Expr', 'Expr']), ('decorator_list', ['Name'])]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'If'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'For', 'Assign', 'If', 'Return']), ('decorator_list', [])]": 2, "Compare -> [('left', 'Attribute'), ('ops', ['Eq']), ('comparators', ['Dict'])]": 1, "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['For']), ('orelse', [])]": 24, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'If', 'If', 'If', 'Return']), ('decorator_list', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Assign', 'Assign', 'Assign', 'ClassDef', 'FunctionDef']), ('decorator_list', [])]": 2, "If -> [('test', 'Subscript'), ('body', ['Expr']), ('orelse', [])]": 9, "Call -> [('func', 'Name'), ('args', ['Str', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Print', 'Assign', 'For', 'Assign', 'For', 'For', 'For']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['For', 'Expr']), ('orelse', [])]": 2, "ExceptHandler -> [('type', 'NoneType'), ('name', 'NoneType'), ('body', ['Print', 'Print', 'Print', 'Print', 'Raise'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Name', 'Tuple', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Attribute', 'Tuple']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Slice -> [('lower', 'Num'), ('upper', 'Attribute'), ('step', 'NoneType')]": 9, "TryFinally -> [('body', ['Assign']), ('finalbody', ['Expr'])]": 9, "If -> [('test', 'Attribute'), ('body', ['Assign', 'Expr', 'Assign']), ('orelse', ['Expr', 'Assign', 'Assign'])]": 1, "While -> [('test', 'Call'), ('body', ['Assign', 'Assign', 'Expr']), ('orelse', [])]": 1, "If -> [('test', 'Call'), ('body', ['Expr', 'Assign', 'Assign', 'If', 'Expr', 'Assign', 'If', 'Expr']), ('orelse', ['Expr', 'Expr', 'Assign', 'If', 'If', 'Expr', 'Assign', 'If', 'Expr'])]": 1, "Call -> [('func', 'Name'), ('args', ['Attribute']), ('keywords', ['keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 4, "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['Assign', 'Assign', 'While', 'Expr', 'Expr']), ('orelse', [])]": 1, "Compare -> [('left', 'Name'), ('ops', ['In']), ('comparators', ['Call'])]": 47, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Attribute', 'BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 11, "If -> [('test', 'Call'), ('body', ['Assign', 'If', 'Assign']), ('orelse', [])]": 3, "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'FunctionDef'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If']), ('decorator_list', [])]": 1, "If -> [('test', 'BoolOp'), ('body', ['AugAssign', 'If', 'Continue']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'TryExcept', 'Assign', 'FunctionDef', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['If', 'TryExcept']), ('orelse', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Compare']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 38, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'If'])]": 1, "Compare -> [('left', 'Subscript'), ('ops', ['NotEq']), ('comparators', ['Name'])]": 28, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Num', 'Num', 'Num'])]": 1, "For -> [('target', 'Name'), ('iter', 'Subscript'), ('body', ['Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'For']), ('orelse', [])]": 1, "BoolOp -> [('op', 'And'), ('values', ['UnaryOp', 'Attribute'])]": 8, "TryExcept -> [('body', ['TryFinally']), ('handlers', ['ExceptHandler', 'ExceptHandler', 'ExceptHandler']), ('orelse', ['Assign', 'If'])]": 1, "If -> [('test', 'Attribute'), ('body', ['Expr', 'Assign', 'If', 'Raise']), ('orelse', ['Expr', 'If'])]": 1, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Expr', 'TryExcept']), ('orelse', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'Call')]": 1, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['If', 'Assign', 'Expr', 'If']), ('orelse', [])]": 2, "Tuple -> [('elts', ['Call', 'Name']), ('ctx', 'Load')]": 122, "ClassDef -> [('name', 'str'), ('bases', ['Attribute', 'Name']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'Assign', 'If', 'For', 'Assign', 'Assign', 'Import', 'Return']), ('decorator_list', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "Tuple -> [('elts', ['Name', 'Call', 'Name']), ('ctx', 'Load')]": 12, "Call -> [('func', 'Attribute'), ('args', ['Compare', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 18, "If -> [('test', 'UnaryOp'), ('body', ['For']), ('orelse', ['Expr'])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "BoolOp -> [('op', 'Or'), ('values', ['Attribute', 'Compare', 'UnaryOp'])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Expr', 'FunctionDef', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 2, "List -> [('elts', ['Attribute', 'Str', 'Str', 'Name', 'Name']), ('ctx', 'Load')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Import', 'For', 'Return']), ('decorator_list', [])]": 1, "IfExp -> [('test', 'Attribute'), ('body', 'Num'), ('orelse', 'Name')]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Delete', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Str', 'Str', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 9, "If -> [('test', 'Name'), ('body', ['TryExcept', 'Assign', 'If', 'Expr']), ('orelse', ['Assign', 'Assign', 'If', 'Expr'])]": 1, "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Print', 'For', 'Expr', 'Print', 'ClassDef', 'Expr', 'Expr']), ('decorator_list', [])]": 2, "If -> [('test', 'Compare'), ('body', ['Expr', 'Return']), ('orelse', ['Assign', 'Return'])]": 1, "While -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'AugAssign']), ('orelse', [])]": 2, "Call -> [('func', 'Call'), ('args', []), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 4, "List -> [('elts', ['Str', 'Call', 'Str', 'BinOp']), ('ctx', 'Load')]": 1, "While -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'For', 'If', 'If', 'Assign', 'Expr']), ('orelse', [])]": 1, "BinOp -> [('left', 'Call'), ('op', 'BitAnd'), ('right', 'Attribute')]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Attribute', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 16, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'If', 'Return']), ('decorator_list', [])]": 1, "Tuple -> [('elts', ['Name', 'Name', 'Name']), ('ctx', 'Load')]": 322, "If -> [('test', 'BoolOp'), ('body', ['If', 'Return']), ('orelse', ['Return'])]": 2, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign']), ('orelse', ['Assign', 'Assign'])]": 1, "BoolOp -> [('op', 'Or'), ('values', ['BoolOp', 'Dict'])]": 2, "BinOp -> [('left', 'Str'), ('op', 'Add'), ('right', 'Attribute')]": 64, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'ClassDef'])]": 1, "Call -> [('func', 'Yield'), ('args', []), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 4, "Tuple -> [('elts', ['Str', 'BinOp', 'Str', 'Str', 'Num']), ('ctx', 'Load')]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assert', 'Assign', 'Assign', 'If', 'Return']), ('decorator_list', [])]": 3, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'If'])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str']), ('values', ['Attribute', 'ListComp', 'Attribute', 'Attribute'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assert', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Name', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 8, "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['Tuple', 'Tuple', 'Str'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]": 1, "Slice -> [('lower', 'NoneType'), ('upper', 'Num'), ('step', 'NoneType')]": 342, "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['Assign', 'Assign'])]": 10, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Expr']), ('orelse', [])]": 1, "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'For']), ('orelse', [])]": 9, "Call -> [('func', 'Name'), ('args', ['Name', 'Name', 'Name', 'Call', 'Call', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 4, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Expr', 'If', 'Return']), ('decorator_list', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['FunctionDef', 'FunctionDef']), ('decorator_list', ['Attribute'])]": 2, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'ClassDef']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Print', 'Assign', 'Assign', 'If', 'Import', 'Assign', 'For', 'Expr', 'Assign', 'Expr', 'Print', 'Assign', 'Assign', 'Return']), ('decorator_list', ['Call', 'Name'])]": 1, "If -> [('test', 'BoolOp'), ('body', ['TryExcept', 'AugAssign']), ('orelse', [])]": 1, "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'Expr', 'Assign', 'For']), ('orelse', [])]": 2, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'If', 'Delete']), ('orelse', ['If'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'If', 'Assign', 'Return']), ('decorator_list', [])]": 2, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', ['Call'])]": 1, "BoolOp -> [('op', 'And'), ('values', ['Name', 'Call'])]": 104, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Global', 'Assign', 'For', 'If']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'If', 'If', 'If', 'Import', 'Assign', 'Assign', 'Assign', 'TryExcept', 'Assign', 'If', 'TryExcept', 'If', 'Expr', 'Assign', 'Return']), ('decorator_list', ['Name'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Name']), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "BoolOp -> [('op', 'Or'), ('values', ['Call', 'Str'])]": 43, "List -> [('elts', ['Name', 'Name', 'Name', 'Name']), ('ctx', 'Load')]": 17, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 2, "ExceptHandler -> [('type', 'Name'), ('name', 'Name'), ('body', ['Expr', 'Expr', 'Expr', 'Return'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assert', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assert']), ('decorator_list', [])]": 1, "Call -> [('func', 'Call'), ('args', ['Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 42, "AugAssign -> [('target', 'Name'), ('op', 'Add'), ('value', 'IfExp')]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name', 'Name']), ('body', ['Expr', 'Assign', 'FunctionDef']), ('decorator_list', [])]": 4, "Assign -> [('targets', ['Tuple']), ('value', 'Tuple')]": 259, "If -> [('test', 'Compare'), ('body', ['Print', 'Print', 'Print', 'Print', 'Print', 'Print', 'Print']), ('orelse', [])]": 1, "BoolOp -> [('op', 'And'), ('values', ['Call', 'Name'])]": 14, "ClassDef -> [('name', 'str'), ('bases', []), ('body', ['Assign', 'Assign', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 2, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['If', 'If', 'If']), ('orelse', [])]": 5, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'TryExcept', 'If', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assert']), ('decorator_list', [])]": 4, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['If', 'Assign', 'If', 'Assign', 'Expr', 'If', 'Expr']), ('orelse', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Name', 'Attribute', 'Attribute', 'Attribute', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'If', 'Assign', 'If', 'For', 'If', 'Expr']), ('decorator_list', [])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['Attribute', 'BinOp', 'Attribute'])]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Assert', 'Assign', 'Expr']), ('orelse', [])]": 1, "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['Assign', 'Expr', 'Expr'])]": 2, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'For', 'Assign']), ('orelse', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['If', 'If', 'If', 'If', 'Assign', 'Assign', 'If', 'Assign', 'If', 'If', 'If', 'Assign', 'Assign']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'For', 'Expr', 'Return']), ('decorator_list', [])]": 2, "If -> [('test', 'Name'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If']), ('orelse', [])]": 1, "TryExcept -> [('body', ['If', 'Assign', 'Return']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 2, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Expr']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'For', 'If', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Import', 'ImportFrom', 'Assign', 'Assign', 'If', 'Assign', 'Expr', 'For', 'Expr']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr']), ('orelse', [])]": 2, "Module -> [('body', ['Import', 'Assign', 'ImportFrom', 'Expr', 'Expr', 'Import', 'Import', 'Assign', 'ImportFrom', 'Expr', 'Expr', 'Import', 'Import', 'Import', 'Assign', 'Assign', 'Assign', 'Expr', 'Import', 'Import', 'Expr', 'Expr', 'Import', 'Import', 'Expr', 'Expr', 'Import', 'Import', 'Expr', 'Expr'])]": 1, "BinOp -> [('left', 'Call'), ('op', 'Add'), ('right', 'Tuple')]": 2, "If -> [('test', 'Call'), ('body', ['Expr', 'Assign', 'If']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'For', 'Expr']), ('decorator_list', [])]": 2, "Call -> [('func', 'Name'), ('args', ['UnaryOp', 'BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 4, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Expr'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'ImportFrom', 'Assign', 'If', 'Return']), ('decorator_list', [])]": 6, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', ['Attribute'])]": 1, "Call -> [('func', 'Name'), ('args', ['Str']), ('keywords', []), ('starargs', 'Attribute'), ('kwargs', 'Dict')]": 4, "If -> [('test', 'Compare'), ('body', ['Expr', 'Return']), ('orelse', ['Assign', 'Assign', 'Assign', 'Return'])]": 1, "Module -> [('body', ['Import', 'Expr', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'ImportFrom', 'ImportFrom', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef'])]": 1, "If -> [('test', 'Call'), ('body', ['Assign', 'If', 'Expr', 'Assign', 'If', 'Expr']), ('orelse', ['Assign', 'Expr', 'For'])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Name']), ('values', ['Call', 'Attribute', 'Call', 'Call'])]": 1, "Tuple -> [('elts', ['Str', 'Call', 'Str', 'Str']), ('ctx', 'Load')]": 3, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'AugAssign', 'If', 'Assign', 'AugAssign', 'AugAssign', 'AugAssign'])]": 1, "Call -> [('func', 'Name'), ('args', ['Name', 'Str', 'Dict']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 48, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'Name')]": 4, "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'If']), ('orelse', ['If'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'TryExcept', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Return']), ('decorator_list', [])]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ImportFrom', 'FunctionDef', 'FunctionDef', 'Expr'])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'For', 'Return']), ('orelse', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 3, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str']), ('values', ['Str', 'List', 'Str', 'Str'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'For', 'Assign', 'Expr', 'Assign', 'Expr', 'For', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]": 2, "List -> [('elts', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('ctx', 'Load')]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'TryFinally']), ('decorator_list', [])]": 2, "If -> [('test', 'Call'), ('body', ['Expr', 'Expr']), ('orelse', ['Assign', 'TryFinally'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'If', 'Expr', 'Expr', 'If']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['If']), ('orelse', ['AugAssign', 'For'])]": 1, "ClassDef -> [('name', 'str'), ('bases', []), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 13, "If -> [('test', 'Compare'), ('body', ['Import', 'ClassDef', 'Assign']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'TryExcept', 'If', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'For', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]": 2, "If -> [('test', 'Compare'), ('body', ['Assign']), ('orelse', ['Assign', 'Assign', 'Assign', 'If', 'If', 'AugAssign', 'If', 'If'])]": 1, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'FunctionDef', 'Assign', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'Assign', 'FunctionDef', 'Assign', 'FunctionDef', 'Assign', 'FunctionDef', 'Assign'])]": 1, "If -> [('test', 'BoolOp'), ('body', ['Raise']), ('orelse', ['Assign'])]": 2, "If -> [('test', 'Attribute'), ('body', ['Assign']), ('orelse', ['Assign', 'Assign', 'Assign'])]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Import', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Str', 'Str', 'Str', 'Str', 'Attribute', 'Str'])]": 1, "Return -> [('value', 'Dict')]": 199, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Str', 'Name', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'For', 'Assign', 'Expr', 'TryExcept', 'Assign', 'If', 'TryExcept']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'For', 'Assign', 'Import', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'For', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'If', 'Expr', 'Assign', 'Assign']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'If', 'If', 'If', 'Assign', 'Assign', 'For', 'Return']), ('decorator_list', [])]": 2, "ClassDef -> [('name', 'str'), ('bases', ['Name', 'Attribute']), ('body', ['Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 3, "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'Assign']), ('orelse', ['Assign'])]": 2, "If -> [('test', 'UnaryOp'), ('body', ['ImportFrom', 'Assign', 'For']), ('orelse', [])]": 1, "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Expr']), ('orelse', [])]": 2, "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'If', 'If', 'Expr']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'TryFinally']), ('decorator_list', [])]": 9, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'Expr', 'Expr']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'With', 'Expr']), ('decorator_list', [])]": 1, "ExceptHandler -> [('type', 'Tuple'), ('name', 'Name'), ('body', ['If', 'Expr'])]": 4, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Name', 'Num', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "If -> [('test', 'Attribute'), ('body', ['Import', 'Expr']), ('orelse', ['Expr'])]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'Import', 'ImportFrom', 'If', 'FunctionDef', 'If', 'ClassDef', 'FunctionDef', 'Assign', 'ClassDef', 'ClassDef', 'Assign'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['For', 'Return']), ('decorator_list', ['Call'])]": 1, "Expr -> [('value', 'Subscript')]": 13, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'ClassDef', 'Expr']), ('decorator_list', [])]": 1, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'ImportFrom', 'Import', 'Assign', 'ClassDef', 'ClassDef', 'FunctionDef', 'If'])]": 1, "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Expr', 'Expr']), ('orelse', [])]": 3, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 2, "Call -> [('func', 'Name'), ('args', ['Call', 'BinOp', 'Name', 'Name', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "If -> [('test', 'Compare'), ('body', ['TryExcept']), ('orelse', ['Assign'])]": 6, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'TryExcept', 'If', 'Assign', 'Return']), ('decorator_list', [])]": 3, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['If', 'Assign', 'Assign', 'Expr']), ('orelse', [])]": 5, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'ImportFrom', 'Import', 'ImportFrom', 'Import', 'ClassDef'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Print', 'Assign', 'Assign', 'Assign', 'For', 'AugAssign', 'Assign', 'Expr', 'Return']), ('decorator_list', [])]": 1, "Call -> [('func', 'Call'), ('args', ['Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Pass']), ('decorator_list', [])]": 14, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'FunctionDef', 'FunctionDef', 'Expr', 'Expr', 'TryExcept']), ('decorator_list', [])]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Global', 'Assign', 'Expr', 'Print', 'Return']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Str', 'Name']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 38, "Call -> [('func', 'Attribute'), ('args', ['BinOp', 'BinOp']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'For', 'For', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'UnaryOp'), ('body', ['Assign']), ('orelse', ['Assign', 'For'])]": 1, "ExceptHandler -> [('type', 'Attribute'), ('name', 'Name'), ('body', ['Expr', 'Raise'])]": 5, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'With']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'For', 'If', 'If', 'If', 'Expr', 'Expr', 'Expr', 'Expr', 'If']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]": 2, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]": 1, "While -> [('test', 'Attribute'), ('body', ['Expr']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'ImportFrom', 'Assign', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'Expr', 'Return']), ('decorator_list', [])]": 4, "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'If', 'Assign', 'If', 'Assign', 'Assign', 'Expr']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'If', 'If', 'Return']), ('decorator_list', [])]": 1, "Dict -> [('keys', ['Num', 'Num', 'Num', 'Num']), ('values', ['Attribute', 'Attribute', 'Attribute', 'Attribute'])]": 1, "Compare -> [('left', 'Call'), ('ops', ['IsNot']), ('comparators', ['Name'])]": 41, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Import', 'With', 'Expr', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assert', 'Assign', 'For', 'If', 'Return']), ('decorator_list', [])]": 1, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Assign', 'If', 'Assign', 'Assign', 'Assign', 'If']), ('orelse', [])]": 1, "BinOp -> [('left', 'ListComp'), ('op', 'Add'), ('right', 'Name')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'TryExcept', 'Assign', 'Assign', 'If', 'If', 'Assign', 'If', 'Expr', 'Return']), ('decorator_list', ['Name', 'Name', 'Call', 'Call'])]": 1, "BinOp -> [('left', 'Num'), ('op', 'Pow'), ('right', 'Name')]": 12, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'TryExcept']), ('decorator_list', ['Name'])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['Str', 'Call', 'Str'])]": 3, "Call -> [('func', 'Name'), ('args', ['Attribute', 'Str']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "Module -> [('body', ['Expr', 'Import', 'Import', 'Import', 'Import', 'Assign', 'Assert', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'FunctionDef', 'FunctionDef', 'If'])]": 1, "Call -> [('func', 'Name'), ('args', []), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 12, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['FunctionDef', 'Assign', 'If', 'Return']), ('decorator_list', [])]": 1, "Dict -> [('keys', ['Str', 'Str']), ('values', ['Name', 'Attribute'])]": 13, "Compare -> [('left', 'Name'), ('ops', ['Lt']), ('comparators', ['UnaryOp'])]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Expr', 'Expr', 'Expr', 'Expr']), ('orelse', [])]": 1, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]": 4, "BinOp -> [('left', 'BinOp'), ('op', 'Mult'), ('right', 'Num')]": 43, "TryExcept -> [('body', ['Assign']), ('handlers', ['ExceptHandler']), ('orelse', ['Assign', 'Expr'])]": 4, "ClassDef -> [('name', 'str'), ('bases', ['Name', 'Name']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "TryExcept -> [('body', ['Expr', 'Break']), ('handlers', ['ExceptHandler', 'ExceptHandler', 'ExceptHandler', 'ExceptHandler', 'ExceptHandler']), ('orelse', [])]": 1, "If -> [('test', 'Attribute'), ('body', ['Assign']), ('orelse', [])]": 122, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'ClassDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Assign', 'For', 'Expr', 'Expr', 'If', 'If', 'Expr', 'If', 'If', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 1, "arguments -> [('args', ['Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['BinOp'])]": 3, "If -> [('test', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('orelse', [])]": 1, "ExceptHandler -> [('type', 'Name'), ('name', 'Name'), ('body', ['Assign', 'Expr', 'Expr', 'Expr'])]": 3, "Call -> [('func', 'Attribute'), ('args', ['List', 'Attribute']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['ImportFrom', 'ImportFrom'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'TryExcept', 'Expr', 'TryExcept', 'Expr', 'Expr', 'TryExcept']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'For', 'While']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'ImportFrom', 'ImportFrom', 'Expr']), ('decorator_list', [])]": 3, "If -> [('test', 'Name'), ('body', ['FunctionDef', 'Assign']), ('orelse', ['Assign'])]": 1, "Module -> [('body', ['Import', 'ImportFrom', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'FunctionDef', 'ClassDef', 'ClassDef', 'ClassDef', 'FunctionDef', 'If'])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Assign', 'If', 'Assign', 'Expr', 'AugAssign']), ('orelse', [])]": 1, "Tuple -> [('elts', ['List', 'List', 'List']), ('ctx', 'Load')]": 1, "Assign -> [('targets', ['Attribute', 'Attribute', 'Attribute']), ('value', 'Num')]": 1, "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['Assign', 'Expr']), ('orelse', [])]": 23, "Call -> [('func', 'Name'), ('args', ['Name', 'IfExp', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Expr', 'Expr', 'If']), ('decorator_list', [])]": 1, "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'Return']), ('orelse', ['Return'])]": 1, "Module -> [('body', ['Import', 'Import', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'Assign', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'While']), ('decorator_list', [])]": 3, "Call -> [('func', 'Attribute'), ('args', ['Name']), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 3, "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Call', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Name', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "For -> [('target', 'Name'), ('iter', 'Tuple'), ('body', ['Assign', 'TryExcept']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Print', 'For', 'Print', 'Assign']), ('decorator_list', [])]": 2, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Str', 'Str', 'Num', 'Num', 'Num'])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', ['Call'])]": 1, "Call -> [('func', 'Name'), ('args', ['Name', 'Name', 'Attribute', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'Call')]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Subscript', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['FunctionDef', 'FunctionDef', 'Expr', 'Expr']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign']), ('decorator_list', ['Call'])]": 1, "AugAssign -> [('target', 'Name'), ('op', 'Mod'), ('value', 'Name')]": 1, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Expr', 'Expr', 'Assign']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'ImportFrom', 'If', 'Expr']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Subscript'), ('body', ['Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'If', 'Assign', 'If']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'With', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['Assign', 'Assign', 'Assign'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'TryExcept', 'Return']), ('decorator_list', [])]": 4, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 2, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Expr', 'Assign', 'Assign']), ('orelse', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'If']), ('decorator_list', [])]": 1, "TryExcept -> [('body', ['Expr', 'Assign']), ('handlers', ['ExceptHandler']), ('orelse', ['Expr', 'TryExcept', 'Continue'])]": 1, "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'Assign', 'ClassDef'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Name', 'Attribute']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 3, "Call -> [('func', 'Attribute'), ('args', ['Str', 'Str']), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'If', 'If']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'Assign', 'TryExcept']), ('orelse', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'For', 'Assign', 'If']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Expr', 'Return']), ('decorator_list', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Attribute', 'Name', 'Name', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 5, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Assign']), ('decorator_list', [])]": 7, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Name', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 5, "If -> [('test', 'Compare'), ('body', ['For', 'Expr', 'Return']), ('orelse', [])]": 1, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'ClassDef'])]": 1, "If -> [('test', 'Compare'), ('body', ['TryExcept', 'Assign', 'Expr']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['For', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 2, "Compare -> [('left', 'Name'), ('ops', ['LtE']), ('comparators', ['Attribute'])]": 12, "Module -> [('body', ['Import', 'Expr', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'Assign', 'Assign', 'Assign', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef'])]": 1, "TryFinally -> [('body', ['Assign', 'Expr', 'Assign', 'Expr']), ('finalbody', ['Expr', 'Expr'])]": 1, "If -> [('test', 'Call'), ('body', ['If', 'Assign', 'Assign']), ('orelse', ['Expr', 'Assign', 'Assign', 'For', 'If'])]": 1, "With -> [('context_expr', 'Call'), ('optional_vars', 'Name'), ('body', ['Expr', 'Expr', 'Assign'])]": 1, "Call -> [('func', 'Name'), ('args', ['Name']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'Name')]": 3, "Tuple -> [('elts', ['Attribute', 'Attribute', 'UnaryOp']), ('ctx', 'Load')]": 1, "If -> [('test', 'BinOp'), ('body', ['AugAssign', 'AugAssign']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "For -> [('target', 'Tuple'), ('iter', 'List'), ('body', ['For']), ('orelse', [])]": 1, "If -> [('test', 'BoolOp'), ('body', ['If', 'If', 'For']), ('orelse', ['Assign'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'If', 'Return']), ('decorator_list', ['Name'])]": 1, "If -> [('test', 'Call'), ('body', ['Assign']), ('orelse', ['Expr', 'Assign', 'Expr', 'Expr', 'Assign'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'TryFinally']), ('decorator_list', [])]": 2, "If -> [('test', 'Compare'), ('body', ['ImportFrom', 'FunctionDef']), ('orelse', ['Raise'])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Import', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'Call'), ('body', ['AugAssign', 'AugAssign', 'AugAssign']), ('orelse', ['If'])]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['Name', 'ListComp', 'Attribute'])]": 1, "List -> [('elts', ['BinOp', 'Str', 'Str']), ('ctx', 'Load')]": 3, "Call -> [('func', 'Name'), ('args', ['BinOp', 'Subscript']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 5, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Call', 'Attribute', 'Num', 'BinOp', 'Num', 'Num', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'Assign', 'If', 'Assign', 'Return']), ('decorator_list', [])]": 2, "TryFinally -> [('body', ['Assign', 'Assign']), ('finalbody', ['Expr'])]": 1, "If -> [('test', 'BoolOp'), ('body', ['Expr']), ('orelse', ['TryExcept'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', ['Name', 'Name', 'Name'])]": 2, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Attribute']), ('keywords', ['keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Expr', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'If'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Attribute', 'Name', 'Str', 'Name', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assert', 'Assert', 'Expr']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Pass', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'If', 'If', 'If', 'Assign', 'Assign', 'Assign', 'TryExcept', 'If', 'TryExcept']), ('decorator_list', [])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['Num', 'Name', 'Name'])]": 2, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Str', 'Name'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'For', 'Assign', 'If', 'For', 'Assign', 'While', 'Return']), ('decorator_list', ['Attribute'])]": 1, "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'Import', 'Import', 'FunctionDef', 'FunctionDef'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Attribute']), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ClassDef', 'Expr']), ('decorator_list', [])]": 2, "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['Assign', 'Assign', 'For', 'If']), ('orelse', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Num']), ('keywords', ['keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "TryExcept -> [('body', ['Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 1, "Tuple -> [('elts', ['Name', 'Name', 'Name', 'Name', 'Attribute']), ('ctx', 'Load')]": 3, "Call -> [('func', 'Name'), ('args', ['Str', 'Num', 'Num', 'Name', 'Call', 'Call', 'List', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'ClassDef', 'ClassDef', 'Assign', 'Assign', 'FunctionDef', 'ClassDef', 'ClassDef'])]": 1, "Module -> [('body', ['Import', 'ImportFrom', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'Assign', 'ClassDef', 'ClassDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]": 1, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'If', 'If', 'Assign']), ('orelse', [])]": 1, "While -> [('test', 'Num'), ('body', ['If', 'Assign', 'Assign', 'Assign', 'If']), ('orelse', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Call', 'Str']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Assign', 'Assign', 'Assert', 'Assign', 'Assign', 'For', 'Return']), ('decorator_list', [])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Num', 'Num', 'Name', 'Name', 'Str', 'Str', 'Str'])]": 1, "Tuple -> [('elts', ['Name', 'Str', 'Num', 'Num']), ('ctx', 'Load')]": 4, "ExceptHandler -> [('type', 'Tuple'), ('name', 'Name'), ('body', ['Expr', 'Return'])]": 2, "Call -> [('func', 'Name'), ('args', ['Str', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 198, "Module -> [('body', ['Import', 'TryExcept', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['For', 'Assign', 'Assign', 'If', 'Assign', 'Expr']), ('decorator_list', [])]": 2, "Module -> [('body', ['Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'ClassDef', 'ClassDef'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'TryFinally']), ('decorator_list', ['Call'])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['AugAssign', 'If', 'For']), ('orelse', [])]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'If', 'Assign', 'Assign', 'If', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'ClassDef', 'FunctionDef'])]": 1, "Return -> [('value', 'BoolOp')]": 160, "If -> [('test', 'UnaryOp'), ('body', ['Expr', 'Return']), ('orelse', ['Expr', 'Assign', 'If', 'If', 'Expr'])]": 1, "TryFinally -> [('body', ['Expr', 'For']), ('finalbody', ['Expr', 'Expr'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'Assign', 'If', 'Assign', 'Return']), ('decorator_list', [])]": 2, "Call -> [('func', 'Attribute'), ('args', ['BinOp', 'BinOp', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Print', 'For']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Print', 'Assign', 'Assign', 'Print', 'Assign', 'Print', 'Print', 'Assign', 'For', 'Assign', 'Print']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call'])]": 1, "If -> [('test', 'Call'), ('body', ['Assign', 'If', 'Assign', 'Assign', 'Assign', 'Expr']), ('orelse', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Subscript', 'Str', 'Str', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Assign', 'If', 'Assign', 'Assign', 'Assign', 'Expr']), ('orelse', [])]": 1, "Tuple -> [('elts', ['Call', 'Call', 'Call']), ('ctx', 'Load')]": 58, "If -> [('test', 'Name'), ('body', ['Assign', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'Assign', 'Assign', 'Return']), ('orelse', ['Return'])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'ClassDef']), ('decorator_list', [])]": 1, "TryExcept -> [('body', ['Assign']), ('handlers', ['ExceptHandler']), ('orelse', ['Return'])]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['For', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Return']), ('decorator_list', [])]": 1, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'FunctionDef', 'ClassDef'])]": 1, "Lambda -> [('args', 'arguments'), ('body', 'Num')]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "While -> [('test', 'Num'), ('body', ['Assign', 'Print', 'Assign', 'Assign', 'If']), ('orelse', [])]": 1, "Call -> [('func', 'Name'), ('args', []), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'Name')]": 8, "For -> [('target', 'Name'), ('iter', 'List'), ('body', ['Assign', 'Expr', 'For']), ('orelse', [])]": 2, "IfExp -> [('test', 'Name'), ('body', 'Name'), ('orelse', 'BinOp')]": 1, "BinOp -> [('left', 'Num'), ('op', 'Pow'), ('right', 'BinOp')]": 11, "If -> [('test', 'Attribute'), ('body', ['Assign', 'Break']), ('orelse', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', []), ('body', ['Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assert', 'If', 'If', 'If', 'Assign', 'If', 'Assert', 'Assign', 'If', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Assign', 'If']), ('decorator_list', [])]": 1, "For -> [('target', 'Tuple'), ('iter', 'Name'), ('body', ['If', 'If', 'If', 'Assign']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'For', 'TryExcept']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'For', 'Assign', 'For', 'If', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Expr']), ('orelse', ['Raise'])]": 1, "BinOp -> [('left', 'Attribute'), ('op', 'Add'), ('right', 'List')]": 14, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'AugAssign', 'Assign', 'Assign', 'For']), ('decorator_list', [])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Name', 'List', 'Name'])]": 1, "If -> [('test', 'Attribute'), ('body', ['Expr', 'Return']), ('orelse', ['Return'])]": 1, "For -> [('target', 'Tuple'), ('iter', 'Subscript'), ('body', ['Assign']), ('orelse', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'List']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 6, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'ClassDef', 'ClassDef', 'ClassDef'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['AugAssign', 'Expr']), ('orelse', ['If'])]": 1, "Call -> [('func', 'Name'), ('args', ['List', 'Attribute', 'Dict']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Module -> [('body', ['Import', 'Expr', 'Import', 'ImportFrom', 'ImportFrom', 'Import', 'ImportFrom', 'ImportFrom', 'Expr', 'ImportFrom', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'For', 'Assign', 'Expr', 'Expr'])]": 1, "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'ClassDef'])]": 1, "Call -> [('func', 'Name'), ('args', ['Subscript', 'Subscript', 'Num', 'Num', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "If -> [('test', 'Name'), ('body', ['For']), ('orelse', ['Expr'])]": 5, "Call -> [('func', 'Attribute'), ('args', ['Subscript', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 152, "If -> [('test', 'BoolOp'), ('body', ['Assign', 'FunctionDef', 'Expr']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'For', 'Raise']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Return']), ('decorator_list', [])]": 13, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'str'), ('defaults', ['Name', 'Name', 'Str', 'Name'])]": 2, "Call -> [('func', 'Attribute'), ('args', ['Tuple', 'Num', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 18, "If -> [('test', 'Compare'), ('body', ['Assign', 'TryFinally', 'Expr']), ('orelse', ['If'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'FunctionDef', 'Expr', 'Return']), ('decorator_list', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Return']), ('decorator_list', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Attribute']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'Name')]": 2, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'If']), ('orelse', ['If'])]": 3, "AugAssign -> [('target', 'Name'), ('op', 'Mult'), ('value', 'Num')]": 8, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'FunctionDef', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "If -> [('test', 'Attribute'), ('body', ['Import', 'FunctionDef', 'Assign']), ('orelse', [])]": 1, "ExceptHandler -> [('type', 'Str'), ('name', 'NoneType'), ('body', ['Expr'])]": 2, "For -> [('target', 'Name'), ('iter', 'Subscript'), ('body', ['If', 'Assign', 'Assign', 'If']), ('orelse', [])]": 1, "Call -> [('func', 'Subscript'), ('args', ['Attribute']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Call -> [('func', 'Attribute'), ('args', ['Str', 'Subscript', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'For', 'Assign', 'For', 'Expr', 'Return']), ('decorator_list', ['Attribute', 'Call'])]": 1, "Call -> [('func', 'Name'), ('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "List -> [('elts', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('ctx', 'Load')]": 1, "For -> [('target', 'Name'), ('iter', 'Tuple'), ('body', ['Assign', 'Assign', 'Assign', 'Assert', 'Assert', 'Assert', 'Assert', 'Assert']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'For', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Tuple'])]": 13, "Compare -> [('left', 'Name'), ('ops', ['Lt']), ('comparators', ['Name'])]": 69, "TryExcept -> [('body', ['If', 'If', 'Print', 'For', 'Print', 'If', 'If']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['If', 'Assign', 'For', 'If', 'Assign']), ('orelse', [])]": 1, "Assign -> [('targets', ['Name']), ('value', 'DictComp')]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Name', 'Name', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'For', 'Assign', 'Return']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name'])]": 350, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'If', 'Assign']), ('orelse', [])]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'If', 'Expr', 'Assign', 'Expr', 'Expr', 'Return']), ('decorator_list', [])]": 1, "Tuple -> [('elts', ['Name', 'Num']), ('ctx', 'Load')]": 112, "Return -> [('value', 'Tuple')]": 722, "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['Attribute', 'BinOp', 'Str'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name']), ('keywords', ['keyword', 'keyword']), ('starargs', 'Name'), ('kwargs', 'Name')]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'ImportFrom', 'Assign', 'For', 'Assign', 'Return']), ('decorator_list', [])]": 2, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Num', 'Num', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 3, "If -> [('test', 'Name'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'For']), ('orelse', [])]": 1, "If -> [('test', 'UnaryOp'), ('body', ['Break']), ('orelse', [])]": 29, "Tuple -> [('elts', ['Name', 'Name', 'Subscript']), ('ctx', 'Load')]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'While']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign']), ('orelse', ['Print', 'Assign'])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Attribute', 'Attribute', 'Tuple'])]": 1, "If -> [('test', 'Name'), ('body', ['Assign', 'Expr', 'If']), ('orelse', [])]": 1, "List -> [('elts', ['Name', 'Call', 'Call']), ('ctx', 'Load')]": 2, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'Assign', 'FunctionDef']), ('decorator_list', [])]": 14, "If -> [('test', 'BoolOp'), ('body', ['Expr', 'If', 'If']), ('orelse', ['Expr'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 8, "Call -> [('func', 'Name'), ('args', ['Num', 'Num', 'Num', 'Num', 'Num', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 3, "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['Attribute', 'BinOp', 'Call'])]": 1, "For -> [('target', 'Name'), ('iter', 'ListComp'), ('body', ['Assign', 'Expr', 'Expr', 'Expr']), ('orelse', [])]": 2, "Call -> [('func', 'Attribute'), ('args', []), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 8, "If -> [('test', 'BoolOp'), ('body', ['Pass']), ('orelse', ['If'])]": 5, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'ClassDef', 'ClassDef', 'Assign', 'Expr', 'Expr', 'Expr', 'If'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Num', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 22, "If -> [('test', 'Name'), ('body', ['Delete']), ('orelse', [])]": 2, "ExceptHandler -> [('type', 'Name'), ('name', 'Name'), ('body', ['Import', 'Raise'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'Assign', 'TryExcept', 'For', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'Assign', 'Assign', 'For']), ('decorator_list', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Str']), ('keywords', ['keyword']), ('starargs', 'Name'), ('kwargs', 'NoneType')]": 1, "If -> [('test', 'Compare'), ('body', ['Print', 'Expr', 'Return']), ('orelse', ['If'])]": 1, "IfExp -> [('test', 'Attribute'), ('body', 'Call'), ('orelse', 'List')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 2, "Tuple -> [('elts', ['Str', 'Name', 'Call']), ('ctx', 'Load')]": 1, "If -> [('test', 'Compare'), ('body', ['Expr']), ('orelse', ['Assign', 'AugAssign', 'Expr'])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['Name', 'BinOp', 'Str'])]": 6, "If -> [('test', 'BoolOp'), ('body', ['If', 'TryExcept']), ('orelse', [])]": 1, "If -> [('test', 'Attribute'), ('body', ['Assign', 'Assign', 'If']), ('orelse', ['If', 'Expr'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]": 15, "Dict -> [('keys', ['Str']), ('values', ['Attribute'])]": 103, "If -> [('test', 'Call'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'Assign', 'ImportFrom', 'For', 'Expr']), ('orelse', [])]": 1, "Pass -> <NULL>": 1001, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Global', 'Assign', 'Assign', 'For', 'Return']), ('decorator_list', [])]": 1, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef'])]": 1, "AugAssign -> [('target', 'Subscript'), ('op', 'Add'), ('value', 'Str')]": 3, "Compare -> [('left', 'Subscript'), ('ops', ['In']), ('comparators', ['Attribute'])]": 7, "Call -> [('func', 'Name'), ('args', ['Num', 'Num', 'BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 4, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'str'), ('defaults', ['Name'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "Module -> [('body', ['Import', 'ImportFrom', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'Assign', 'If', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 4, "Call -> [('func', 'Name'), ('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "List -> [('elts', ['Num', 'BinOp', 'BinOp', 'Num']), ('ctx', 'Load')]": 2, "BinOp -> [('left', 'BinOp'), ('op', 'Mult'), ('right', 'Subscript')]": 14, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Import', 'Print', 'TryFinally', 'Print', 'TryFinally']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Tuple', 'Tuple']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Compare -> [('left', 'Call'), ('ops', ['NotIn']), ('comparators', ['Tuple'])]": 14, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Name']), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 4, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'Import', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef'])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Str', 'Name', 'Name', 'Name', 'Name'])]": 2, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Assign', 'If', 'Expr', 'If']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['AugAssign', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "Yield -> [('value', 'Dict')]": 9, "If -> [('test', 'UnaryOp'), ('body', ['Return']), ('orelse', ['Assign', 'Assign', 'Return'])]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 11, "Subscript -> [('value', 'Name'), ('slice', 'Slice'), ('ctx', 'Store')]": 48, "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'ClassDef', 'Expr'])]": 1, "comprehension -> [('target', 'Name'), ('iter', 'Name'), ('ifs', ['Call'])]": 26, "Tuple -> [('elts', ['Num', 'Name', 'Tuple', 'Dict', 'Tuple', 'Str', 'Num']), ('ctx', 'Load')]": 1, "List -> [('elts', ['Num', 'Num', 'Num', 'BinOp']), ('ctx', 'Load')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'AugAssign']), ('orelse', ['If'])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Continue']), ('orelse', [])]": 7, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'Import', 'Assign', 'Assign', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign'])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef']), ('decorator_list', [])]": 1, "If -> [('test', 'Call'), ('body', ['Assign', 'If']), ('orelse', [])]": 40, "For -> [('target', 'Tuple'), ('iter', 'Attribute'), ('body', ['Assign', 'Assign', 'Assign']), ('orelse', [])]": 2, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name'])]": 2, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['If', 'Assign', 'TryExcept', 'Assign', 'Assign', 'Assign', 'Assign']), ('orelse', [])]": 2, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 2, "BoolOp -> [('op', 'Or'), ('values', ['Compare', 'Attribute'])]": 9, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assert', 'Assign', 'Return']), ('decorator_list', [])]": 1, "List -> [('elts', ['BinOp', 'Str', 'BinOp', 'BinOp']), ('ctx', 'Load')]": 2, "For -> [('target', 'Name'), ('iter', 'Subscript'), ('body', ['If', 'AugAssign']), ('orelse', [])]": 1, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'If', 'Expr', 'If', 'Return']), ('decorator_list', [])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'str'), ('defaults', ['Name', 'Num', 'Name', 'Name', 'Name'])]": 5, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'TryExcept', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'TryExcept', 'Assign', 'TryExcept', 'TryExcept', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "BinOp -> [('left', 'Attribute'), ('op', 'Pow'), ('right', 'BinOp')]": 5, "Call -> [('func', 'Name'), ('args', ['Str', 'Name', 'Num', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 2, "Dict -> [('keys', ['Str', 'Str']), ('values', ['Attribute', 'Attribute'])]": 41, "Tuple -> [('elts', ['Num', 'Num', 'Attribute']), ('ctx', 'Load')]": 2, "Call -> [('func', 'Name'), ('args', ['Attribute', 'Name', 'Call', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "List -> [('elts', ['Attribute', 'Str', 'Name', 'Str']), ('ctx', 'Load')]": 2, "ExceptHandler -> [('type', 'Attribute'), ('name', 'NoneType'), ('body', ['Assign', 'Assign', 'If', 'Expr', 'Import', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'For'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Return']), ('decorator_list', [])]": 2063, "ExceptHandler -> [('type', 'NoneType'), ('name', 'NoneType'), ('body', ['Raise'])]": 14, "comprehension -> [('target', 'Name'), ('iter', 'Tuple'), ('ifs', [])]": 19, "If -> [('test', 'Compare'), ('body', ['ImportFrom', 'Assign', 'Assign', 'If', 'Expr', 'Expr', 'Expr']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assert', 'Expr', 'Assign']), ('decorator_list', [])]": 4, "If -> [('test', 'Compare'), ('body', ['Assign', 'TryExcept']), ('orelse', ['Assign'])]": 1, "BoolOp -> [('op', 'And'), ('values', ['Attribute', 'Attribute', 'Call', 'Compare'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'TryExcept', 'TryExcept', 'If']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'If', 'Expr']), ('orelse', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('orelse', [])]": 1, "If -> [('test', 'Attribute'), ('body', ['Expr', 'If']), ('orelse', [])]": 2, "BoolOp -> [('op', 'And'), ('values', ['UnaryOp', 'UnaryOp'])]": 61, "Raise -> [('type', 'Name'), ('inst', 'Str'), ('tback', 'NoneType')]": 54, "AugAssign -> [('target', 'Attribute'), ('op', 'Add'), ('value', 'Num')]": 82, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef']), ('decorator_list', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Attribute', 'Call', 'BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'If', 'Assign', 'Assign', 'For', 'If']), ('decorator_list', [])]": 2, "Compare -> [('left', 'Subscript'), ('ops', ['Lt']), ('comparators', ['BinOp'])]": 1, "If -> [('test', 'Name'), ('body', ['FunctionDef']), ('orelse', ['Raise'])]": 1, "Call -> [('func', 'Name'), ('args', ['Call', 'Str', 'Dict', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "BinOp -> [('left', 'List'), ('op', 'Mult'), ('right', 'Num')]": 109, "TryExcept -> [('body', ['Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'For', 'Return']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num'])]": 1, "Call -> [('func', 'Attribute'), ('args', []), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 3, "Call -> [('func', 'Attribute'), ('args', ['Str', 'Dict']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 59, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'For', 'Assign', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Expr', 'Assign', 'If', 'Assign', 'Expr', 'Expr', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'Expr']), ('decorator_list', [])]": 5, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign']), ('orelse', ['Assign', 'Assign', 'For'])]": 1, "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign', 'Assign', 'If']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assert', 'Assign', 'Expr', 'Expr', 'Assert', 'Assert', 'Assert', 'Assert', 'Assert', 'Assert', 'Assert', 'Assert', 'Assert', 'Assert', 'Assign', 'Assert', 'Assign', 'Assert', 'Assign', 'Assert', 'Assert', 'Assert', 'Assert', 'Assert', 'Assert', 'Assert']), ('decorator_list', [])]": 1, "Dict -> [('keys', ['BinOp', 'Str']), ('values', ['Name', 'Name'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'FunctionDef', 'Expr', 'Return']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Subscript']), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "IfExp -> [('test', 'Call'), ('body', 'Name'), ('orelse', 'List')]": 1, "If -> [('test', 'Attribute'), ('body', ['Assign', 'Return']), ('orelse', [])]": 1, "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Return']), ('orelse', [])]": 6, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Print', 'While', 'For', 'If', 'If', 'Expr', 'Pass', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'If', 'Assign', 'Print', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Return']), ('decorator_list', [])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['Subscript', 'Subscript', 'Subscript'])]": 3, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Expr', 'Expr', 'Expr']), ('orelse', [])]": 4, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['FunctionDef', 'Assign', 'Assign', 'Assign', 'Assign', 'If']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Subscript'), ('body', ['If', 'Assign', 'If']), ('orelse', [])]": 1, "IfExp -> [('test', 'Name'), ('body', 'Str'), ('orelse', 'Str')]": 5, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'str'), ('kwarg', 'str'), ('defaults', ['Name', 'Name'])]": 1, "If -> [('test', 'Call'), ('body', ['For', 'Raise']), ('orelse', ['Return'])]": 2, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['ClassDef', 'Assign', 'AugAssign', 'Expr', 'Assign', 'Expr', 'Expr']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'If', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'For', 'For']), ('decorator_list', ['Name', 'Name', 'Name'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Global', 'Assign', 'If', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'Name'), ('body', ['Assign', 'Expr', 'ClassDef', 'TryExcept']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assert', 'Assign', 'Assign', 'Assert', 'Assert', 'Assert', 'Assert', 'Assert', 'If', 'If', 'Assign', 'Assert', 'Assign', 'Assert', 'Assign', 'Assert', 'Assert', 'Assert', 'Assert']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'If', 'If', 'Assign', 'If', 'Assign', 'If', 'If', 'If', 'Assign', 'Assign', 'Expr', 'Assign', 'If', 'Assign', 'Expr', 'Expr', 'FunctionDef', 'If', 'If', 'If', 'If', 'Expr']), ('decorator_list', ['Name', 'Name'])]": 1, "List -> [('elts', ['BinOp', 'Str']), ('ctx', 'Load')]": 2, "List -> [('elts', ['Attribute', 'Num']), ('ctx', 'Load')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'TryExcept', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'If', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'Attribute'), ('body', ['Return']), ('orelse', ['If'])]": 5, "ExceptHandler -> [('type', 'Name'), ('name', 'Name'), ('body', ['If', 'Expr', 'Expr', 'Return'])]": 1, "Dict -> [('keys', ['Name', 'Name', 'Name', 'Name']), ('values', ['Str', 'Str', 'Str', 'Str'])]": 2, "If -> [('test', 'Attribute'), ('body', ['If', 'If', 'Expr']), ('orelse', ['If'])]": 1, "BoolOp -> [('op', 'And'), ('values', ['BinOp', 'Compare'])]": 1, "Call -> [('func', 'Name'), ('args', ['Name', 'Str']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 51, "Tuple -> [('elts', ['Attribute', 'Subscript', 'Attribute', 'Attribute', 'Name', 'Name']), ('ctx', 'Load')]": 1, "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['Assign', 'Expr', 'Assign'])]": 2, "While -> [('test', 'Name'), ('body', ['TryExcept', 'TryExcept', 'Assign', 'TryExcept', 'Print', 'Print', 'AugAssign']), ('orelse', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Name', 'Call', 'Name', 'Str', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "TryExcept -> [('body', ['Import', 'Expr', 'If']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 1, "While -> [('test', 'Name'), ('body', ['Assign', 'If', 'Assign', 'Assign', 'AugAssign', 'TryExcept', 'If', 'Expr']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Expr', 'FunctionDef', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('decorator_list', ['Name'])]": 1, "Call -> [('func', 'Name'), ('args', ['Name', 'Subscript']), ('keywords', []), ('starargs', 'Name'), ('kwargs', 'Name')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Expr', 'Return']), ('decorator_list', [])]": 6, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'Import', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'TryExcept', 'If', 'ImportFrom', 'Return']), ('decorator_list', ['Call', 'Name'])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name'])]": 1, "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 1, "Module -> [('body', ['Import', 'ImportFrom', 'Import', 'Import', 'Import', 'Import', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'If'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assert']), ('decorator_list', [])]": 4, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Import', 'Expr', 'ClassDef', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'Return']), ('decorator_list', ['Name', 'Name', 'Call'])]": 1, "For -> [('target', 'Name'), ('iter', 'Subscript'), ('body', ['Assign', 'If', 'Expr']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Print', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assert']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'For', 'For', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Tuple', 'Name', 'BinOp', 'Name', 'Name', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['FunctionDef', 'FunctionDef', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Print', 'Assign']), ('orelse', ['Return'])]": 1, "ExceptHandler -> [('type', 'Name'), ('name', 'Name'), ('body', ['Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr'])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Name']), ('values', ['Str', 'Str', 'Str', 'Str'])]": 1, "If -> [('test', 'Name'), ('body', ['If']), ('orelse', ['Expr', 'Expr'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'For', 'Expr', 'Return']), ('decorator_list', [])]": 2, "Module -> [('body', ['Import', 'Assign', 'Assign', 'Expr', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assert', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]": 2, "List -> [('elts', ['Tuple', 'Name']), ('ctx', 'Load')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Attribute', 'Tuple', 'Tuple', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "Tuple -> [('elts', ['Str', 'Str', 'Dict', 'Str']), ('ctx', 'Load')]": 9, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'Assign', 'If', 'Assign', 'If']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'For', 'Assign']), ('decorator_list', [])]": 2, "Call -> [('func', 'Call'), ('args', ['Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 3, "ExceptHandler -> [('type', 'Name'), ('name', 'Name'), ('body', ['Assign', 'TryExcept', 'Expr', 'Expr'])]": 1, "Assign -> [('targets', ['Name', 'Attribute']), ('value', 'ListComp')]": 1, "If -> [('test', 'Compare'), ('body', ['Expr', 'If', 'Return']), ('orelse', [])]": 2, "ExceptHandler -> [('type', 'Tuple'), ('name', 'NoneType'), ('body', ['Expr', 'Return'])]": 13, "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'Expr', 'Assign']), ('orelse', [])]": 2, "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'If'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'If', 'Expr', 'If', 'If']), ('decorator_list', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Subscript', 'Subscript', 'Subscript', 'Name']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'If', 'If', 'Assign', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Assign', 'For', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Import', 'Assign']), ('orelse', ['Import', 'Assign'])]": 1, "List -> [('elts', ['Tuple', 'Name', 'Tuple']), ('ctx', 'Load')]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'str'), ('defaults', ['Num', 'Name', 'Name'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Expr', 'For']), ('decorator_list', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Attribute', 'Name', 'Name', 'Name', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "For -> [('target', 'Tuple'), ('iter', 'Name'), ('body', ['Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr']), ('orelse', [])]": 1, "TryExcept -> [('body', ['Expr']), ('handlers', ['ExceptHandler']), ('orelse', ['Assign', 'Assign', 'Assign'])]": 1, "Dict -> [('keys', ['Num', 'Num', 'Num']), ('values', ['Call', 'Call', 'Call'])]": 1, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef'])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Assign', 'Assign']), ('decorator_list', [])]": 10, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'If', 'Assign', 'Expr', 'Assign', 'Assign', 'For', 'Return']), ('decorator_list', [])]": 1, "TryExcept -> [('body', ['If', 'Import', 'Assign', 'Expr']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "BoolOp -> [('op', 'And'), ('values', ['Name', 'UnaryOp'])]": 72, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'For', 'Assign', 'Expr', 'For', 'Expr', 'Expr', 'For']), ('orelse', [])]": 1, "Tuple -> [('elts', ['Tuple', 'Tuple', 'Tuple']), ('ctx', 'Store')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]": 2, "Tuple -> [('elts', ['Name', 'Str', 'Attribute']), ('ctx', 'Load')]": 1, "While -> [('test', 'BoolOp'), ('body', ['If', 'Assign', 'If', 'If', 'If']), ('orelse', [])]": 2, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 3, "Call -> [('func', 'Name'), ('args', ['Subscript', 'Subscript', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "BinOp -> [('left', 'Name'), ('op', 'Add'), ('right', 'Num')]": 405, "TryExcept -> [('body', ['Assign', 'Break']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 2, "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['ImportFrom'])]": 47, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]": 1, "Call -> [('func', 'Name'), ('args', ['BinOp', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 15, "Tuple -> [('elts', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('ctx', 'Load')]": 12, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'If', 'If', 'Return']), ('decorator_list', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Name', 'Str', 'List']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 3, "Assert -> [('test', 'Name'), ('msg', 'NoneType')]": 42, "Call -> [('func', 'Attribute'), ('args', ['BinOp', 'Name', 'Name', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['Assign', 'If'])]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Assign', 'For']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Name', 'Num', 'Num', 'Num']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "BoolOp -> [('op', 'Or'), ('values', ['BoolOp', 'UnaryOp'])]": 1, "For -> [('target', 'Tuple'), ('iter', 'Tuple'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'For', 'For']), ('orelse', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['ListComp']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'FunctionDef', 'Expr']), ('decorator_list', [])]": 2, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Expr', 'Expr']), ('orelse', [])]": 28, "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['Expr', 'For', 'If']), ('orelse', [])]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'ClassDef', 'FunctionDef'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'If', 'Assign', 'If', 'Assign', 'Assign', 'Expr', 'Assign', 'If', 'Expr', 'If']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'If', 'If']), ('orelse', [])]": 3, "Module -> [('body', ['Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'Assign', 'While']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['If', 'If', 'If', 'If', 'Assign', 'Assign', 'Expr', 'If', 'If', 'Assign', 'Expr']), ('orelse', [])]": 1, "If -> [('test', 'Call'), ('body', ['For', 'Expr']), ('orelse', [])]": 1, "Tuple -> [('elts', ['Name', 'BoolOp', 'BoolOp', 'Attribute', 'BoolOp']), ('ctx', 'Load')]": 2, "Compare -> [('left', 'Call'), ('ops', ['Gt']), ('comparators', ['Name'])]": 28, "Call -> [('func', 'Name'), ('args', ['Str', 'Num', 'Num', 'Name', 'Call', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 22, "TryExcept -> [('body', ['Import']), ('handlers', ['ExceptHandler']), ('orelse', ['Import'])]": 4, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Assign', 'Expr', 'Expr', 'If', 'If', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Return']), ('decorator_list', [])]": 4, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Name', 'Name', 'Name', 'Str', 'Str'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'If', 'Assign', 'If', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'Call'), ('body', ['Delete', 'Return']), ('orelse', ['Raise'])]": 1, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['AugAssign', 'Assign', 'If', 'If', 'If']), ('orelse', [])]": 2, "Tuple -> [('elts', ['Str', 'Num', 'Str']), ('ctx', 'Load')]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'TryExcept', 'Assign', 'Expr', 'Return']), ('decorator_list', [])]": 1, "ExceptHandler -> [('type', 'NoneType'), ('name', 'NoneType'), ('body', ['Import', 'Expr'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['List', 'Str']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str'])]": 1, "Call -> [('func', 'Name'), ('args', ['Subscript', 'Subscript', 'Subscript', 'Name']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 7, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'If', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'TryExcept', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'TryExcept', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'TryExcept', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Expr', 'For']), ('orelse', ['If'])]": 1, "Call -> [('func', 'Subscript'), ('args', ['Subscript']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 5, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'TryExcept', 'If', 'TryExcept', 'TryExcept', 'Assign', 'Assign', 'Assign', 'Expr', 'Return']), ('decorator_list', ['Name'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Expr']), ('decorator_list', ['Attribute'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'If', 'Raise']), ('decorator_list', [])]": 2, "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'Expr', 'Return']), ('orelse', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['If', 'If', 'If', 'If']), ('orelse', [])]": 1, "While -> [('test', 'Compare'), ('body', ['AugAssign', 'TryExcept', 'Expr']), ('orelse', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'For', 'Return']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'BinOp'), ('body', ['Assign']), ('orelse', [])]": 2, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'AugAssign']), ('orelse', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'For', 'AugAssign', 'Expr', 'Assign', 'Expr', 'Assign']), ('decorator_list', [])]": 1, "If -> [('test', 'Call'), ('body', ['For', 'Return']), ('orelse', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'ClassDef', 'ClassDef', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'Call'), ('body', ['Expr']), ('orelse', [])]": 237, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'ImportFrom', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr']), ('decorator_list', ['Call'])]": 1, "BoolOp -> [('op', 'And'), ('values', ['UnaryOp', 'Call', 'UnaryOp'])]": 2, "If -> [('test', 'Compare'), ('body', ['If', 'Expr']), ('orelse', ['Expr'])]": 4, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2437, "If -> [('test', 'Call'), ('body', ['Assign', 'Assign', 'For', 'If', 'Assign', 'For', 'Assign', 'If', 'Assign', 'Return']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Return']), ('decorator_list', ['Name'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Num', 'BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "Num -> [('n', 'complex')]": 34, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['BinOp', 'Num', 'Num', 'Num', 'Num'])]": 1, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'ClassDef', 'ClassDef'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 10, "If -> [('test', 'UnaryOp'), ('body', ['Print']), ('orelse', ['Assign', 'If'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'TryExcept', 'Assign', 'Assign']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'While', 'Return']), ('decorator_list', [])]": 2, "If -> [('test', 'Name'), ('body', ['Assign', 'If', 'If', 'Assign', 'Expr']), ('orelse', [])]": 1, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Assign', 'If', 'TryExcept']), ('orelse', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Str', 'Attribute', 'Name', 'Name', 'UnaryOp', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 10, "If -> [('test', 'Compare'), ('body', ['Assign', 'If', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr']), ('orelse', ['If'])]": 1, "Call -> [('func', 'Name'), ('args', ['Str', 'Dict']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 19, "Call -> [('func', 'Name'), ('args', ['Attribute', 'List']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 12, "If -> [('test', 'BoolOp'), ('body', ['Assert', 'Assign']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'AugAssign', 'AugAssign', 'AugAssign', 'AugAssign', 'Assign', 'AugAssign', 'AugAssign', 'AugAssign', 'AugAssign', 'Return']), ('decorator_list', [])]": 1, "TryFinally -> [('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'If', 'Return']), ('finalbody', ['Expr'])]": 2, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'If', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'If']), ('decorator_list', [])]": 2, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'str'), ('kwarg', 'str'), ('defaults', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'For', 'Print']), ('orelse', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['While']), ('orelse', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['For', 'Assign', 'For']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Attribute', 'Tuple', 'Tuple', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "With -> [('context_expr', 'Call'), ('optional_vars', 'NoneType'), ('body', ['Expr', 'Return'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 47, "ExceptHandler -> [('type', 'Attribute'), ('name', 'Name'), ('body', ['Expr', 'Expr'])]": 1, "Tuple -> [('elts', ['Str', 'Str', 'Subscript']), ('ctx', 'Load')]": 2, "Call -> [('func', 'Name'), ('args', ['Attribute', 'Name', 'Tuple']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'TryExcept', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'If'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'If', 'Return']), ('decorator_list', ['Name', 'Attribute'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'If', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'Assign', 'Expr', 'Return']), ('decorator_list', [])]": 2, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'If', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "ExceptHandler -> [('type', 'Tuple'), ('name', 'NoneType'), ('body', ['AugAssign', 'Continue'])]": 1, "Call -> [('func', 'Name'), ('args', ['Str', 'Name', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Expr', 'Assign', 'Assign', 'Assign', 'For', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'For', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'While', 'Assign', 'Expr', 'Print', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Expr']), ('decorator_list', [])]": 1, "List -> [('elts', ['Str', 'Str', 'Str', 'Str', 'Attribute', 'Str', 'Name', 'Str', 'BinOp', 'Name']), ('ctx', 'Load')]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'Assign', 'If', 'If', 'Return']), ('decorator_list', [])]": 1, "BinOp -> [('left', 'Num'), ('op', 'LShift'), ('right', 'BinOp')]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['TryExcept', 'Expr', 'Expr', 'Assign', 'Assign', 'TryFinally']), ('decorator_list', [])]": 2, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Call', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 16, "If -> [('test', 'Compare'), ('body', ['Assign', 'Break']), ('orelse', ['AugAssign'])]": 1, "Compare -> [('left', 'BinOp'), ('ops', ['NotEq']), ('comparators', ['Str'])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'FunctionDef', 'ClassDef', 'ClassDef']), ('decorator_list', [])]": 5, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'While']), ('decorator_list', [])]": 6, "Assert -> [('test', 'BoolOp'), ('msg', 'Str')]": 4, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "arguments -> [('args', ['Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Str', 'Name'])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', [])]": 1, "While -> [('test', 'Compare'), ('body', ['Expr']), ('orelse', [])]": 5, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Assign', 'Assign', 'For']), ('orelse', [])]": 6, "If -> [('test', 'BoolOp'), ('body', ['If', 'Assign', 'If', 'Assign', 'Expr', 'Assign']), ('orelse', ['Assign'])]": 1, "While -> [('test', 'Num'), ('body', ['Assign', 'Assign', 'If']), ('orelse', [])]": 1, "BinOp -> [('left', 'Call'), ('op', 'Div'), ('right', 'Num')]": 58, "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'Assign', 'If', 'For']), ('orelse', [])]": 1, "ExceptHandler -> [('type', 'Name'), ('name', 'Name'), ('body', ['Print', 'Continue'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'If', 'Assign', 'Assign', 'Expr', 'If', 'If', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'AugAssign', 'Assign', 'AugAssign', 'Assign', 'AugAssign', 'Assign', 'AugAssign', 'Assign', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Str', 'Str', 'Call', 'Str', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "If -> [('test', 'Compare'), ('body', ['If']), ('orelse', ['Expr', 'Return'])]": 1, "ExceptHandler -> [('type', 'Name'), ('name', 'Name'), ('body', ['Expr', 'Return'])]": 39, "Call -> [('func', 'Name'), ('args', ['Attribute', 'BinOp', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 7, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str']), ('values', ['Call', 'Call', 'Call', 'Attribute'])]": 1, "IfExp -> [('test', 'Name'), ('body', 'Num'), ('orelse', 'Num')]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['TryExcept', 'Expr']), ('decorator_list', [])]": 8, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Global', 'Assign', 'If']), ('orelse', [])]": 1, "If -> [('test', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('orelse', ['If'])]": 2, "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'Import', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'Assign', 'Assign'])]": 1, "Tuple -> [('elts', ['Name', 'Subscript', 'Name', 'Name']), ('ctx', 'Load')]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]": 1, "comprehension -> [('target', 'Name'), ('iter', 'Name'), ('ifs', ['Compare'])]": 49, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'ClassDef']), ('decorator_list', [])]": 4, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Attribute', 'Tuple', 'Call', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Name', 'Name', 'Name', 'Call', 'Name', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'FunctionDef', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "If -> [('test', 'BoolOp'), ('body', ['Assert', 'Assign']), ('orelse', ['If', 'Assign'])]": 1, "If -> [('test', 'Attribute'), ('body', ['Expr', 'Expr', 'Expr', 'Expr']), ('orelse', [])]": 4, "Module -> [('body', ['Import', 'ImportFrom', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'If', 'Expr', 'Assign']), ('decorator_list', ['Name'])]": 1, "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'ImportFrom', 'ImportFrom'])]": 1, "If -> [('test', 'Call'), ('body', ['If', 'Assign', 'Assign', 'Raise']), ('orelse', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name', 'Name']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'If', 'If', 'Assign', 'If']), ('decorator_list', [])]": 2, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'ImportFrom', 'Import', 'Import', 'ClassDef'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'While', 'Assign', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['BinOp', 'Call', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Attribute', 'Name', 'Name'])]": 1, "Call -> [('func', 'Name'), ('args', ['Attribute', 'Str', 'Dict']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "If -> [('test', 'Call'), ('body', ['Return']), ('orelse', ['Raise'])]": 6, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Str', 'Attribute']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'For', 'Assign', 'Assign', 'Expr', 'For', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'For']), ('decorator_list', ['Name', 'Name', 'Name'])]": 2, "TryFinally -> [('body', ['Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'TryExcept', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr']), ('finalbody', ['Expr', 'Expr'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'TryExcept', 'Assign', 'Assign', 'TryExcept', 'TryExcept']), ('decorator_list', [])]": 1, "If -> [('test', 'Name'), ('body', ['Assign', 'FunctionDef', 'Return']), ('orelse', ['Return'])]": 1, "If -> [('test', 'Call'), ('body', ['Assign', 'Assign', 'For', 'If', 'Return']), ('orelse', [])]": 1, "TryExcept -> [('body', ['Assign', 'For', 'If', 'If', 'If']), ('handlers', ['ExceptHandler', 'ExceptHandler', 'ExceptHandler', 'ExceptHandler']), ('orelse', [])]": 1, "If -> [('test', 'BoolOp'), ('body', ['If', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Return']), ('orelse', [])]": 1, "Tuple -> [('elts', ['Name', 'Name', 'List', 'Name']), ('ctx', 'Load')]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'If', 'If', 'If', 'Expr', 'Expr', 'Expr', 'Expr']), ('orelse', [])]": 1, "Tuple -> [('elts', ['Num', 'Num', 'BinOp']), ('ctx', 'Load')]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'Expr', 'Return']), ('decorator_list', [])]": 1, "Call -> [('func', 'Name'), ('args', ['BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1234, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Print', 'For', 'Return', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Print']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'If']), ('orelse', ['Return'])]": 1, "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef'])]": 1, "Exec -> [('body', 'Tuple'), ('globals', 'NoneType'), ('locals', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Expr', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'For', 'Assign']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Call', 'BinOp', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "If -> [('test', 'Num'), ('body', ['Assign']), ('orelse', ['Assign'])]": 1, "Assign -> [('targets', ['Name', 'Attribute']), ('value', 'Subscript')]": 1, "UnaryOp -> [('op', 'USub'), ('operand', 'Name')]": 98, "If -> [('test', 'Num'), ('body', ['Assign', 'Assign', 'Assign', 'For', 'Expr']), ('orelse', [])]": 1, "arguments -> [('args', ['Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Str', 'Str'])]": 2, "List -> [('elts', ['Subscript']), ('ctx', 'Load')]": 27, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Name', 'Name', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Expr', 'Delete']), ('decorator_list', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Attribute', 'Attribute', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'Name')]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['BinOp', 'Str'])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "BoolOp -> [('op', 'And'), ('values', ['Compare', 'BoolOp', 'Name'])]": 1, "Raise -> [('type', 'NoneType'), ('inst', 'NoneType'), ('tback', 'NoneType')]": 158, "arguments -> [('args', ['Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Dict'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'ImportFrom', 'Assign', 'Assign', 'Expr', 'ClassDef', 'Assign', 'Expr', 'Expr', 'ClassDef', 'Assign', 'Expr', 'Expr', 'ClassDef', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "If -> [('test', 'Attribute'), ('body', ['Assign', 'Assign', 'If', 'For']), ('orelse', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'Expr', 'Assign', 'Return']), ('decorator_list', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Str', 'Name'])]": 1, "For -> [('target', 'Tuple'), ('iter', 'List'), ('body', ['Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr']), ('orelse', [])]": 1, "Compare -> [('left', 'Num'), ('ops', ['LtE', 'LtE']), ('comparators', ['Name', 'Num'])]": 2, "Tuple -> [('elts', ['Str', 'BinOp', 'Str', 'Str']), ('ctx', 'Load')]": 1, "alias -> [('name', 'str'), ('asname', 'NoneType')]": 14145, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign']), ('decorator_list', [])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['Name', 'Name', 'Attribute'])]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'For', 'For', 'For', 'Expr', 'Assign', 'For', 'For']), ('decorator_list', [])]": 2, "Assign -> [('targets', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('value', 'Name')]": 3, "If -> [('test', 'UnaryOp'), ('body', ['Return']), ('orelse', ['Expr', 'Expr'])]": 1, "If -> [('test', 'Compare'), ('body', ['Expr']), ('orelse', ['Print'])]": 4, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'Name')]": 3, "If -> [('test', 'Num'), ('body', ['Print', 'Print', 'Print', 'Return']), ('orelse', [])]": 1, "If -> [('test', 'UnaryOp'), ('body', ['Assign']), ('orelse', ['Assign', 'Assign', 'If'])]": 2, "If -> [('test', 'Call'), ('body', ['Assign', 'Expr', 'Expr', 'Assign', 'If']), ('orelse', ['If'])]": 1, "If -> [('test', 'Name'), ('body', ['Assign', 'If']), ('orelse', [])]": 53, "If -> [('test', 'Call'), ('body', ['Assign', 'Assign', 'If']), ('orelse', ['Expr', 'Assign', 'Expr', 'Assign', 'For'])]": 1, "If -> [('test', 'BoolOp'), ('body', ['Assign', 'AugAssign']), ('orelse', ['If'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'While', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'If']), ('orelse', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', []), ('body', ['Assign', 'Assign', 'Assign']), ('decorator_list', [])]": 13, "If -> [('test', 'Call'), ('body', ['Assign', 'If', 'For']), ('orelse', ['If'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "If -> [('test', 'Call'), ('body', ['Assign']), ('orelse', ['Exec', 'Assign'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'Assign', 'Expr', 'Expr', 'TryExcept']), ('decorator_list', [])]": 1, "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['Continue'])]": 35, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'For']), ('decorator_list', ['Name'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'FunctionDef', 'Assign', 'Assign', 'FunctionDef', 'TryFinally']), ('decorator_list', [])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'str'), ('defaults', ['Name', 'Name', 'Str', 'Name', 'Name', 'Name', 'Num', 'Num', 'Num', 'Dict', 'Name', 'Str', 'Str'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Str', 'Subscript']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 3, "TryFinally -> [('body', ['Assign', 'Assign', 'Assign', 'If', 'Expr']), ('finalbody', ['AugAssign'])]": 2, "FloorDiv -> <NULL>": 13, "List -> [('elts', ['Name', 'Name', 'Name', 'Name', 'Name']), ('ctx', 'Load')]": 5, "If -> [('test', 'BoolOp'), ('body', ['Expr']), ('orelse', ['Assign', 'If', 'Print'])]": 2, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 4, "Subscript -> [('value', 'Subscript'), ('slice', 'Slice'), ('ctx', 'Load')]": 43, "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'Raise']), ('orelse', [])]": 8, "If -> [('test', 'Attribute'), ('body', ['ImportFrom', 'Assign', 'For']), ('orelse', ['Assign'])]": 2, "If -> [('test', 'Compare'), ('body', ['Assign', 'For', 'Assign']), ('orelse', ['Assign'])]": 3, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'Import', 'Import', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'FunctionDef', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'FunctionDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'Assign', 'FunctionDef', 'Assign', 'FunctionDef', 'Assign', 'FunctionDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'Assign'])]": 1, "Slice -> [('lower', 'Name'), ('upper', 'Name'), ('step', 'NoneType')]": 83, "If -> [('test', 'Subscript'), ('body', ['Continue']), ('orelse', [])]": 2, "Print -> [('dest', 'NoneType'), ('values', ['Attribute']), ('nl', 'bool')]": 48, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assert', 'Assign', 'Assign', 'Assign', 'For']), ('decorator_list', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Tuple', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Expr', 'Expr', 'Expr']), ('orelse', [])]": 2, "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Return'])]": 1, "TryExcept -> [('body', ['Expr', 'Assign', 'Expr', 'Expr']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For']), ('decorator_list', [])]": 2, "Call -> [('func', 'Attribute'), ('args', ['Subscript', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 18, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'If', 'If', 'Assign', 'If', 'If', 'Assign', 'If', 'If', 'Assign', 'If', 'AugAssign', 'Assign', 'Assign', 'If', 'TryExcept', 'Assign', 'Expr', 'If', 'Return']), ('decorator_list', [])]": 1, "BinOp -> [('left', 'Str'), ('op', 'Add'), ('right', 'BinOp')]": 13, "comprehension -> [('target', 'Tuple'), ('iter', 'Name'), ('ifs', [])]": 35, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Attribute', 'Call', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "ClassDef -> [('name', 'str'), ('bases', ['Name', 'Name']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "ExceptHandler -> [('type', 'Name'), ('name', 'Name'), ('body', ['Assign', 'Expr', 'Expr', 'Expr', 'Expr'])]": 1, "Call -> [('func', 'Name'), ('args', ['Name', 'Name', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'Name')]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Str', 'Str', 'List', 'Name', 'Num', 'Num'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'If']), ('decorator_list', [])]": 1, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'FunctionDef'])]": 1, "BinOp -> [('left', 'BinOp'), ('op', 'BitOr'), ('right', 'BinOp')]": 2, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Expr', 'AugAssign']), ('orelse', [])]": 2, "Call -> [('func', 'Attribute'), ('args', ['Str', 'Num']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 4, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Str', 'Attribute']), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 4, "Tuple -> [('elts', ['Name', 'Str', 'Str']), ('ctx', 'Load')]": 22, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Expr', 'Expr']), ('decorator_list', [])]": 6, "List -> [('elts', ['Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call']), ('ctx', 'Load')]": 3, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 5, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Import', 'Assign', 'Assign', 'Assign', 'If', 'If', 'Expr', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'TryExcept', 'If', 'If']), ('decorator_list', [])]": 2, "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'For']), ('orelse', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If']), ('decorator_list', ['Name', 'Call'])]": 1, "TryExcept -> [('body', ['Assign']), ('handlers', ['ExceptHandler']), ('orelse', ['TryExcept'])]": 1, "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'TryExcept', 'Assign', 'If', 'Return']), ('decorator_list', [])]": 3, "Tuple -> [('elts', ['Str', 'Name', 'Str', 'Str']), ('ctx', 'Load')]": 3, "If -> [('test', 'Compare'), ('body', ['For']), ('orelse', ['Expr', 'Expr', 'For'])]": 4, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Num', 'Num', 'Num'])]": 1, "While -> [('test', 'BoolOp'), ('body', ['If', 'Assign']), ('orelse', [])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str'])]": 6, "While -> [('test', 'Name'), ('body', ['Assign', 'Assign', 'While', 'If', 'Assign']), ('orelse', [])]": 1, "If -> [('test', 'Name'), ('body', ['Assign', 'Assign', 'Assign']), ('orelse', ['Assign', 'Assign'])]": 1, "Exec -> [('body', 'BinOp'), ('globals', 'NoneType'), ('locals', 'NoneType')]": 1, "If -> [('test', 'Call'), ('body', ['Assign', 'If', 'Assign', 'If']), ('orelse', [])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Dict', 'Name'])]": 1, "For -> [('target', 'Name'), ('iter', 'Tuple'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr']), ('orelse', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign']), ('orelse', ['Assign', 'Assign', 'Assign', 'For'])]": 1, "ExceptHandler -> [('type', 'Tuple'), ('name', 'NoneType'), ('body', ['If', 'Assign'])]": 1, "BinOp -> [('left', 'Tuple'), ('op', 'Mult'), ('right', 'Call')]": 5, "Call -> [('func', 'Name'), ('args', ['List']), ('keywords', ['keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 4, "Compare -> [('left', 'Attribute'), ('ops', ['Eq']), ('comparators', ['Subscript'])]": 11, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'If', 'Assert', 'If', 'Expr', 'For']), ('decorator_list', [])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Dict', 'Dict', 'Dict', 'Dict', 'Dict', 'Dict', 'Dict', 'Dict', 'Dict'])]": 4, "List -> [('elts', ['Call', 'Call', 'Call', 'Call', 'Call']), ('ctx', 'Load')]": 5, "If -> [('test', 'Call'), ('body', ['Assign', 'Assign', 'Expr']), ('orelse', ['Expr'])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef']), ('decorator_list', [])]": 2, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'If', 'Expr']), ('orelse', [])]": 5, "BinOp -> [('left', 'Call'), ('op', 'Mult'), ('right', 'BinOp')]": 20, "BinOp -> [('left', 'Attribute'), ('op', 'Mult'), ('right', 'Name')]": 29, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'If']), ('decorator_list', [])]": 1, "ExceptHandler -> [('type', 'Name'), ('name', 'Name'), ('body', ['Expr', 'Expr', 'Return'])]": 3, "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('orelse', [])]": 2, "ClassDef -> [('name', 'str'), ('bases', []), ('body', ['Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Attribute', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 255, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'Assign', 'If', 'If', 'If', 'If', 'Assign', 'If', 'If', 'If']), ('decorator_list', [])]": 1, "If -> [('test', 'Attribute'), ('body', ['Delete']), ('orelse', ['Raise'])]": 1, "List -> [('elts', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('ctx', 'Load')]": 17, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Return']), ('decorator_list', ['Call'])]": 1, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['If', 'For']), ('orelse', [])]": 8, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Expr', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'FunctionDef', 'Assign', 'TryExcept', 'TryExcept', 'TryExcept', 'TryExcept', 'TryExcept', 'TryExcept', 'FunctionDef', 'FunctionDef', 'Import', 'Assign', 'FunctionDef', 'ClassDef', 'ClassDef', 'FunctionDef', 'FunctionDef', 'If'])]": 1, "BinOp -> [('left', 'Call'), ('op', 'Mult'), ('right', 'Attribute')]": 10, "BinOp -> [('left', 'Str'), ('op', 'Mod'), ('right', 'Name')]": 1657, "For -> [('target', 'Tuple'), ('iter', 'Name'), ('body', ['Expr', 'Assign']), ('orelse', [])]": 2, "If -> [('test', 'UnaryOp'), ('body', ['For', 'Assign']), ('orelse', ['If'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'If', 'Expr', 'Assign', 'If', 'Assign', 'Assign', 'If', 'Assign', 'If', 'Return']), ('decorator_list', [])]": 1, "ListComp -> [('elt', 'Attribute'), ('generators', ['comprehension'])]": 135, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef'])]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Print']), ('orelse', [])]": 1, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assert', 'Assert', 'Assign', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]": 1, "While -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Expr', 'AugAssign']), ('orelse', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Expr']), ('decorator_list', [])]": 13, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 2, "Call -> [('func', 'Attribute'), ('args', ['Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'Attribute')]": 2, "Subscript -> [('value', 'Name'), ('slice', 'Slice'), ('ctx', 'Del')]": 4, "Call -> [('func', 'Name'), ('args', ['Attribute', 'UnaryOp', 'Call', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'Expr', 'TryExcept']), ('decorator_list', [])]": 2, "BoolOp -> [('op', 'And'), ('values', ['Call', 'BoolOp', 'BoolOp'])]": 3, "BinOp -> [('left', 'Name'), ('op', 'LShift'), ('right', 'Num')]": 51, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'For']), ('orelse', ['If'])]": 1, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'ClassDef', 'ClassDef', 'ClassDef', 'Assign'])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Expr', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Expr', 'If', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'If', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'If', 'Assign', 'Assign', 'Expr', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Print', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Import', 'Expr', 'Assign', 'Return']), ('decorator_list', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', []), ('body', ['Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'If', 'Assign', 'If', 'Return']), ('decorator_list', [])]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'Expr', 'Expr', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Expr', 'Import', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'Expr', 'Assign', 'Return']), ('decorator_list', ['Name', 'Name'])]": 1, "Tuple -> [('elts', ['Call', 'Str', 'Attribute', 'Call']), ('ctx', 'Load')]": 2, "Module -> [('body', ['Import', 'ImportFrom', 'Import', 'Import', 'ImportFrom', 'Import', 'Import', 'ClassDef'])]": 1, "If -> [('test', 'Attribute'), ('body', ['Assign', 'Assign']), ('orelse', ['Assign'])]": 8, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'ImportFrom', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'str'), ('kwarg', 'str'), ('defaults', ['Name'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Dict', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Print', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['TryExcept']), ('orelse', [])]": 56, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Return']), ('decorator_list', ['Name'])]": 180, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'For', 'Expr', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'Call'), ('body', ['Assign', 'Assign', 'Return']), ('orelse', ['Raise'])]": 1, "For -> [('target', 'Name'), ('iter', 'Subscript'), ('body', ['Assign', 'Assign', 'If', 'If']), ('orelse', [])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Str', 'Str', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name'])]": 1, "If -> [('test', 'Call'), ('body', ['Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'AugAssign']), ('orelse', [])]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'ClassDef', 'Expr'])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Attribute', 'ListComp', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'For', 'Expr', 'Assign']), ('orelse', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Attribute']), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Return']), ('decorator_list', ['Call'])]": 2, "If -> [('test', 'Call'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign']), ('orelse', ['Expr'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Print', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'FunctionDef', 'Assign', 'If', 'If', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Return']), ('decorator_list', ['Name'])]": 10, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'Assign', 'Assign', 'Assign', 'ClassDef', 'FunctionDef', 'ClassDef', 'ClassDef'])]": 1, "List -> [('elts', ['Name', 'Lambda', 'Name']), ('ctx', 'Load')]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Attribute'])]": 1, "Print -> [('dest', 'NoneType'), ('values', ['Str', 'Str', 'Str', 'Str']), ('nl', 'bool')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'Assign', 'While', 'Return']), ('decorator_list', ['Call'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 5, "Call -> [('func', 'Name'), ('args', ['Subscript', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 9, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]": 5, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'Import', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'ClassDef', 'ClassDef'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Global', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'If', 'If']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Subscript']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 14, "TryFinally -> [('body', ['TryExcept']), ('finalbody', ['Expr'])]": 16, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 3, "Compare -> [('left', 'Attribute'), ('ops', ['GtE']), ('comparators', ['Num'])]": 20, "For -> [('target', 'Name'), ('iter', 'Subscript'), ('body', ['Assign', 'Assign', 'Expr', 'For']), ('orelse', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', []), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', ['Call'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "Yield -> [('value', 'Str')]": 4, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assert', 'For', 'Return']), ('decorator_list', [])]": 1, "Tuple -> [('elts', ['Num', 'Num', 'Str']), ('ctx', 'Load')]": 7, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'If', 'Return']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'For']), ('decorator_list', [])]": 16, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assert', 'Assign', 'Assign', 'Assert', 'Assign', 'Assign', 'Assert', 'Assert', 'Assert', 'Assert', 'If', 'If', 'Assign', 'Assert']), ('decorator_list', [])]": 1, "Dict -> [('keys', ['BinOp']), ('values', ['Call'])]": 6, "Call -> [('func', 'Name'), ('args', ['Attribute']), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'Assign', 'Assign', 'Assign', 'ClassDef', 'ClassDef'])]": 1, "List -> [('elts', ['Str', 'Str', 'Str', 'Str', 'Attribute', 'Str', 'BinOp']), ('ctx', 'Load')]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'If', 'If', 'If', 'If', 'Return']), ('decorator_list', [])]": 1, "ExceptHandler -> [('type', 'NoneType'), ('name', 'NoneType'), ('body', ['Expr', 'Continue'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['TryExcept', 'Return']), ('decorator_list', ['Call'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'If', 'If', 'Assign', 'Assign', 'For', 'Assign', 'If', 'AugAssign', 'For', 'Return']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['FunctionDef', 'Assign', 'FunctionDef', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'If', 'Expr', 'Assign', 'Return']), ('decorator_list', [])]": 1, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'TryExcept', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'If', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]": 1, "Assign -> [('targets', ['Attribute']), ('value', 'Subscript')]": 234, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'Assign', 'If', 'Assign', 'For', 'For', 'Assign', 'Return']), ('decorator_list', ['Name'])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'If', 'Assign', 'If', 'Assign', 'If', 'ClassDef', 'ClassDef', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef'])]": 1, "If -> [('test', 'Call'), ('body', ['Return']), ('orelse', ['Assign'])]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Print', 'Assign', 'Expr', 'Assign', 'Expr'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'If', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'If']), ('decorator_list', [])]": 1, "Return -> [('value', 'NoneType')]": 643, "Tuple -> [('elts', ['Subscript', 'Subscript', 'Subscript', 'Subscript']), ('ctx', 'Load')]": 10, "Call -> [('func', 'Attribute'), ('args', ['Num', 'Num', 'Attribute', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "ExceptHandler -> [('type', 'Name'), ('name', 'Tuple'), ('body', ['Assign', 'If'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'If', 'Return']), ('decorator_list', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'If', 'Assign', 'Assign']), ('decorator_list', [])]": 2, "Call -> [('func', 'Attribute'), ('args', ['Str', 'Attribute']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 6, "TryExcept -> [('body', ['Import', 'Assign', 'Expr', 'Expr', 'If', 'If', 'Return']), ('handlers', ['ExceptHandler', 'ExceptHandler', 'ExceptHandler', 'ExceptHandler']), ('orelse', [])]": 1, "Subscript -> [('value', 'Call'), ('slice', 'Slice'), ('ctx', 'Load')]": 170, "ExceptHandler -> [('type', 'NoneType'), ('name', 'NoneType'), ('body', ['Expr', 'Print', 'Continue'])]": 1, "If -> [('test', 'Compare'), ('body', ['Expr', 'Expr']), ('orelse', ['Raise'])]": 6, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If']), ('decorator_list', ['Call', 'Name'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'FunctionDef', 'TryFinally']), ('decorator_list', ['Call'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'For', 'Assign', 'For']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Print', 'If']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'For', 'If']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Tuple', 'Name', 'Name', 'Num', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'If', 'Return']), ('decorator_list', ['Call', 'Name'])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Name', 'Attribute', 'Name']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "If -> [('test', 'Call'), ('body', ['Assign', 'Return']), ('orelse', ['If'])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Expr']), ('orelse', ['Assign'])]": 4, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Print', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'If', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "If -> [('test', 'UnaryOp'), ('body', ['If', 'Return']), ('orelse', [])]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', ['Attribute'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'TryExcept']), ('decorator_list', [])]": 4, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Str', 'Str', 'Str', 'Str', 'Num'])]": 1, "If -> [('test', 'Name'), ('body', ['Assign', 'Expr']), ('orelse', ['Expr', 'Return'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'TryExcept', 'Return']), ('decorator_list', ['Name'])]": 1, "Call -> [('func', 'Name'), ('args', ['Attribute', 'Attribute', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 4, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'If', 'FunctionDef', 'Assign', 'If', 'Expr', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Delete', 'Assign', 'Expr']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign']), ('decorator_list', [])]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'FunctionDef', 'FunctionDef', 'If'])]": 2, "BinOp -> [('left', 'Name'), ('op', 'Mult'), ('right', 'Num')]": 126, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'TryExcept', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 2, "List -> [('elts', ['Call', 'Name', 'Call']), ('ctx', 'Load')]": 5, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['If', 'For', 'For']), ('orelse', [])]": 2, "TryExcept -> [('body', ['Assign', 'Assign', 'If', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Expr']), ('handlers', ['ExceptHandler', 'ExceptHandler', 'ExceptHandler', 'ExceptHandler', 'ExceptHandler']), ('orelse', [])]": 1, "If -> [('test', 'Attribute'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'For', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'For']), ('orelse', ['For'])]": 1, "ImportFrom -> [('module', 'str'), ('names', ['alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias']), ('level', 'int')]": 1, "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Expr']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Print', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'If', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Str', 'Name', 'Call', 'Call', 'Call', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'Assign', 'Assign', 'Expr']), ('decorator_list', ['Name'])]": 4, "ClassDef -> [('name', 'str'), ('bases', []), ('body', ['Expr', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "Call -> [('func', 'Name'), ('args', ['BinOp']), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "Call -> [('func', 'Attribute'), ('args', ['BinOp', 'Call', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'If', 'Assign', 'Expr', 'If', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'If', 'Assign', 'If', 'Return']), ('decorator_list', [])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['Name', 'Num', 'Num'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'TryExcept', 'Expr', 'If']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'Assign', 'If', 'FunctionDef', 'If']), ('decorator_list', [])]": 2, "Module -> [('body', ['Import', 'Import', 'Import', 'ImportFrom', 'Import', 'Import', 'Import', 'Import', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'FunctionDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign']), ('decorator_list', [])]": 1, "If -> [('test', 'Call'), ('body', ['Expr', 'Assign']), ('orelse', [])]": 3, "Subscript -> [('value', 'ListComp'), ('slice', 'Index'), ('ctx', 'Load')]": 6, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Str', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 14, "If -> [('test', 'Call'), ('body', ['Expr', 'Assign', 'If']), ('orelse', ['If'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'If', 'If', 'If', 'For', 'Return']), ('decorator_list', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', []), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Expr', 'Return']), ('orelse', [])]": 124, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Attribute', 'Attribute', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "If -> [('test', 'Compare'), ('body', ['Raise']), ('orelse', ['Expr'])]": 2, "Call -> [('func', 'Name'), ('args', ['Attribute', 'BinOp', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "For -> [('target', 'Tuple'), ('iter', 'Name'), ('body', ['If', 'Expr']), ('orelse', [])]": 2, "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['Call', 'Str', 'Name'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Import', 'Assign', 'Import', 'Assign', 'Assign', 'With']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Assert', 'Expr']), ('decorator_list', [])]": 2, "BinOp -> [('left', 'Call'), ('op', 'Sub'), ('right', 'BinOp')]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'If', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'Assign', 'If', 'TryExcept', 'ImportFrom', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'Assign', 'If', 'If', 'Assign', 'If', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'Call'), ('body', ['ImportFrom', 'Assign']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'Expr', 'For', 'For', 'For', 'Assign', 'Expr', 'If', 'If']), ('decorator_list', [])]": 1, "BinOp -> [('left', 'Call'), ('op', 'BitAnd'), ('right', 'Call')]": 25, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Dict', 'List', 'List'])]": 1, "If -> [('test', 'Compare'), ('body', ['Return']), ('orelse', ['For'])]": 1, "If -> [('test', 'Name'), ('body', ['Return']), ('orelse', ['Return'])]": 46, "If -> [('test', 'Compare'), ('body', ['Continue']), ('orelse', ['Assign', 'Assign', 'Expr'])]": 1, "TryExcept -> [('body', ['Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Return']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'ImportFrom', 'Expr']), ('decorator_list', [])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['Str', 'Str', 'Str'])]": 61, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'ClassDef', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]": 1, "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'TryExcept', 'ImportFrom', 'ClassDef', 'FunctionDef', 'If'])]": 2, "BinOp -> [('left', 'Call'), ('op', 'Mult'), ('right', 'Call')]": 11, "Call -> [('func', 'Attribute'), ('args', ['Call', 'Str', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 4, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'str'), ('defaults', ['Str', 'Str'])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'AugAssign', 'While', 'If', 'AugAssign', 'Assign', 'Assign', 'While', 'Expr', 'Assign', 'Return']), ('orelse', ['Assign', 'Assign', 'Assign', 'While', 'Expr', 'Assign', 'Return'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'If', 'If', 'If', 'If']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Return']), ('orelse', ['If'])]": 147, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name']), ('keywords', []), ('starargs', 'Name'), ('kwargs', 'NoneType')]": 12, "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'ClassDef', 'FunctionDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef'])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'ClassDef']), ('decorator_list', [])]": 1, "For -> [('target', 'Tuple'), ('iter', 'Subscript'), ('body', ['Assign', 'If', 'AugAssign']), ('orelse', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'For', 'For', 'Assign', 'Expr', 'If']), ('decorator_list', [])]": 1, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Expr', 'Assert']), ('orelse', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign']), ('orelse', ['Print', 'Assign'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign']), ('decorator_list', [])]": 15, "BoolOp -> [('op', 'And'), ('values', ['Compare', 'UnaryOp'])]": 90, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'If', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'For', 'Expr', 'Expr']), ('decorator_list', ['Name', 'Name', 'Name', 'Name'])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['Call', 'Str', 'Str'])]": 4, "Call -> [('func', 'Name'), ('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 3, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str']), ('values', ['Attribute', 'UnaryOp', 'Call', 'Attribute'])]": 2, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]": 7, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'If', 'Return']), ('decorator_list', ['Name'])]": 2, "If -> [('test', 'UnaryOp'), ('body', ['ImportFrom', 'Assign']), ('orelse', [])]": 4, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assert', 'AugAssign', 'TryExcept', 'AugAssign']), ('decorator_list', [])]": 1, "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'Expr', 'Expr', 'FunctionDef', 'ClassDef', 'FunctionDef'])]": 1, "Print -> [('dest', 'NoneType'), ('values', ['BinOp', 'Name']), ('nl', 'bool')]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'For', 'For', 'Return']), ('decorator_list', [])]": 6, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'Assign', 'ClassDef'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Name', 'Name', 'Str'])]": 1, "If -> [('test', 'Call'), ('body', ['Print', 'Print', 'Expr']), ('orelse', [])]": 1, "ExceptHandler -> [('type', 'Name'), ('name', 'Name'), ('body', ['Assign', 'Assign', 'Return'])]": 14, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'If', 'If', 'Assign', 'Assign', 'For', 'If']), ('decorator_list', ['Name'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'ImportFrom', 'Assign']), ('decorator_list', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "If -> [('test', 'Name'), ('body', ['Assign', 'If', 'Assign', 'If', 'Expr']), ('orelse', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'For', 'Expr']), ('decorator_list', [])]": 1, "If -> [('test', 'BoolOp'), ('body', ['If']), ('orelse', ['Expr'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'If']), ('decorator_list', [])]": 6, "If -> [('test', 'Call'), ('body', ['Assign', 'For', 'Assign', 'Expr', 'Assign', 'For', 'Assign']), ('orelse', ['Assign'])]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'If'])]": 2, "Compare -> [('left', 'Attribute'), ('ops', ['In']), ('comparators', ['Tuple'])]": 33, "BinOp -> [('left', 'Name'), ('op', 'RShift'), ('right', 'Name')]": 2, "If -> [('test', 'Compare'), ('body', ['Assign', 'If', 'Expr', 'For', 'Return']), ('orelse', ['If'])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'str'), ('defaults', ['Name', 'Num', 'Name', 'Str', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Return']), ('decorator_list', ['Call', 'Name', 'Call'])]": 1, "ExceptHandler -> [('type', 'NoneType'), ('name', 'NoneType'), ('body', ['Pass'])]": 79, "keyword -> [('arg', 'str'), ('value', 'ListComp')]": 9, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 2, "Call -> [('func', 'Attribute'), ('args', ['Str', 'Subscript', 'Subscript']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Call -> [('func', 'Name'), ('args', ['Subscript', 'Subscript', 'Name']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 3, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Pass']), ('decorator_list', [])]": 9, "Attribute -> [('value', 'Subscript'), ('attr', 'str'), ('ctx', 'Load')]": 1729, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'TryExcept', 'Assign', 'For', 'Assign', 'If']), ('decorator_list', [])]": 1, "Tuple -> [('elts', ['Str', 'Str', 'Str', 'Str', 'Num']), ('ctx', 'Load')]": 9, "Dict -> [('keys', ['Str', 'Str']), ('values', ['Attribute', 'Call'])]": 8, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'TryExcept', 'Expr', 'Assign', 'If', 'Assign', 'Assign', 'If', 'Assign', 'If', 'For', 'Assign', 'If', 'If', 'If', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Return']), ('orelse', ['Assign', 'Assign', 'Return'])]": 3, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Str', 'Str', 'Str', 'Call', 'Str', 'Str', 'Str'])]": 2, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'TryExcept', 'Assign', 'Assign', 'AugAssign']), ('orelse', [])]": 2, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign']), ('orelse', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'If', 'Assign', 'Assign', 'Return']), ('orelse', [])]": 1, "comprehension -> [('target', 'Name'), ('iter', 'Attribute'), ('ifs', ['BoolOp'])]": 8, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'Expr', 'Expr', 'Assert']), ('orelse', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['ListComp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 183, "Tuple -> [('elts', ['Str', 'Tuple', 'Num']), ('ctx', 'Load')]": 41, "Tuple -> [('elts', ['Str', 'Str', 'Attribute', 'Str', 'List', 'Str', 'Str']), ('ctx', 'Load')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Expr']), ('decorator_list', ['Name'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assert', 'Assert', 'Assert', 'Assign', 'Assign', 'Assign', 'Assert', 'Assign', 'Assign', 'Assert', 'Assert', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "Module -> [('body', ['Import', 'Import', 'If', 'Import', 'If', 'If', 'Assign', 'FunctionDef', 'If'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Global', 'Assign']), ('decorator_list', [])]": 3, "BoolOp -> [('op', 'And'), ('values', ['Call', 'Compare', 'BoolOp'])]": 1, "List -> [('elts', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('ctx', 'Load')]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 4, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Assign', 'Assign', 'If', 'If', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'If', 'ClassDef', 'Return']), ('decorator_list', [])]": 1, "With -> [('context_expr', 'Call'), ('optional_vars', 'Name'), ('body', ['Assign', 'Assign', 'If'])]": 1, "BinOp -> [('left', 'Call'), ('op', 'Add'), ('right', 'Call')]": 93, "Dict -> [('keys', ['Str']), ('values', ['Str'])]": 409, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'Assign', 'Expr', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'Call'), ('body', ['Assign', 'If', 'Assign', 'If', 'If', 'Expr', 'Return']), ('orelse', [])]": 1, "Call -> [('func', 'Name'), ('args', []), ('keywords', []), ('starargs', 'Name'), ('kwargs', 'NoneType')]": 42, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 27, "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'If', 'ClassDef', 'ClassDef', 'ClassDef', 'TryExcept', 'ClassDef'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Assert', 'Assert', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'If', 'Assign', 'For', 'Assign', 'Assign', 'Expr', 'Expr', 'Return']), ('decorator_list', ['Attribute'])]": 1, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'With', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'Assign', 'If', 'ClassDef', 'Assign', 'ClassDef', 'Assign', 'Expr', 'FunctionDef', 'ClassDef'])]": 1, "If -> [('test', 'Call'), ('body', ['Assign', 'Assign', 'Expr']), ('orelse', [])]": 4, "Dict -> [('keys', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('values', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str'])]": 1, "TryExcept -> [('body', ['Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'Assign', 'TryExcept', 'TryExcept', 'TryExcept', 'If']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "ExceptHandler -> [('type', 'Name'), ('name', 'Name'), ('body', ['Assign', 'Expr'])]": 4, "Dict -> [('keys', ['Str', 'Str']), ('values', ['Str', 'Attribute'])]": 3, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'If', 'Assign', 'If', 'If', 'Return']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Expr', 'If', 'Expr', 'AugAssign']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assert', 'Assign', 'Assert', 'Assert', 'Expr']), ('decorator_list', [])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Name', 'Name', 'Name', 'Name', 'Str', 'Name', 'Name', 'Name'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'If']), ('decorator_list', [])]": 10, "If -> [('test', 'Name'), ('body', ['Expr', 'Raise']), ('orelse', [])]": 18, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Expr', 'Return']), ('decorator_list', [])]": 10, "Assign -> [('targets', ['Attribute', 'Attribute', 'Attribute', 'Attribute']), ('value', 'Name')]": 2, "ClassDef -> [('name', 'str'), ('bases', []), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef']), ('decorator_list', [])]": 1, "Compare -> [('left', 'Subscript'), ('ops', ['NotEq']), ('comparators', ['Str'])]": 51, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'TryFinally']), ('decorator_list', [])]": 12, "If -> [('test', 'Compare'), ('body', ['ImportFrom', 'ClassDef', 'Expr']), ('orelse', ['If'])]": 1, "If -> [('test', 'Attribute'), ('body', ['ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Return']), ('orelse', ['Return'])]": 1, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Expr', 'TryExcept', 'If', 'Assign']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'Assert', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Attribute', 'Name', 'Name', 'Name', 'Attribute', 'UnaryOp', 'Name'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'AugAssign', 'AugAssign', 'AugAssign', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'If', 'Expr', 'Return']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Subscript', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 7, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Str', 'Name']), ('keywords', []), ('starargs', 'Name'), ('kwargs', 'NoneType')]": 1, "If -> [('test', 'Attribute'), ('body', ['Return']), ('orelse', ['Assign', 'Return'])]": 2, "Slice -> [('lower', 'Num'), ('upper', 'Call'), ('step', 'NoneType')]": 4, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Num', 'Num'])]": 1, "ExceptHandler -> [('type', 'NoneType'), ('name', 'NoneType'), ('body', ['Assign', 'TryFinally'])]": 1, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'If', 'Expr']), ('orelse', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'For', 'If']), ('decorator_list', [])]": 1, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'Assign', 'For', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'ImportFrom', 'Assert', 'Assign', 'FunctionDef', 'Assign', 'For', 'Assign', 'For', 'Assign']), ('decorator_list', [])]": 1, "BinOp -> [('left', 'Num'), ('op', 'FloorDiv'), ('right', 'Num')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If']), ('decorator_list', ['Attribute'])]": 1, "Num -> [('n', 'long')]": 25, "Call -> [('func', 'Name'), ('args', []), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'Name')]": 41, "BoolOp -> [('op', 'And'), ('values', ['Name', 'Attribute', 'Compare'])]": 3, "If -> [('test', 'Compare'), ('body', ['Expr', 'If']), ('orelse', ['If'])]": 2, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Attribute', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 20, "List -> [('elts', ['Name', 'Name', 'Name', 'BinOp', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Name']), ('ctx', 'Load')]": 1, "For -> [('target', 'Tuple'), ('iter', 'Name'), ('body', ['Assign']), ('orelse', [])]": 5, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr']), ('orelse', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assert']), ('orelse', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Call', 'Name', 'Str', 'Tuple']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Expr', 'Expr', 'Expr']), ('orelse', [])]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'For', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Print', 'Assign', 'Return']), ('decorator_list', [])]": 2, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['If', 'Assign', 'If']), ('orelse', [])]": 7, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ClassDef', 'ClassDef', 'ClassDef', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'Assign', 'Assign', 'If', 'Assign', 'Expr', 'Return']), ('decorator_list', ['Name'])]": 1, "Call -> [('func', 'Name'), ('args', ['Attribute', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 176, "If -> [('test', 'BoolOp'), ('body', ['Return']), ('orelse', ['Expr'])]": 1, "If -> [('test', 'Call'), ('body', ['Assign', 'Assign', 'If']), ('orelse', [])]": 10, "Dict -> [('keys', ['BinOp', 'BinOp']), ('values', ['Name', 'Name'])]": 8, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'Assign', 'For', 'For', 'Assign', 'Assign', 'For', 'For', 'Return']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'For', 'Assign', 'Return']), ('decorator_list', [])]": 4, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Str', 'Attribute', 'Str', 'Name', 'List']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "TryExcept -> [('body', ['Assign', 'Expr', 'Expr', 'Expr', 'Print', 'Break']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 1, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Assert', 'Assign', 'If']), ('orelse', [])]": 1, "If -> [('test', 'Name'), ('body', ['Assign', 'Return']), ('orelse', ['Assign', 'Return'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'Assign', 'For', 'With', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'BoolOp'), ('body', ['Return']), ('orelse', [])]": 239, "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'TryExcept', 'Assign', 'Assign', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'FunctionDef', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Print']), ('decorator_list', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Str', 'Name', 'Call', 'Call', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 3, "Call -> [('func', 'Attribute'), ('args', ['Num', 'Str', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'For', 'Expr', 'Expr']), ('orelse', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Name', 'Name', 'Name', 'Name', 'Str'])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Call', 'Num'])]": 1, "If -> [('test', 'Attribute'), ('body', ['Expr', 'Assign', 'Return']), ('orelse', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Attribute', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'If', 'Expr', 'If', 'Assign', 'TryExcept', 'Return']), ('decorator_list', [])]": 1, "TryExcept -> [('body', ['ImportFrom', 'Expr']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 2, "If -> [('test', 'Compare'), ('body', ['Expr', 'Assign', 'Assign']), ('orelse', ['Assign', 'Assign', 'Assign', 'If', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assert', 'Assign', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'If'])]": 1, "Slice -> [('lower', 'BinOp'), ('upper', 'Call'), ('step', 'NoneType')]": 4, "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'Import', 'Import', 'ImportFrom', 'Import', 'ImportFrom', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'Assign', 'ClassDef'])]": 1, "IfExp -> [('test', 'Name'), ('body', 'Attribute'), ('orelse', 'Str')]": 1, "TryFinally -> [('body', ['For']), ('finalbody', ['While', 'Expr'])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'ClassDef', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'TryExcept', 'TryExcept']), ('decorator_list', [])]": 1, "List -> [('elts', ['Str', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('ctx', 'Load')]": 1, "Tuple -> [('elts', ['BinOp', 'List']), ('ctx', 'Load')]": 12, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'Assign', 'Import', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]": 1, "Module -> [('body', ['Import', 'Assign', 'Expr', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Print', 'Assign', 'Assign', 'Assign', 'Print', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Assign', 'Assign', 'For', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'For', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Print', 'Print', 'Expr', 'Expr', 'Expr', 'Expr'])]": 1, "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['If']), ('orelse', [])]": 112, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'Assign', 'Assign', 'FunctionDef']), ('decorator_list', [])]": 9, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Num']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'If', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'ImportFrom', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['List', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 16, "If -> [('test', 'Call'), ('body', ['Expr']), ('orelse', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr'])]": 1, "If -> [('test', 'Call'), ('body', ['If', 'If']), ('orelse', [])]": 7, "Call -> [('func', 'Name'), ('args', ['Name', 'Name', 'Tuple', 'Dict', 'Tuple']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "ClassDef -> [('name', 'str'), ('bases', []), ('body', ['Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 2, "If -> [('test', 'Name'), ('body', ['Assign', 'If']), ('orelse', ['Expr'])]": 2, "Call -> [('func', 'Attribute'), ('args', ['Call', 'Num', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 7, "Call -> [('func', 'Name'), ('args', ['Name', 'Str', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 42, "If -> [('test', 'Subscript'), ('body', ['Assign', 'For']), ('orelse', [])]": 4, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Return']), ('decorator_list', [])]": 3, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Attribute', 'Name', 'Str']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 3, "Module -> [('body', ['Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef'])]": 2, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Expr', 'Expr', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "If -> [('test', 'Call'), ('body', ['Continue']), ('orelse', [])]": 30, "Call -> [('func', 'Name'), ('args', ['Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 6, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Name', 'BinOp', 'Str', 'Str'])]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Expr', 'Assign', 'If']), ('orelse', [])]": 2, "If -> [('test', 'Name'), ('body', ['Assign', 'Expr', 'FunctionDef', 'For', 'For', 'Expr', 'If']), ('orelse', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'ClassDef', 'Assign', 'If', 'Assign', 'For', 'Assign', 'For', 'If', 'If', 'If', 'If']), ('decorator_list', [])]": 2, "BoolOp -> [('op', 'Or'), ('values', ['Compare', 'Call', 'Compare'])]": 1, "Call -> [('func', 'Name'), ('args', ['Lambda', 'Attribute', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "BoolOp -> [('op', 'And'), ('values', ['Compare', 'Call', 'BoolOp'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'TryExcept', 'Assign']), ('decorator_list', [])]": 1, "IfExp -> [('test', 'Call'), ('body', 'Num'), ('orelse', 'Num')]": 2, "ExceptHandler -> [('type', 'NoneType'), ('name', 'NoneType'), ('body', ['Expr', 'Raise'])]": 11, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "List -> [('elts', ['Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call']), ('ctx', 'Load')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'FunctionDef', 'Expr', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'TryExcept']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'If']), ('decorator_list', [])]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'Import', 'Assign', 'FunctionDef', 'ClassDef', 'FunctionDef', 'FunctionDef', 'Import', 'Assign', 'Delete', 'ClassDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'If'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'For', 'Expr', 'For', 'Return']), ('decorator_list', [])]": 1, "Subscript -> [('value', 'Attribute'), ('slice', 'Index'), ('ctx', 'Store')]": 769, "TryExcept -> [('body', ['Assign', 'For', 'Assign', 'Return']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 1, "ExceptHandler -> [('type', 'Tuple'), ('name', 'Name'), ('body', ['TryExcept', 'If'])]": 1, "If -> [('test', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'If']), ('orelse', [])]": 4, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Expr']), ('orelse', ['Expr'])]": 4, "List -> [('elts', ['Name', 'Attribute', 'Name']), ('ctx', 'Load')]": 2, "Call -> [('func', 'Attribute'), ('args', ['Subscript', 'Subscript', 'Str']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "If -> [('test', 'Name'), ('body', ['Expr', 'Expr', 'For', 'FunctionDef', 'Expr', 'Expr', 'Expr']), ('orelse', [])]": 1, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'If'])]": 1, "Call -> [('func', 'Name'), ('args', ['Call', 'Str', 'Dict', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "List -> [('elts', ['Str', 'Str', 'Name', 'Str', 'BinOp', 'Str', 'Attribute']), ('ctx', 'Load')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'FunctionDef', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'If', 'For', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'UnaryOp'), ('body', ['If', 'TryExcept']), ('orelse', [])]": 2, "BinOp -> [('left', 'Subscript'), ('op', 'Add'), ('right', 'Name')]": 23, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'TryExcept', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Name', 'Name', 'Num', 'Name'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Subscript', 'Subscript', 'UnaryOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Num', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 5, "Call -> [('func', 'Name'), ('args', ['Name', 'BinOp', 'BinOp', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['If', 'Assign', 'If']), ('orelse', [])]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'If', 'If']), ('orelse', ['Print', 'Assign', 'If', 'If'])]": 1, "Pow -> <NULL>": 301, "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign', 'Assign', 'For', 'Assign']), ('orelse', ['Assign'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assert']), ('decorator_list', [])]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Return']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Str', 'BinOp', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name', 'Name']), ('body', ['Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For']), ('decorator_list', [])]": 2, "If -> [('test', 'Call'), ('body', ['Expr', 'For', 'Expr', 'Return']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "Dict -> [('keys', ['Name', 'Name', 'Attribute', 'Attribute']), ('values', ['Attribute', 'Attribute', 'Attribute', 'Attribute'])]": 1, "For -> [('target', 'Name'), ('iter', 'Subscript'), ('body', ['Assign', 'Expr', 'Expr', 'Expr']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'If', 'If', 'Assign', 'If', 'Assign']), ('decorator_list', [])]": 2, "If -> [('test', 'Compare'), ('body', ['Assign']), ('orelse', ['For', 'Return'])]": 1, "If -> [('test', 'Call'), ('body', ['If', 'Expr']), ('orelse', ['Assert', 'Expr'])]": 1, "BoolOp -> [('op', 'Or'), ('values', ['BoolOp', 'Num'])]": 9, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Assign', 'If', 'If', 'AugAssign', 'If', 'Assign', 'If', 'Assign', 'If', 'If', 'If', 'If', 'For']), ('orelse', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Import', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "TryExcept -> [('body', ['Return']), ('handlers', ['ExceptHandler', 'ExceptHandler']), ('orelse', [])]": 5, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Return']), ('decorator_list', [])]": 289, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Print', 'For', 'Print']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "If -> [('test', 'Compare'), ('body', ['Import', 'Assign', 'If', 'Assign', 'Return']), ('orelse', ['If'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Expr', 'For', 'If', 'Expr', 'Expr', 'Assign', 'Expr', 'If']), ('decorator_list', ['Name'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'Assign', 'Assign', 'Return', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'If', 'If', 'If', 'Assign', 'Expr', 'Return']), ('decorator_list', ['Attribute', 'Name'])]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Assign', 'Print', 'Assign']), ('orelse', [])]": 1, "If -> [('test', 'Name'), ('body', ['Assign', 'TryExcept', 'Assign', 'Expr', 'For']), ('orelse', [])]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Expr'])]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'Expr', 'If', 'Expr', 'If', 'Expr', 'Expr']), ('orelse', [])]": 1, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'ClassDef'])]": 1, "Compare -> [('left', 'BinOp'), ('ops', ['LtE']), ('comparators', ['Call'])]": 5, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Return']), ('orelse', ['Return'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'Assign', 'Expr']), ('decorator_list', [])]": 2, "With -> [('context_expr', 'Call'), ('optional_vars', 'Name'), ('body', ['Assign', 'Assign', 'Assign', 'With', 'For', 'Expr'])]": 1, "With -> [('context_expr', 'Call'), ('optional_vars', 'NoneType'), ('body', ['Expr', 'Expr'])]": 5, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Import', 'Assign', 'If', 'For', 'Return']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'For', 'Expr', 'Assign', 'For', 'For']), ('decorator_list', [])]": 1, "If -> [('test', 'BoolOp'), ('body', ['If', 'Assign', 'Assign', 'Assign', 'Assign', 'TryFinally', 'Assign', 'Assign', 'If', 'If', 'Expr']), ('orelse', ['If'])]": 1, "Call -> [('func', 'Name'), ('args', ['Compare']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assert', 'Assert', 'Expr', 'Assign']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Expr', 'If', 'If', 'Assign', 'Assign', 'For', 'Assign']), ('decorator_list', [])]": 1, "IfExp -> [('test', 'Compare'), ('body', 'Name'), ('orelse', 'Name')]": 4, "Call -> [('func', 'Attribute'), ('args', ['List', 'ListComp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'If', 'If', 'If', 'Return']), ('decorator_list', [])]": 2, "List -> [('elts', ['Num', 'BinOp']), ('ctx', 'Load')]": 3, "LShift -> <NULL>": 94, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'FunctionDef', 'Expr', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign']), ('decorator_list', [])]": 1, "BinOp -> [('left', 'Call'), ('op', 'Add'), ('right', 'Attribute')]": 23, "Call -> [('func', 'Attribute'), ('args', ['List', 'Attribute', 'Num', 'Num', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]": 2, "Module -> [('body', ['Import', 'Assign', 'Expr', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Expr', 'Expr', 'Assign', 'For', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Print', 'Print', 'Expr', 'Expr'])]": 1, "If -> [('test', 'Call'), ('body', ['TryExcept', 'Expr', 'Return']), ('orelse', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['FunctionDef', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 4, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assert', 'Assign', 'Assign', 'Assert', 'Assert', 'Assert', 'Assert', 'Assert', 'If', 'If', 'Assign', 'Assert', 'Assign', 'Assert', 'Assign', 'Assert', 'Assert', 'Assert', 'Assert']), ('decorator_list', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Call', 'Dict', 'Num', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Call -> [('func', 'Attribute'), ('args', ['Call']), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Expr', 'If']), ('decorator_list', [])]": 5, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['FunctionDef', 'FunctionDef', 'Assign', 'Return']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Name', 'Name', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "While -> [('test', 'BoolOp'), ('body', ['Assign']), ('orelse', [])]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'TryExcept', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'If', 'Expr']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['For', 'Break']), ('orelse', ['Raise'])]": 1, "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'Expr']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'TryExcept', 'TryExcept', 'If', 'If', 'Assign', 'Return']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'TryExcept', 'Expr', 'If', 'If', 'If', 'Return']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Str']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 16, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'For', 'Assign', 'For', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assert', 'ImportFrom', 'Expr']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['If', 'Assign', 'If', 'Assign', 'Assign', 'If', 'For', 'If']), ('orelse', [])]": 2, "If -> [('test', 'Name'), ('body', ['Assign', 'Expr', 'Expr']), ('orelse', [])]": 5, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'For', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]": 1, "Tuple -> [('elts', ['BinOp', 'BoolOp']), ('ctx', 'Load')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If']), ('decorator_list', [])]": 1, "TryFinally -> [('body', ['Expr', 'Expr']), ('finalbody', ['Expr', 'Expr'])]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'For', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'If', 'TryExcept']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'AugAssign', 'AugAssign', 'AugAssign', 'AugAssign', 'AugAssign', 'AugAssign', 'AugAssign', 'AugAssign', 'AugAssign', 'Assign', 'AugAssign', 'AugAssign', 'AugAssign', 'AugAssign', 'AugAssign', 'AugAssign', 'AugAssign', 'AugAssign', 'AugAssign', 'Print', 'Print', 'Print', 'Print', 'Print', 'Print', 'Assign', 'Assign', 'If', 'If', 'If', 'If', 'Assign', 'Print', 'Assign', 'Print', 'Print', 'Print', 'Assign', 'AugAssign', 'AugAssign', 'AugAssign', 'AugAssign', 'AugAssign', 'AugAssign', 'AugAssign', 'AugAssign', 'AugAssign', 'Assign', 'AugAssign', 'AugAssign', 'AugAssign', 'AugAssign', 'AugAssign', 'AugAssign', 'AugAssign', 'AugAssign', 'AugAssign', 'Print', 'Assign', 'Print', 'Print']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'Name'), ('body', ['AugAssign']), ('orelse', [])]": 56, "Call -> [('func', 'Attribute'), ('args', ['Call', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'Name')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'AugAssign', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'If', 'Assign', 'Expr', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'Assign', 'TryExcept', 'Return']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Yield', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['If', 'Assign', 'If']), ('orelse', [])]": 2, "If -> [('test', 'Compare'), ('body', ['Assign']), ('orelse', ['Break'])]": 2, "Call -> [('func', 'Attribute'), ('args', ['Str', 'List', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "If -> [('test', 'Num'), ('body', ['For']), ('orelse', [])]": 1, "For -> [('target', 'Tuple'), ('iter', 'Tuple'), ('body', ['If']), ('orelse', [])]": 2, "While -> [('test', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'Assign']), ('orelse', [])]": 1, "If -> [('test', 'Call'), ('body', ['Assign']), ('orelse', ['Expr', 'Assign'])]": 4, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]": 2, "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Expr', 'Assign', 'Expr']), ('orelse', [])]": 2, "Print -> [('dest', 'NoneType'), ('values', ['Subscript', 'Subscript']), ('nl', 'bool')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'If', 'If', 'Return']), ('decorator_list', ['Call'])]": 1, "ExceptHandler -> [('type', 'Tuple'), ('name', 'Name'), ('body', ['Return'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assert', 'Assign', 'Assert', 'Assert', 'Assert', 'Assert', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assert', 'Expr', 'Assign', 'Assert', 'Assert', 'Assert', 'Assign', 'Assert']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'For']), ('orelse', ['Assign'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'TryExcept', 'TryExcept', 'Assign', 'If', 'Assign', 'Expr', 'Expr', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Print', 'Assign']), ('orelse', ['If'])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Str', 'Str', 'Name', 'Str', 'Str', 'Str', 'Name'])]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Print', 'AugAssign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Expr', 'Assign', 'Print', 'Print']), ('orelse', [])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str']), ('values', ['Str', 'Call', 'Call', 'Call'])]": 1, "For -> [('target', 'Name'), ('iter', 'ListComp'), ('body', ['Delete']), ('orelse', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Expr', 'Return']), ('decorator_list', [])]": 13, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'For', 'Expr', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'Name'), ('body', ['Print', 'For']), ('orelse', [])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Num'])]": 3, "If -> [('test', 'Call'), ('body', ['Assign', 'Assign']), ('orelse', ['Assign'])]": 10, "TryExcept -> [('body', ['Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'If', 'Assign', 'If', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'If', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'If', 'For', 'Return']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Return']), ('decorator_list', [])]": 2, "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign', 'Assign', 'Assign']), ('orelse', [])]": 2, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Print', 'If']), ('orelse', [])]": 1, "If -> [('test', 'Attribute'), ('body', ['AugAssign']), ('orelse', ['AugAssign'])]": 4, "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For']), ('orelse', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'If', 'Expr']), ('decorator_list', ['Attribute'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'If', 'For', 'Expr']), ('decorator_list', [])]": 1, "Compare -> [('left', 'Attribute'), ('ops', ['Lt']), ('comparators', ['Name'])]": 9, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Return']), ('decorator_list', ['Call', 'Call'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Str', 'Str', 'Str', 'Call', 'List', 'Str', 'Str', 'Str', 'Dict'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'TryExcept', 'If', 'Assign', 'Return']), ('decorator_list', ['Attribute'])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'Return']), ('orelse', [])]": 6, "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign', 'Delete', 'Delete']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'For', 'If', 'Expr']), ('decorator_list', [])]": 1, "If -> [('test', 'BoolOp'), ('body', ['Expr', 'Return']), ('orelse', ['If'])]": 7, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Num', 'Name', 'Name', 'Num'])]": 1, "If -> [('test', 'Name'), ('body', ['Expr', 'Raise']), ('orelse', ['Return'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'TryExcept', 'With']), ('decorator_list', ['Name', 'Call'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Num', 'Str', 'Tuple']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 6, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Num', 'Subscript', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Assign', 'AugAssign', 'Assign', 'Assign', 'Assign', 'Expr']), ('orelse', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign']), ('orelse', ['Assign', 'For', 'If'])]": 2, "AugAssign -> [('target', 'Attribute'), ('op', 'BitOr'), ('value', 'Attribute')]": 7, "Module -> [('body', ['Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef'])]": 1, "If -> [('test', 'Name'), ('body', ['Import']), ('orelse', ['Import'])]": 1, "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['Assign', 'Expr', 'Assign', 'If'])]": 1, "ExceptHandler -> [('type', 'NoneType'), ('name', 'NoneType'), ('body', ['Import', 'Assign'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'Assign', 'Assign', 'If', 'Return']), ('decorator_list', [])]": 1, "Tuple -> [('elts', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('ctx', 'Load')]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'AugAssign', 'For']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Print', 'For', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "TryFinally -> [('body', ['TryExcept']), ('finalbody', ['Expr', 'If'])]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'TryExcept'])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Expr', 'Expr']), ('orelse', ['If', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Expr', 'Assign', 'TryExcept']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'List'), ('body', ['Assign', 'Assign']), ('orelse', [])]": 1, "If -> [('test', 'Name'), ('body', ['Assign', 'If', 'Assign', 'If']), ('orelse', ['Assign', 'Assign'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'Expr', 'Assign', 'Assign', 'Expr', 'Return']), ('decorator_list', ['Name', 'Name'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]": 1, "Tuple -> [('elts', ['Dict', 'Dict', 'Dict', 'Dict']), ('ctx', 'Load')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'Assign', 'If', 'ImportFrom', 'Return']), ('decorator_list', ['Call'])]": 1, "List -> [('elts', ['Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute']), ('ctx', 'Load')]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 417, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Name', 'Name', 'List'])]": 1, "Dict -> [('keys', ['Str', 'Str']), ('values', ['Name', 'Subscript'])]": 1, "Print -> [('dest', 'NoneType'), ('values', ['Str', 'Name', 'Str', 'Name', 'Str', 'Subscript']), ('nl', 'bool')]": 1, "Call -> [('func', 'Name'), ('args', ['Subscript', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Compare -> [('left', 'Call'), ('ops', ['GtE']), ('comparators', ['Call'])]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'If', 'For']), ('decorator_list', [])]": 1, "LtE -> <NULL>": 234, "ExceptHandler -> [('type', 'Name'), ('name', 'Name'), ('body', ['AugAssign', 'Raise'])]": 2, "If -> [('test', 'Compare'), ('body', ['If', 'TryExcept', 'Expr']), ('orelse', [])]": 1, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'For', 'Assign'])]": 1, "BoolOp -> [('op', 'And'), ('values', ['Compare', 'UnaryOp', 'Compare'])]": 4, "For -> [('target', 'Name'), ('iter', 'List'), ('body', ['Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'For']), ('orelse', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Attribute', 'Attribute']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['If', 'Expr', 'Assign', 'Expr', 'Assign', 'If']), ('orelse', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Print']), ('orelse', ['Print'])]": 1, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['If', 'Assign', 'Assign', 'Assign', 'If', 'Expr']), ('orelse', [])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Name', 'Num', 'Call'])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Str', 'Str', 'Str', 'Call', 'Str', 'Str'])]": 1, "If -> [('test', 'Compare'), ('body', ['Expr']), ('orelse', ['For', 'Assign', 'Expr', 'If'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Expr']), ('decorator_list', [])]": 1, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'Assign']), ('orelse', [])]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'FunctionDef', 'FunctionDef', 'If'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['With']), ('decorator_list', ['Call'])]": 6, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'If', 'Assign', 'For']), ('orelse', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['TryExcept']), ('orelse', [])]": 22, "Call -> [('func', 'Attribute'), ('args', ['BoolOp', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'For']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Global', 'Assign', 'TryFinally']), ('decorator_list', [])]": 1, "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign']), ('orelse', ['Assign', 'Assign'])]": 8, "Print -> [('dest', 'NoneType'), ('values', ['Name']), ('nl', 'bool')]": 196, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'TryExcept', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'If', 'If', 'Expr', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'Assign', 'For', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'FunctionDef', 'FunctionDef', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['TryExcept', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "ExceptHandler -> [('type', 'Name'), ('name', 'Name'), ('body', ['Expr', 'Assign', 'Assign', 'Assign'])]": 2, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'BinOp']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'For', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "If -> [('test', 'Attribute'), ('body', ['Raise']), ('orelse', [])]": 28, "If -> [('test', 'Compare'), ('body', ['Return']), ('orelse', ['AugAssign'])]": 1, "comprehension -> [('target', 'Tuple'), ('iter', 'Attribute'), ('ifs', ['Compare'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'AugAssign', 'Return']), ('decorator_list', [])]": 1, "comprehension -> [('target', 'Tuple'), ('iter', 'Name'), ('ifs', ['Compare'])]": 3, "Tuple -> [('elts', ['Name', 'Subscript']), ('ctx', 'Load')]": 54, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Expr', 'Assign', 'ClassDef', 'ClassDef', 'FunctionDef', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "AugAssign -> [('target', 'Subscript'), ('op', 'Add'), ('value', 'Call')]": 4, "For -> [('target', 'Tuple'), ('iter', 'List'), ('body', ['ClassDef', 'Assign', 'Assign', 'Expr', 'Expr']), ('orelse', [])]": 1, "TryExcept -> [('body', ['Expr', 'Break']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 4, "Tuple -> [('elts', ['BinOp', 'Attribute']), ('ctx', 'Load')]": 1, "If -> [('test', 'UnaryOp'), ('body', ['FunctionDef', 'Assign']), ('orelse', [])]": 4, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'If', 'Assign', 'Assign', 'If', 'Expr', 'Return']), ('decorator_list', ['Name', 'Name', 'Call', 'Call'])]": 1, "Name -> [('id', 'str'), ('ctx', 'Param')]": 34138, "Call -> [('func', 'Attribute'), ('args', ['Str', 'Str']), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 3, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'If', 'TryExcept']), ('orelse', [])]": 1, "Assign -> [('targets', ['Subscript']), ('value', 'Name')]": 1121, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Return']), ('orelse', ['Print', 'Return'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'If', 'Assign', 'For', 'For', 'Assign', 'Expr', 'Assign', 'Return']), ('decorator_list', ['Call'])]": 1, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'ImportFrom', 'Import', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'Assign', 'ClassDef', 'ClassDef', 'ClassDef', 'Assign', 'ClassDef', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'ClassDef', 'If'])]": 1, "Compare -> [('left', 'Attribute'), ('ops', ['Lt']), ('comparators', ['Call'])]": 9, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'TryExcept', 'If', 'TryExcept', 'Assign', 'If', 'Expr', 'Expr', 'Expr', 'Return']), ('decorator_list', ['Name', 'Name', 'Call'])]": 1, "TryExcept -> [('body', ['Assign', 'Raise']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 2, "Call -> [('func', 'Name'), ('args', ['Call']), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 7, "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef'])]": 2, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Tuple', 'Tuple', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 5, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assert', 'If', 'Return']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['FunctionDef', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "BinOp -> [('left', 'Num'), ('op', 'Add'), ('right', 'BinOp')]": 57, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'ImportFrom', 'Assign', 'If', 'Assign', 'Assign', 'For', 'If', 'Return']), ('decorator_list', [])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['Name', 'Dict', 'List'])]": 6, "Tuple -> [('elts', ['Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple']), ('ctx', 'Load')]": 3, "Index -> [('value', 'Attribute')]": 383, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call'])]": 1, "ClassDef -> [('name', 'str'), ('bases', []), ('body', ['Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If']), ('decorator_list', ['Call'])]": 3, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'While']), ('orelse', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Subscript', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 8, "For -> [('target', 'Name'), ('iter', 'BinOp'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'For', 'For', 'Assign', 'Expr', 'If', 'For']), ('orelse', [])]": 1, "If -> [('test', 'Call'), ('body', ['Assign', 'Assign', 'If', 'If', 'Expr']), ('orelse', [])]": 1, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ClassDef'])]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Assign', 'For']), ('orelse', [])]": 6, "Call -> [('func', 'Attribute'), ('args', ['Name', 'List', 'Name', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'For', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Return']), ('decorator_list', [])]": 1, "List -> [('elts', ['Attribute', 'Name', 'Name']), ('ctx', 'Load')]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['TryExcept', 'If', 'Return']), ('decorator_list', [])]": 4, "If -> [('test', 'Subscript'), ('body', ['AugAssign']), ('orelse', [])]": 5, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'Assign', 'Assign', 'Expr', 'If', 'Expr', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 10, "While -> [('test', 'UnaryOp'), ('body', ['For', 'Assign', 'Assign', 'Expr', 'Expr', 'If', 'Expr', 'Expr']), ('orelse', [])]": 1, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['For', 'For']), ('orelse', [])]": 2, "TryFinally -> [('body', ['Assign', 'While']), ('finalbody', ['Expr'])]": 2, "TryFinally -> [('body', ['Assign', 'Assign', 'For', 'Expr', 'Expr']), ('finalbody', ['If'])]": 1, "If -> [('test', 'UnaryOp'), ('body', ['Return']), ('orelse', ['Expr', 'Assign'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Subscript', 'Subscript', 'Subscript', 'Subscript']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 12, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 5, "comprehension -> [('target', 'Name'), ('iter', 'BoolOp'), ('ifs', ['Call'])]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assert', 'For']), ('orelse', [])]": 1, "If -> [('test', 'Name'), ('body', ['Assign', 'Assign', 'If', 'If']), ('orelse', [])]": 3, "Call -> [('func', 'Name'), ('args', ['Call', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 5, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Expr', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]": 2, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name']), ('vararg', 'str'), ('kwarg', 'str'), ('defaults', ['Name'])]": 15, "For -> [('target', 'Name'), ('iter', 'Tuple'), ('body', ['Assign', 'If', 'If', 'If', 'If', 'Return']), ('orelse', [])]": 1, "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'Import', 'Expr', 'ImportFrom', 'ImportFrom', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Assign', 'For', 'Assign', 'For', 'Assign', 'For', 'Assign', 'Assign', 'For'])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr']), ('orelse', [])]": 1, "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'ClassDef', 'FunctionDef'])]": 1, "Call -> [('func', 'Name'), ('args', []), ('keywords', []), ('starargs', 'Attribute'), ('kwargs', 'NoneType')]": 8, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'If', 'Assign', 'While', 'Assign', 'While', 'If', 'Return']), ('decorator_list', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Attribute', 'Call', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Str', 'Name'])]": 14, "If -> [('test', 'Compare'), ('body', ['Assign']), ('orelse', ['Expr'])]": 6, "TryExcept -> [('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'If', 'Return']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'While']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Global', 'Assign', 'If', 'If', 'Expr', 'Assign']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'TryExcept', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'TryExcept', 'Assign', 'If', 'Assign', 'If', 'If', 'TryExcept', 'Assign', 'FunctionDef', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'If', 'If', 'If', 'If', 'If', 'If', 'FunctionDef', 'If', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "While -> [('test', 'Compare'), ('body', ['Assign', 'AugAssign']), ('orelse', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'TryExcept', 'For']), ('orelse', [])]": 2, "Dict -> [('keys', ['Name']), ('values', ['Str'])]": 8, "While -> [('test', 'Compare'), ('body', ['Assign', 'Expr', 'Assign']), ('orelse', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 3, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'ClassDef'])]": 1, "If -> [('test', 'UnaryOp'), ('body', ['Pass']), ('orelse', [])]": 2, "If -> [('test', 'Call'), ('body', ['Return']), ('orelse', ['TryExcept'])]": 1, "For -> [('target', 'Tuple'), ('iter', 'Attribute'), ('body', ['If', 'If']), ('orelse', [])]": 1, "If -> [('test', 'Name'), ('body', ['Assign', 'Assign', 'If']), ('orelse', [])]": 7, "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Assign', 'TryFinally', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign'])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['FunctionDef', 'ClassDef', 'FunctionDef']), ('decorator_list', [])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Name', 'Num', 'Num', 'BinOp'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Expr', 'Print', 'For', 'Print']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'Expr', 'Assign', 'If', 'Expr', 'If', 'Return']), ('decorator_list', [])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name']), ('vararg', 'str'), ('kwarg', 'str'), ('defaults', ['Attribute'])]": 1, "BinOp -> [('left', 'Num'), ('op', 'Div'), ('right', 'Name')]": 12, "Call -> [('func', 'Attribute'), ('args', ['Attribute']), ('keywords', []), ('starargs', 'Name'), ('kwargs', 'Name')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'FunctionDef', 'FunctionDef', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'TryExcept']), ('decorator_list', [])]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'Return']), ('decorator_list', ['Call'])]": 1, "AugAssign -> [('target', 'Attribute'), ('op', 'Add'), ('value', 'Tuple')]": 1, "Tuple -> [('elts', ['Str', 'BinOp', 'BinOp']), ('ctx', 'Load')]": 2, "arguments -> [('args', ['Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Str', 'Name', 'Name'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'FunctionDef', 'FunctionDef', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'TryExcept', 'Assign', 'Assign', 'TryExcept', 'Assign', 'Assign', 'FunctionDef', 'Assign', 'FunctionDef', 'Assign', 'FunctionDef', 'TryExcept', 'Return']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Compare']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 4, "Call -> [('func', 'Attribute'), ('args', ['Call', 'Name', 'BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "BinOp -> [('left', 'Attribute'), ('op', 'Mult'), ('right', 'Call')]": 36, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Assign', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'ClassDef', 'If'])]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'Assign', 'Assign', 'Assign', 'Assign', 'ClassDef', 'ClassDef', 'FunctionDef', 'FunctionDef', 'If'])]": 1, "Dict -> [('keys', ['Str', 'Str']), ('values', ['Name', 'ListComp'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Name', 'List', 'Str', 'Name', 'Name', 'Str', 'Str', 'List', 'List', 'Str', 'Str', 'Str'])]": 1, "BinOp -> [('left', 'Name'), ('op', 'Mod'), ('right', 'Str')]": 6, "Call -> [('func', 'Attribute'), ('args', ['Subscript', 'Subscript', 'Subscript', 'Subscript']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 6, "If -> [('test', 'Compare'), ('body', ['Expr', 'Assign']), ('orelse', ['If'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'For', 'Expr', 'For', 'Assign', 'Assign', 'Expr', 'For']), ('decorator_list', [])]": 1, "If -> [('test', 'UnaryOp'), ('body', ['For', 'For', 'For', 'For']), ('orelse', [])]": 2, "If -> [('test', 'Compare'), ('body', ['Expr', 'AugAssign', 'If']), ('orelse', [])]": 1, "While -> [('test', 'Name'), ('body', ['Assign', 'If', 'Assign', 'Expr', 'Expr']), ('orelse', [])]": 1, "TryExcept -> [('body', ['Expr']), ('handlers', ['ExceptHandler']), ('orelse', ['If', 'Raise'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Name', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 6, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Print', 'If']), ('orelse', [])]": 2, "Global -> [('names', ['str', 'str', 'str', 'str', 'str', 'str', 'str', 'str', 'str', 'str', 'str', 'str', 'str', 'str', 'str', 'str', 'str', 'str', 'str'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Assign', 'While', 'Return']), ('decorator_list', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Attribute', 'Attribute']), ('body', ['Expr', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'For', 'Assign']), ('orelse', ['If'])]": 7, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'Assign', 'AugAssign', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'Expr', 'Expr', 'Assign']), ('orelse', [])]": 2, "If -> [('test', 'Attribute'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'If']), ('orelse', [])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Name', 'Name', 'Attribute'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 4, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If']), ('decorator_list', ['Attribute'])]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Expr', 'If', 'Assign', 'TryExcept', 'Assign', 'Expr', 'Expr', 'AugAssign']), ('orelse', [])]": 1, "If -> [('test', 'Call'), ('body', ['Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'If', 'If']), ('orelse', ['Expr'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Name', 'Name', 'Name', 'Name', 'Attribute', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Tuple']), ('values', ['Str', 'Str', 'Str', 'Str'])]": 1, "Call -> [('func', 'Name'), ('args', ['Name', 'Subscript', 'Name', 'Name', 'Subscript', 'Subscript', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "If -> [('test', 'Call'), ('body', ['Assign', 'If', 'Assign', 'Continue']), ('orelse', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'For', 'If']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'TryFinally']), ('decorator_list', ['Name'])]": 1, "BoolOp -> [('op', 'Or'), ('values', ['Attribute', 'Attribute'])]": 102, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assert', 'Assign', 'AugAssign', 'Return']), ('decorator_list', [])]": 2, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'If', 'If']), ('orelse', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'If']), ('orelse', [])]": 80, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "Expr -> [('value', 'ListComp')]": 76, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign']), ('orelse', ['Print', 'Break'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 9, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "While -> [('test', 'Compare'), ('body', ['AugAssign', 'TryExcept', 'If']), ('orelse', [])]": 1, "Assign -> [('targets', ['Attribute', 'Name']), ('value', 'List')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ClassDef', 'FunctionDef', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'For', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "If -> [('test', 'UnaryOp'), ('body', ['Print', 'Print']), ('orelse', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 135, "Call -> [('func', 'Name'), ('args', ['UnaryOp', 'Num', 'BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['AugAssign']), ('orelse', [])]": 7, "If -> [('test', 'Call'), ('body', ['Assign', 'If', 'Assign']), ('orelse', ['If'])]": 1, "While -> [('test', 'Compare'), ('body', ['AugAssign', 'Assign']), ('orelse', [])]": 1, "If -> [('test', 'Call'), ('body', ['Expr', 'Assign', 'Break']), ('orelse', [])]": 2, "If -> [('test', 'Name'), ('body', ['Assign', 'Expr', 'AugAssign']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'If', 'Assign', 'Expr', 'Expr', 'If', 'If']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assert', 'Assert', 'Assign', 'Assert', 'Assert', 'Assert', 'Assert', 'Assert', 'Assert', 'Assign', 'Assign', 'Assign', 'Expr', 'Assert']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Delete', 'Delete', 'Delete', 'Return']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['BinOp', 'Attribute', 'BinOp', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Compare -> [('left', 'Subscript'), ('ops', ['In']), ('comparators', ['List'])]": 10, "If -> [('test', 'Compare'), ('body', ['Assign', 'While', 'If', 'Expr']), ('orelse', ['If'])]": 1, "If -> [('test', 'Call'), ('body', ['If', 'Assign', 'If']), ('orelse', ['Assign', 'If'])]": 1, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str']), ('values', ['Attribute', 'Attribute', 'Name', 'Str'])]": 1, "Slice -> [('lower', 'NoneType'), ('upper', 'BinOp'), ('step', 'NoneType')]": 17, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'For', 'If', 'For', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign']), ('orelse', [])]": 1121, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'If', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Raise', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'For', 'Return']), ('decorator_list', [])]": 39, "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('orelse', ['Assign'])]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'If', 'FunctionDef', 'Assign', 'Assign', 'FunctionDef', 'Assign', 'FunctionDef', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Expr', 'Assign', 'FunctionDef', 'Expr', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef'])]": 1, "Compare -> [('left', 'Subscript'), ('ops', ['Eq']), ('comparators', ['Attribute'])]": 43, "Slice -> [('lower', 'BinOp'), ('upper', 'BinOp'), ('step', 'NoneType')]": 27, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'ImportFrom', 'Expr']), ('decorator_list', [])]": 3, "If -> [('test', 'Compare'), ('body', ['Expr', 'Expr', 'Delete', 'Assign', 'Expr']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'For', 'Return']), ('decorator_list', [])]": 1, "List -> [('elts', ['Subscript', 'Str', 'Name']), ('ctx', 'Load')]": 6, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'If', 'If', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'For', 'Return']), ('decorator_list', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 16, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Name', 'BinOp']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Name', 'Str', 'UnaryOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Assert -> [('test', 'Compare'), ('msg', 'Call')]": 110, "Tuple -> [('elts', ['Name', 'Lambda', 'Subscript']), ('ctx', 'Load')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'If', 'Return']), ('decorator_list', ['Name'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Print', 'While']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'FunctionDef', 'Expr', 'Expr', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Global', 'Global', 'FunctionDef', 'Assign', 'Return']), ('decorator_list', [])]": 1, "BinOp -> [('left', 'Call'), ('op', 'Add'), ('right', 'BoolOp')]": 5, "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]": 1, "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'Assign', 'Assign', 'If', 'FunctionDef', 'Expr', 'FunctionDef', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'ClassDef', 'Assign', 'Assign', 'Expr'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'For', 'For', 'For', 'Expr']), ('decorator_list', [])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['Call', 'ListComp', 'Attribute'])]": 1, "If -> [('test', 'Compare'), ('body', ['Import', 'TryExcept', 'Expr', 'Assign', 'Print']), ('orelse', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Str', 'BoolOp', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 4, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name']), ('keywords', ['keyword']), ('starargs', 'Name'), ('kwargs', 'Name')]": 2, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Attribute', 'Tuple']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 5, "If -> [('test', 'BoolOp'), ('body', ['Assign']), ('orelse', ['TryExcept'])]": 2, "If -> [('test', 'Name'), ('body', ['Expr']), ('orelse', [])]": 351, "Module -> [('body', ['Import', 'Import', 'Assign', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'ImportFrom', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef'])]": 1, "ExceptHandler -> [('type', 'Attribute'), ('name', 'NoneType'), ('body', ['Continue'])]": 10, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Subscript', 'Name', 'Name', 'Subscript', 'Subscript', 'Name'])]": 1, "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'ClassDef'])]": 1, "If -> [('test', 'BoolOp'), ('body', ['If', 'AugAssign', 'AugAssign', 'Assign', 'Expr', 'If']), ('orelse', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'FunctionDef', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "Tuple -> [('elts', ['Name', 'Name', 'Name', 'Attribute']), ('ctx', 'Load')]": 3, "Compare -> [('left', 'Subscript'), ('ops', ['Eq']), ('comparators', ['Name'])]": 116, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Print', 'Assign', 'For', 'For', 'Assign', 'Expr', 'Assign', 'For', 'If', 'Expr']), ('orelse', [])]": 1, "Assign -> [('targets', ['Tuple']), ('value', 'Call')]": 1160, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'If', 'If']), ('orelse', ['If', 'If', 'If'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 5, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'If', 'FunctionDef', 'Assign', 'FunctionDef', 'Assign', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "List -> [('elts', ['Str', 'Str', 'Name', 'Str']), ('ctx', 'Load')]": 1, "If -> [('test', 'Compare'), ('body', ['For', 'Assign', 'Assign', 'Expr', 'Break']), ('orelse', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'FunctionDef', 'Assign', 'Expr', 'Assign', 'Assign', 'Assert', 'If', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'TryExcept', 'If', 'If']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'ImportFrom', 'ClassDef', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ClassDef', 'If', 'Assign', 'TryExcept', 'Return']), ('decorator_list', [])]": 1, "ExceptHandler -> [('type', 'Attribute'), ('name', 'Name'), ('body', ['Print'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Expr', 'Assign', 'Assign', 'If']), ('decorator_list', [])]": 2, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', ['Call'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'AugAssign', 'Assign', 'Assign', 'Expr', 'Return']), ('decorator_list', [])]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Assign', 'ClassDef'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'For', 'Assign', 'For', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "AugAssign -> [('target', 'Name'), ('op', 'BitOr'), ('value', 'Call')]": 2, "Call -> [('func', 'Attribute'), ('args', ['BinOp']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'Name')]": 4, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'TryExcept', 'If', 'Return']), ('decorator_list', ['Name', 'Name'])]": 1, "While -> [('test', 'Compare'), ('body', ['Assign', 'If', 'If', 'AugAssign']), ('orelse', [])]": 1, "Dict -> [('keys', ['Str', 'Str']), ('values', ['Attribute', 'Subscript'])]": 2, "If -> [('test', 'Compare'), ('body', ['ImportFrom', 'Assign']), ('orelse', ['ImportFrom', 'Assign'])]": 1, "BinOp -> [('left', 'Subscript'), ('op', 'Mod'), ('right', 'Tuple')]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 2, "If -> [('test', 'Name'), ('body', ['If', 'Return']), ('orelse', [])]": 2, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'ImportFrom', 'FunctionDef', 'If'])]": 1, "If -> [('test', 'BoolOp'), ('body', ['TryExcept']), ('orelse', ['TryExcept'])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Expr', 'For', 'Delete']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'Assign', 'If', 'TryExcept', 'Assign', 'If', 'TryExcept', 'TryExcept', 'Return']), ('decorator_list', [])]": 1, "For -> [('target', 'Tuple'), ('iter', 'Name'), ('body', ['Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Assign', 'For', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('orelse', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Name', 'Attribute', 'Attribute', 'Name', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "ClassDef -> [('name', 'str'), ('bases', []), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 3, "Subscript -> [('value', 'Name'), ('slice', 'Index'), ('ctx', 'Store')]": 2367, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "If -> [('test', 'Call'), ('body', ['AugAssign', 'Print']), ('orelse', ['If'])]": 1, "If -> [('test', 'Name'), ('body', ['Assign', 'Assign', 'Assign']), ('orelse', ['If'])]": 2, "BoolOp -> [('op', 'Or'), ('values', ['Call', 'Call', 'Call'])]": 8, "Compare -> [('left', 'BinOp'), ('ops', ['In']), ('comparators', ['Attribute'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'FunctionDef', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['If', 'AugAssign', 'For', 'AugAssign']), ('orelse', [])]": 2, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Attribute', 'Name', 'Str', 'Name', 'Name', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Tuple -> [('elts', ['Subscript', 'List']), ('ctx', 'Load')]": 1, "BoolOp -> [('op', 'Or'), ('values', ['UnaryOp', 'Compare'])]": 45, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Assign', 'For', 'Assign', 'Print', 'ImportFrom', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'Expr', 'Import', 'TryExcept']), ('decorator_list', [])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Name', 'BoolOp', 'Name'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['TryExcept', 'Expr', 'Return']), ('decorator_list', ['Name'])]": 1, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Expr', 'AugAssign']), ('orelse', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Expr', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'If', 'Expr', 'Return']), ('decorator_list', [])]": 3, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['AugAssign', 'AugAssign', 'AugAssign', 'AugAssign']), ('orelse', [])]": 2, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Assign', 'Expr', 'Expr']), ('orelse', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Return']), ('decorator_list', [])]": 1, "Tuple -> [('elts', ['Subscript', 'Num']), ('ctx', 'Load')]": 4, "Compare -> [('left', 'BoolOp'), ('ops', ['In']), ('comparators', ['Name'])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Expr', 'Assign', 'Print']), ('orelse', [])]": 1, "AugAssign -> [('target', 'Subscript'), ('op', 'Add'), ('value', 'BinOp')]": 4, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Print', 'Assign', 'While', 'Print']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 5, "ExceptHandler -> [('type', 'NoneType'), ('name', 'NoneType'), ('body', ['If', 'Raise'])]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'For', 'Expr']), ('decorator_list', [])]": 11, "Compare -> [('left', 'Call'), ('ops', ['In']), ('comparators', ['Subscript'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Tuple', 'Tuple', 'Tuple']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "For -> [('target', 'Name'), ('iter', 'Subscript'), ('body', ['Expr', 'Expr', 'For', 'For', 'Expr']), ('orelse', [])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'str'), ('kwarg', 'str'), ('defaults', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Str'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'For']), ('decorator_list', [])]": 2, "TryExcept -> [('body', ['Expr', 'Print', 'For']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 1, "Compare -> [('left', 'Attribute'), ('ops', ['Is']), ('comparators', ['Name'])]": 287, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'For', 'Expr']), ('decorator_list', [])]": 2, "Tuple -> [('elts', ['Subscript', 'Attribute', 'Subscript']), ('ctx', 'Load')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'If', 'If', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'Call'), ('body', ['Assign', 'Assign', 'Assign']), ('orelse', [])]": 5, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'If', 'If', 'Assign', 'While']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'ClassDef', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "TryExcept -> [('body', ['Expr']), ('handlers', ['ExceptHandler']), ('orelse', ['Raise'])]": 15, "Call -> [('func', 'Attribute'), ('args', ['Tuple', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "BinOp -> [('left', 'Name'), ('op', 'Mod'), ('right', 'Num')]": 29, "Module -> [('body', ['Import', 'ClassDef'])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 2, "Call -> [('func', 'Attribute'), ('args', ['Compare', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 9, "Dict -> [('keys', ['Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call']), ('values', ['Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple'])]": 1, "Compare -> [('left', 'Subscript'), ('ops', ['NotIn']), ('comparators', ['Name'])]": 10, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'Assign', 'ClassDef', 'ClassDef'])]": 1, "Compare -> [('left', 'Attribute'), ('ops', ['In']), ('comparators', ['Name'])]": 67, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'If', 'If', 'If', 'Assign', 'If', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'Call'), ('body', ['Expr']), ('orelse', ['Print'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr']), ('decorator_list', ['Call'])]": 1, "BoolOp -> [('op', 'And'), ('values', ['Call', 'UnaryOp', 'Compare'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'If', 'Assign', 'Assign', 'Return']), ('decorator_list', ['Call'])]": 1, "TryExcept -> [('body', ['Assign', 'Assign', 'Assign', 'If', 'Return']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['TryExcept', 'Assign', 'If', 'Assign']), ('decorator_list', [])]": 1, "If -> [('test', 'Call'), ('body', ['Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'While', 'While']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Subscript', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 39, "Compare -> [('left', 'Attribute'), ('ops', ['NotEq']), ('comparators', ['Num'])]": 30, "Call -> [('func', 'Attribute'), ('args', ['Call', 'Name', 'Name', 'Tuple', 'Tuple']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name', 'Attribute']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Name']), ('keywords', []), ('starargs', 'Name'), ('kwargs', 'Name')]": 24, "ExceptHandler -> [('type', 'Attribute'), ('name', 'Name'), ('body', ['If'])]": 6, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Str', 'Str', 'Str', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'TryExcept']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Expr', 'For', 'Assign', 'If']), ('orelse', ['Assign'])]": 1, "If -> [('test', 'Compare'), ('body', ['Return']), ('orelse', ['Return'])]": 99, "Call -> [('func', 'Attribute'), ('args', ['Name']), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 7, "While -> [('test', 'UnaryOp'), ('body', ['For', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('orelse', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Str', 'Num', 'Num', 'Num', 'Num', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 4, "Call -> [('func', 'Attribute'), ('args', ['Num', 'Name', 'Str']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 3, "Subscript -> [('value', 'Attribute'), ('slice', 'Slice'), ('ctx', 'Store')]": 4, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name']), ('vararg', 'str'), ('kwarg', 'str'), ('defaults', ['Str'])]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef'])]": 1, "TryExcept -> [('body', ['Expr', 'If', 'Expr']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'FunctionDef', 'ClassDef', 'ClassDef', 'Assign', 'FunctionDef', 'If'])]": 1, "For -> [('target', 'Name'), ('iter', 'Subscript'), ('body', ['Assign', 'Assign', 'Expr']), ('orelse', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'If', 'If', 'TryExcept']), ('decorator_list', ['Name', 'Name', 'Call', 'Call'])]": 1, "If -> [('test', 'Call'), ('body', ['Print', 'Print', 'Print']), ('orelse', [])]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'TryExcept', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef'])]": 1, "Tuple -> [('elts', ['Str', 'Name']), ('ctx', 'Load')]": 119, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'With', 'Return']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Num', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 3, "If -> [('test', 'Compare'), ('body', ['Assign', 'Expr', 'Expr', 'Expr']), ('orelse', [])]": 4, "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['AugAssign']), ('orelse', [])]": 9, "Tuple -> [('elts', ['Name', 'Str', 'Str', 'Dict']), ('ctx', 'Load')]": 2, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Str', 'Attribute']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 4, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 4, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'If', 'Assign', 'If', 'Return']), ('decorator_list', [])]": 2, "If -> [('test', 'Compare'), ('body', ['Assign']), ('orelse', ['Expr', 'If'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['TryExcept', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Return']), ('decorator_list', ['Name'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'For', 'For', 'If', 'Assign', 'FunctionDef', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'For']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Print', 'Import']), ('orelse', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Str', 'Attribute', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 3, "ExceptHandler -> [('type', 'Name'), ('name', 'Name'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Return'])]": 1, "Compare -> [('left', 'Call'), ('ops', ['NotEq']), ('comparators', ['Num'])]": 123, "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'If', 'Assign', 'Assign', 'If']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Return']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Call', 'Name', 'Tuple', 'Name', 'Attribute', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Call -> [('func', 'Name'), ('args', []), ('keywords', ['keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'Name')]": 2, "Tuple -> [('elts', ['Name', 'Name', 'Name', 'Name']), ('ctx', 'Load')]": 88, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'Assert', 'Return']), ('decorator_list', [])]": 3, "Tuple -> [('elts', ['Str', 'List', 'Dict']), ('ctx', 'Load')]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'TryExcept']), ('decorator_list', [])]": 12, "If -> [('test', 'UnaryOp'), ('body', ['Return']), ('orelse', ['For'])]": 5, "BinOp -> [('left', 'Name'), ('op', 'Add'), ('right', 'IfExp')]": 1, "List -> [('elts', ['Name', 'Num', 'Num']), ('ctx', 'Load')]": 1, "For -> [('target', 'Tuple'), ('iter', 'Name'), ('body', ['Expr']), ('orelse', [])]": 30, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'While', 'If', 'Return']), ('decorator_list', [])]": 2, "BoolOp -> [('op', 'Or'), ('values', ['Call', 'List'])]": 47, "If -> [('test', 'UnaryOp'), ('body', ['ImportFrom', 'Raise']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "comprehension -> [('target', 'Name'), ('iter', 'Call'), ('ifs', ['Compare'])]": 20, "If -> [('test', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'If', 'For', 'If', 'If']), ('orelse', ['Assign', 'Assign', 'Assign', 'Assign'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'If', 'Expr', 'Expr', 'Assign', 'Return']), ('decorator_list', [])]": 1, "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'ClassDef'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "BoolOp -> [('op', 'Or'), ('values', ['Name', 'BoolOp'])]": 8, "BinOp -> [('left', 'Str'), ('op', 'Mod'), ('right', 'Call')]": 711, "With -> [('context_expr', 'Call'), ('optional_vars', 'NoneType'), ('body', ['TryExcept', 'Expr'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Compare']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 528, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('orelse', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Name', 'Dict']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 42, "Call -> [('func', 'Attribute'), ('args', ['Num']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 16, "Call -> [('func', 'Attribute'), ('args', ['Subscript', 'List']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 18, "Call -> [('func', 'Name'), ('args', ['Attribute']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 62, "Return -> [('value', 'ListComp')]": 84, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 1, "BinOp -> [('left', 'Name'), ('op', 'Mult'), ('right', 'Subscript')]": 17, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'If', 'Return']), ('decorator_list', [])]": 5, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'TryExcept']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'TryExcept']), ('decorator_list', ['Name', 'Call'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['For', 'For']), ('decorator_list', [])]": 7, "Print -> [('dest', 'NoneType'), ('values', []), ('nl', 'bool')]": 35, "Call -> [('func', 'Name'), ('args', ['Subscript', 'Subscript', 'Subscript', 'BinOp', 'BinOp']), ('keywords', ['keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Call -> [('func', 'Attribute'), ('args', ['Num', 'Subscript']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "List -> [('elts', ['Attribute', 'Attribute', 'Attribute', 'Attribute']), ('ctx', 'Load')]": 7, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'If']), ('decorator_list', [])]": 1, "Tuple -> [('elts', ['Str', 'Tuple', 'Name']), ('ctx', 'Load')]": 6, "Module -> [('body', ['Import', 'Import', 'Assign', 'Assign', 'Assign', 'Assign', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'If'])]": 1, "Call -> [('func', 'Name'), ('args', ['Name', 'Name', 'Name', 'Name']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 5, "Module -> [('body', ['Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Expr', 'ClassDef'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Attribute', 'Num', 'Num', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Call -> [('func', 'Attribute'), ('args', ['Str', 'Name', 'Call', 'Attribute', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Return']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Num', 'Name', 'Attribute', 'Num', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 4, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'For', 'For', 'For', 'For']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'If', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Return']), ('decorator_list', ['Call', 'Name'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'AugAssign', 'Return']), ('decorator_list', ['Attribute'])]": 1, "If -> [('test', 'Name'), ('body', ['Expr', 'Assign', 'If']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Print', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]": 1, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'If'])]": 1, "If -> [('test', 'Compare'), ('body', ['Expr']), ('orelse', ['Assign', 'If', 'If'])]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ClassDef', 'ClassDef', 'FunctionDef', 'FunctionDef', 'ClassDef'])]": 1, "If -> [('test', 'UnaryOp'), ('body', ['Expr']), ('orelse', [])]": 310, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'If', 'Assign', 'Assign', 'If', 'ImportFrom', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', [])]": 408, "Call -> [('func', 'Attribute'), ('args', ['Subscript', 'Str', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'For', 'Expr', 'Expr', 'Expr', 'If', 'For', 'Return']), ('decorator_list', ['Attribute'])]": 1, "Tuple -> [('elts', ['Attribute', 'Attribute', 'Compare']), ('ctx', 'Load')]": 1, "List -> [('elts', ['Name', 'Name', 'Call', 'Name']), ('ctx', 'Load')]": 1, "Tuple -> [('elts', ['Num', 'Num', 'Num', 'Num', 'Num', 'Name']), ('ctx', 'Load')]": 1, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Str', 'Subscript', 'Subscript']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'Assign']), ('orelse', ['Assert', 'Assign', 'Assign'])]": 2, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['If', 'If', 'If', 'Assign', 'Assign', 'Assign', 'If']), ('orelse', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'TryExcept', 'Expr', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'If', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "Slice -> [('lower', 'UnaryOp'), ('upper', 'NoneType'), ('step', 'NoneType')]": 7, "Tuple -> [('elts', ['Call', 'Str', 'Str', 'Call']), ('ctx', 'Load')]": 2, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign']), ('orelse', ['Assign', 'Assign', 'If', 'Assign', 'If', 'If'])]": 1, "If -> [('test', 'Compare'), ('body', ['If', 'Expr']), ('orelse', ['If'])]": 15, "While -> [('test', 'Name'), ('body', ['Assign', 'Assign', 'Assign', 'For', 'Assign']), ('orelse', [])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Num', 'Name', 'Tuple', 'Dict', 'Tuple', 'Num', 'Name', 'Tuple'])]": 1, "If -> [('test', 'Call'), ('body', ['If']), ('orelse', ['AugAssign', 'AugAssign'])]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef'])]": 1, "If -> [('test', 'Compare'), ('body', ['TryExcept', 'Break']), ('orelse', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 562, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ClassDef'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['If']), ('orelse', [])]": 171, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 2, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'For', 'Expr']), ('orelse', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef']), ('decorator_list', [])]": 1, "Tuple -> [('elts', ['Num', 'Num']), ('ctx', 'Load')]": 871, "Call -> [('func', 'Name'), ('args', ['Call']), ('keywords', ['keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 9, "If -> [('test', 'Name'), ('body', ['Assign', 'For']), ('orelse', [])]": 9, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'If', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Print']), ('decorator_list', [])]": 25, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Expr', 'Assign', 'Assign', 'ClassDef', 'FunctionDef']), ('decorator_list', [])]": 2, "BinOp -> [('left', 'Attribute'), ('op', 'Add'), ('right', 'Call')]": 47, "Tuple -> [('elts', ['Attribute', 'Name', 'Attribute', 'Name']), ('ctx', 'Load')]": 1, "Compare -> [('left', 'Name'), ('ops', ['In']), ('comparators', ['Name'])]": 293, "If -> [('test', 'Name'), ('body', ['Assign', 'If', 'If']), ('orelse', [])]": 3, "Call -> [('func', 'Name'), ('args', ['Subscript', 'Subscript', 'Subscript', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'Name')]": 1, "Compare -> [('left', 'Name'), ('ops', ['Lt']), ('comparators', ['Call'])]": 41, "If -> [('test', 'Compare'), ('body', ['Assign', 'Import', 'FunctionDef', 'For', 'Expr']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'For', 'If', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assert', 'Assign', 'Assign', 'For']), ('decorator_list', [])]": 1, "If -> [('test', 'UnaryOp'), ('body', ['Expr', 'Delete']), ('orelse', [])]": 3, "Slice -> [('lower', 'Num'), ('upper', 'Num'), ('step', 'NoneType')]": 335, "If -> [('test', 'Name'), ('body', ['If', 'TryExcept']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['TryExcept', 'Assign', 'If', 'Assign', 'Return']), ('decorator_list', [])]": 2, "If -> [('test', 'Call'), ('body', ['Assign']), ('orelse', ['Assert', 'Assign'])]": 1, "List -> [('elts', ['Tuple', 'Tuple', 'Name']), ('ctx', 'Load')]": 1, "Tuple -> [('elts', ['Name', 'Name', 'Attribute', 'Attribute', 'Attribute']), ('ctx', 'Load')]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 5, "Compare -> [('left', 'Call'), ('ops', ['NotEq']), ('comparators', ['Str'])]": 27, "If -> [('test', 'Call'), ('body', ['If']), ('orelse', ['Assign'])]": 8, "If -> [('test', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'If']), ('orelse', ['If'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Expr', 'Assign', 'If', 'Return']), ('decorator_list', ['Name', 'Call'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Str', 'Str', 'BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'If', 'If', 'Expr']), ('orelse', [])]": 6, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'For']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['ListComp', 'List']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 13, "While -> [('test', 'UnaryOp'), ('body', ['If', 'TryExcept', 'TryExcept']), ('orelse', [])]": 1, "Tuple -> [('elts', ['Subscript', 'Name', 'Str']), ('ctx', 'Load')]": 2, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Expr', 'If', 'If', 'If']), ('orelse', [])]": 1, "AugAssign -> [('target', 'Name'), ('op', 'Div'), ('value', 'Call')]": 4, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assert', 'Assign', 'Assert', 'Return']), ('decorator_list', ['Call'])]": 1, "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('orelse', [])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Str', 'Str', 'Str', 'Str', 'Str'])]": 1, "If -> [('test', 'BoolOp'), ('body', ['Assign', 'If', 'Expr']), ('orelse', ['Expr'])]": 2, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Call', 'Call', 'Call', 'Attribute', 'Call', 'Call', 'Call'])]": 1, "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['Assign', 'While', 'If', 'Expr']), ('orelse', [])]": 1, "BinOp -> [('left', 'BinOp'), ('op', 'Sub'), ('right', 'Subscript')]": 1, "Module -> [('body', ['Import', 'Print', 'Print', 'Print', 'Assign', 'Print', 'Print', 'Print'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If']), ('decorator_list', [])]": 42, "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign', 'If', 'If', 'Assign', 'Assign', 'If', 'If', 'If']), ('orelse', [])]": 1, "BinOp -> [('left', 'List'), ('op', 'Add'), ('right', 'BoolOp')]": 3, "For -> [('target', 'Name'), ('iter', 'Subscript'), ('body', ['If', 'Expr', 'Expr']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "If -> [('test', 'Attribute'), ('body', ['Assign', 'Assign', 'FunctionDef', 'Expr']), ('orelse', [])]": 2, "Call -> [('func', 'Attribute'), ('args', ['BoolOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 58, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ClassDef', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'For', 'Return']), ('decorator_list', ['Call'])]": 2, "ExceptHandler -> [('type', 'NoneType'), ('name', 'NoneType'), ('body', ['Expr', 'Expr', 'Expr', 'Return'])]": 1, "If -> [('test', 'Subscript'), ('body', ['Return']), ('orelse', [])]": 3, "List -> [('elts', ['Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call']), ('ctx', 'Load')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assert', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Print']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Num', 'Num', 'Num', 'Num', 'Attribute', 'BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "While -> [('test', 'Num'), ('body', ['TryExcept', 'Expr']), ('orelse', [])]": 2, "If -> [('test', 'Name'), ('body', ['Assign', 'Expr']), ('orelse', ['Expr'])]": 4, "Expr -> [('value', 'BinOp')]": 9, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'TryExcept', 'If', 'Assign', 'Assign', 'If', 'TryExcept', 'Return']), ('decorator_list', ['Name', 'Name', 'Call', 'Call'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'If', 'Return']), ('decorator_list', [])]": 17, "If -> [('test', 'Compare'), ('body', ['Assign', 'If', 'If', 'FunctionDef', 'Assign', 'Expr', 'Expr', 'Expr']), ('orelse', [])]": 1, "For -> [('target', 'Tuple'), ('iter', 'Name'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign']), ('orelse', [])]": 1, "Attribute -> [('value', 'Subscript'), ('attr', 'str'), ('ctx', 'Store')]": 88, "If -> [('test', 'Name'), ('body', ['ClassDef']), ('orelse', [])]": 1, "BinOp -> [('left', 'Str'), ('op', 'Mod'), ('right', 'BinOp')]": 47, "TryExcept -> [('body', ['Import', 'Print']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 1, "TryExcept -> [('body', ['ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 2, "If -> [('test', 'UnaryOp'), ('body', ['If']), ('orelse', [])]": 40, "arguments -> [('args', ['Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Num', 'Str'])]": 2, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Num', 'Call']), ('keywords', ['keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['If', 'Expr', 'Assign']), ('orelse', [])]": 1, "If -> [('test', 'Call'), ('body', ['Assign', 'AugAssign', 'Return']), ('orelse', ['If'])]": 1, "Tuple -> [('elts', ['Name', 'Name', 'Attribute', 'Call']), ('ctx', 'Load')]": 1, "Tuple -> [('elts', ['Attribute', 'Name', 'Str']), ('ctx', 'Load')]": 4, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Tuple'])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'If', 'Return']), ('orelse', [])]": 2, "Module -> [('body', ['Import', 'Import', 'Import', 'Expr', 'Assign', 'Expr', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Expr', 'ImportFrom', 'ImportFrom', 'Expr', 'ImportFrom', 'Expr', 'ImportFrom', 'Expr', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'While', 'Expr']), ('decorator_list', [])]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Global', 'Assign', 'FunctionDef', 'Return']), ('decorator_list', [])]": 2, "Tuple -> [('elts', ['Subscript', 'Name']), ('ctx', 'Store')]": 2, "Tuple -> [('elts', ['List', 'Dict']), ('ctx', 'Load')]": 2, "Tuple -> [('elts', ['Tuple', 'Call']), ('ctx', 'Load')]": 4, "For -> [('target', 'Name'), ('iter', 'Tuple'), ('body', ['Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr']), ('orelse', [])]": 2, "List -> [('elts', ['Attribute', 'Str', 'Name']), ('ctx', 'Load')]": 6, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assert', 'If', 'If', 'If']), ('decorator_list', [])]": 2, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign']), ('orelse', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Attribute', 'Name', 'Attribute', 'Attribute', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'Assign', 'Assign', 'If', 'If', 'Assign', 'Assign', 'If', 'Return']), ('decorator_list', ['Attribute'])]": 1, "Call -> [('func', 'Name'), ('args', ['Str', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 49, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Tuple', 'Dict', 'Str', 'Name', 'Name'])]": 1, "List -> [('elts', ['Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num']), ('ctx', 'Load')]": 1, "Dict -> [('keys', ['Str', 'Str']), ('values', ['Name', 'Lambda'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 6, "If -> [('test', 'Name'), ('body', ['Assign', 'If', 'Expr']), ('orelse', [])]": 7, "ExceptHandler -> [('type', 'Name'), ('name', 'Name'), ('body', ['Expr', 'TryExcept', 'Return'])]": 1, "BinOp -> [('left', 'Subscript'), ('op', 'Add'), ('right', 'Attribute')]": 7, "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign', 'Expr', 'If', 'Assign', 'Expr']), ('orelse', ['Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'If', 'If', 'Assign', 'Assign'])]": 1, "List -> [('elts', ['Call', 'Name', 'Name', 'Name', 'Name']), ('ctx', 'Load')]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'ClassDef', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'FunctionDef'])]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ClassDef', 'FunctionDef', 'If'])]": 1, "TryExcept -> [('body', ['Assign', 'If', 'If', 'If', 'Assign', 'If']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "If -> [('test', 'BoolOp'), ('body', ['Assign', 'If', 'If', 'Assign', 'Assign', 'If', 'If', 'If', 'If', 'If']), ('orelse', [])]": 1, "Call -> [('func', 'Name'), ('args', []), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 31, "While -> [('test', 'Compare'), ('body', ['Assign']), ('orelse', [])]": 6, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Subscript', 'Name', 'Name', 'Subscript', 'Subscript', 'BinOp'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'AugAssign', 'Assign', 'If', 'If', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'If', 'Assign', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "ExceptHandler -> [('type', 'NoneType'), ('name', 'NoneType'), ('body', ['ImportFrom', 'Assign'])]": 1, "List -> [('elts', ['Str', 'Str', 'Attribute', 'Str', 'Attribute']), ('ctx', 'Load')]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['Name', 'Str', 'List'])]": 1, "ExceptHandler -> [('type', 'Attribute'), ('name', 'NoneType'), ('body', ['Assign', 'Assign', 'Assign'])]": 1, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'If', 'If', 'Assign', 'Expr', 'If', 'If']), ('orelse', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'Assign']), ('orelse', ['Assign', 'Assign', 'Assign'])]": 1, "If -> [('test', 'Compare'), ('body', ['AugAssign', 'Break']), ('orelse', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'FunctionDef', 'FunctionDef']), ('decorator_list', ['Call'])]": 1, "For -> [('target', 'Name'), ('iter', 'Tuple'), ('body', ['For']), ('orelse', [])]": 8, "ExceptHandler -> [('type', 'Tuple'), ('name', 'Name'), ('body', ['Assign', 'Raise'])]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'Assign', 'If', 'If', 'If', 'If', 'Return']), ('decorator_list', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Attribute']), ('keywords', []), ('starargs', 'Name'), ('kwargs', 'Name')]": 2, "If -> [('test', 'Compare'), ('body', ['Expr', 'AugAssign']), ('orelse', [])]": 2, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['For', 'Assign', 'Assign', 'For']), ('orelse', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'AugAssign']), ('orelse', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['If']), ('orelse', ['Return'])]": 1, "Compare -> [('left', 'Name'), ('ops', ['IsNot']), ('comparators', ['Name'])]": 635, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "ExceptHandler -> [('type', 'Attribute'), ('name', 'Name'), ('body', ['If', 'Assign'])]": 1, "If -> [('test', 'Name'), ('body', ['While']), ('orelse', [])]": 2, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Expr']), ('orelse', ['If'])]": 3, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Name'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assert', 'Assign']), ('decorator_list', [])]": 16, "Compare -> [('left', 'Str'), ('ops', ['In']), ('comparators', ['Attribute'])]": 230, "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef'])]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'Import', 'ImportFrom', 'ImportFrom', 'Import', 'FunctionDef'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Expr', 'ImportFrom', 'Assign', 'Return']), ('decorator_list', ['Call'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'For', 'For', 'For', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Expr', 'If', 'Expr']), ('decorator_list', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Name', 'Call', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 7, "Call -> [('func', 'Attribute'), ('args', ['Name']), ('keywords', ['keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 118, "For -> [('target', 'Name'), ('iter', 'Subscript'), ('body', ['Assign', 'Assign', 'Expr', 'Expr', 'Expr']), ('orelse', [])]": 1, "AugAssign -> [('target', 'Attribute'), ('op', 'Sub'), ('value', 'Call')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If']), ('decorator_list', ['Name', 'Name'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'If', 'Assign', 'For', 'Assign', 'Assign', 'Assign', 'Assign', 'TryFinally', 'For']), ('decorator_list', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Name', 'Name']), ('keywords', []), ('starargs', 'Name'), ('kwargs', 'Name')]": 5, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'Assign', 'For', 'Return']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assert', 'Expr', 'Expr']), ('decorator_list', [])]": 2, "TryExcept -> [('body', ['Expr', 'Assign', 'Expr']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 3, "BoolOp -> [('op', 'And'), ('values', ['Attribute', 'Attribute', 'Attribute'])]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'If', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Expr', 'Expr', 'Assign', 'Expr']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 2, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['If', 'Assert', 'Print', 'Print', 'Assign', 'If', 'If', 'Print', 'Print', 'For', 'Expr', 'Assign', 'Assign', 'Print', 'Assign', 'Assign', 'Expr', 'Assign']), ('orelse', [])]": 1, "ExceptHandler -> [('type', 'NoneType'), ('name', 'NoneType'), ('body', ['Expr', 'If'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'If', 'Assign', 'If', 'If', 'If', 'If', 'Assign', 'Expr', 'If']), ('decorator_list', [])]": 1, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'ClassDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'If', 'Expr', 'Return']), ('decorator_list', [])]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign']), ('decorator_list', ['Call'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assert', 'Assign', 'If']), ('decorator_list', [])]": 9, "Module -> [('body', ['Import', 'ImportFrom', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'ImportFrom', 'ImportFrom', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'ClassDef', 'ClassDef'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'If', 'Assign', 'If', 'Expr', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Print', 'Assign']), ('orelse', ['Print', 'Return'])]": 1, "BinOp -> [('left', 'Str'), ('op', 'Mult'), ('right', 'Call')]": 9, "If -> [('test', 'Call'), ('body', ['Expr', 'Expr', 'Expr', 'Return']), ('orelse', ['Expr', 'Expr', 'Expr', 'Return'])]": 1, "For -> [('target', 'Name'), ('iter', 'Tuple'), ('body', ['Expr', 'Expr']), ('orelse', [])]": 5, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Assign', 'If', 'If', 'Assign', 'For', 'If', 'If', 'Return']), ('decorator_list', [])]": 1, "List -> [('elts', ['Str', 'Str', 'Name', 'Str', 'Str', 'Attribute']), ('ctx', 'Load')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assert', 'If']), ('decorator_list', [])]": 1, "BoolOp -> [('op', 'And'), ('values', ['UnaryOp', 'Compare'])]": 54, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'If', 'Expr', 'ImportFrom', 'Expr', 'ImportFrom', 'Expr', 'Expr', 'Expr', 'If', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 8, "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['Assert', 'If']), ('orelse', [])]": 2, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'Assign', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "While -> [('test', 'Compare'), ('body', ['Assign', 'If', 'Assign']), ('orelse', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'If', 'For']), ('decorator_list', [])]": 1, "BinOp -> [('left', 'Num'), ('op', 'Pow'), ('right', 'Call')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'If']), ('decorator_list', ['Name'])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'If', 'AugAssign', 'Assign', 'If', 'Assign', 'AugAssign']), ('orelse', [])]": 1, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'Import', 'ImportFrom', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Str', 'Num', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "List -> [('elts', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('ctx', 'Load')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'For', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['AugAssign']), ('orelse', ['Break'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Assign', 'With', 'Expr']), ('decorator_list', [])]": 1, "With -> [('context_expr', 'Call'), ('optional_vars', 'Name'), ('body', ['Print', 'Expr', 'Expr', 'Expr', 'Expr'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'While']), ('decorator_list', ['Attribute'])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 6, "Compare -> [('left', 'Name'), ('ops', ['GtE']), ('comparators', ['Subscript'])]": 24, "ClassDef -> [('name', 'str'), ('bases', ['Name', 'Attribute']), ('body', ['Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['Str', 'Attribute', 'Str'])]": 4, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'TryExcept', 'Assign', 'Assign', 'TryExcept', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 1, "Assign -> [('targets', ['Attribute']), ('value', 'List')]": 496, "List -> [('elts', ['BinOp', 'Str', 'BinOp', 'Str']), ('ctx', 'Load')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'Expr', 'Expr', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'If', 'Assign', 'Assign', 'If', 'If', 'If']), ('decorator_list', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Attribute', 'Lambda', 'Name', 'Name', 'Subscript', 'Subscript', 'Subscript', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 25, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'If', 'For', 'Expr']), ('decorator_list', [])]": 1, "TryFinally -> [('body', ['Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr']), ('finalbody', ['Expr', 'Expr'])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Expr', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 7, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Import', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Global', 'Assign', 'Assign', 'If', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 1, "BinOp -> [('left', 'BinOp'), ('op', 'Mult'), ('right', 'Attribute')]": 18, "arguments -> [('args', ['Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Dict', 'Name'])]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['FunctionDef', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'Assign', 'If', 'Expr', 'Expr']), ('decorator_list', ['Name'])]": 1, "Dict -> [('keys', ['Str', 'Str']), ('values', ['Num', 'Name'])]": 14, "Module -> [('body', ['Import', 'Import', 'Import', 'ImportFrom', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'For', 'If']), ('orelse', [])]": 6, "Compare -> [('left', 'Attribute'), ('ops', ['GtE']), ('comparators', ['Call'])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Assign', 'ClassDef', 'FunctionDef']), ('decorator_list', [])]": 3, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['If', 'Delete']), ('orelse', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'If', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'If', 'If', 'Print', 'Assign', 'If', 'Assign', 'Expr', 'Expr', 'Assign', 'Print']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['If', 'Assign', 'Assign', 'For', 'Expr', 'Expr']), ('orelse', [])]": 1, "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'If', 'ClassDef'])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'If', 'Expr', 'Return']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'If', 'For', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Str', 'Str', 'Name', 'Name', 'Name'])]": 1, "If -> [('test', 'Attribute'), ('body', ['If']), ('orelse', ['If'])]": 5, "Compare -> [('left', 'BinOp'), ('ops', ['LtE']), ('comparators', ['Name'])]": 3, "If -> [('test', 'Compare'), ('body', ['TryExcept']), ('orelse', ['Return'])]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "BinOp -> [('left', 'UnaryOp'), ('op', 'Mult'), ('right', 'Name')]": 2, "If -> [('test', 'BoolOp'), ('body', ['Assign', 'If', 'Assign', 'If', 'AugAssign', 'Assign', 'Assign', 'Assign', 'Assign', 'If']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "If -> [('test', 'Attribute'), ('body', ['Assign', 'Assign', 'If']), ('orelse', [])]": 5, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Attribute', 'Attribute', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'If', 'If', 'Expr']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'List', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "If -> [('test', 'Attribute'), ('body', ['Assign', 'Assign', 'For']), ('orelse', [])]": 1, "TryExcept -> [('body', ['Assign', 'Assign', 'Return']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 24, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'TryExcept', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Name', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 357, "BinOp -> [('left', 'Call'), ('op', 'Mod'), ('right', 'Name')]": 55, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'TryExcept']), ('decorator_list', ['Name'])]": 1, "Lambda -> [('args', 'arguments'), ('body', 'Str')]": 90, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'str'), ('defaults', ['Dict', 'Name', 'Name'])]": 4, "Call -> [('func', 'Attribute'), ('args', ['UnaryOp', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'FunctionDef', 'If']), ('decorator_list', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'For']), ('decorator_list', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Attribute', 'Str', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 6, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'FunctionDef', 'ClassDef'])]": 1, "If -> [('test', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'If', 'Assign', 'Assert', 'Assert', 'If', 'Assign', 'If', 'If', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assert']), ('decorator_list', [])]": 4, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'For', 'Assign', 'Expr', 'For']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'TryExcept', 'TryExcept', 'For', 'If']), ('orelse', [])]": 2, "AugAssign -> [('target', 'Subscript'), ('op', 'Add'), ('value', 'Num')]": 32, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'For', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('orelse', [])]": 1, "If -> [('test', 'Name'), ('body', ['If']), ('orelse', ['Expr', 'If', 'Return'])]": 2, "If -> [('test', 'BoolOp'), ('body', ['TryExcept', 'Raise']), ('orelse', [])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'ImportFrom', 'Expr', 'Expr', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'Assign', 'For', 'Assign']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str']), ('values', ['Attribute', 'Name', 'Name', 'Name'])]": 3, "Tuple -> [('elts', ['Str', 'Str', 'Str', 'Str', 'Str']), ('ctx', 'Load')]": 36, "Call -> [('func', 'Attribute'), ('args', ['Call', 'Call', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'Name')]": 11, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('orelse', [])]": 1, "Assign -> [('targets', ['Name']), ('value', 'Attribute')]": 2163, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr']), ('orelse', ['If'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name']), ('keywords', []), ('starargs', 'Name'), ('kwargs', 'Name')]": 54, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'ClassDef', 'If'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['FunctionDef', 'FunctionDef', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "Dict -> [('keys', ['Subscript', 'Str', 'Str']), ('values', ['List', 'Str', 'Str'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'If', 'If', 'Global', 'Assign', 'Global', 'Assign']), ('decorator_list', [])]": 1, "For -> [('target', 'Tuple'), ('iter', 'Name'), ('body', ['Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('orelse', [])]": 1, "If -> [('test', 'Attribute'), ('body', ['FunctionDef']), ('orelse', ['FunctionDef'])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Attribute', 'Name', 'Name', 'Attribute', 'Call', 'Attribute', 'BinOp', 'Call', 'Call', 'Attribute', 'Attribute', 'Attribute', 'Attribute'])]": 1, "Tuple -> [('elts', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('ctx', 'Load')]": 3, "If -> [('test', 'Compare'), ('body', ['Expr']), ('orelse', ['If', 'Assign'])]": 1, "Call -> [('func', 'Name'), ('args', ['List', 'Dict']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 3, "If -> [('test', 'Call'), ('body', ['Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'If']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'If', 'Assign', 'Assign']), ('decorator_list', [])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Str', 'Str', 'Str', 'Str', 'Call', 'Call', 'Str', 'Call', 'Call'])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str']), ('values', ['Num', 'Num', 'Num', 'Num'])]": 5, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'TryExcept']), ('decorator_list', [])]": 55, "If -> [('test', 'Compare'), ('body', ['Assign', 'If', 'ImportFrom', 'Import', 'Assign', 'Assign', 'If', 'Expr', 'Assign', 'Return']), ('orelse', ['Return'])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign']), ('decorator_list', [])]": 56, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'For', 'Assign', 'Assign', 'While', 'Print', 'Print', 'Print', 'Print']), ('decorator_list', [])]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'ClassDef', 'FunctionDef', 'FunctionDef', 'If'])]": 1, "If -> [('test', 'Attribute'), ('body', ['If', 'If', 'If', 'Assign', 'Assign', 'Assign', 'If']), ('orelse', [])]": 2, "Tuple -> [('elts', ['Subscript', 'Name', 'Subscript', 'Name']), ('ctx', 'Load')]": 1, "ExceptHandler -> [('type', 'NoneType'), ('name', 'NoneType'), ('body', ['Assign', 'Assign', 'Assign', 'AugAssign'])]": 1, "Dict -> [('keys', ['Name', 'Name', 'Name']), ('values', ['Str', 'Str', 'Str'])]": 2, "While -> [('test', 'Call'), ('body', ['TryExcept']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'If', 'Assign']), ('decorator_list', ['Name', 'Attribute'])]": 1, "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['Break'])]": 7, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 2, "If -> [('test', 'Attribute'), ('body', ['Assign']), ('orelse', ['Expr', 'Assign'])]": 1, "Compare -> [('left', 'Subscript'), ('ops', ['Gt']), ('comparators', ['Num'])]": 12, "arguments -> [('args', ['Name']), ('vararg', 'NoneType'), ('kwarg', 'str'), ('defaults', ['Name'])]": 1, "Call -> [('func', 'Name'), ('args', ['Lambda', 'Name', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "List -> [('elts', ['Dict', 'Dict']), ('ctx', 'Load')]": 30, "BinOp -> [('left', 'Attribute'), ('op', 'Div'), ('right', 'Attribute')]": 5, "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['ClassDef'])]": 4, "AugAssign -> [('target', 'Name'), ('op', 'Add'), ('value', 'Call')]": 180, "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'For', 'For', 'For', 'If', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'For', 'Assign']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['Assign', 'For', 'If', 'Expr']), ('orelse', [])]": 2, "For -> [('target', 'Name'), ('iter', 'Subscript'), ('body', ['If', 'Expr']), ('orelse', [])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Attribute', 'Name', 'Attribute', 'Name'])]": 1, "TryExcept -> [('body', ['Expr', 'Assign', 'If', 'Expr']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 1, "BinOp -> [('left', 'Num'), ('op', 'LShift'), ('right', 'Name')]": 9, "Tuple -> [('elts', ['BinOp', 'Subscript', 'Subscript']), ('ctx', 'Load')]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Call', 'Call', 'BinOp', 'Name', 'Name', 'Name', 'Call', 'BinOp'])]": 1, "Compare -> [('left', 'Name'), ('ops', ['NotEq']), ('comparators', ['Num'])]": 60, "TryExcept -> [('body', ['Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'If', 'Return']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 4, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 247, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'Expr', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'FunctionDef', 'FunctionDef', 'ClassDef', 'ClassDef', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'If'])]": 1, "If -> [('test', 'Call'), ('body', ['Assign', 'Assign', 'Assert']), ('orelse', [])]": 1, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'FunctionDef', 'Assign', 'ClassDef'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assert', 'If', 'TryExcept', 'If', 'Assign', 'Expr', 'Return']), ('decorator_list', ['Name'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 34, "If -> [('test', 'Name'), ('body', ['Assign', 'Assign', 'If', 'Expr', 'If']), ('orelse', [])]": 1, "Tuple -> [('elts', ['BinOp', 'Name', 'Name', 'Name', 'Name', 'Attribute']), ('ctx', 'Load')]": 1, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['If', 'Expr', 'Assign', 'If', 'Assign', 'Assign', 'Expr', 'If', 'If', 'Assign']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Import', 'Assign', 'Return']), ('decorator_list', [])]": 1, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'Import', 'TryExcept', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'FunctionDef', 'ClassDef', 'ClassDef', 'Expr', 'Expr'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'If', 'ImportFrom', 'ImportFrom', 'ClassDef'])]": 1, "TryFinally -> [('body', ['Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr']), ('finalbody', ['Expr', 'Expr'])]": 1, "Tuple -> [('elts', ['Attribute', 'Call', 'Name', 'Name']), ('ctx', 'Load')]": 1, "ExceptHandler -> [('type', 'Attribute'), ('name', 'Name'), ('body', ['Assign', 'If', 'Raise'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assert', 'Assign', 'For', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'If', 'Assign', 'Assign', 'If', 'Assign', 'Return']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Subscript'), ('body', ['Assign', 'For']), ('orelse', [])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Attribute']), ('values', ['Name', 'Call', 'Call', 'Name', 'BoolOp', 'Name', 'Attribute', 'Name', 'Name', 'Attribute'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Print', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['With', 'Expr', 'Return']), ('orelse', [])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple'])]": 1, "Call -> [('func', 'Name'), ('args', ['Call', 'Str']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assert', 'Assert', 'Assert', 'Assert', 'Assert', 'Assert']), ('decorator_list', [])]": 1, "While -> [('test', 'BoolOp'), ('body', ['AugAssign']), ('orelse', [])]": 16, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Tuple', 'Call', 'Call', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['TryExcept', 'Assign', 'Assign', 'Expr', 'If', 'Assert', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'Attribute'), ('body', ['If']), ('orelse', ['Expr'])]": 1, "Compare -> [('left', 'Attribute'), ('ops', ['Eq']), ('comparators', ['Attribute'])]": 202, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['If', 'If', 'If', 'If']), ('orelse', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Print', 'Expr', 'Import', 'If', 'If']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Delete', 'Delete', 'Assign', 'Assign', 'Delete', 'Assign']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'Expr']), ('orelse', [])]": 1, "Call -> [('func', 'Name'), ('args', []), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 55, "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'Assign', 'If', 'If', 'Assign']), ('orelse', [])]": 2, "TryExcept -> [('body', ['ImportFrom']), ('handlers', ['ExceptHandler']), ('orelse', ['Assign'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 2, "Compare -> [('left', 'Name'), ('ops', ['In']), ('comparators', ['BinOp'])]": 2, "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['Attribute', 'Str', 'Str'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['If']), ('orelse', ['Assert'])]": 2, "List -> [('elts', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('ctx', 'Load')]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Import', 'Return']), ('decorator_list', [])]": 2, "If -> [('test', 'Compare'), ('body', ['Print']), ('orelse', ['Assign', 'Assign', 'Assign', 'Assign', 'If', 'TryExcept'])]": 1, "List -> [('elts', ['Str', 'Str', 'Str', 'Str', 'Name']), ('ctx', 'Load')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Print', 'Print', 'Assign', 'Expr', 'Expr', 'If', 'Print', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['FunctionDef', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'For', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'For', 'Expr', 'Expr', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]": 7, "Tuple -> [('elts', ['BoolOp', 'Call', 'Name']), ('ctx', 'Load')]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Str'])]": 19, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['If', 'Assign', 'Assign', 'If', 'AugAssign']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'For', 'Expr', 'Return']), ('decorator_list', ['Attribute'])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str']), ('values', ['Str', 'Str', 'Name', 'Attribute'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'For']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Expr']), ('orelse', ['Assign', 'Assign', 'Assign', 'Expr'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Str', 'List']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 12, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'While', 'Assign']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assert', 'If', 'Assign', 'Return']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Tuple', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "If -> [('test', 'Attribute'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'For']), ('orelse', [])]": 2, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'TryExcept', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'TryExcept', 'Expr', 'Expr', 'Return']), ('orelse', [])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Str', 'Str', 'Dict', 'Name'])]": 1, "ExceptHandler -> [('type', 'NoneType'), ('name', 'NoneType'), ('body', ['Return'])]": 43, "Module -> [('body', ['Import', 'Import', 'Expr', 'ImportFrom', 'Expr', 'Expr', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Expr', 'Expr', 'Expr', 'Expr', 'Import', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Import', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign'])]": 1, "Call -> [('func', 'Name'), ('args', ['Subscript', 'Subscript', 'Num', 'Num', 'Attribute']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Module -> [('body', ['Import', 'Import', 'Expr', 'Assign', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'FunctionDef', 'Expr', 'Expr'])]": 1, "List -> [('elts', ['Tuple', 'Call', 'Call']), ('ctx', 'Load')]": 4, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assert', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Return']), ('decorator_list', [])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Call', 'Attribute', 'Call'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Pass']), ('decorator_list', ['Name', 'Name', 'Call'])]": 2, "If -> [('test', 'UnaryOp'), ('body', ['AugAssign', 'AugAssign']), ('orelse', [])]": 2, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str']), ('values', ['BinOp', 'BinOp', 'BinOp', 'BinOp'])]": 1, "If -> [('test', 'Attribute'), ('body', ['Assign', 'Assign', 'Assign']), ('orelse', ['Assign', 'Assign'])]": 1, "Module -> [('body', ['Import', 'Assign', 'Expr', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'For', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'For', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Print', 'Print', 'Expr', 'Expr', 'Expr', 'Expr'])]": 1, "ExceptHandler -> [('type', 'Name'), ('name', 'Name'), ('body', ['Print', 'Assign'])]": 2, "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]": 1, "Tuple -> [('elts', ['Name', 'Name', 'Name']), ('ctx', 'Store')]": 394, "Slice -> [('lower', 'NoneType'), ('upper', 'NoneType'), ('step', 'Name')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Return']), ('decorator_list', ['Call'])]": 1, "Call -> [('func', 'Call'), ('args', ['Attribute', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Attribute', 'Name']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "BoolOp -> [('op', 'And'), ('values', ['Compare', 'Compare', 'Compare'])]": 19, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Name', 'Call', 'Call', 'Num', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'Expr', 'Expr', 'Expr']), ('orelse', [])]": 2, "Module -> [('body', ['Import', 'Import', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'If'])]": 1, "Compare -> [('left', 'Subscript'), ('ops', ['Gt']), ('comparators', ['BinOp'])]": 2, "BoolOp -> [('op', 'And'), ('values', ['Name', 'UnaryOp', 'BoolOp'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Num', 'Attribute', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['FunctionDef', 'ClassDef', 'ClassDef']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'TryExcept', 'TryExcept', 'Assign', 'Assign', 'For', 'If', 'If', 'If', 'Return']), ('decorator_list', ['Name', 'Name', 'Call'])]": 1, "If -> [('test', 'Compare'), ('body', ['If']), ('orelse', ['If'])]": 69, "If -> [('test', 'Name'), ('body', ['If', 'TryExcept']), ('orelse', ['Break'])]": 1, "BinOp -> [('left', 'Num'), ('op', 'Div'), ('right', 'Num')]": 42, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "If -> [('test', 'Call'), ('body', ['Import', 'Assign']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr']), ('decorator_list', ['Attribute'])]": 4, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Dict', 'Dict', 'Dict', 'Dict', 'Dict', 'Dict', 'Dict', 'Dict', 'Dict', 'Dict', 'Dict', 'Dict', 'Dict', 'Dict', 'Dict'])]": 2, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str']), ('values', ['Dict', 'Str', 'Str', 'Str'])]": 8, "Call -> [('func', 'Name'), ('args', ['Name', 'Name', 'Name', 'BinOp', 'BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "If -> [('test', 'Call'), ('body', ['Assign', 'AugAssign']), ('orelse', [])]": 2, "If -> [('test', 'Compare'), ('body', ['Assign', 'If']), ('orelse', ['If'])]": 19, "While -> [('test', 'UnaryOp'), ('body', ['TryExcept']), ('orelse', [])]": 4, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 2, "Dict -> [('keys', ['Str', 'Str', 'BinOp']), ('values', ['Name', 'Name', 'Name'])]": 2, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 39, "Call -> [('func', 'Attribute'), ('args', ['Subscript', 'Dict']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 10, "Tuple -> [('elts', ['Name', 'Attribute', 'Attribute', 'Name', 'Name']), ('ctx', 'Load')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'ImportFrom', 'Assign', 'If', 'Assign', 'Delete', 'Return']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name']), ('keywords', ['keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 12, "Call -> [('func', 'Attribute'), ('args', ['Subscript', 'Num']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'If']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'AugAssign', 'AugAssign']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'Assign', 'TryExcept']), ('decorator_list', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "Tuple -> [('elts', ['Call', 'Subscript']), ('ctx', 'Load')]": 16, "arguments -> [('args', ['Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'str'), ('defaults', ['Attribute'])]": 6, "Dict -> [('keys', ['Str', 'Str']), ('values', ['Num', 'Num'])]": 15, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assert', 'Assign', 'Assert', 'Assert', 'Assert', 'If', 'If', 'Assign', 'Assert', 'Assign', 'Assert']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'Assign', 'Assign', 'Return']), ('decorator_list', ['Name'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]": 5, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'Assign']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'If', 'Assign', 'Assign', 'For']), ('decorator_list', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Name', 'Num', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'If'])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 5, "Call -> [('func', 'Name'), ('args', ['Name', 'Attribute', 'Name', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "If -> [('test', 'Compare'), ('body', ['Assign']), ('orelse', ['If', 'Assign'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'FunctionDef', 'If', 'Return']), ('decorator_list', [])]": 1, "TryExcept -> [('body', ['Expr', 'If']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'With', 'Expr']), ('decorator_list', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Assign']), ('decorator_list', [])]": 10, "comprehension -> [('target', 'Tuple'), ('iter', 'GeneratorExp'), ('ifs', [])]": 3, "ListComp -> [('elt', 'IfExp'), ('generators', ['comprehension'])]": 2, "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'For']), ('orelse', [])]": 1, "Module -> [('body', ['Import', 'ImportFrom', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef'])]": 1, "If -> [('test', 'Call'), ('body', ['Assign', 'Return']), ('orelse', ['Raise'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'FunctionDef', 'Assign', 'If', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', ['Name', 'Name'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'For', 'Expr', 'Assign', 'Assign', 'Assign', 'For', 'Expr', 'Expr', 'Expr', 'For']), ('decorator_list', [])]": 1, "Module -> [('body', ['Import', 'ImportFrom', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'Assign', 'FunctionDef', 'Assign', 'ClassDef'])]": 1, "If -> [('test', 'Name'), ('body', ['Assign', 'Expr', 'Expr', 'Return']), ('orelse', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "Raise -> [('type', 'Name'), ('inst', 'BinOp'), ('tback', 'NoneType')]": 43, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'FunctionDef', 'Assign', 'Assign', 'If', 'If', 'Return']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['BinOp', 'Name']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 6, "If -> [('test', 'Compare'), ('body', ['Print', 'Expr', 'Expr']), ('orelse', [])]": 2, "Print -> [('dest', 'NoneType'), ('values', ['Name', 'Name', 'Name', 'Name']), ('nl', 'bool')]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 23, "If -> [('test', 'Compare'), ('body', ['FunctionDef', 'Assign', 'Expr', 'Expr', 'Expr']), ('orelse', [])]": 2, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'ClassDef', 'Assign', 'ClassDef', 'ClassDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'ClassDef', 'ClassDef', 'ClassDef'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Tuple', 'Num', 'Num', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "BoolOp -> [('op', 'Or'), ('values', ['Attribute', 'BoolOp'])]": 11, "If -> [('test', 'Attribute'), ('body', ['Assign', 'Assign', 'Assign', 'If']), ('orelse', [])]": 1, "Dict -> [('keys', ['Name', 'Name']), ('values', ['Name', 'Name'])]": 6, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', ['Name'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assert', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'For', 'TryExcept', 'For', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', []), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'Call')]": 5, "Compare -> [('left', 'Name'), ('ops', ['LtE']), ('comparators', ['Subscript'])]": 19, "If -> [('test', 'Compare'), ('body', ['If', 'Assign', 'Return']), ('orelse', ['If'])]": 2, "List -> [('elts', ['Call', 'Call', 'Str', 'Str']), ('ctx', 'Load')]": 1, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Str', 'Attribute']), ('keywords', ['keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 4, "BinOp -> [('left', 'Num'), ('op', 'Sub'), ('right', 'Subscript')]": 4, "If -> [('test', 'Name'), ('body', ['Pass']), ('orelse', ['Expr'])]": 1, "arguments -> [('args', []), ('vararg', 'str'), ('kwarg', 'NoneType'), ('defaults', [])]": 200, "If -> [('test', 'Compare'), ('body', ['TryExcept', 'Assign']), ('orelse', [])]": 1, "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign', 'Expr']), ('orelse', ['Raise'])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str']), ('values', ['Str', 'Str', 'Str', 'List'])]": 1, "Tuple -> [('elts', ['Subscript', 'Name', 'Subscript', 'Subscript', 'Subscript', 'Name', 'Name', 'Subscript', 'Name']), ('ctx', 'Load')]": 1, "If -> [('test', 'Compare'), ('body', ['Expr', 'Assign', 'Assign']), ('orelse', ['Assign', 'Assign', 'Assign'])]": 1, "If -> [('test', 'Call'), ('body', ['Assign', 'Assign', 'Expr', 'FunctionDef', 'Assign', 'If', 'If', 'Assign', 'For']), ('orelse', ['If'])]": 1, "If -> [('test', 'Call'), ('body', ['Expr', 'Assign', 'Return']), ('orelse', ['Assign', 'Assign', 'Return'])]": 1, "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['Expr', 'AugAssign']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'TryExcept', 'Return']), ('decorator_list', ['Name'])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Expr', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'Expr', 'If']), ('decorator_list', [])]": 1, "Module -> [('body', ['Import', 'ImportFrom', 'Expr'])]": 1, "If -> [('test', 'Call'), ('body', ['If', 'Assign', 'Assign', 'If', 'If', 'If', 'Return']), ('orelse', [])]": 2, "Compare -> [('left', 'Subscript'), ('ops', ['NotEq']), ('comparators', ['Subscript'])]": 17, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'With']), ('decorator_list', [])]": 1, "Return -> [('value', 'Str')]": 436, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'If', 'Expr', 'Assign', 'Expr', 'Return']), ('decorator_list', ['Call'])]": 1, "Compare -> [('left', 'Call'), ('ops', ['In']), ('comparators', ['Tuple'])]": 31, "List -> [('elts', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('ctx', 'Load')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'AugAssign', 'If', 'AugAssign', 'Assign', 'Assign', 'Assign', 'For', 'If', 'AugAssign', 'If', 'Return']), ('decorator_list', [])]": 1, "comprehension -> [('target', 'Tuple'), ('iter', 'BoolOp'), ('ifs', [])]": 1, "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'ClassDef'])]": 1, "BoolOp -> [('op', 'Or'), ('values', ['UnaryOp', 'UnaryOp', 'UnaryOp'])]": 9, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['TryExcept', 'Expr', 'Expr', 'Expr']), ('decorator_list', ['Attribute'])]": 2, "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'Expr', 'Assign', 'Expr', 'Expr']), ('orelse', [])]": 2, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['For']), ('orelse', [])]": 70, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "With -> [('context_expr', 'Attribute'), ('optional_vars', 'NoneType'), ('body', ['Assert'])]": 4, "Call -> [('func', 'Name'), ('args', ['BinOp', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "TryExcept -> [('body', ['Assign', 'Expr']), ('handlers', ['ExceptHandler', 'ExceptHandler', 'ExceptHandler']), ('orelse', [])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str']), ('values', ['BinOp', 'BinOp', 'Name', 'Name'])]": 2, "Tuple -> [('elts', ['Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num']), ('ctx', 'Load')]": 1, "ClassDef -> [('name', 'str'), ('bases', []), ('body', ['Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'If', 'Assign', 'Assign', 'For', 'Assign']), ('orelse', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Name']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'Name')]": 1, "Module -> [('body', ['Import', 'Assign', 'Expr', 'ImportFrom', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'ImportFrom', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "If -> [('test', 'UnaryOp'), ('body', ['Expr', 'For']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign']), ('decorator_list', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Name', 'Name', 'Name', 'Attribute', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign']), ('orelse', ['Assign'])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str']), ('values', ['Call', 'BinOp', 'Name', 'Name'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Expr', 'FunctionDef', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 2, "For -> [('target', 'Name'), ('iter', 'List'), ('body', ['Assign', 'Assign', 'Assign', 'Expr']), ('orelse', [])]": 2, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'TryExcept', 'Import', 'TryExcept', 'TryExcept', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'Assign'])]": 1, "Return -> [('value', 'Repr')]": 3, "If -> [('test', 'Attribute'), ('body', ['Assign', 'Assign']), ('orelse', [])]": 13, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple']), ('values', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str'])]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'ClassDef', 'ClassDef'])]": 1, "If -> [('test', 'Call'), ('body', ['Return']), ('orelse', ['Expr', 'Raise'])]": 2, "If -> [('test', 'Attribute'), ('body', ['Expr', 'Assign']), ('orelse', ['Expr', 'Assign'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'TryExcept', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'For']), ('decorator_list', [])]": 2, "If -> [('test', 'Compare'), ('body', ['Print', 'Assign', 'Print', 'Assign', 'Assign', 'Expr', 'Print', 'Print', 'Print', 'Assign', 'If']), ('orelse', ['If'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Str']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 9, "keyword -> [('arg', 'str'), ('value', 'List')]": 370, "Call -> [('func', 'Name'), ('args', ['Name', 'List', 'Name']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 4, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'For', 'Assign', 'For', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'For', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'FunctionDef', 'Assign', 'For', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assert', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'TryFinally', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['TryExcept', 'Assign', 'If', 'Print', 'Assign', 'For', 'For']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Expr']), ('orelse', ['Assign', 'Expr'])]": 4, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Expr', 'Expr', 'Assign', 'For']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Print', 'TryExcept', 'If', 'Assign', 'For']), ('decorator_list', [])]": 1, "BinOp -> [('left', 'Str'), ('op', 'Mod'), ('right', 'Dict')]": 32, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'If']), ('orelse', [])]": 1, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['For', 'If', 'For', 'For', 'If']), ('orelse', [])]": 2, "If -> [('test', 'Compare'), ('body', ['If', 'Continue']), ('orelse', ['Expr', 'Break'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assert', 'Expr', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'If', 'Assign', 'If', 'If', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'Assign', 'Return']), ('orelse', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'For', 'Expr', 'Assign']), ('decorator_list', [])]": 2, "Compare -> [('left', 'Str'), ('ops', ['Eq']), ('comparators', ['Call'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'ImportFrom', 'Assign', 'If', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'ImportFrom', 'ImportFrom', 'For', 'Assign', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'ImportFrom', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "While -> [('test', 'Name'), ('body', ['Assign', 'Expr', 'AugAssign']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'For', 'Expr', 'Print']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['For', 'Assign', 'If', 'If']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'FunctionDef', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'If', 'If', 'Assign', 'With']), ('decorator_list', [])]": 1, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['If', 'If', 'For']), ('orelse', [])]": 1, "If -> [('test', 'Name'), ('body', ['Expr']), ('orelse', ['Assign', 'Expr', 'Assign', 'Expr'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'TryExcept', 'Assign', 'For', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'For', 'Expr', 'Expr', 'For', 'For', 'Expr', 'Expr', 'For', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Str', 'Attribute', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['If', 'Print', 'If', 'Expr']), ('orelse', [])]": 1, "If -> [('test', 'Name'), ('body', ['Expr', 'Expr', 'Assign', 'Assign']), ('orelse', ['Expr'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 2, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Expr', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'If'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Num', 'Num', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 19, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'If']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['If', 'Assign', 'If', 'Assign', 'If']), ('orelse', [])]": 1, "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'ClassDef'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Str', 'Call', 'Str'])]": 2, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Attribute']), ('keywords', []), ('starargs', 'Name'), ('kwargs', 'Name')]": 6, "If -> [('test', 'Call'), ('body', ['For']), ('orelse', [])]": 20, "If -> [('test', 'BoolOp'), ('body', ['TryExcept']), ('orelse', [])]": 21, "Call -> [('func', 'Name'), ('args', ['Name', 'List']), ('keywords', []), ('starargs', 'Name'), ('kwargs', 'NoneType')]": 1, "If -> [('test', 'Compare'), ('body', ['ImportFrom', 'Assign', 'Expr', 'Expr', 'Assign']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'FunctionDef', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'FunctionDef', 'Expr', 'FunctionDef', 'Expr', 'FunctionDef', 'Expr', 'Expr', 'Expr', 'Return']), ('decorator_list', [])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['Name', 'Name', 'BoolOp'])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Name', 'Str', 'Name'])]": 1, "If -> [('test', 'Compare'), ('body', ['Expr', 'TryExcept']), ('orelse', [])]": 1, "If -> [('test', 'BinOp'), ('body', ['Assign', 'Assign', 'Assign']), ('orelse', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'If']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assert']), ('orelse', ['If'])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'str'), ('kwarg', 'str'), ('defaults', [])]": 4, "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'List']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 4, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['AugAssign', 'Expr', 'AugAssign', 'Expr']), ('decorator_list', [])]": 1, "If -> [('test', 'Attribute'), ('body', ['Import', 'While']), ('orelse', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Dict', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 4, "Compare -> [('left', 'List'), ('ops', ['In']), ('comparators', ['Attribute'])]": 1, "If -> [('test', 'BoolOp'), ('body', ['Expr', 'Assign', 'Continue']), ('orelse', [])]": 1, "If -> [('test', 'Attribute'), ('body', ['Assert']), ('orelse', [])]": 2, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'Assign']), ('orelse', ['Assign', 'Assign', 'Assign', 'Assign'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'If', 'Assign', 'Assign', 'If', 'If', 'If']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Tuple'), ('body', ['Expr', 'If']), ('orelse', [])]": 3, "While -> [('test', 'Name'), ('body', ['Assign', 'TryExcept', 'If', 'Expr', 'Assign', 'Expr', 'AugAssign', 'If']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Expr', 'If', 'Expr', 'Assign']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Return']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'FunctionDef', 'Assign', 'Assign', 'Expr', 'Return']), ('decorator_list', [])]": 1, "Tuple -> [('elts', ['Tuple', 'Call', 'Call']), ('ctx', 'Load')]": 2, "Call -> [('func', 'Attribute'), ('args', ['Num', 'Str', 'Name']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Str', 'Str']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "If -> [('test', 'Call'), ('body', ['Raise']), ('orelse', ['Assign', 'Assign'])]": 2, "Call -> [('func', 'Attribute'), ('args', []), ('keywords', []), ('starargs', 'Subscript'), ('kwargs', 'Subscript')]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 17, "ExceptHandler -> [('type', 'Attribute'), ('name', 'NoneType'), ('body', ['Assign', 'AugAssign'])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'If', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'If', 'FunctionDef']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Expr', 'If']), ('orelse', ['Break'])]": 2, "List -> [('elts', ['Name', 'Num', 'Num', 'Name']), ('ctx', 'Load')]": 4, "arguments -> [('args', ['Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['List', 'Num'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Attribute', 'Name', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 4, "Assert -> [('test', 'Compare'), ('msg', 'Attribute')]": 20, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'ImportFrom', 'ImportFrom', 'TryExcept', 'If', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "BinOp -> [('left', 'BinOp'), ('op', 'BitAnd'), ('right', 'UnaryOp')]": 1, "arguments -> [('args', ['Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Call'])]": 2, "With -> [('context_expr', 'Call'), ('optional_vars', 'Name'), ('body', ['Assign', 'Assign'])]": 1, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'AugAssign']), ('orelse', [])]": 4, "BoolOp -> [('op', 'And'), ('values', ['Name', 'Name'])]": 79, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'If']), ('decorator_list', ['Name'])]": 2, "If -> [('test', 'Call'), ('body', ['Expr', 'Return']), ('orelse', ['Return'])]": 2, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'ClassDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef']), ('decorator_list', [])]": 2, "For -> [('target', 'Name'), ('iter', 'List'), ('body', ['Assign', 'Print']), ('orelse', [])]": 1, "List -> [('elts', ['Attribute', 'Str']), ('ctx', 'Load')]": 7, "If -> [('test', 'Attribute'), ('body', ['Assign', 'FunctionDef', 'While']), ('orelse', [])]": 1, "BoolOp -> [('op', 'And'), ('values', ['Name', 'Attribute', 'BoolOp'])]": 2, "Call -> [('func', 'Name'), ('args', ['Num', 'Name', 'Num', 'Name', 'Num', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['Attribute', 'Attribute', 'Call'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'TryExcept', 'TryExcept']), ('decorator_list', ['Name', 'Name', 'Call'])]": 1, "TryFinally -> [('body', ['Assign', 'Assign', 'Assign', 'If']), ('finalbody', ['Expr'])]": 1, "If -> [('test', 'BoolOp'), ('body', ['AugAssign']), ('orelse', ['AugAssign'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Tuple', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'Import', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Assign', 'Assign', 'Assign', 'ClassDef', 'FunctionDef', 'Import', 'FunctionDef', 'Import', 'Import', 'If'])]": 1, "TryExcept -> [('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('handlers', ['ExceptHandler', 'ExceptHandler', 'ExceptHandler', 'ExceptHandler']), ('orelse', [])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'str'), ('defaults', ['Str', 'Num'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'Expr', 'With']), ('decorator_list', [])]": 1, "List -> [('elts', ['Call']), ('ctx', 'Load')]": 153, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'TryExcept', 'Assign', 'Assign', 'Assign', 'TryFinally', 'Return']), ('decorator_list', [])]": 2, "Call -> [('func', 'Attribute'), ('args', ['Attribute']), ('keywords', ['keyword']), ('starargs', 'Name'), ('kwargs', 'Name')]": 2, "Module -> [('body', ['Import', 'ImportFrom', 'Import', 'ImportFrom', 'ImportFrom', 'Import', 'ClassDef'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Str', 'Name', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 4, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Str', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'If', 'If', 'Assign', 'Assign', 'For', 'If']), ('orelse', [])]": 1, "Assign -> [('targets', ['Attribute', 'Attribute']), ('value', 'Str')]": 2, "TryExcept -> [('body', ['Assign']), ('handlers', ['ExceptHandler']), ('orelse', ['Assign'])]": 14, "Call -> [('func', 'Attribute'), ('args', ['Str', 'List']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'If']), ('orelse', ['For'])]": 1, "If -> [('test', 'Compare'), ('body', ['Import', 'Import', 'Assign', 'Assign', 'Expr', 'Expr', 'Return']), ('orelse', ['If'])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Str', 'Str', 'Str', 'Str', 'BinOp'])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Num', 'Name', 'Name', 'Name', 'Name', 'Name', 'Str', 'Str', 'Dict'])]": 1, "comprehension -> [('target', 'Name'), ('iter', 'Name'), ('ifs', ['BoolOp'])]": 10, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'str'), ('defaults', ['Name', 'Name', 'Name', 'Name'])]": 9, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Tuple', 'Tuple', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'FunctionDef', 'FunctionDef', 'ClassDef'])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Num'])]": 8, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Tuple', 'Name', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Expr', 'Assign']), ('orelse', [])]": 5, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'If', 'Expr', 'Assign', 'Assign', 'Expr', 'Return']), ('decorator_list', [])]": 2, "Call -> [('func', 'Name'), ('args', ['Attribute', 'Num', 'Num', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'For', 'Assign', 'Expr', 'For', 'Assign', 'Expr', 'Assign', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Expr', 'While']), ('orelse', ['If'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'If', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Name', 'Name', 'Name', 'Name', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "If -> [('test', 'BoolOp'), ('body', ['If', 'Expr', 'Return']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'Assign', 'If', 'Assign', 'If', 'If', 'If', 'Assign', 'Expr', 'If', 'If', 'If', 'If', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Global', 'Assign']), ('decorator_list', [])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Attribute', 'BoolOp', 'Name', 'Compare', 'Call', 'Name'])]": 1, "Compare -> [('left', 'Name'), ('ops', ['Lt']), ('comparators', ['Subscript'])]": 4, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Assign', 'Expr', 'Expr', 'If']), ('orelse', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'For']), ('decorator_list', [])]": 1, "If -> [('test', 'BoolOp'), ('body', ['Print']), ('orelse', ['Assign', 'Assign'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign']), ('decorator_list', [])]": 98, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'Expr', 'Expr', 'If']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'If']), ('decorator_list', ['Name'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Str', 'Dict']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'If', 'TryExcept']), ('decorator_list', ['Name'])]": 1, "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Continue']), ('orelse', [])]": 2, "Call -> [('func', 'Name'), ('args', ['Name', 'Attribute', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 7, "If -> [('test', 'Compare'), ('body', ['Expr', 'TryExcept', 'Return']), ('orelse', ['Return'])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name', 'Attribute']), ('body', ['Assign']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Expr', 'Assign', 'Assign']), ('decorator_list', [])]": 1, "ExceptHandler -> [('type', 'Name'), ('name', 'Name'), ('body', ['Expr', 'Print'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Attribute', 'Str', 'Name']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Return']), ('decorator_list', [])]": 2, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'If', 'If', 'Expr']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'TryExcept', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'TryExcept', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Str', 'Name', 'Str', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 3, "TryExcept -> [('body', ['If', 'Expr', 'Assign']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 2, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Call']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'str'), ('defaults', ['Name', 'Name', 'Name'])]": 1, "List -> [('elts', ['Num', 'Num', 'Num']), ('ctx', 'Load')]": 106, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'If', 'If', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'Assign', 'Expr', 'TryExcept']), ('decorator_list', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Assign', 'FunctionDef', 'Assign', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'Assign']), ('decorator_list', [])]": 1, "ExceptHandler -> [('type', 'NoneType'), ('name', 'NoneType'), ('body', ['Assign', 'Expr', 'Return'])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str']), ('values', ['Str', 'Name', 'Name', 'Dict'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Num', 'Num', 'BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'Return']), ('decorator_list', ['Name'])]": 4, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'FunctionDef', 'Assign', 'If', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'If', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'If', 'Print']), ('orelse', [])]": 3, "Call -> [('func', 'Attribute'), ('args', ['Call', 'Call', 'BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 4, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Expr', 'Expr']), ('orelse', [])]": 26, "If -> [('test', 'Compare'), ('body', ['Assign', 'Expr']), ('orelse', ['Print', 'Raise'])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'For', 'Expr']), ('orelse', ['If'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "Compare -> [('left', 'Str'), ('ops', ['In']), ('comparators', ['Call'])]": 36, "TryExcept -> [('body', ['If']), ('handlers', ['ExceptHandler']), ('orelse', ['Break'])]": 2, "If -> [('test', 'UnaryOp'), ('body', ['Import', 'Assign']), ('orelse', [])]": 1, "BinOp -> [('left', 'Call'), ('op', 'Div'), ('right', 'Attribute')]": 5, "For -> [('target', 'Tuple'), ('iter', 'Subscript'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('orelse', [])]": 2, "Print -> [('dest', 'Attribute'), ('values', []), ('nl', 'bool')]": 1, "BinOp -> [('left', 'BinOp'), ('op', 'Add'), ('right', 'Attribute')]": 88, "Call -> [('func', 'Name'), ('args', ['Attribute', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'Name')]": 1, "Compare -> [('left', 'Name'), ('ops', ['NotEq']), ('comparators', ['BoolOp'])]": 2, "comprehension -> [('target', 'Name'), ('iter', 'BinOp'), ('ifs', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'ClassDef', 'Assign', 'Assign', 'Expr', 'Return']), ('decorator_list', [])]": 4, "BoolOp -> [('op', 'And'), ('values', ['Compare', 'Compare', 'UnaryOp'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'Assign', 'For', 'Return']), ('decorator_list', [])]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Delete']), ('decorator_list', [])]": 2, "If -> [('test', 'Call'), ('body', ['Expr', 'AugAssign']), ('orelse', ['Expr'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Subscript', 'Subscript', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 7, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Expr', 'Assign']), ('orelse', [])]": 5, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Assign', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef']), ('decorator_list', [])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Attribute', 'Str', 'Str'])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Name', 'Name', 'Attribute', 'Attribute', 'Attribute', 'List', 'Name', 'Name'])]": 1, "Assert -> [('test', 'UnaryOp'), ('msg', 'Str')]": 10, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'TryExcept', 'Assign', 'Expr', 'Expr', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'Call'), ('body', ['If', 'Assign', 'If']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ClassDef', 'ClassDef', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'TryFinally']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'If', 'Expr', 'Expr', 'Expr', 'If', 'If', 'If', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'Subscript'), ('body', ['Delete']), ('orelse', [])]": 1, "Module -> [('body', ['Import', 'ImportFrom', 'Import', 'Import', 'Import', 'Import', 'Assign', 'FunctionDef', 'FunctionDef', 'ClassDef', 'If'])]": 1, "BinOp -> [('left', 'BinOp'), ('op', 'RShift'), ('right', 'Name')]": 2, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'ClassDef'])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 4, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Attribute', 'Str', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Tuple -> [('elts', ['Name', 'Name', 'Name', 'Num']), ('ctx', 'Load')]": 12, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'For', 'Return']), ('decorator_list', [])]": 6, "If -> [('test', 'Call'), ('body', ['Assign', 'Expr', 'Expr']), ('orelse', [])]": 3, "BoolOp -> [('op', 'And'), ('values', ['Attribute', 'UnaryOp'])]": 54, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'If', 'Expr']), ('decorator_list', [])]": 1, "arguments -> [('args', ['Name', 'Name']), ('vararg', 'str'), ('kwarg', 'NoneType'), ('defaults', ['Name'])]": 1, "Call -> [('func', 'Name'), ('args', ['Lambda', 'Subscript']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 3, "Tuple -> [('elts', ['Name', 'Call', 'Num', 'Str', 'Dict']), ('ctx', 'Load')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 2, "TryFinally -> [('body', ['Assign', 'For', 'Expr']), ('finalbody', ['Expr'])]": 2, "Exec -> [('body', 'Str'), ('globals', 'NoneType'), ('locals', 'NoneType')]": 1, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'ClassDef', 'ClassDef', 'ClassDef'])]": 2, "If -> [('test', 'Compare'), ('body', ['Expr']), ('orelse', ['Pass'])]": 2, "TryExcept -> [('body', ['Expr', 'Expr']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 33, "BinOp -> [('left', 'Attribute'), ('op', 'Sub'), ('right', 'Call')]": 13, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "If -> [('test', 'Attribute'), ('body', ['Assign', 'Assign', 'Return']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'For', 'Expr', 'Expr', 'Return']), ('decorator_list', [])]": 2, "If -> [('test', 'Compare'), ('body', ['Import', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'If', 'If', 'If', 'If', 'If', 'Assign', 'If', 'Expr']), ('orelse', [])]": 1, "For -> [('target', 'Tuple'), ('iter', 'GeneratorExp'), ('body', ['Assign', 'If', 'If', 'If', 'If', 'Expr']), ('orelse', [])]": 1, "While -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'If', 'Assign']), ('orelse', [])]": 2, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'Name')]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Delete', 'Return']), ('orelse', ['If'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'For']), ('decorator_list', [])]": 11, "Tuple -> [('elts', ['Num', 'Name', 'Name', 'BinOp']), ('ctx', 'Load')]": 1, "While -> [('test', 'Name'), ('body', ['Assign', 'If', 'If', 'Assign', 'While', 'If']), ('orelse', [])]": 1, "BinOp -> [('left', 'Compare'), ('op', 'BitAnd'), ('right', 'Compare')]": 9, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'If', 'If', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assert', 'For', 'For', 'Assign', 'For', 'Assign', 'For', 'Return']), ('decorator_list', [])]": 1, "TryFinally -> [('body', ['For']), ('finalbody', ['Expr'])]": 2, "For -> [('target', 'Tuple'), ('iter', 'Attribute'), ('body', ['If', 'If', 'If', 'Expr']), ('orelse', [])]": 1, "BinOp -> [('left', 'BinOp'), ('op', 'Add'), ('right', 'Subscript')]": 73, "Dict -> [('keys', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('values', ['Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple'])]": 1, "Compare -> [('left', 'Name'), ('ops', ['In']), ('comparators', ['Subscript'])]": 17, "Call -> [('func', 'Attribute'), ('args', ['Num', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 130, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['TryExcept', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'If', 'Assign', 'Expr', 'Expr', 'If', 'Expr']), ('decorator_list', ['Name'])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'FunctionDef']), ('decorator_list', [])]": 33, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 5, "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign', 'Expr', 'Assign', 'Expr']), ('orelse', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'For']), ('orelse', [])]": 12, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'str'), ('defaults', ['Name', 'Tuple', 'Name', 'Num', 'Tuple'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['Str', 'Call', 'Name'])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Tuple', 'Name', 'Str', 'Tuple', 'Str', 'Tuple', 'Dict', 'Num'])]": 2, "If -> [('test', 'Compare'), ('body', ['Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign']), ('orelse', ['Return'])]": 1, "If -> [('test', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('orelse', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Expr', 'Return']), ('orelse', ['Assign', 'Expr', 'Return'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['While', 'Assign']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Return']), ('decorator_list', [])]": 1, "List -> [('elts', ['Str', 'Call']), ('ctx', 'Load')]": 4, "If -> [('test', 'Call'), ('body', ['Assign', 'If']), ('orelse', ['Assign', 'If', 'Expr'])]": 2, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Dict'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'If']), ('decorator_list', ['Name'])]": 1, "Module -> [('body', ['Import', 'ImportFrom', 'Import', 'Import', 'Import', 'ImportFrom', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]": 1, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'If']), ('orelse', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Str', 'Str']), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 12, "TryFinally -> [('body', ['If', 'Assign', 'Assign', 'While', 'If', 'Assign', 'Assign', 'Assign', 'While', 'If', 'While', 'Expr', 'Assign', 'Assign', 'For', 'Expr', 'Assign', 'If', 'Assign', 'Expr', 'If', 'Return']), ('finalbody', ['Expr', 'Expr'])]": 1, "TryExcept -> [('body', ['Assign', 'Expr', 'Assign', 'For', 'Return']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'For', 'Assign', 'For', 'Expr', 'Expr', 'Print']), ('decorator_list', [])]": 1, "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'If', 'Expr']), ('orelse', [])]": 3, "Tuple -> [('elts', ['Name', 'Call', 'Tuple']), ('ctx', 'Load')]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Delete']), ('orelse', [])]": 6, "BoolOp -> [('op', 'And'), ('values', ['Attribute', 'Subscript', 'Call'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['For', 'Expr']), ('decorator_list', [])]": 8, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'If', 'Return']), ('decorator_list', ['Call'])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assert', 'Assert', 'Assert']), ('decorator_list', [])]": 1, "TryExcept -> [('body', ['Assign', 'AugAssign']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'For', 'Expr', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If']), ('decorator_list', [])]": 3, "ExceptHandler -> [('type', 'Attribute'), ('name', 'NoneType'), ('body', ['Expr'])]": 26, "While -> [('test', 'UnaryOp'), ('body', ['Assign', 'For', 'Expr']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef']), ('decorator_list', [])]": 3, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Pass']), ('orelse', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'If']), ('orelse', [])]": 84, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Tuple', 'Tuple', 'Num', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "If -> [('test', 'Compare'), ('body', ['Import', 'Expr', 'Assign', 'Expr', 'Expr', 'Return']), ('orelse', ['If'])]": 1, "If -> [('test', 'Name'), ('body', ['Assign', 'Expr', 'Assign', 'Expr']), ('orelse', ['If'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', ['Call'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'TryExcept', 'Assign', 'Assign', 'If', 'If', 'Assign', 'If', 'If', 'If', 'Assign', 'Assign', 'For', 'Return']), ('decorator_list', [])]": 2, "Call -> [('func', 'Attribute'), ('args', []), ('keywords', ['keyword']), ('starargs', 'Name'), ('kwargs', 'Name')]": 6, "If -> [('test', 'Compare'), ('body', ['Assign', 'If', 'Assign', 'Return']), ('orelse', ['If'])]": 1, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['If', 'If', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'If', 'Assign', 'If', 'Expr']), ('orelse', [])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Name', 'Attribute', 'BoolOp', 'Call', 'Attribute'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'If', 'Return']), ('decorator_list', [])]": 19, "BoolOp -> [('op', 'And'), ('values', ['Compare', 'Attribute', 'Compare'])]": 1, "If -> [('test', 'Compare'), ('body', ['Global', 'Assign']), ('orelse', [])]": 2, "Call -> [('func', 'Name'), ('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Assign', 'Assign', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'AugAssign', 'Assign', 'Expr', 'Import', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'While', 'Expr'])]": 1, "Module -> [('body', ['Import', 'Assign', 'Expr', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'For', 'Assign', 'For', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Print', 'Print', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr'])]": 1, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 3, "Call -> [('func', 'Name'), ('args', ['ListComp', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Subscript', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str'])]": 5, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'If', 'Assign', 'If', 'Assign']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['Assign', 'TryExcept', 'If']), ('orelse', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Expr', 'Assign', 'Assign']), ('orelse', [])]": 4, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assert', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assert', 'Assert']), ('decorator_list', [])]": 1, "If -> [('test', 'Name'), ('body', ['Assign', 'If']), ('orelse', ['Assign', 'TryExcept', 'Assign'])]": 1, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'If']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'Assign', 'If', 'Expr']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'List', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 5, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', ['Attribute'])]": 1, "Compare -> [('left', 'BinOp'), ('ops', ['Gt']), ('comparators', ['Subscript'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'Assign', 'Assert', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'If', 'If', 'If', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'TryExcept']), ('decorator_list', [])]": 1, "Dict -> [('keys', ['Tuple']), ('values', ['Tuple'])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'Assign', 'If']), ('orelse', [])]": 1, "Tuple -> [('elts', ['Name', 'Name', 'List']), ('ctx', 'Load')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'If', 'ImportFrom', 'Return']), ('decorator_list', ['Call'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'If', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'If', 'Assign', 'If']), ('orelse', [])]": 1, "Compare -> [('left', 'Num'), ('ops', ['LtE']), ('comparators', ['Subscript'])]": 2, "Dict -> [('keys', ['Str', 'Str']), ('values', ['Str', 'Tuple'])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str']), ('values', ['Str', 'Str', 'Call', 'Call'])]": 4, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', [])]": 2, "Tuple -> [('elts', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('ctx', 'Store')]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'For', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['FunctionDef', 'FunctionDef', 'Return']), ('decorator_list', [])]": 2, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'Expr']), ('orelse', [])]": 2, "For -> [('target', 'Tuple'), ('iter', 'Name'), ('body', ['Expr', 'Expr', 'Expr', 'Expr']), ('orelse', [])]": 3, "AugAssign -> [('target', 'Name'), ('op', 'Add'), ('value', 'ListComp')]": 12, "Tuple -> [('elts', ['Call', 'Call', 'BoolOp']), ('ctx', 'Load')]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 8, "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'FunctionDef'])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Tuple', 'Num', 'Num', 'Num', 'Num', 'Name', 'Name', 'Num'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Import', 'Assign', 'TryExcept', 'Expr', 'Expr', 'Import', 'Assign', 'Assign', 'Expr', 'Assign', 'If', 'If']), ('decorator_list', [])]": 1, "If -> [('test', 'Name'), ('body', ['Expr', 'Expr', 'Expr', 'Assign']), ('orelse', [])]": 1, "BinOp -> [('left', 'Call'), ('op', 'Add'), ('right', 'BinOp')]": 36, "If -> [('test', 'Attribute'), ('body', ['Assign']), ('orelse', ['Assign', 'Assign', 'If'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'Assign', 'If', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'If', 'If', 'If', 'Assign', 'Assign', 'If', 'Assign', 'AugAssign', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'Assign', 'TryFinally']), ('decorator_list', [])]": 1, "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign', 'If']), ('orelse', [])]": 8, "Call -> [('func', 'Name'), ('args', ['Name', 'Name']), ('keywords', ['keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'Name')]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'str'), ('defaults', ['Name', 'Str', 'Call', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Tuple', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Global', 'Assign', 'Assign']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Subscript'), ('body', ['If']), ('orelse', ['Expr'])]": 2, "Call -> [('func', 'Attribute'), ('args', ['Str']), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 30, "Compare -> [('left', 'Call'), ('ops', ['Lt']), ('comparators', ['BinOp'])]": 3, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assert', 'Assign', 'Assign']), ('orelse', ['Raise'])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'AugAssign', 'Assign', 'Assign', 'If', 'Assign', 'Expr']), ('orelse', [])]": 1, "ExceptHandler -> [('type', 'Attribute'), ('name', 'Tuple'), ('body', ['Import', 'If', 'Return'])]": 2, "If -> [('test', 'Name'), ('body', ['Assign', 'While', 'Return']), ('orelse', [])]": 1, "TryExcept -> [('body', ['TryFinally']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'For', 'For']), ('decorator_list', [])]": 1, "TryFinally -> [('body', ['TryFinally', 'Assign', 'TryFinally', 'Assign', 'Assign']), ('finalbody', ['Expr'])]": 1, "If -> [('test', 'Compare'), ('body', ['Print', 'Assert']), ('orelse', ['Print', 'Assert', 'Assert'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ClassDef', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['With', 'Expr']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Attribute', 'Name', 'Name', 'List']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Call -> [('func', 'Attribute'), ('args', ['BinOp']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 59, "If -> [('test', 'Compare'), ('body', ['If', 'Return']), ('orelse', ['If'])]": 4, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'ImportFrom', 'Assign', 'ClassDef', 'Assign', 'FunctionDef', 'FunctionDef', 'Assign', 'Assign', 'Expr', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'If'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]": 7, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Return']), ('decorator_list', [])]": 3, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['ImportFrom', 'If']), ('orelse', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Expr', 'Assign', 'With']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'Assign', 'Return']), ('decorator_list', ['Name'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'Assign', 'For']), ('decorator_list', [])]": 1, "If -> [('test', 'BoolOp'), ('body', ['Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr']), ('orelse', ['If'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'For', 'Return']), ('decorator_list', ['Name'])]": 7, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'If', 'Expr', 'For', 'Return']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'If', 'If', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'For', 'For', 'AugAssign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 1, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef'])]": 3, "Call -> [('func', 'Name'), ('args', ['Subscript', 'Num', 'Subscript']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 6, "TryExcept -> [('body', ['Assign', 'Assign', 'Expr', 'Assign', 'For', 'Expr', 'Expr']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Str', 'Str']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 7, "Call -> [('func', 'Attribute'), ('args', ['Num', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 41, "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['Str', 'Name', 'Str'])]": 1, "If -> [('test', 'BoolOp'), ('body', ['Expr', 'While']), ('orelse', [])]": 1, "BinOp -> [('left', 'Attribute'), ('op', 'Sub'), ('right', 'BinOp')]": 2, "Call -> [('func', 'Name'), ('args', ['Name', 'Name', 'Name', 'UnaryOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 3, "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['Assign']), ('orelse', [])]": 43, "List -> [('elts', ['Name', 'Call']), ('ctx', 'Load')]": 16, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Assign', 'Assign', 'If', 'Return']), ('decorator_list', [])]": 3, "Call -> [('func', 'Name'), ('args', ['Num', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 9, "If -> [('test', 'Attribute'), ('body', ['Assign']), ('orelse', ['Assign', 'Assign', 'Assign', 'Assign'])]": 1, "If -> [('test', 'Compare'), ('body', ['Expr', 'Continue']), ('orelse', [])]": 11, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Assign', 'Assign', 'FunctionDef', 'ClassDef']), ('decorator_list', [])]": 1, "BoolOp -> [('op', 'Or'), ('values', ['Attribute', 'List'])]": 6, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('orelse', [])]": 1, "Call -> [('func', 'Name'), ('args', ['List', 'Name', 'Name']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Str']), ('keywords', []), ('starargs', 'Name'), ('kwargs', 'NoneType')]": 2, "Compare -> [('left', 'Call'), ('ops', ['In']), ('comparators', ['Str'])]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'FunctionDef', 'FunctionDef', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "Module -> [('body', ['Import', 'Assign', 'Expr', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'Assign', 'For', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr'])]": 2, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Attribute']), ('keywords', []), ('starargs', 'Name'), ('kwargs', 'NoneType')]": 1, "Module -> [('body', ['Import', 'ImportFrom', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'TryExcept', 'Expr'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['TryExcept']), ('decorator_list', ['Name', 'Call', 'Call'])]": 1, "comprehension -> [('target', 'Name'), ('iter', 'Name'), ('ifs', ['Name'])]": 6, "If -> [('test', 'Call'), ('body', ['Assign', 'If', 'Return']), ('orelse', ['Expr', 'Return'])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Expr', 'Expr', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 2, "BoolOp -> [('op', 'And'), ('values', ['Attribute', 'BoolOp'])]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'While', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'While']), ('decorator_list', [])]": 1, "TryExcept -> [('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('handlers', ['ExceptHandler', 'ExceptHandler', 'ExceptHandler', 'ExceptHandler', 'ExceptHandler']), ('orelse', [])]": 1, "TryExcept -> [('body', ['Assign', 'Assign', 'Expr', 'Return']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 2, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Expr', 'Assign']), ('orelse', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'If', 'If', 'Delete', 'Assign', 'Assign', 'Expr', 'Assign', 'Return']), ('decorator_list', [])]": 1, "BinOp -> [('left', 'Name'), ('op', 'Add'), ('right', 'BoolOp')]": 1, "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'Assign']), ('orelse', ['TryExcept'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'If', 'AugAssign', 'Assign', 'Expr', 'Assign', 'If', 'Assign', 'If', 'Assign', 'If', 'Assign', 'If', 'Assign', 'Assign', 'While', 'Return']), ('decorator_list', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'ClassDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "BoolOp -> [('op', 'And'), ('values', ['Name', 'Compare', 'UnaryOp'])]": 2, "Call -> [('func', 'Attribute'), ('args', ['Num', 'Name']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 8, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'If', 'If', 'Assign', 'Expr', 'Assign', 'Assign']), ('decorator_list', [])]": 1, "TryExcept -> [('body', ['Assign', 'Assign', 'Assign', 'TryExcept', 'Assign', 'If', 'Assign', 'Assign', 'If', 'Assign', 'If', 'Assign', 'If', 'TryExcept', 'Assign', 'Assign', 'Assign', 'TryFinally', 'If']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 1, "Compare -> [('left', 'Attribute'), ('ops', ['Gt']), ('comparators', ['Num'])]": 44, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'TryExcept', 'Assign', 'Assign', 'ClassDef'])]": 2, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Expr', 'For']), ('orelse', [])]": 3, "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'ClassDef', 'If'])]": 1, "Tuple -> [('elts', ['Name', 'Tuple']), ('ctx', 'Store')]": 46, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assert', 'Assert', 'Assert', 'Assert', 'Assert', 'Assert', 'Assert', 'Assert', 'Assert']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Import', 'Assign', 'Assign', 'If', 'Assert', 'Assign', 'For', 'Expr']), ('decorator_list', ['Name'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'If', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'Assign']), ('decorator_list', [])]": 4, "If -> [('test', 'Call'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Return']), ('orelse', [])]": 1, "Dict -> [('keys', ['Str', 'Str']), ('values', ['Num', 'Call'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'AugAssign', 'For']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Expr', 'For']), ('decorator_list', ['Name'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assert', 'Assign', 'If', 'Assert', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 2, "Compare -> [('left', 'Attribute'), ('ops', ['NotEq']), ('comparators', ['Str'])]": 52, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'TryExcept', 'ImportFrom', 'ClassDef', 'If'])]": 1, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'ImportFrom', 'ImportFrom', 'Assign', 'ClassDef'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'TryExcept', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Expr', 'Assign', 'For']), ('decorator_list', [])]": 1, "Compare -> [('left', 'Attribute'), ('ops', ['In']), ('comparators', ['List'])]": 20, "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['Attribute', 'Name', 'Name'])]": 2, "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'FunctionDef', 'FunctionDef'])]": 1, "If -> [('test', 'Call'), ('body', ['ImportFrom', 'ImportFrom', 'If']), ('orelse', [])]": 1, "TryFinally -> [('body', ['Expr', 'With', 'With']), ('finalbody', ['Expr'])]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'For', 'If', 'Assign', 'Assign', 'TryExcept']), ('orelse', [])]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'TryExcept', 'TryExcept', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'ClassDef', 'ClassDef'])]": 1, "TryExcept -> [('body', ['ImportFrom']), ('handlers', ['ExceptHandler']), ('orelse', ['Assign', 'ClassDef'])]": 1, "If -> [('test', 'Name'), ('body', ['ClassDef', 'ClassDef', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'If', 'For', 'Return']), ('decorator_list', ['Name'])]": 1, "If -> [('test', 'Call'), ('body', ['Assign', 'For']), ('orelse', ['If'])]": 2, "While -> [('test', 'BoolOp'), ('body', ['AugAssign', 'AugAssign', 'AugAssign']), ('orelse', [])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Attribute', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name'])]": 1, "If -> [('test', 'Compare'), ('body', ['TryExcept']), ('orelse', ['If'])]": 1, "BinOp -> [('left', 'List'), ('op', 'Add'), ('right', 'List')]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'If', 'Assign', 'If', 'Assign', 'If', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'Name'), ('body', ['Expr']), ('orelse', ['TryExcept'])]": 2, "AugAssign -> [('target', 'Attribute'), ('op', 'Add'), ('value', 'Subscript')]": 1, "Call -> [('func', 'Name'), ('args', ['Num', 'Num', 'Num', 'Num', 'Num', 'Num']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Assign', 'If', 'Expr', 'If']), ('orelse', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Expr', 'Assign']), ('orelse', [])]": 1, "If -> [('test', 'Name'), ('body', ['Print']), ('orelse', [])]": 39, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'Return']), ('decorator_list', [])]": 54, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Str', 'Num', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "If -> [('test', 'Attribute'), ('body', ['ImportFrom']), ('orelse', ['ImportFrom'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Return']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Expr']), ('decorator_list', [])]": 11, "While -> [('test', 'Num'), ('body', ['Assign', 'Assign', 'If', 'If', 'Assign', 'If', 'If', 'Expr']), ('orelse', [])]": 1, "Compare -> [('left', 'Subscript'), ('ops', ['NotEq']), ('comparators', ['Attribute'])]": 16, "While -> [('test', 'Compare'), ('body', ['Assign', 'If', 'Assign', 'If']), ('orelse', [])]": 2, "Num -> [('n', 'int')]": 45108, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Print']), ('decorator_list', [])]": 1, "Tuple -> [('elts', ['Str', 'Call']), ('ctx', 'Load')]": 118, "If -> [('test', 'UnaryOp'), ('body', ['Delete', 'Delete']), ('orelse', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Str', 'Str', 'BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 4, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ClassDef', 'If', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'For', 'Assign', 'Assign', 'Assign']), ('orelse', ['Assign', 'Assign', 'Assign'])]": 1, "If -> [('test', 'Compare'), ('body', ['Expr', 'Assign', 'If', 'Expr']), ('orelse', ['Assign', 'Assign', 'Assign', 'Return'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'For', 'Return']), ('decorator_list', ['Name'])]": 1, "If -> [('test', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'Expr']), ('orelse', ['Expr'])]": 1, "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'If'])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assert', 'For']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Subscript', 'Str']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Assign', 'ClassDef', 'ClassDef', 'ClassDef', 'Assign', 'ClassDef'])]": 1, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'Import', 'Import', 'Import', 'ClassDef', 'If'])]": 1, "For -> [('target', 'Tuple'), ('iter', 'Name'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'For', 'TryExcept']), ('orelse', [])]": 1, "Tuple -> [('elts', ['Str', 'Str', 'Num', 'Str', 'List', 'Str', 'Name']), ('ctx', 'Load')]": 1, "Call -> [('func', 'Attribute'), ('args', ['UnaryOp']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Assign', 'Assign', 'If']), ('orelse', [])]": 2, "Tuple -> [('elts', ['Name', 'Str', 'Num', 'Subscript']), ('ctx', 'Load')]": 1, "If -> [('test', 'Call'), ('body', ['Assign', 'If', 'For', 'Continue']), ('orelse', [])]": 1, "Delete -> [('targets', ['Attribute'])]": 59, "While -> [('test', 'Num'), ('body', ['Assign', 'If', 'If', 'Assign']), ('orelse', [])]": 1, "If -> [('test', 'Name'), ('body', ['FunctionDef']), ('orelse', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'With', 'Expr', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'If', 'If']), ('decorator_list', [])]": 4, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'If', 'If', 'If', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Print', 'If', 'Expr', 'Return']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'Assign', 'Assign', 'For', 'Expr', 'Assign', 'Assign']), ('decorator_list', [])]": 1, "TryExcept -> [('body', ['Print', 'Assign', 'If', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 1, "TryExcept -> [('body', ['Assign', 'Expr', 'Assign', 'If', 'If', 'Return']), ('handlers', ['ExceptHandler', 'ExceptHandler']), ('orelse', [])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Tuple', 'Name', 'Name', 'Tuple', 'Str', 'Tuple', 'Dict', 'Num'])]": 2, "Call -> [('func', 'Attribute'), ('args', ['Str', 'Str', 'Str', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('orelse', ['If'])]": 2, "Compare -> [('left', 'Subscript'), ('ops', ['In']), ('comparators', ['ListComp'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'For', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assert', 'Assign', 'Assign', 'Assert', 'Assign', 'If', 'Delete', 'For', 'For', 'Expr', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'TryExcept', 'Expr']), ('decorator_list', [])]": 1, "Tuple -> [('elts', ['Call', 'Name', 'Call', 'Name']), ('ctx', 'Load')]": 1, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'For', 'Assign', 'Assign', 'Assign', 'Print', 'Assign', 'Expr', 'If', 'If']), ('orelse', [])]": 1, "ExceptHandler -> [('type', 'Name'), ('name', 'Name'), ('body', ['Print', 'Print', 'Raise'])]": 2, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'TryExcept', 'TryExcept', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'ClassDef'])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "BoolOp -> [('op', 'Or'), ('values', ['Compare', 'Name'])]": 5, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'Expr']), ('decorator_list', ['Name'])]": 1, "If -> [('test', 'BoolOp'), ('body', ['Assign']), ('orelse', ['Assign', 'Assign'])]": 4, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'Print', 'AugAssign', 'AugAssign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'If', 'If', 'Return']), ('orelse', [])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Num', 'Name', 'Name'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'Expr']), ('decorator_list', [])]": 6, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'For', 'Return']), ('decorator_list', [])]": 2, "arguments -> [('args', ['Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', [])]": 1188, "Tuple -> [('elts', ['Call', 'Attribute', 'Call']), ('ctx', 'Load')]": 8, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['If', 'If', 'If']), ('orelse', [])]": 6, "List -> [('elts', ['Str', 'Str', 'BinOp', 'BinOp']), ('ctx', 'Load')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign']), ('decorator_list', [])]": 1, "While -> [('test', 'UnaryOp'), ('body', ['Assign', 'If']), ('orelse', [])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Name', 'Call', 'Name', 'Call', 'Call', 'Call', 'Name', 'Call'])]": 1, "If -> [('test', 'Attribute'), ('body', ['Assign', 'Assign', 'Assign', 'Assign']), ('orelse', ['Assign'])]": 1, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef'])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str']), ('values', ['Call', 'Call', 'Attribute', 'Call'])]": 1, "Dict -> [('keys', ['Name']), ('values', ['Call'])]": 3, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom'])]": 1, "UnaryOp -> [('op', 'Not'), ('operand', 'Compare')]": 202, "Assign -> [('targets', ['Attribute']), ('value', 'UnaryOp')]": 21, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', []), ('body', ['Assign']), ('decorator_list', [])]": 48, "Str -> [('s', 'str')]": 74869, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'If', 'Return']), ('decorator_list', ['Attribute'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'ClassDef', 'Assign', 'ClassDef', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'For']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ClassDef', 'ClassDef', 'Import', 'Assign', 'Assign', 'Assign', 'For']), ('decorator_list', [])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call'])]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Expr', 'Assign', 'If', 'Expr', 'Expr']), ('orelse', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['For', 'For', 'Expr', 'Expr']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ClassDef', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Call', 'Attribute', 'Attribute', 'Attribute', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'If', 'Assign', 'Expr']), ('decorator_list', [])]": 3, "TryExcept -> [('body', ['Print']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 4, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'TryExcept', 'If', 'If', 'Assign', 'If', 'TryExcept']), ('decorator_list', [])]": 1, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'FunctionDef', 'Expr']), ('orelse', [])]": 1, "comprehension -> [('target', 'Name'), ('iter', 'Call'), ('ifs', ['BoolOp'])]": 11, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'For', 'Expr', 'Assign', 'If', 'Assign', 'Assign', 'Expr', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assert', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assert']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Name', 'Name', 'Call', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Tuple', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 4, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "List -> [('elts', ['Str', 'Str', 'Name', 'Str', 'Attribute', 'Str', 'Attribute']), ('ctx', 'Load')]": 1, "ExceptHandler -> [('type', 'NoneType'), ('name', 'NoneType'), ('body', ['Break'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'Assign', 'Assign', 'For', 'Return']), ('decorator_list', [])]": 1, "BoolOp -> [('op', 'And'), ('values', ['Call', 'ListComp'])]": 1, "If -> [('test', 'Call'), ('body', ['Assign', 'If', 'Assign']), ('orelse', ['Assign', 'Assign'])]": 1, "BoolOp -> [('op', 'And'), ('values', ['Compare', 'Compare', 'UnaryOp', 'UnaryOp', 'UnaryOp', 'BoolOp'])]": 1, "Call -> [('func', 'Name'), ('args', ['Num', 'Num', 'Call', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Str', 'Attribute', 'Name', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Call -> [('func', 'Attribute'), ('args', ['BinOp', 'Num']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 14, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Expr', 'If', 'Expr', 'Expr', 'Assign', 'Assign', 'If']), ('decorator_list', [])]": 2, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Name', 'Tuple', 'Dict', 'Num', 'Tuple', 'Name', 'Tuple'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 2, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Name', 'Call', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Str', 'Str', 'Str', 'Call', 'Str', 'Call', 'Str', 'Call', 'Str', 'Str', 'Str'])]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'TryFinally']), ('decorator_list', [])]": 2, "If -> [('test', 'Compare'), ('body', ['Delete']), ('orelse', [])]": 26, "Print -> [('dest', 'NoneType'), ('values', ['Str', 'Name', 'Name', 'Name']), ('nl', 'bool')]": 4, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'ClassDef', 'ClassDef', 'If'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'If', 'Expr', 'Assign', 'Return']), ('decorator_list', ['Name'])]": 1, "Call -> [('func', 'Attribute'), ('args', []), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 3, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Attribute', 'BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 4, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'Name')]": 25, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Print', 'If', 'Assign', 'For', 'Expr']), ('decorator_list', [])]": 1, "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['If', 'TryExcept'])]": 2, "Compare -> [('left', 'Name'), ('ops', ['Eq']), ('comparators', ['Num'])]": 297, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If']), ('orelse', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Name', 'BinOp', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 21, "Call -> [('func', 'Name'), ('args', ['GeneratorExp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 92, "If -> [('test', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'TryExcept', 'Assign', 'Assign', 'Assign', 'Assert', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'For', 'Expr', 'Expr']), ('orelse', [])]": 1, "Tuple -> [('elts', ['Str', 'Num', 'Num']), ('ctx', 'Load')]": 2, "Tuple -> [('elts', ['Subscript', 'Subscript']), ('ctx', 'Store')]": 32, "ClassDef -> [('name', 'str'), ('bases', []), ('body', ['Expr', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'FunctionDef', 'Assign', 'Print', 'If', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign', 'Assign', 'For']), ('orelse', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'If', 'Expr', 'Return']), ('decorator_list', [])]": 1, "AugAssign -> [('target', 'Subscript'), ('op', 'Sub'), ('value', 'Name')]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['Subscript', 'Call', 'Subscript'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'TryExcept', 'TryExcept', 'Assign', 'If', 'Expr', 'Expr', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'TryExcept', 'If']), ('decorator_list', [])]": 3, "If -> [('test', 'Name'), ('body', ['Assign', 'Assign', 'For']), ('orelse', [])]": 2, "ExceptHandler -> [('type', 'Attribute'), ('name', 'Name'), ('body', ['Return'])]": 5, "Call -> [('func', 'Name'), ('args', ['Str']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 262, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'If', 'Print', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'FunctionDef', 'FunctionDef', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 9, "BinOp -> [('left', 'Subscript'), ('op', 'Pow'), ('right', 'BinOp')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Import', 'Assign', 'Import', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'For', 'Expr', 'Expr', 'For', 'Assign']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Delete', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "Dict -> [('keys', ['Call']), ('values', ['Str'])]": 4, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Expr', 'If', 'If', 'If', 'If', 'If', 'If', 'If']), ('decorator_list', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Subscript', 'BoolOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Call -> [('func', 'Attribute'), ('args', ['Str', 'BoolOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'If', 'Return']), ('orelse', ['Return'])]": 2, "Global -> [('names', ['str', 'str'])]": 17, "If -> [('test', 'UnaryOp'), ('body', ['If', 'Assign', 'Assign', 'Assign', 'AugAssign']), ('orelse', ['If'])]": 1, "If -> [('test', 'Name'), ('body', ['Assign', 'Assign', 'Expr', 'If']), ('orelse', [])]": 2, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['If', 'Assign', 'Assign', 'If', 'Expr', 'For']), ('orelse', [])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Str', 'Str', 'Name', 'Name', 'Name', 'List', 'Name', 'Name'])]": 1, "BinOp -> [('left', 'Attribute'), ('op', 'Mod'), ('right', 'Attribute')]": 6, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'If']), ('orelse', ['Raise'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'If', 'If', 'Expr', 'Assign', 'Expr', 'Assign', 'Return']), ('decorator_list', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', []), ('body', ['Expr', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'If', 'Assign', 'Assign', 'If']), ('decorator_list', [])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Num', 'Name'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'For', 'Expr', 'For', 'Return']), ('decorator_list', [])]": 2, "If -> [('test', 'UnaryOp'), ('body', ['Return']), ('orelse', ['Raise'])]": 2, "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'If']), ('orelse', [])]": 2, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Assign', 'Expr']), ('orelse', [])]": 15, "Assert -> [('test', 'Compare'), ('msg', 'Name')]": 95, "Call -> [('func', 'Name'), ('args', ['Attribute', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 157, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', ['Attribute'])]": 1, "Call -> [('func', 'Name'), ('args', ['Name', 'Str', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 8, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'TryExcept', 'Return']), ('decorator_list', [])]": 1, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'ClassDef', 'ClassDef', 'FunctionDef', 'FunctionDef'])]": 1, "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['Assign', 'Expr', 'If', 'Expr'])]": 1, "If -> [('test', 'Name'), ('body', ['If', 'For']), ('orelse', ['Assign', 'Expr', 'Expr'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'If', 'Assign', 'If']), ('decorator_list', [])]": 1, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assert', 'Assert', 'If', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Attribute', 'Str', 'Name', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]": 2, "For -> [('target', 'Name'), ('iter', 'List'), ('body', ['Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'For', 'Assign']), ('orelse', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Expr', 'If', 'TryExcept', 'Raise']), ('orelse', [])]": 1, "If -> [('test', 'BoolOp'), ('body', ['Assign', 'If']), ('orelse', ['Assign'])]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'For', 'Expr', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 1, "Slice -> [('lower', 'NoneType'), ('upper', 'UnaryOp'), ('step', 'NoneType')]": 8, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'If', 'If', 'Assign', 'Assign', 'Assert', 'Assign', 'Assign', 'Assign', 'While', 'Expr', 'Expr', 'If', 'Expr', 'Return']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Assign', 'Expr', 'Assign']), ('orelse', [])]": 8, "BoolOp -> [('op', 'Or'), ('values', ['Name', 'List'])]": 25, "If -> [('test', 'BoolOp'), ('body', ['Expr', 'Expr', 'Expr']), ('orelse', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Expr']), ('orelse', ['TryExcept'])]": 4, "ExceptHandler -> [('type', 'NoneType'), ('name', 'NoneType'), ('body', ['Assign', 'Expr', 'Expr', 'TryExcept'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 9, "ExceptHandler -> [('type', 'Tuple'), ('name', 'NoneType'), ('body', ['Expr'])]": 7, "Tuple -> [('elts', ['Tuple', 'Name']), ('ctx', 'Store')]": 12, "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['Assign', 'TryExcept', 'If'])]": 2, "TryExcept -> [('body', ['Expr']), ('handlers', ['ExceptHandler', 'ExceptHandler', 'ExceptHandler']), ('orelse', [])]": 1, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr'])]": 1, "If -> [('test', 'Compare'), ('body', ['AugAssign', 'For', 'Assign']), ('orelse', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign']), ('orelse', ['Raise'])]": 32, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['TryExcept', 'TryExcept', 'Assign', 'Assign', 'For', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 2, "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['Attribute', 'Call', 'Call'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Call', 'Call', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 3, "Compare -> [('left', 'Attribute'), ('ops', ['Is']), ('comparators', ['Call'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'TryExcept', 'Assign', 'If', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef'])]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Return']), ('orelse', [])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Str', 'Name', 'Str'])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name', 'Name']), ('body', ['FunctionDef']), ('decorator_list', [])]": 3, "If -> [('test', 'BoolOp'), ('body', ['Assign', 'For', 'Assign', 'Expr']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Expr', 'Expr', 'If', 'Expr']), ('decorator_list', [])]": 2, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['If', 'Assign', 'Expr', 'Expr']), ('orelse', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Str', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 66, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "TryExcept -> [('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Return']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 3, "Dict -> [('keys', ['Attribute']), ('values', ['Dict'])]": 3, "BoolOp -> [('op', 'And'), ('values', ['Call', 'Call', 'Call'])]": 4, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Num', 'Name', 'Tuple']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', []), ('keywords', []), ('starargs', 'ListComp'), ('kwargs', 'NoneType')]": 3, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'If', 'Assign', 'If']), ('orelse', [])]": 4, "AugAssign -> [('target', 'Attribute'), ('op', 'Add'), ('value', 'Call')]": 9, "If -> [('test', 'BoolOp'), ('body', ['Assign']), ('orelse', ['For'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'If', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 2, "ExceptHandler -> [('type', 'Name'), ('name', 'Name'), ('body', ['Assign', 'Expr', 'Raise'])]": 3, "If -> [('test', 'Compare'), ('body', ['Assign', 'Continue']), ('orelse', ['If'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'Import', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['AugAssign']), ('orelse', [])]": 33, "Tuple -> [('elts', ['Call', 'Name', 'Attribute', 'Attribute', 'Attribute']), ('ctx', 'Load')]": 1, "Tuple -> [('elts', ['Attribute', 'Attribute', 'Name', 'Attribute']), ('ctx', 'Load')]": 2, "If -> [('test', 'UnaryOp'), ('body', ['While', 'If', 'Assign']), ('orelse', ['For', 'Expr'])]": 2, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Expr', 'Assign', 'ClassDef', 'ClassDef', 'ClassDef', 'If'])]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['AugAssign', 'AugAssign']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 3, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 13, "BinOp -> [('left', 'Name'), ('op', 'Sub'), ('right', 'Name')]": 236, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assert', 'For', 'Return']), ('decorator_list', ['Attribute'])]": 1, "BinOp -> [('left', 'Str'), ('op', 'Mult'), ('right', 'Name')]": 28, "TryExcept -> [('body', ['ImportFrom', 'AugAssign']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 3, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'BinOp', 'Tuple', 'Tuple', 'Str', 'Str', 'Str'])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Break']), ('orelse', ['Assign', 'If', 'AugAssign'])]": 1, "With -> [('context_expr', 'Call'), ('optional_vars', 'NoneType'), ('body', ['If', 'Assign', 'Expr', 'Return'])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Str', 'Str', 'Name'])]": 1, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Attribute', 'Str', 'Num', 'Num', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 3, "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['TryExcept', 'If']), ('orelse', [])]": 2, "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'Assign', 'For', 'Assign', 'Expr', 'Assign']), ('orelse', [])]": 1, "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['Expr', 'Expr', 'Return'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "If -> [('test', 'Name'), ('body', ['TryExcept']), ('orelse', ['Assign'])]": 3, "If -> [('test', 'Name'), ('body', ['TryExcept', 'If']), ('orelse', [])]": 2, "If -> [('test', 'Compare'), ('body', ['Assign', 'Delete']), ('orelse', [])]": 1, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'If', 'Assign', 'If', 'If', 'Assign', 'Assign', 'Assign']), ('orelse', [])]": 1, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'ClassDef', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Expr', 'Expr'])]": 1, "If -> [('test', 'Name'), ('body', ['AugAssign', 'AugAssign', 'AugAssign', 'AugAssign']), ('orelse', [])]": 1, "Dict -> [('keys', ['Num', 'Num', 'Num']), ('values', ['Tuple', 'Tuple', 'Tuple'])]": 2, "If -> [('test', 'Compare'), ('body', ['Pass']), ('orelse', ['If'])]": 13, "Call -> [('func', 'Attribute'), ('args', ['Call', 'Name', 'Name']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'TryExcept', 'Assign', 'For', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'If', 'Assign', 'Expr', 'While']), ('decorator_list', [])]": 1, "BoolOp -> [('op', 'Or'), ('values', ['UnaryOp', 'Name'])]": 3, "Compare -> [('left', 'Call'), ('ops', ['LtE']), ('comparators', ['Attribute'])]": 2, "If -> [('test', 'Compare'), ('body', ['Assign']), ('orelse', ['Assign', 'Assign'])]": 22, "If -> [('test', 'Attribute'), ('body', ['If', 'Assign', 'Break']), ('orelse', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Yield', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Expr', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Name', 'Attribute', 'List', 'Call'])]": 1, "List -> [('elts', ['Name', 'UnaryOp']), ('ctx', 'Load')]": 1, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Expr', 'TryExcept']), ('orelse', [])]": 4, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 2, "BoolOp -> [('op', 'Or'), ('values', ['Str', 'Str'])]": 2, "Call -> [('func', 'Name'), ('args', ['Call', 'Attribute']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'For', 'TryExcept']), ('decorator_list', [])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Num', 'Num', 'Num'])]": 1, "Call -> [('func', 'Name'), ('args', ['Name', 'Name', 'Name', 'List']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "While -> [('test', 'Num'), ('body', ['Pass']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'If']), ('decorator_list', ['Call', 'Name', 'Name'])]": 1, "If -> [('test', 'Call'), ('body', ['Import', 'Expr', 'Return']), ('orelse', ['Print', 'Expr'])]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'If']), ('orelse', [])]": 4, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Assign', 'For', 'Assign', 'Assert', 'For', 'Expr', 'Expr', 'Expr']), ('orelse', [])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name']), ('vararg', 'str'), ('kwarg', 'str'), ('defaults', ['List'])]": 1, "With -> [('context_expr', 'Call'), ('optional_vars', 'NoneType'), ('body', ['Expr', 'ImportFrom'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Num', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 10, "Tuple -> [('elts', ['Compare']), ('ctx', 'Load')]": 3, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Attribute', 'Num', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assert', 'Return']), ('decorator_list', ['Call'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Expr', 'If', 'Expr', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'ImportFrom', 'TryExcept', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'For']), ('decorator_list', [])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num'])]": 1, "Tuple -> [('elts', ['Name', 'Tuple', 'Tuple']), ('ctx', 'Load')]": 2, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Assign', 'Print', 'Print', 'Print', 'If']), ('orelse', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'For', 'Assign', 'For']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ClassDef', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 2, "TryExcept -> [('body', ['Exec', 'Return']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 1, "For -> [('target', 'Tuple'), ('iter', 'Subscript'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('orelse', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['For', 'For']), ('decorator_list', ['Name', 'Name', 'Name'])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Attribute', 'Attribute']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]": 27, "Call -> [('func', 'Name'), ('args', ['Call', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 60, "TryExcept -> [('body', ['Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign']), ('handlers', ['ExceptHandler', 'ExceptHandler']), ('orelse', [])]": 1, "keyword -> [('arg', 'str'), ('value', 'IfExp')]": 5, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'If', 'If', 'Expr']), ('orelse', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'AugAssign', 'Assign', 'AugAssign']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Import', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'Print', 'TryExcept', 'If', 'Assign', 'For']), ('decorator_list', [])]": 1, "If -> [('test', 'BinOp'), ('body', ['Assign', 'Assign']), ('orelse', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Name']), ('keywords', []), ('starargs', 'Attribute'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "List -> [('elts', ['Tuple', 'Str']), ('ctx', 'Load')]": 1, "arguments -> [('args', ['Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'str'), ('defaults', ['Name', 'Str'])]": 1, "Call -> [('func', 'Name'), ('args', ['Attribute', 'Attribute', 'Name', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 4, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'Assign', 'Return']), ('decorator_list', [])]": 5, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'ImportFrom', 'Assign', 'ImportFrom', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "ExceptHandler -> [('type', 'NoneType'), ('name', 'NoneType'), ('body', ['Raise', 'Pass'])]": 3, "List -> [('elts', ['Str', 'Attribute', 'Str']), ('ctx', 'Load')]": 2, "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['If', 'Expr', 'Expr', 'Expr', 'Expr']), ('orelse', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Expr', 'Assign', 'If', 'If', 'If']), ('orelse', [])]": 1, "BinOp -> [('left', 'Call'), ('op', 'Sub'), ('right', 'Call')]": 89, "If -> [('test', 'Compare'), ('body', ['AugAssign']), ('orelse', ['Return'])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Name', 'Name', 'Name', 'Name'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'For', 'Return']), ('decorator_list', ['Name'])]": 2, "ExceptHandler -> [('type', 'NoneType'), ('name', 'NoneType'), ('body', ['Print', 'Raise'])]": 2, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Tuple', 'Tuple', 'Tuple', 'Name', 'Name'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'If', 'Assign', 'Assign', 'Assign', 'If', 'If', 'Assign', 'If', 'If', 'If', 'If', 'Assign', 'TryExcept', 'Return']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Num', 'Name', 'Tuple', 'Dict']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 1, "TryFinally -> [('body', ['Expr']), ('finalbody', ['For', 'If'])]": 1, "TryExcept -> [('body', ['Expr']), ('handlers', ['ExceptHandler']), ('orelse', ['If'])]": 6, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'Assign', 'Assign', 'If', 'Return']), ('decorator_list', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Call', 'Call', 'Name', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 3, "Call -> [('func', 'Name'), ('args', ['Name', 'Subscript', 'Name', 'Name', 'Subscript', 'Subscript', 'Name', 'Subscript']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "If -> [('test', 'Call'), ('body', ['Assign', 'Assign', 'Expr', 'If']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'While']), ('decorator_list', [])]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Assign', 'Assign', 'FunctionDef', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Name', 'Name', 'Attribute', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'FunctionDef', 'Expr', 'Assign', 'Expr', 'FunctionDef', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('orelse', [])]": 1, "Dict -> [('keys', ['Str', 'Name']), ('values', ['Name', 'Name'])]": 6, "Dict -> [('keys', ['Num']), ('values', ['Num'])]": 3, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'TryExcept', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]": 1, "Call -> [('func', 'Name'), ('args', ['Attribute', 'BinOp', 'UnaryOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "TryExcept -> [('body', ['Assign', 'For', 'Assign', 'Assign']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 2, "Call -> [('func', 'Attribute'), ('args', ['Str']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 376, "Subscript -> [('value', 'Attribute'), ('slice', 'Index'), ('ctx', 'Load')]": 2828, "Call -> [('func', 'Name'), ('args', ['Call']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 76, "If -> [('test', 'Name'), ('body', ['For', 'Expr']), ('orelse', [])]": 1, "Compare -> [('left', 'Attribute'), ('ops', ['In']), ('comparators', ['Call'])]": 2, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'If', 'Assign', 'Return']), ('orelse', ['If'])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Attribute', 'Attribute', 'Name', 'Name', 'Call', 'Attribute', 'Name', 'Name', 'Attribute', 'Attribute'])]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'TryExcept', 'Expr', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef'])]": 1, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute'])]": 1, "Tuple -> [('elts', ['Str', 'Dict', 'Str']), ('ctx', 'Load')]": 4, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'TryExcept']), ('decorator_list', [])]": 2, "List -> [('elts', ['Num', 'Num', 'Num', 'Num']), ('ctx', 'Load')]": 50, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'If', 'For', 'Raise']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Global', 'If', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 1, "IfExp -> [('test', 'Compare'), ('body', 'Call'), ('orelse', 'Call')]": 4, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'FunctionDef', 'Assign', 'TryExcept']), ('decorator_list', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', []), ('body', ['Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'TryExcept', 'ImportFrom', 'TryExcept', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'FunctionDef', 'If'])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Num'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'For', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'Subscript'), ('body', ['Expr', 'Assign', 'Assign', 'Assign']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'FunctionDef', 'Assign', 'Assign', 'ClassDef', 'Assign', 'FunctionDef', 'FunctionDef', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'ClassDef', 'Assign', 'Assign', 'Assert', 'Assign', 'For']), ('decorator_list', [])]": 1, "BoolOp -> [('op', 'Or'), ('values', ['Call', 'Call', 'Num'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'Expr']), ('decorator_list', [])]": 9, "List -> [('elts', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('ctx', 'Load')]": 2, "BoolOp -> [('op', 'Or'), ('values', ['Call', 'Call', 'Call', 'Call', 'Call', 'Call'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'FunctionDef', 'For', 'Assign', 'Assign', 'For', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Num', 'Num', 'Num', 'BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "ExceptHandler -> [('type', 'Name'), ('name', 'Name'), ('body', ['Assign', 'Assign', 'If', 'Raise'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Str', 'Name']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "Call -> [('func', 'Call'), ('args', []), ('keywords', []), ('starargs', 'Subscript'), ('kwargs', 'NoneType')]": 1, "Tuple -> [('elts', ['Name', 'Subscript', 'Subscript']), ('ctx', 'Load')]": 5, "arguments -> [('args', ['Name', 'Name']), ('vararg', 'str'), ('kwarg', 'str'), ('defaults', ['Name'])]": 25, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'If', 'Assign', 'Assign', 'If']), ('decorator_list', [])]": 1, "BinOp -> [('left', 'Attribute'), ('op', 'Mod'), ('right', 'Num')]": 1, "With -> [('context_expr', 'Call'), ('optional_vars', 'Name'), ('body', ['Expr', 'AugAssign', 'Expr', 'If'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Expr', 'If', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Expr', 'Assign', 'If']), ('decorator_list', [])]": 1, "Assign -> [('targets', ['Name', 'List']), ('value', 'Call')]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Subscript', 'Subscript']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 3, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'Import', 'TryExcept', 'ImportFrom', 'ImportFrom', 'Assign', 'FunctionDef', 'ClassDef'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'TryFinally', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Break']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'Print', 'Assign', 'With', 'Return']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['If', 'Expr']), ('orelse', [])]": 10, "Call -> [('func', 'Attribute'), ('args', ['Compare', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "If -> [('test', 'Attribute'), ('body', ['Expr']), ('orelse', ['For'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Assign', 'If', 'If', 'If', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'BoolOp'), ('body', ['Raise', 'Expr']), ('orelse', [])]": 1, "If -> [('test', 'Call'), ('body', ['Assign', 'Expr', 'Assert']), ('orelse', ['Assert'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'TryExcept', 'Return']), ('decorator_list', ['Name', 'Name', 'Call', 'Call'])]": 2, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Name', 'Attribute', 'Attribute', 'Call'])]": 2, "For -> [('target', 'Name'), ('iter', 'List'), ('body', ['Assign', 'Assign', 'For', 'Assign', 'Expr', 'Assign', 'For']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'TryExcept', 'If', 'TryExcept', 'Assign', 'Expr', 'If', 'Expr', 'Expr', 'Expr', 'Return']), ('decorator_list', ['Name', 'Name', 'Call', 'Call'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 4, "BinOp -> [('left', 'Str'), ('op', 'Add'), ('right', 'Str')]": 30, "Call -> [('func', 'Name'), ('args', ['Name', 'Call', 'Dict', 'Dict']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "ExceptHandler -> [('type', 'Attribute'), ('name', 'NoneType'), ('body', ['Assign', 'If', 'Assign'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "List -> [('elts', ['Num', 'BinOp', 'BinOp', 'BinOp']), ('ctx', 'Load')]": 1, "Call -> [('func', 'Attribute'), ('args', ['Str', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 887, "Compare -> [('left', 'BinOp'), ('ops', ['NotEq']), ('comparators', ['Name'])]": 2, "Tuple -> [('elts', ['Attribute', 'Name', 'Name']), ('ctx', 'Load')]": 20, "Call -> [('func', 'Attribute'), ('args', ['List']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 14, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Str', 'Str', 'Name'])]": 3, "For -> [('target', 'Name'), ('iter', 'Subscript'), ('body', ['If']), ('orelse', [])]": 26, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'If', 'If', 'If', 'If', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'Assign', 'Assign', 'For', 'For', 'Assign', 'Assign', 'TryExcept']), ('decorator_list', [])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['Call', 'Str', 'Attribute'])]": 1, "BinOp -> [('left', 'Name'), ('op', 'BitOr'), ('right', 'Name')]": 21, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]": 1, "List -> [('elts', ['Attribute', 'Call']), ('ctx', 'Load')]": 5, "If -> [('test', 'BoolOp'), ('body', ['TryExcept']), ('orelse', ['Print', 'Expr'])]": 2, "Print -> [('dest', 'NoneType'), ('values', ['Str', 'Call', 'Str', 'BinOp']), ('nl', 'bool')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'ImportFrom', 'If', 'Return']), ('decorator_list', [])]": 3, "Compare -> [('left', 'Str'), ('ops', ['NotIn']), ('comparators', ['Call'])]": 12, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'Expr', 'ClassDef'])]": 1, "If -> [('test', 'BoolOp'), ('body', ['Raise']), ('orelse', [])]": 167, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'TryExcept', 'If', 'If', 'Return']), ('decorator_list', ['Name', 'Name', 'Call'])]": 1, "Tuple -> [('elts', ['Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple']), ('ctx', 'Load')]": 8, "Call -> [('func', 'Name'), ('args', ['Str', 'Str', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 108, "If -> [('test', 'Attribute'), ('body', ['Assign', 'Expr', 'Expr', 'For', 'Expr']), ('orelse', [])]": 1, "Compare -> [('left', 'Name'), ('ops', ['NotEq']), ('comparators', ['Name'])]": 167, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'Assign', 'If', 'Assign', 'If', 'If', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'With']), ('decorator_list', ['Name'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Attribute', 'Num', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Tuple -> [('elts', ['BinOp', 'Name']), ('ctx', 'Load')]": 19, "Call -> [('func', 'Name'), ('args', ['BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'Name')]": 1, "Call -> [('func', 'Name'), ('args', ['Subscript', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 45, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Name', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 41, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'FunctionDef', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['UnaryOp', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 4, "Call -> [('func', 'Attribute'), ('args', ['Num', 'Num', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 42, "With -> [('context_expr', 'Call'), ('optional_vars', 'Name'), ('body', ['Expr', 'ImportFrom', 'Assert'])]": 1, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['If', 'If', 'Expr', 'Expr']), ('orelse', [])]": 2, "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['Assign', 'Assign', 'Expr', 'Expr', 'Expr']), ('orelse', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Attribute', 'Attribute']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 3, "Call -> [('func', 'Name'), ('args', ['Str', 'Dict', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 3, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "Tuple -> [('elts', ['Subscript', 'Name', 'Name']), ('ctx', 'Load')]": 4, "IfExp -> [('test', 'Name'), ('body', 'Call'), ('orelse', 'Name')]": 4, "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Expr']), ('orelse', [])]": 24, "BinOp -> [('left', 'Subscript'), ('op', 'Sub'), ('right', 'Num')]": 13, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['BinOp', 'Name', 'Call', 'Call', 'Name', 'Name'])]": 5, "BoolOp -> [('op', 'And'), ('values', ['Subscript', 'Num'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Attribute', 'Dict']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assert', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'If', 'Return']), ('decorator_list', [])]": 1, "ExceptHandler -> [('type', 'NoneType'), ('name', 'NoneType'), ('body', ['Assign', 'Assign'])]": 8, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Num', 'Str']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 3, "Call -> [('func', 'Attribute'), ('args', ['BinOp', 'Call', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'If'])]": 1, "If -> [('test', 'Attribute'), ('body', ['If']), ('orelse', ['Return'])]": 1, "Tuple -> [('elts', ['Name', 'BoolOp']), ('ctx', 'Load')]": 12, "If -> [('test', 'Compare'), ('body', ['If', 'Assign']), ('orelse', ['Assign', 'Assign'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Print']), ('decorator_list', [])]": 1, "If -> [('test', 'BoolOp'), ('body', ['If', 'Expr']), ('orelse', ['For'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'For', 'Assign', 'Return']), ('decorator_list', [])]": 2, "While -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'If', 'Assign', 'Assign', 'If']), ('orelse', [])]": 2, "IfExp -> [('test', 'Attribute'), ('body', 'Attribute'), ('orelse', 'Str')]": 1, "TryExcept -> [('body', ['Assign', 'Print']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Return']), ('decorator_list', ['Call', 'Call'])]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]": 14, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'FunctionDef', 'Expr', 'Expr', 'Return']), ('decorator_list', [])]": 1, "Module -> [('body', ['Import', 'TryExcept', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]": 1, "While -> [('test', 'Compare'), ('body', ['Print', 'Assign', 'For', 'Expr', 'Print', 'AugAssign', 'AugAssign']), ('orelse', [])]": 1, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['If', 'Assign', 'If']), ('orelse', [])]": 4, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Expr', 'If']), ('orelse', [])]": 8, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Tuple', 'Name', 'Tuple', 'Dict', 'Name', 'Tuple', 'Num'])]": 5, "ExceptHandler -> [('type', 'Name'), ('name', 'Name'), ('body', ['Assign', 'Assign', 'Expr', 'Assign'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'If', 'Assign', 'If', 'TryExcept']), ('decorator_list', [])]": 1, "If -> [('test', 'Name'), ('body', ['Assign']), ('orelse', ['Assign', 'Assign', 'If', 'If'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'ImportFrom', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 2, "Compare -> [('left', 'BinOp'), ('ops', ['NotIn']), ('comparators', ['Name'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'Assign', 'Expr', 'If']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'While']), ('decorator_list', [])]": 1, "TryExcept -> [('body', ['Print', 'If', 'If', 'Assign', 'Expr', 'Assign', 'Assign', 'For', 'Print']), ('handlers', ['ExceptHandler', 'ExceptHandler']), ('orelse', [])]": 1, "While -> [('test', 'Name'), ('body', ['Assign', 'For', 'Expr', 'If', 'Expr']), ('orelse', [])]": 1, "Compare -> [('left', 'Name'), ('ops', ['LtE']), ('comparators', ['Name'])]": 23, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'List']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 6, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For']), ('orelse', [])]": 1, "TryFinally -> [('body', ['If', 'Assign', 'Assign']), ('finalbody', ['If', 'If', 'Assign'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'If', 'Assign', 'If', 'Assign', 'Assign', 'Assert', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'Attribute'), ('body', ['Assign', 'Assign', 'Assign']), ('orelse', [])]": 5, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "While -> [('test', 'BoolOp'), ('body', ['If', 'AugAssign']), ('orelse', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'FunctionDef', 'Return']), ('decorator_list', [])]": 2, "Tuple -> [('elts', ['Attribute', 'Attribute', 'Attribute', 'Call']), ('ctx', 'Load')]": 2, "ExceptHandler -> [('type', 'Attribute'), ('name', 'Name'), ('body', ['Assign', 'Assign', 'Expr', 'Expr'])]": 1, "Compare -> [('left', 'Attribute'), ('ops', ['LtE']), ('comparators', ['Name'])]": 6, "Raise -> [('type', 'Attribute'), ('inst', 'BinOp'), ('tback', 'NoneType')]": 6, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'FunctionDef', 'FunctionDef'])]": 1, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'If']), ('orelse', [])]": 8, "Call -> [('func', 'Name'), ('args', ['Name', 'Attribute', 'Str', 'Name', 'Dict']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Expr', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 2, "For -> [('target', 'Name'), ('iter', 'Tuple'), ('body', ['Assign', 'If']), ('orelse', [])]": 15, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Break']), ('orelse', [])]": 2, "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Break']), ('orelse', [])]": 5, "If -> [('test', 'BoolOp'), ('body', ['Expr', 'Expr', 'Expr', 'Return']), ('orelse', ['Expr', 'Expr', 'Expr', 'Expr'])]": 1, "If -> [('test', 'BoolOp'), ('body', ['Assign', 'If', 'Assign', 'Assign', 'If']), ('orelse', ['If'])]": 1, "If -> [('test', 'BoolOp'), ('body', ['For', 'Delete', 'Delete', 'Delete', 'If', 'If', 'Assign', 'Expr']), ('orelse', ['AugAssign'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Call', 'Num', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 13, "Slice -> [('lower', 'NoneType'), ('upper', 'NoneType'), ('step', 'Num')]": 28, "Call -> [('func', 'Attribute'), ('args', ['Num', 'Attribute', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assert', 'Assert', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assert']), ('decorator_list', [])]": 2, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Subscript', 'Attribute', 'Subscript', 'Subscript', 'Subscript', 'Subscript', 'Subscript', 'Subscript'])]": 1, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'If', 'Assign', 'Assign', 'Assign', 'Print']), ('orelse', [])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Str', 'Str', 'Attribute', 'List', 'Dict'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Assign', 'If', 'Expr', 'If']), ('decorator_list', [])]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'ClassDef', 'ClassDef'])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['If', 'Assign', 'FunctionDef']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'If']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['TryExcept', 'Raise']), ('orelse', [])]": 2, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'ClassDef', 'Assign', 'ClassDef', 'Assign', 'ClassDef', 'Assign', 'ClassDef', 'Assign'])]": 1, "TryExcept -> [('body', ['Assign']), ('handlers', ['ExceptHandler']), ('orelse', ['If', 'If'])]": 3, "BinOp -> [('left', 'BinOp'), ('op', 'Add'), ('right', 'Name')]": 314, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'For', 'If', 'If', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'BoolOp'), ('body', ['Assign', 'If', 'AugAssign', 'Assign', 'Assign', 'Assign', 'For']), ('orelse', [])]": 2, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'TryExcept', 'TryExcept', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'FunctionDef', 'Assign', 'For']), ('decorator_list', ['Name'])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Delete', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "Call -> [('func', 'Name'), ('args', ['BinOp']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 30, "ExceptHandler -> [('type', 'NoneType'), ('name', 'NoneType'), ('body', ['Import', 'Print'])]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'TryFinally', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('orelse', [])]": 1, "TryExcept -> [('body', ['Expr']), ('handlers', ['ExceptHandler']), ('orelse', ['Assign'])]": 4, "Call -> [('func', 'Name'), ('args', ['Attribute', 'Attribute', 'BinOp', 'Attribute']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Num']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Return']), ('orelse', [])]": 7, "With -> [('context_expr', 'Call'), ('optional_vars', 'Name'), ('body', ['Assign', 'TryExcept'])]": 1, "TryExcept -> [('body', ['Expr']), ('handlers', ['ExceptHandler']), ('orelse', ['Expr', 'Expr', 'Assign'])]": 1, "List -> [('elts', ['Dict']), ('ctx', 'Load')]": 54, "Call -> [('func', 'Name'), ('args', ['Subscript', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'Name')]": 1, "UnaryOp -> [('op', 'Invert'), ('operand', 'Call')]": 10, "Call -> [('func', 'Name'), ('args', ['BinOp', 'UnaryOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "TryExcept -> [('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'For', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Assign', 'For', 'Print', 'Expr', 'Return']), ('decorator_list', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Name', 'Subscript']), ('keywords', ['keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "arguments -> [('args', ['Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'str'), ('defaults', ['Str', 'Dict'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'For', 'Return']), ('decorator_list', [])]": 6, "Print -> [('dest', 'NoneType'), ('values', ['Str', 'Name', 'Str', 'Call', 'Str', 'Subscript', 'Str']), ('nl', 'bool')]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Return']), ('orelse', ['Raise'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Str', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 52, "While -> [('test', 'Compare'), ('body', ['Assign', 'AugAssign', 'Expr']), ('orelse', [])]": 1, "Tuple -> [('elts', ['Attribute', 'Call', 'Call', 'Name', 'Call']), ('ctx', 'Load')]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Expr', 'FunctionDef']), ('decorator_list', [])]": 1, "TryFinally -> [('body', ['Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'AugAssign', 'Expr', 'For', 'Expr', 'Return']), ('finalbody', ['Expr', 'Expr'])]": 2, "Raise -> [('type', 'Name'), ('inst', 'Call'), ('tback', 'NoneType')]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Expr']), ('decorator_list', [])]": 24, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['TryExcept', 'Assign', 'If', 'If', 'If']), ('orelse', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Expr']), ('orelse', ['Assign', 'Expr', 'Expr'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'For', 'Assign', 'For']), ('decorator_list', [])]": 2, "Dict -> [('keys', ['Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute']), ('values', ['Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num'])]": 1, "Call -> [('func', 'Name'), ('args', []), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 13, "If -> [('test', 'Compare'), ('body', ['Expr', 'For', 'Return']), ('orelse', [])]": 2, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 2, "List -> [('elts', ['Attribute', 'Name', 'Call']), ('ctx', 'Load')]": 5, "If -> [('test', 'Compare'), ('body', ['Return']), ('orelse', ['Raise'])]": 8, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Assign', 'If', 'Assign', 'If', 'If', 'Assign', 'If', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 4, "Assign -> [('targets', ['Name']), ('value', 'Lambda')]": 206, "Module -> [('body', ['Import', 'Assign', 'Expr', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'Import', 'Import', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'For', 'Expr', 'Assign', 'Assign', 'Assign', 'While'])]": 1, "If -> [('test', 'BoolOp'), ('body', ['Assign', 'For']), ('orelse', [])]": 5, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'If']), ('orelse', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 9, "BinOp -> [('left', 'Subscript'), ('op', 'Sub'), ('right', 'Attribute')]": 5, "If -> [('test', 'Call'), ('body', ['Assign', 'Expr']), ('orelse', ['ImportFrom', 'Assert', 'Expr', 'Expr'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'For', 'Assign', 'For', 'Assign', 'For', 'Assign', 'For', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 1, "List -> [('elts', ['Lambda', 'Lambda', 'Lambda', 'Lambda', 'Lambda', 'Lambda']), ('ctx', 'Load')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Import', 'Assign', 'ClassDef', 'Assign', 'TryExcept']), ('decorator_list', [])]": 1, "DictComp -> [('key', 'Name'), ('value', 'Name'), ('generators', ['comprehension'])]": 1, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Print']), ('orelse', [])]": 2, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Str', 'Str', 'Str', 'Str', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'TryExcept', 'Assign', 'If', 'TryExcept', 'If', 'If', 'Expr', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'TryExcept']), ('decorator_list', [])]": 2, "Assign -> [('targets', ['Attribute', 'Attribute', 'Attribute', 'Attribute']), ('value', 'Dict')]": 1, "If -> [('test', 'Name'), ('body', ['Assign', 'Assign', 'Expr']), ('orelse', ['Assign'])]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'ImportFrom', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'FunctionDef', 'If'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Assign', 'For', 'Return']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['If', 'Assign', 'Assign', 'For']), ('orelse', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'TryExcept', 'If', 'Assign', 'TryExcept', 'Expr', 'Return']), ('decorator_list', ['Name', 'Name', 'Call', 'Call'])]": 1, "comprehension -> [('target', 'Name'), ('iter', 'Tuple'), ('ifs', ['Name'])]": 2, "If -> [('test', 'Compare'), ('body', ['Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'If', 'If', 'If', 'If', 'If', 'Assign', 'Expr', 'TryFinally']), ('orelse', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name']), ('keywords', ['keyword', 'keyword']), ('starargs', 'Name'), ('kwargs', 'Name')]": 1, "For -> [('target', 'Tuple'), ('iter', 'Name'), ('body', ['Print']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assert', 'Assert', 'Assert']), ('decorator_list', [])]": 6, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'For', 'Expr']), ('decorator_list', [])]": 1, "If -> [('test', 'UnaryOp'), ('body', ['If', 'Expr', 'Return']), ('orelse', [])]": 1, "Compare -> [('left', 'Attribute'), ('ops', ['Gt']), ('comparators', ['BinOp'])]": 3, "If -> [('test', 'Compare'), ('body', ['TryExcept', 'Expr']), ('orelse', ['Expr'])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Expr', 'Expr']), ('orelse', [])]": 15, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Return']), ('decorator_list', [])]": 23, "TryFinally -> [('body', ['TryExcept']), ('finalbody', ['Assign', 'Expr'])]": 2, "Call -> [('func', 'Attribute'), ('args', ['Yield']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 16, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'Assign', 'FunctionDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assert', 'Assert', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assert', 'Assert', 'Assert', 'Assert', 'For']), ('decorator_list', [])]": 1, "Call -> [('func', 'Name'), ('args', ['BinOp', 'Name', 'BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 18, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Print', 'If', 'Assign', 'For', 'If', 'Print', 'Expr', 'Print', 'Assign', 'Assign', 'If', 'Print', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'If', 'Expr', 'Assign']), ('orelse', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', ['Attribute'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ClassDef', 'ClassDef', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 2, "Module -> [('body', ['Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'TryExcept', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'Assign', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef'])]": 1, "If -> [('test', 'Name'), ('body', ['ImportFrom', 'Assign', 'Assign', 'Expr', 'Assign']), ('orelse', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'If', 'Assign', 'For', 'Expr']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'Assign', 'Assign', 'Print']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'If', 'If', 'If']), ('decorator_list', [])]": 2, "ExceptHandler -> [('type', 'NoneType'), ('name', 'NoneType'), ('body', ['If', 'Return'])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Expr', 'Print']), ('orelse', [])]": 2, "Tuple -> [('elts', ['Str', 'Dict']), ('ctx', 'Load')]": 4, "If -> [('test', 'Subscript'), ('body', ['TryExcept']), ('orelse', ['Assign', 'Break'])]": 3, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['If', 'If', 'If']), ('decorator_list', [])]": 1, "Compare -> [('left', 'Subscript'), ('ops', ['NotIn']), ('comparators', ['Subscript'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Return']), ('decorator_list', [])]": 4, "Call -> [('func', 'Name'), ('args', ['List']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'Name')]": 1, "Call -> [('func', 'Call'), ('args', []), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "If -> [('test', 'Compare'), ('body', ['If', 'Assign', 'Raise']), ('orelse', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'Assign', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 14, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'If']), ('decorator_list', [])]": 27, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'If', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Expr', 'For', 'If', 'If', 'Assign', 'Assign', 'If', 'If', 'Assign', 'Assign', 'For', 'Expr', 'For', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'If', 'Assign', 'Assign', 'If', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'TryExcept', 'TryExcept', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'If', 'Assign', 'Assign', 'If', 'Return']), ('decorator_list', [])]": 3, "Call -> [('func', 'Name'), ('args', ['Name', 'BinOp', 'Subscript']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Assign -> [('targets', ['Tuple']), ('value', 'BoolOp')]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Name', 'Name', 'BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'If', 'Import']), ('orelse', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'If', 'Print']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Tuple'), ('body', ['Assign', 'Assign', 'If', 'If', 'If']), ('orelse', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'If', 'Assign', 'Expr', 'Expr', 'If', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'If', 'Assign', 'If', 'For', 'If', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Str', 'Str']), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 15, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 1, "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'Expr', 'FunctionDef', 'ClassDef', 'FunctionDef'])]": 1, "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign']), ('orelse', ['Return'])]": 1, "If -> [('test', 'Name'), ('body', ['Assign']), ('orelse', ['Assign', 'Assign', 'Assign', 'Expr'])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "Assign -> [('targets', ['Attribute', 'Name']), ('value', 'Call')]": 37, "Call -> [('func', 'Name'), ('args', ['Tuple', 'Tuple']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 10, "If -> [('test', 'Compare'), ('body', ['Assign', 'AugAssign', 'AugAssign']), ('orelse', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Expr', 'Assign', 'Expr', 'Expr', 'Return']), ('decorator_list', [])]": 2, "BoolOp -> [('op', 'And'), ('values', ['Name', 'Attribute', 'Attribute'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'Name'), ('body', ['Assign', 'If', 'If', 'Expr', 'AugAssign']), ('orelse', [])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'str'), ('kwarg', 'str'), ('defaults', ['Name', 'Name'])]": 1, "Call -> [('func', 'Name'), ('args', ['Name']), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 4, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'AugAssign', 'AugAssign', 'Assign', 'For', 'If', 'AugAssign', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assert', 'Assert', 'Assert', 'Assign', 'Assign', 'Assign', 'Assert', 'Assert', 'Assert']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Expr', 'Expr', 'Continue']), ('orelse', ['If'])]": 2, "Str -> [('s', 'unicode')]": 1601, "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['Print'])]": 12, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Expr', 'For', 'Expr', 'Assign']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Attribute', 'Attribute', 'Name', 'Attribute', 'BinOp', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "List -> [('elts', ['Name', 'BinOp', 'BinOp', 'BinOp']), ('ctx', 'Load')]": 5, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'TryExcept', 'TryExcept', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'ImportFrom', 'ClassDef', 'ClassDef'])]": 1, "If -> [('test', 'Call'), ('body', ['Assign', 'For', 'Return']), ('orelse', ['Assign'])]": 1, "BoolOp -> [('op', 'And'), ('values', ['Compare', 'Attribute', 'Attribute'])]": 3, "If -> [('test', 'Compare'), ('body', ['Expr']), ('orelse', ['Assign', 'If', 'Assign', 'If', 'Expr'])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Name', 'Name', 'Str', 'Str', 'Name', 'Name'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr']), ('decorator_list', ['Name', 'Name', 'Name'])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Dict', 'Dict', 'Dict', 'Dict', 'Dict', 'Dict', 'Dict', 'Dict', 'Dict', 'Dict', 'Dict', 'Dict', 'Dict'])]": 1, "If -> [('test', 'Compare'), ('body', ['TryExcept', 'TryExcept', 'If']), ('orelse', ['Expr', 'Return'])]": 1, "TryExcept -> [('body', ['For', 'For', 'For']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'For', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "Tuple -> [('elts', ['Name', 'Call']), ('ctx', 'Load')]": 197, "Compare -> [('left', 'Attribute'), ('ops', ['GtE']), ('comparators', ['Subscript'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['TryExcept', 'TryFinally']), ('decorator_list', [])]": 3, "If -> [('test', 'Compare'), ('body', ['Assign', 'If', 'Return']), ('orelse', [])]": 8, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'Assign', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'Continue']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Print', 'For', 'Assign', 'For', 'Print', 'For', 'Print', 'For', 'Print', 'For', 'Print', 'For', 'Assign', 'Print', 'Assign', 'While', 'Print', 'For', 'Print', 'For', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]": 1, "Tuple -> [('elts', ['Str', 'BinOp', 'BinOp', 'BinOp']), ('ctx', 'Load')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assert']), ('decorator_list', [])]": 3, "Call -> [('func', 'Name'), ('args', ['Num', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 15, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'ClassDef', 'FunctionDef']), ('decorator_list', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'ClassDef', 'FunctionDef']), ('decorator_list', [])]": 1, "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'AugAssign', 'Assign', 'For']), ('orelse', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Subscript']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 713, "Call -> [('func', 'Name'), ('args', []), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 12, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Return']), ('orelse', [])]": 1, "Print -> [('dest', 'NoneType'), ('values', ['Str', 'Call', 'Call']), ('nl', 'bool')]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'AugAssign', 'Assign', 'Expr']), ('orelse', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'For', 'Assign', 'Expr', 'If']), ('decorator_list', ['Attribute'])]": 1, "Call -> [('func', 'Name'), ('args', ['List', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 4, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Attribute', 'Attribute', 'Attribute', 'Num', 'BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'While', 'If']), ('orelse', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['FunctionDef', 'Expr', 'FunctionDef']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Subscript'), ('body', ['Assign', 'If', 'Assign', 'Assign', 'If']), ('orelse', [])]": 1, "BoolOp -> [('op', 'And'), ('values', ['Compare', 'UnaryOp', 'Subscript'])]": 1, "For -> [('target', 'Name'), ('iter', 'Tuple'), ('body', ['If', 'If']), ('orelse', [])]": 2, "List -> [('elts', ['Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple']), ('ctx', 'Load')]": 1, "For -> [('target', 'Name'), ('iter', 'List'), ('body', ['Expr', 'Assign', 'If']), ('orelse', [])]": 1, "With -> [('context_expr', 'Name'), ('optional_vars', 'NoneType'), ('body', ['Assign', 'Expr', 'Assign'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'Attribute')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'If', 'For']), ('decorator_list', ['Name'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'Assign', 'If', 'Assign', 'For', 'If', 'For', 'If', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign']), ('orelse', ['ImportFrom', 'Assign'])]": 2, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'If'])]": 1, "If -> [('test', 'Compare'), ('body', ['For', 'Assign']), ('orelse', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 4, "List -> [('elts', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('ctx', 'Load')]": 13, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Name', 'Attribute', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'Assign', 'If']), ('decorator_list', ['Name', 'Name', 'Call', 'Call'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'While', 'Print']), ('decorator_list', [])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Expr', 'Assign', 'Assign', 'For', 'Assign', 'Return']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'Assign', 'Assign']), ('orelse', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Call', 'Name', 'Name', 'Attribute', 'Attribute', 'ListComp', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'If', 'If', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "If -> [('test', 'UnaryOp'), ('body', ['Assign']), ('orelse', ['Assign', 'Expr'])]": 1, "TryExcept -> [('body', ['Import', 'Assign']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 14, "TryExcept -> [('body', ['If', 'For']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'FunctionDef', 'FunctionDef', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "List -> [('elts', ['Str', 'BinOp']), ('ctx', 'Load')]": 1, "Compare -> [('left', 'Call'), ('ops', ['Is']), ('comparators', ['Call'])]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'AugAssign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'TryExcept', 'TryExcept', 'Assign', 'Assign', 'If', 'If', 'Assign', 'AugAssign', 'If']), ('decorator_list', [])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name'])]": 1, "If -> [('test', 'Subscript'), ('body', ['Assign', 'If']), ('orelse', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assert', 'Assign', 'Return']), ('decorator_list', [])]": 2, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'If', 'Print', 'Expr']), ('orelse', [])]": 2, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'FunctionDef', 'FunctionDef', 'TryExcept', 'If'])]": 1, "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'TryExcept']), ('decorator_list', [])]": 3, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Num', 'Num', 'Str', 'Str', 'Num', 'Num', 'Call', 'Call', 'Num', 'Num'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 1, "BinOp -> [('left', 'BinOp'), ('op', 'Sub'), ('right', 'BinOp')]": 44, "AugAssign -> [('target', 'Name'), ('op', 'Sub'), ('value', 'Subscript')]": 3, "IfExp -> [('test', 'Compare'), ('body', 'Subscript'), ('orelse', 'Name')]": 1, "Call -> [('func', 'Attribute'), ('args', ['Lambda', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]": 1, "While -> [('test', 'Call'), ('body', ['If', 'Expr']), ('orelse', [])]": 1, "If -> [('test', 'Call'), ('body', ['Assign', 'For', 'Assign']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'If', 'Expr', 'Assign', 'For', 'Print', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Print', 'Assign', 'Assign', 'Print', 'Assign', 'Assign', 'Print', 'Assign', 'Assign', 'Print', 'Assign', 'Expr', 'Expr', 'Assign', 'While', 'Print', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'If', 'Assign', 'Return']), ('decorator_list', ['Name'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'With']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'For', 'Assign']), ('decorator_list', [])]": 1, "TryExcept -> [('body', ['If', 'If', 'Print', 'For', 'Print', 'If']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 2, "List -> [('elts', ['BinOp', 'BinOp', 'Str']), ('ctx', 'Load')]": 1, "TryExcept -> [('body', ['Assign', 'Expr', 'Assign', 'If']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 2, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'Import', 'ClassDef', 'FunctionDef', 'ClassDef', 'ClassDef', 'ClassDef', 'FunctionDef'])]": 1, "If -> [('test', 'Compare'), ('body', ['If', 'Assign']), ('orelse', ['If', 'Assign'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'For', 'Assign', 'Assign', 'If', 'Assign', 'For', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Print']), ('orelse', ['Expr'])]": 1, "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'If', 'Assign']), ('orelse', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'If', 'Assign', 'If', 'Assign', 'If', 'Assign', 'If']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'If', 'FunctionDef', 'TryExcept', 'If', 'ImportFrom', 'Import', 'Assign', 'Assign', 'Assign', 'Expr', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'TryExcept', 'Return']), ('decorator_list', ['Call', 'Name'])]": 1, "If -> [('test', 'UnaryOp'), ('body', ['Expr', 'Assign']), ('orelse', [])]": 10, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Name'])]": 1, "ClassDef -> [('name', 'str'), ('bases', []), ('body', ['Pass']), ('decorator_list', [])]": 24, "comprehension -> [('target', 'Tuple'), ('iter', 'Call'), ('ifs', ['Call'])]": 6, "Tuple -> [('elts', ['Num', 'Name', 'Attribute', 'Name', 'Name']), ('ctx', 'Load')]": 2, "Module -> [('body', ['Import', 'ImportFrom', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'FunctionDef'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'AugAssign', 'AugAssign', 'Return']), ('decorator_list', ['Name'])]": 1, "List -> [('elts', ['Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num']), ('ctx', 'Load')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'While', 'Expr']), ('decorator_list', [])]": 1, "If -> [('test', 'UnaryOp'), ('body', ['Expr', 'Raise']), ('orelse', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Expr', 'While', 'For', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "If -> [('test', 'Call'), ('body', ['Expr', 'Continue']), ('orelse', [])]": 4, "TryExcept -> [('body', ['Print', 'Assign', 'If']), ('handlers', ['ExceptHandler']), ('orelse', ['Expr'])]": 1, "If -> [('test', 'Compare'), ('body', ['Assert', 'Assign']), ('orelse', ['Assign'])]": 1, "Call -> [('func', 'Name'), ('args', ['Name', 'Name', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 18, "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['TryExcept', 'Assign', 'TryExcept', 'TryExcept', 'TryExcept', 'If', 'If', 'If', 'If']), ('orelse', [])]": 1, "Tuple -> [('elts', ['Str', 'Str', 'Attribute']), ('ctx', 'Load')]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'While', 'If']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "Tuple -> [('elts', ['Num', 'Num', 'Num']), ('ctx', 'Load')]": 330, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['TryExcept', 'If', 'Assign', 'Assign']), ('decorator_list', [])]": 2, "ImportFrom -> [('module', 'str'), ('names', ['alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias']), ('level', 'int')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'Expr', 'While']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'If', 'Assign', 'For', 'If']), ('decorator_list', [])]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef'])]": 1, "For -> [('target', 'Tuple'), ('iter', 'Tuple'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'Expr']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]": 4, "Lambda -> [('args', 'arguments'), ('body', 'BinOp')]": 77, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['AugAssign', 'Assign', 'AugAssign', 'Assign', 'AugAssign', 'Assign', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'TryExcept', 'If']), ('decorator_list', [])]": 3, "Call -> [('func', 'Name'), ('args', ['Name', 'Tuple']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Name', 'Name', 'Name', 'Call', 'Call'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'For', 'Assign', 'For', 'Return']), ('decorator_list', [])]": 2, "BoolOp -> [('op', 'Or'), ('values', ['Compare', 'Compare'])]": 259, "TryFinally -> [('body', ['For']), ('finalbody', ['Expr', 'Expr', 'Expr'])]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'ClassDef', 'ClassDef', 'If'])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Expr', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Raise', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'Call'), ('body', ['Assign', 'Assign', 'TryExcept', 'Assign', 'TryExcept', 'Assign', 'If']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'If', 'If', 'Expr']), ('decorator_list', [])]": 1, "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['Exec', 'Assign'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Return']), ('decorator_list', [])]": 1, "BinOp -> [('left', 'Call'), ('op', 'Mult'), ('right', 'Subscript')]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Expr', 'Print', 'If']), ('decorator_list', ['Call', 'Name'])]": 1, "ExceptHandler -> [('type', 'Attribute'), ('name', 'NoneType'), ('body', ['Assign', 'Print'])]": 1, "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign', 'For', 'If', 'Assign']), ('orelse', [])]": 2, "If -> [('test', 'Attribute'), ('body', ['Assign', 'For']), ('orelse', ['If'])]": 2, "If -> [('test', 'BoolOp'), ('body', ['If', 'Assign', 'Assign', 'Assign', 'Assign', 'TryFinally', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'If', 'If', 'Expr']), ('orelse', ['If'])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name'])]": 114, "Dict -> [('keys', ['Str', 'Str']), ('values', ['Name', 'Call'])]": 23, "If -> [('test', 'UnaryOp'), ('body', ['Print', 'Print', 'Expr']), ('orelse', [])]": 1, "If -> [('test', 'Call'), ('body', ['Assign']), ('orelse', ['Assign', 'If'])]": 2, "Tuple -> [('elts', ['BinOp', 'BinOp', 'Name']), ('ctx', 'Load')]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'FunctionDef', 'FunctionDef', 'If', 'Return']), ('decorator_list', [])]": 2, "BinOp -> [('left', 'Call'), ('op', 'BitAnd'), ('right', 'BinOp')]": 1, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Print', 'Assign', 'Expr', 'Expr']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'TryExcept', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'TryExcept', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'TryExcept', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'TryExcept', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Assign', 'AugAssign', 'Expr', 'For', 'AugAssign', 'Return']), ('decorator_list', [])]": 1, "Dict -> [('keys', ['Call']), ('values', ['Call'])]": 2, "If -> [('test', 'Name'), ('body', ['Assign']), ('orelse', ['If', 'Assign', 'TryExcept'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Expr', 'Return']), ('decorator_list', [])]": 19, "TryExcept -> [('body', ['Assign', 'Return']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 20, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ClassDef', 'Return']), ('decorator_list', [])]": 1, "BoolOp -> [('op', 'Or'), ('values', ['ListComp', 'List'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Name', 'Name', 'Subscript']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'For', 'For']), ('decorator_list', ['Name'])]": 2, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Dict', 'Dict', 'Dict', 'Dict', 'Dict', 'Dict', 'Dict'])]": 5, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'str'), ('defaults', [])]": 2, "TryExcept -> [('body', ['Assign', 'If', 'Return']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name']), ('keywords', ['keyword', 'keyword', 'keyword']), ('starargs', 'Name'), ('kwargs', 'Name')]": 3, "If -> [('test', 'Compare'), ('body', ['Return']), ('orelse', ['Assign', 'Return'])]": 6, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ClassDef', 'ClassDef', 'FunctionDef', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "Compare -> [('left', 'Call'), ('ops', ['Eq']), ('comparators', ['Subscript'])]": 6, "Name -> [('id', 'str'), ('ctx', 'Load')]": 289710, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Assign', 'Expr', 'If', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "Compare -> [('left', 'Attribute'), ('ops', ['Gt']), ('comparators', ['Name'])]": 13, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Return']), ('decorator_list', [])]": 180, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 5, "Print -> [('dest', 'NoneType'), ('values', ['Name', 'Str', 'Name']), ('nl', 'bool')]": 3, "Module -> [('body', ['Import', 'Expr', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'FunctionDef', 'FunctionDef'])]": 1, "If -> [('test', 'Name'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'Expr', 'Return']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'If', 'If', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'Assign', 'If', 'Assign', 'For', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign']), ('orelse', ['AugAssign'])]": 8, "If -> [('test', 'UnaryOp'), ('body', ['Expr']), ('orelse', ['If', 'Assign', 'If'])]": 2, "While -> [('test', 'Name'), ('body', ['Assign', 'If', 'Expr', 'Assign']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Print']), ('decorator_list', [])]": 5, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 3, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Attribute', 'Name', 'Attribute', 'Attribute', 'Attribute', 'Call', 'Call'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Expr', 'Assign', 'If', 'Assign']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Expr', 'Return']), ('orelse', ['Expr', 'Expr', 'Expr', 'Assign', 'Assign'])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign']), ('orelse', ['Assert'])]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Return']), ('decorator_list', [])]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'TryExcept', 'Import', 'ImportFrom', 'Assign', 'ClassDef', 'ClassDef', 'FunctionDef', 'FunctionDef'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 1, "TryExcept -> [('body', ['Expr', 'Expr', 'Expr', 'Return']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'For', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Name', 'Tuple', 'BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ClassDef', 'ClassDef', 'Assign', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Str', 'Name', 'Str', 'List']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign']), ('orelse', ['Assign', 'If', 'For'])]": 1, "If -> [('test', 'Call'), ('body', ['If', 'TryExcept']), ('orelse', ['Assign'])]": 1, "Call -> [('func', 'Name'), ('args', ['BinOp', 'BinOp']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 7, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'If', 'TryExcept', 'Assign', 'If', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 1, "TryExcept -> [('body', ['Assign', 'Assign', 'Print', 'For', 'Print', 'Assign', 'Print', 'Print', 'Assign']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', ['Name'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign']), ('decorator_list', [])]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'ClassDef', 'If'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 3, "Assert -> [('test', 'Compare'), ('msg', 'NoneType')]": 395, "Return -> [('value', 'Num')]": 175, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Assign', 'Assign', 'For', 'Expr', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'If', 'If', 'Expr']), ('decorator_list', [])]": 1, "ExceptHandler -> [('type', 'Tuple'), ('name', 'NoneType'), ('body', ['TryExcept'])]": 4, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 487, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Name', 'Attribute', 'Name'])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str']), ('values', ['Str', 'Num', 'Str', 'Dict'])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'For', 'Expr', 'Expr', 'Assign', 'Expr', 'If']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'Expr', 'For']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Name', 'Subscript', 'Name']), ('keywords', []), ('starargs', 'Name'), ('kwargs', 'Name')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Expr', 'Expr', 'If']), ('orelse', ['If', 'Expr', 'Expr'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'For', 'Raise']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'If', 'If', 'Assign', 'Return']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['AugAssign', 'Assign', 'Assign', 'If', 'Expr', 'Assign']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'Expr', 'Assign', 'Expr', 'Return']), ('decorator_list', [])]": 1, "Tuple -> [('elts', ['Name', 'Tuple', 'Name']), ('ctx', 'Load')]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'TryExcept', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'If', 'For']), ('decorator_list', ['Name'])]": 2, "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['Assign', 'Expr', 'Assign', 'Assign', 'For', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr']), ('orelse', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assert', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'If', 'Assign', 'If', 'If', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'BoolOp'), ('body', ['ImportFrom', 'Expr']), ('orelse', ['Expr', 'Raise'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Expr']), ('decorator_list', ['Call'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'FunctionDef', 'FunctionDef', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'For', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'ImportFrom', 'Import', 'ImportFrom', 'ClassDef', 'FunctionDef', 'If'])]": 1, "BoolOp -> [('op', 'And'), ('values', ['Call', 'Compare', 'Compare'])]": 4, "Module -> [('body', ['Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'ClassDef', 'FunctionDef', 'ClassDef', 'FunctionDef', 'ClassDef', 'FunctionDef', 'ClassDef'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Num', 'Str', 'Tuple']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 6, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['TryExcept']), ('orelse', [])]": 6, "Compare -> [('left', 'Name'), ('ops', ['In']), ('comparators', ['BoolOp'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'With', 'With']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Attribute', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 31, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 5, "BinOp -> [('left', 'Name'), ('op', 'Add'), ('right', 'Subscript')]": 28, "If -> [('test', 'UnaryOp'), ('body', ['Assign']), ('orelse', ['TryExcept'])]": 2, "BoolOp -> [('op', 'Or'), ('values', ['Compare', 'BoolOp'])]": 16, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Str', 'Call', 'Num', 'Num', 'List'])]": 1, "Assert -> [('test', 'UnaryOp'), ('msg', 'NoneType')]": 50, "If -> [('test', 'UnaryOp'), ('body', ['If']), ('orelse', ['If'])]": 10, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'For']), ('orelse', [])]": 5, "BinOp -> [('left', 'Subscript'), ('op', 'Div'), ('right', 'BinOp')]": 2, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['If', 'If', 'Assign', 'If', 'Assign', 'Assign', 'Expr']), ('orelse', [])]": 2, "Call -> [('func', 'Name'), ('args', ['Num']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 6, "Call -> [('func', 'Name'), ('args', ['UnaryOp', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'ImportFrom', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'TryExcept', 'TryExcept', 'If', 'Assign', 'Assign', 'Assign', 'Expr', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign', 'For', 'If']), ('orelse', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Expr', 'Expr', 'Assign']), ('orelse', [])]": 2, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Attribute', 'Name', 'Name', 'Name'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assert', 'If', 'Assign']), ('decorator_list', [])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['Name', 'Attribute', 'Call'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Return']), ('decorator_list', ['Attribute'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Global', 'Assign', 'If']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'List'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr']), ('orelse', [])]": 1, "If -> [('test', 'Call'), ('body', ['Assign', 'Expr']), ('orelse', ['Assign'])]": 1, "Compare -> [('left', 'Name'), ('ops', ['Gt']), ('comparators', ['BinOp'])]": 15, "TryExcept -> [('body', ['Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 2, "If -> [('test', 'Name'), ('body', ['Assign', 'Continue']), ('orelse', [])]": 2, "BoolOp -> [('op', 'And'), ('values', ['Compare', 'Name', 'UnaryOp'])]": 1, "Call -> [('func', 'Name'), ('args', ['Tuple', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 4, "ClassDef -> [('name', 'str'), ('bases', ['Name', 'Name']), ('body', ['Expr', 'Expr', 'Assign', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Print']), ('orelse', ['Return'])]": 1, "If -> [('test', 'Compare'), ('body', ['Expr', 'Assign', 'Assign', 'For', 'For', 'Expr']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'If', 'For', 'Expr']), ('decorator_list', [])]": 1, "If -> [('test', 'UnaryOp'), ('body', ['AugAssign', 'Print']), ('orelse', ['Assign', 'Assign', 'Expr', 'Print'])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign']), ('orelse', ['Expr'])]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'Expr', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'ClassDef', 'If'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Return']), ('decorator_list', ['Call', 'Call', 'Call'])]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['If', 'Assign', 'Assign', 'Assign', 'For', 'AugAssign', 'Expr']), ('orelse', [])]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'TryExcept', 'TryExcept', 'Import', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef'])]": 1, "TryExcept -> [('body', ['Assign']), ('handlers', ['ExceptHandler', 'ExceptHandler', 'ExceptHandler']), ('orelse', [])]": 3, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr']), ('decorator_list', [])]": 2, "For -> [('target', 'Name'), ('iter', 'GeneratorExp'), ('body', ['If', 'Assign', 'Assign']), ('orelse', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Attribute', 'Str']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'AugAssign', 'For', 'Assign', 'If', 'If']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'If', 'Expr']), ('decorator_list', [])]": 2, "Call -> [('func', 'Name'), ('args', ['Call', 'Dict', 'Dict', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign', 'If']), ('orelse', ['If'])]": 1, "Global -> [('names', ['str', 'str', 'str'])]": 3, "Tuple -> [('elts', ['Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple']), ('ctx', 'Load')]": 5, "Call -> [('func', 'Name'), ('args', ['Attribute', 'Attribute', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 6, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Pass']), ('decorator_list', ['Attribute', 'Attribute'])]": 1, "If -> [('test', 'Name'), ('body', ['Expr', 'If']), ('orelse', ['Expr'])]": 1, "Tuple -> [('elts', ['Subscript', 'Subscript', 'Attribute']), ('ctx', 'Load')]": 1, "For -> [('target', 'Name'), ('iter', 'ListComp'), ('body', ['For']), ('orelse', [])]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'ClassDef', 'FunctionDef', 'If'])]": 1, "arguments -> [('args', ['Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Dict'])]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'Assign', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'Assign', 'FunctionDef', 'ClassDef'])]": 1, "If -> [('test', 'Attribute'), ('body', ['Assign']), ('orelse', ['Return'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'TryExcept']), ('decorator_list', [])]": 1, "Tuple -> [('elts', ['Call', 'Name', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Tuple', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call']), ('ctx', 'Load')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "ExceptHandler -> [('type', 'Tuple'), ('name', 'Name'), ('body', ['If', 'If'])]": 2, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'If', 'Assign', 'If', 'Expr', 'Return']), ('decorator_list', [])]": 1, "With -> [('context_expr', 'Call'), ('optional_vars', 'NoneType'), ('body', ['Assign', 'Assign', 'If'])]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Print']), ('orelse', [])]": 11, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Import', 'Import', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Expr']), ('orelse', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Attribute', 'Name', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 3, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'TryExcept', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'If', 'Assign', 'ClassDef', 'ClassDef'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'For', 'Return']), ('decorator_list', [])]": 11, "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['Expr', 'Assign'])]": 4, "If -> [('test', 'Compare'), ('body', ['Assign']), ('orelse', ['Assign', 'Assign', 'If'])]": 4, "AugAssign -> [('target', 'Name'), ('op', 'Add'), ('value', 'Subscript')]": 18, "Call -> [('func', 'Attribute'), ('args', ['Call', 'Call', 'Name', 'Tuple']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Compare -> [('left', 'Name'), ('ops', ['NotIn']), ('comparators', ['Name'])]": 106, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'ImportFrom', 'If', 'Expr', 'Expr', 'TryFinally', 'Assign', 'For', 'For', 'Assign', 'TryFinally', 'Return']), ('decorator_list', [])]": 2, "List -> [('elts', ['Attribute', 'Str', 'Str', 'Name']), ('ctx', 'Load')]": 2, "If -> [('test', 'Name'), ('body', ['Pass']), ('orelse', [])]": 1, "BitAnd -> <NULL>": 416, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['ImportFrom', 'Raise']), ('orelse', [])]": 1, "If -> [('test', 'Compare'), ('body', ['If']), ('orelse', ['Expr', 'Expr'])]": 6, "TryFinally -> [('body', ['Assign', 'Assign', 'Expr']), ('finalbody', ['Delete'])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'FunctionDef']), ('decorator_list', [])]": 8, "TryExcept -> [('body', ['Expr', 'Raise']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 8, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'If', 'If', 'For', 'Return']), ('decorator_list', [])]": 2, "If -> [('test', 'Compare'), ('body', ['Assign']), ('orelse', ['Assign', 'Assign', 'Assign'])]": 4, "BinOp -> [('left', 'Str'), ('op', 'Add'), ('right', 'Subscript')]": 47, "Call -> [('func', 'Attribute'), ('args', ['Str', 'Tuple']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 34, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str']), ('values', ['Attribute', 'List', 'Num', 'Str'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'Import', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'Assign', 'For', 'Assign', 'For', 'Return']), ('decorator_list', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Str', 'Name', 'Name', 'Str', 'BinOp']), ('keywords', ['keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "If -> [('test', 'Compare'), ('body', ['Print', 'Assign', 'If', 'If']), ('orelse', [])]": 1, "BoolOp -> [('op', 'Or'), ('values', ['Subscript', 'Attribute'])]": 7, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name']), ('vararg', 'str'), ('kwarg', 'str'), ('defaults', ['Name', 'Name'])]": 7, "Call -> [('func', 'Attribute'), ('args', ['Str', 'Str', 'Str', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "BoolOp -> [('op', 'Or'), ('values', ['Name', 'Attribute', 'Compare'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Str', 'Call', 'Call', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "With -> [('context_expr', 'Call'), ('optional_vars', 'Name'), ('body', ['Assign', 'Assert', 'Assign', 'Assert'])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'ClassDef', 'FunctionDef']), ('decorator_list', [])]": 4, "BoolOp -> [('op', 'And'), ('values', ['Call', 'BinOp'])]": 2, "List -> [('elts', ['Str', 'Tuple', 'Name', 'Name', 'Tuple']), ('ctx', 'Load')]": 2, "Compare -> [('left', 'BinOp'), ('ops', ['Eq']), ('comparators', ['Call'])]": 8, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'ClassDef']), ('decorator_list', [])]": 2, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Assign', 'For', 'Expr']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'ImportFrom', 'For', 'For', 'Expr', 'Assign', 'Assign', 'For']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Expr', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'If', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'If', 'If', 'If', 'Expr']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'If', 'If', 'If']), ('orelse', [])]": 7, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'If', 'If', 'FunctionDef', 'FunctionDef', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'For', 'For', 'If', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'For', 'For', 'If', 'Expr', 'Expr', 'Expr', 'If', 'If', 'Expr', 'If', 'Return']), ('decorator_list', [])]": 1, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'Expr', 'Expr', 'If', 'Assign']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'AugAssign', 'For', 'Assign', 'Assign', 'Expr', 'Expr', 'FunctionDef', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'AugAssign', 'Assign', 'Assign', 'If', 'Assign', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Expr', 'Assign', 'For', 'Return']), ('decorator_list', [])]": 1, "While -> [('test', 'Name'), ('body', ['Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'TryExcept', 'Expr', 'Expr', 'If']), ('orelse', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', []), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Tuple', 'Name', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "If -> [('test', 'Compare'), ('body', ['ImportFrom', 'Assign', 'For', 'Assign', 'Return']), ('orelse', [])]": 2, "BoolOp -> [('op', 'And'), ('values', ['Name', 'Call', 'Attribute'])]": 5, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'If', 'Expr']), ('orelse', [])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['Name', 'Str', 'Call'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'If', 'Expr', 'Expr', 'Return']), ('decorator_list', [])]": 1, "BinOp -> [('left', 'Num'), ('op', 'Pow'), ('right', 'Attribute')]": 2, "If -> [('test', 'Call'), ('body', ['AugAssign', 'AugAssign', 'AugAssign', 'AugAssign', 'Assign']), ('orelse', [])]": 1, "ExceptHandler -> [('type', 'Name'), ('name', 'Name'), ('body', ['Assign', 'Continue'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Import', 'If', 'Assign', 'Assign', 'Return']), ('decorator_list', ['Name'])]": 2, "If -> [('test', 'Compare'), ('body', ['If', 'Assign']), ('orelse', ['If'])]": 16, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "If -> [('test', 'UnaryOp'), ('body', ['Expr', 'Break']), ('orelse', [])]": 1, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['If', 'If', 'If', 'Assign', 'If', 'AugAssign', 'For', 'Expr']), ('orelse', [])]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'TryExcept', 'ImportFrom', 'Assign', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'If', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'If'])]": 1, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'ClassDef'])]": 1, "keyword -> [('arg', 'str'), ('value', 'Lambda')]": 117, "If -> [('test', 'Compare'), ('body', ['Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Print', 'Assign', 'Print', 'Assign', 'Assign', 'For', 'Expr', 'For', 'Expr', 'Expr', 'Print', 'Assign', 'Assign', 'For', 'Expr', 'Print', 'Assign', 'Assign', 'For', 'Print', 'Assign', 'Assign', 'For', 'Expr', 'Print', 'Assign', 'Assign', 'For', 'Expr', 'Expr', 'Expr']), ('orelse', ['If'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', ['Call'])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['FunctionDef', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]": 1, "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'Assign']), ('orelse', [])]": 25, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Global', 'Global', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'If']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'List'), ('body', ['TryExcept']), ('orelse', [])]": 5, "TryFinally -> [('body', ['Assign', 'Expr', 'Expr', 'Expr', 'Expr']), ('finalbody', ['Expr'])]": 1, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Assign', 'For', 'If']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 2, "Compare -> [('left', 'BinOp'), ('ops', ['Gt']), ('comparators', ['BinOp'])]": 6, "With -> [('context_expr', 'Call'), ('optional_vars', 'Name'), ('body', ['If'])]": 1, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Expr']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Str', 'Name', 'Str', 'Str', 'Str']), ('keywords', ['keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Print -> [('dest', 'NoneType'), ('values', ['Subscript']), ('nl', 'bool')]": 9, "If -> [('test', 'Subscript'), ('body', ['Expr', 'Return']), ('orelse', [])]": 3, "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'FunctionDef', 'FunctionDef', 'Assign', 'If'])]": 2, "If -> [('test', 'Compare'), ('body', ['AugAssign', 'Expr']), ('orelse', [])]": 3, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign']), ('orelse', ['Assign', 'If', 'Assign'])]": 1, "Tuple -> [('elts', ['Str', 'Dict', 'Attribute']), ('ctx', 'Load')]": 6, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'For', 'Assign', 'Assign']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Print']), ('orelse', [])]": 2, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Name', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 14, "ClassDef -> [('name', 'str'), ('bases', []), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'TryExcept']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'ClassDef', 'Assign', 'Assign']), ('decorator_list', [])]": 2, "If -> [('test', 'Call'), ('body', ['Expr']), ('orelse', ['If', 'Expr'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['FunctionDef', 'TryExcept']), ('decorator_list', [])]": 2, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Attribute', 'Call']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 4, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'If', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'FunctionDef', 'Assign', 'Assign', 'If']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "If -> [('test', 'Name'), ('body', ['If']), ('orelse', ['Assign', 'If'])]": 1, "Call -> [('func', 'Name'), ('args', ['BinOp', 'BinOp', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['FunctionDef', 'ClassDef', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "arguments -> [('args', ['Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name'])]": 50, "Dict -> [('keys', ['Str', 'Str']), ('values', ['Str', 'Num'])]": 19, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Call', 'Name', 'Num', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Call -> [('func', 'Attribute'), ('args', []), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'Name')]": 12, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'If', 'Assign', 'If', 'If', 'Return']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'If', 'Expr', 'Assign', 'Expr', 'Expr', 'If']), ('orelse', [])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Call', 'Name', 'Call', 'Subscript', 'Str', 'Call'])]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 14, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assert', 'Assert']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['If', 'Assign', 'Assign', 'If']), ('orelse', [])]": 1, "AugAssign -> [('target', 'Name'), ('op', 'Sub'), ('value', 'Name')]": 3, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'For', 'If']), ('orelse', [])]": 1, "If -> [('test', 'BoolOp'), ('body', ['Assign']), ('orelse', ['Assign', 'Assign', 'Assign'])]": 2, "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'Return']), ('orelse', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'If', 'Assign', 'Return'])]": 1, "If -> [('test', 'Attribute'), ('body', ['Assign']), ('orelse', ['Pass', 'Expr'])]": 1, "TryFinally -> [('body', ['Expr', 'Return']), ('finalbody', ['Expr'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'For', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'For']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'While']), ('decorator_list', [])]": 3, "Tuple -> [('elts', ['Attribute']), ('ctx', 'Load')]": 39, "arguments -> [('args', ['Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Lambda'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'TryExcept', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'Assign', 'If', 'Expr', 'If', 'If', 'If', 'If', 'Assign', 'AugAssign', 'AugAssign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]": 2, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'For', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign']), ('orelse', ['If', 'Assign', 'Assign'])]": 1, "If -> [('test', 'Call'), ('body', ['AugAssign', 'AugAssign', 'Assign']), ('orelse', ['If'])]": 1, "If -> [('test', 'Attribute'), ('body', ['Assign', 'Assign', 'Break']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'Assign', 'Expr', 'TryFinally']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'Return']), ('decorator_list', ['Name'])]": 7, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['List', 'List'])]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['If', 'Expr', 'Assign', 'If', 'Expr', 'Expr']), ('orelse', [])]": 1, "BoolOp -> [('op', 'Or'), ('values', ['Attribute', 'Compare'])]": 9, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'ImportFrom', 'If', 'Assign', 'If', 'If', 'Return']), ('decorator_list', [])]": 2, "Assign -> [('targets', ['Name', 'Attribute']), ('value', 'BinOp')]": 1, "If -> [('test', 'Call'), ('body', ['Expr', 'Expr', 'Expr', 'Expr', 'Return']), ('orelse', [])]": 1, "BinOp -> [('left', 'Attribute'), ('op', 'Add'), ('right', 'Tuple')]": 15, "BinOp -> [('left', 'Call'), ('op', 'BitOr'), ('right', 'Attribute')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'Expr', 'If', 'If']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Attribute', 'Attribute', 'Attribute', 'Call', 'Dict', 'Attribute', 'Dict'])]": 1, "Assert -> [('test', 'Call'), ('msg', 'NoneType')]": 208, "List -> [('elts', ['Subscript', 'Subscript', 'Subscript']), ('ctx', 'Load')]": 6, "Call -> [('func', 'Attribute'), ('args', ['Str', 'Str']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 34, "If -> [('test', 'Num'), ('body', ['Print', 'Print', 'For', 'Expr']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'If', 'Return']), ('decorator_list', [])]": 2, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['If', 'If', 'Assign', 'If', 'Assign', 'TryExcept']), ('orelse', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name', 'Name']), ('body', ['Expr', 'FunctionDef', 'Assign', 'Assign']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Import', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'For', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'If', 'If', 'Assign', 'Assign', 'Assign', 'If', 'If', 'If', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'ClassDef', 'FunctionDef', 'Assign', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "TryExcept -> [('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'TryExcept', 'Expr', 'If']), ('handlers', ['ExceptHandler', 'ExceptHandler']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assert', 'Assert', 'Assign', 'For', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Global', 'Global', 'Assign', 'If', 'Assign', 'If', 'Global', 'Assign', 'For', 'If', 'Assign', 'Global', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'AugAssign', 'If']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Print']), ('orelse', [])]": 1, "If -> [('test', 'Name'), ('body', ['Assign', 'Assign', 'Expr', 'Expr', 'TryExcept', 'Expr', 'Expr', 'If', 'Return']), ('orelse', [])]": 1, "Call -> [('func', 'Name'), ('args', []), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 29, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'For', 'Return']), ('decorator_list', [])]": 2, "If -> [('test', 'Compare'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Expr', 'For', 'For']), ('orelse', ['Expr', 'Assign'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "TryFinally -> [('body', ['Return']), ('finalbody', ['Expr'])]": 6, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Assign', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'ClassDef', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'Assign', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'Expr', 'Expr', 'Expr', 'Expr', 'Import', 'Expr', 'Import', 'Expr'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'FunctionDef', 'FunctionDef', 'For']), ('decorator_list', [])]": 1, "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'If']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'If', 'If', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'For', 'Assign']), ('decorator_list', [])]": 1, "List -> [('elts', ['Str', 'Name', 'Attribute', 'Name', 'Str', 'Attribute']), ('ctx', 'Load')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'If', 'If', 'If', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'For', 'For', 'AugAssign', 'Assign', 'Assign', 'If', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 2, "TryExcept -> [('body', ['Assign', 'Assign', 'If', 'TryExcept', 'Assign']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'If', 'If', 'Return']), ('decorator_list', [])]": 2, "Call -> [('func', 'Name'), ('args', ['Str', 'Attribute']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 11, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Expr', 'Assign', 'If']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Return']), ('decorator_list', ['Name'])]": 11, "If -> [('test', 'UnaryOp'), ('body', ['Continue', 'Raise']), ('orelse', [])]": 1, "If -> [('test', 'Name'), ('body', ['Expr']), ('orelse', ['If'])]": 13, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assert', 'Assign', 'Assert', 'Assign', 'Assert', 'Assign', 'Assert', 'Assign', 'Assert']), ('decorator_list', [])]": 1, "BinOp -> [('left', 'Call'), ('op', 'Sub'), ('right', 'Num')]": 121, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Assign', 'Assign', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['Import', 'ClassDef', 'ClassDef'])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 6, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "Compare -> [('left', 'Call'), ('ops', ['NotEq']), ('comparators', ['Attribute'])]": 10, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Num', 'Num', 'Num'])]": 2, "For -> [('target', 'Name'), ('iter', 'BinOp'), ('body', ['If']), ('orelse', ['Expr', 'Return'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'ClassDef', 'TryExcept']), ('decorator_list', [])]": 2, "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['Attribute', 'Name', 'Attribute'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'If', 'If', 'Assign']), ('decorator_list', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Str', 'Str', 'Str', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 4, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ClassDef', 'Assign', 'ClassDef', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "BinOp -> [('left', 'BinOp'), ('op', 'Mod'), ('right', 'Tuple')]": 1, "If -> [('test', 'UnaryOp'), ('body', ['For']), ('orelse', ['For'])]": 2, "List -> [('elts', ['Str', 'Str', 'Num']), ('ctx', 'Load')]": 8, "BinOp -> [('left', 'Name'), ('op', 'Add'), ('right', 'Str')]": 423, "If -> [('test', 'Compare'), ('body', ['Assign', 'For']), ('orelse', ['Assign', 'Assign'])]": 2, "Tuple -> [('elts', ['Name', 'Name', 'Dict']), ('ctx', 'Load')]": 10, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Global', 'If', 'Expr', 'TryExcept', 'Assign']), ('decorator_list', [])]": 1, "If -> [('test', 'Call'), ('body', ['AugAssign']), ('orelse', ['If'])]": 5, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'For', 'Assign', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'If', 'Assign', 'Return']), ('decorator_list', [])]": 8, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['TryExcept', 'Assign', 'Assign', 'For', 'Assign', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['AugAssign', 'Return']), ('decorator_list', [])]": 3, "If -> [('test', 'BoolOp'), ('body', ['Expr', 'Expr']), ('orelse', ['Expr', 'Expr'])]": 1, "Tuple -> [('elts', ['Call', 'Call']), ('ctx', 'Load')]": 296, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Assign']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'Expr', 'If']), ('decorator_list', [])]": 1, "BinOp -> [('left', 'Name'), ('op', 'Add'), ('right', 'BinOp')]": 139, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'If', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 1, "Compare -> [('left', 'Call'), ('ops', ['Eq']), ('comparators', ['List'])]": 5, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'For', 'Expr']), ('decorator_list', [])]": 2, "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['Name', 'Dict', 'ListComp'])]": 4, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'TryExcept', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'For', 'Assign', 'Assign', 'If', 'If', 'Return']), ('decorator_list', ['Name'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'ImportFrom', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'Import', 'Import', 'FunctionDef', 'If'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'Assign', 'Expr']), ('decorator_list', ['Name'])]": 1, "Sub -> <NULL>": 1755, "If -> [('test', 'Call'), ('body', ['For']), ('orelse', ['Expr'])]": 7, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['FunctionDef', 'Assign']), ('decorator_list', [])]": 5, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ClassDef', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "While -> [('test', 'Name'), ('body', ['Assign', 'Expr', 'If']), ('orelse', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Str', 'Str', 'Call']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 3, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Attribute', 'Name', 'ListComp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['If', 'Expr']), ('orelse', [])]": 14, "List -> [('elts', ['Str', 'Str', 'Str', 'Call']), ('ctx', 'Load')]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Print', 'Print', 'Expr']), ('decorator_list', ['Name'])]": 1, "BinOp -> [('left', 'Name'), ('op', 'BitAnd'), ('right', 'BinOp')]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'Assign', 'While', 'If', 'Return']), ('decorator_list', [])]": 1, "BinOp -> [('left', 'Num'), ('op', 'Sub'), ('right', 'Name')]": 43, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str']), ('values', ['List', 'List', 'List', 'List'])]": 3, "If -> [('test', 'Attribute'), ('body', ['Expr']), ('orelse', ['Assign'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Attribute', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "If -> [('test', 'Call'), ('body', ['If']), ('orelse', ['Raise'])]": 4, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ClassDef', 'ClassDef', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'Expr', 'Assign', 'TryExcept']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'TryFinally']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'If', 'If', 'Expr', 'Return']), ('decorator_list', [])]": 1, "TryExcept -> [('body', ['Assign', 'Print', 'If']), ('handlers', ['ExceptHandler']), ('orelse', ['Expr'])]": 1, "While -> [('test', 'Name'), ('body', ['Assign', 'AugAssign', 'Assign', 'If']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'If', 'Expr', 'Expr', 'Assign', 'Assign', 'If', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "If -> [('test', 'Attribute'), ('body', ['Assign', 'Expr', 'If']), ('orelse', ['Print', 'Expr'])]": 1, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['If', 'Print', 'Expr', 'Assign', 'If']), ('orelse', [])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Str', 'Str', 'Str', 'Name'])]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]": 1, "Tuple -> [('elts', ['Dict', 'Dict', 'Dict', 'Dict', 'Dict']), ('ctx', 'Load')]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'ImportFrom', 'Assign', 'Assign', 'Expr', 'Assign', 'If', 'If', 'If', 'Assign', 'Assign', 'Assign', 'Expr', 'Return']), ('decorator_list', ['Call'])]": 1, "If -> [('test', 'Compare'), ('body', ['Expr', 'For']), ('orelse', [])]": 4, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'With', 'Assign', 'Assign', 'AugAssign', 'Assign']), ('decorator_list', [])]": 1, "Tuple -> [('elts', ['Call', 'Str']), ('ctx', 'Load')]": 11, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'If']), ('decorator_list', [])]": 5, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 2, "BoolOp -> [('op', 'And'), ('values', ['Compare', 'Attribute', 'Attribute', 'Attribute', 'Compare'])]": 1, "TryExcept -> [('body', ['If', 'Assign', 'Expr', 'Expr', 'Expr']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Name', 'Name', 'Num', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['If', 'Assign', 'For', 'Assign', 'If', 'Expr']), ('orelse', [])]": 1, "Expr -> [('value', 'Str')]": 5145, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'ClassDef'])]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Expr', 'Assign', 'Assign']), ('orelse', [])]": 2, "If -> [('test', 'Compare'), ('body', ['AugAssign']), ('orelse', ['Assign'])]": 7, "Module -> [('body', ['Import', 'Import', 'Import', 'FunctionDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'Import', 'Assign', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "TryExcept -> [('body', ['Assign', 'Expr', 'Assign', 'Expr', 'Expr']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 1, "BoolOp -> [('op', 'And'), ('values', ['Name', 'Name', 'UnaryOp'])]": 2, "Compare -> [('left', 'BinOp'), ('ops', ['GtE']), ('comparators', ['Attribute'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Str', 'Attribute', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 4, "If -> [('test', 'Name'), ('body', ['If', 'Assign', 'Assign']), ('orelse', [])]": 1, "BinOp -> [('left', 'Call'), ('op', 'Mod'), ('right', 'Num')]": 13, "If -> [('test', 'Name'), ('body', ['Expr', 'Assign', 'Assign', 'For', 'Assign', 'Assign', 'Assign', 'Assign', 'AugAssign', 'AugAssign']), ('orelse', [])]": 1, "Tuple -> [('elts', ['Str', 'Name', 'Name']), ('ctx', 'Load')]": 10, "BinOp -> [('left', 'Name'), ('op', 'FloorDiv'), ('right', 'Name')]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Pass']), ('decorator_list', [])]": 124, "Call -> [('func', 'Attribute'), ('args', ['Name', 'List', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 17, "AugAssign -> [('target', 'Subscript'), ('op', 'Sub'), ('value', 'Num')]": 3, "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign', 'Expr', 'If', 'Assign', 'Expr']), ('orelse', ['Assign', 'Assign', 'Assign', 'Assign', 'If', 'If', 'Assign', 'Assign'])]": 1, "For -> [('target', 'Name'), ('iter', 'List'), ('body', ['Assign', 'Assign', 'Assign']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'TryExcept', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'TryExcept', 'Assign', 'TryExcept', 'Assign', 'TryExcept']), ('decorator_list', [])]": 1, "For -> [('target', 'Tuple'), ('iter', 'Name'), ('body', ['For', 'For']), ('orelse', [])]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'If', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]": 1, "TryExcept -> [('body', ['TryExcept', 'Assign', 'Assign', 'Expr', 'If', 'Assign', 'Assign', 'Assign', 'Expr']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'For', 'If', 'If', 'If', 'Return']), ('decorator_list', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name', 'Name']), ('body', ['Expr', 'Assign', 'Assign', 'FunctionDef']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['If', 'Expr', 'Assign', 'Assign', 'Assign', 'For', 'Expr', 'Assign', 'Assign', 'For']), ('orelse', [])]": 1, "GeneratorExp -> [('elt', 'Num'), ('generators', ['comprehension'])]": 1, "If -> [('test', 'Attribute'), ('body', ['Assign', 'Assign', 'Expr', 'Expr']), ('orelse', [])]": 1, "Import -> [('names', ['alias', 'alias', 'alias', 'alias', 'alias'])]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['For', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', ['Attribute'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ClassDef', 'ClassDef', 'Expr', 'Expr', 'TryExcept', 'ClassDef', 'Expr']), ('decorator_list', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Attribute', 'Name', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 6, "Tuple -> [('elts', ['Attribute', 'List']), ('ctx', 'Load')]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'For', 'For', 'Assign', 'Assign', 'Return']), ('decorator_list', ['Name'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'If', 'If', 'If', 'Return']), ('decorator_list', [])]": 1, "Tuple -> [('elts', ['Call', 'Name', 'Attribute', 'Name']), ('ctx', 'Load')]": 3, "If -> [('test', 'Subscript'), ('body', ['Expr', 'Print', 'Expr', 'Print', 'Print', 'Print', 'Expr', 'Print', 'Print', 'Print', 'Expr', 'Print', 'Print', 'Print', 'Print', 'Expr']), ('orelse', [])]": 1, "If -> [('test', 'Attribute'), ('body', ['Assign']), ('orelse', ['Assign', 'If', 'If', 'Assign'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'AugAssign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'BoolOp'), ('body', ['AugAssign', 'TryExcept', 'Assign']), ('orelse', ['Assign'])]": 1, "TryFinally -> [('body', ['Assign', 'If', 'If', 'If']), ('finalbody', ['AugAssign'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'If', 'Return']), ('decorator_list', [])]": 22, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'If', 'Expr', 'If']), ('decorator_list', [])]": 1, "If -> [('test', 'Attribute'), ('body', ['AugAssign', 'Expr']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'For', 'For', 'For', 'For', 'If', 'Return']), ('decorator_list', [])]": 2, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'ImportFrom', 'Import', 'ImportFrom', 'Import', 'Import', 'Import', 'Assign', 'Assign', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'If'])]": 1, "If -> [('test', 'Compare'), ('body', ['Delete', 'TryExcept', 'Return']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'With']), ('decorator_list', [])]": 1, "If -> [('test', 'UnaryOp'), ('body', ['If', 'Expr', 'Expr']), ('orelse', [])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['BoolOp', 'Attribute', 'Attribute', 'Attribute', 'Call'])]": 2, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'If']), ('orelse', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Import', 'Expr']), ('decorator_list', [])]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]": 1, "Call -> [('func', 'Name'), ('args', ['Attribute', 'Name', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 6, "List -> [('elts', ['Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call']), ('ctx', 'Load')]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['Assign', 'Assign', 'AugAssign']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'TryExcept', 'Return']), ('decorator_list', [])]": 1, "Lambda -> [('args', 'arguments'), ('body', 'IfExp')]": 1, "If -> [('test', 'Attribute'), ('body', ['If', 'Expr', 'Assign', 'Return']), ('orelse', ['Assign', 'Return'])]": 1, "BinOp -> [('left', 'BinOp'), ('op', 'Add'), ('right', 'ListComp')]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Import', 'Expr', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 5, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Assert']), ('decorator_list', [])]": 1, "If -> [('test', 'Call'), ('body', ['Return']), ('orelse', ['Assign', 'If', 'Return'])]": 2, "If -> [('test', 'UnaryOp'), ('body', ['If', 'Assign']), ('orelse', ['Assign'])]": 3, "Tuple -> [('elts', ['Call', 'ListComp']), ('ctx', 'Load')]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'If', 'Import', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 1, "Call -> [('func', 'Name'), ('args', []), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "If -> [('test', 'Name'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'AugAssign', 'If', 'Assign', 'If', 'Return']), ('orelse', [])]": 1, "IfExp -> [('test', 'UnaryOp'), ('body', 'Str'), ('orelse', 'Str')]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 7, "If -> [('test', 'Name'), ('body', ['Assign', 'Assign', 'While', 'Expr', 'If']), ('orelse', [])]": 1, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'Expr', 'ImportFrom', 'ClassDef', 'ClassDef', 'ClassDef'])]": 1, "List -> [('elts', ['Str', 'Str', 'Str', 'Str', 'Str', 'Attribute', 'Str', 'BinOp']), ('ctx', 'Load')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'FunctionDef', 'Assign', 'If', 'Assign', 'Return']), ('decorator_list', [])]": 3, "For -> [('target', 'Name'), ('iter', 'Subscript'), ('body', ['AugAssign']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'For', 'Assign', 'TryExcept', 'Assign', 'Assign', 'For', 'If', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['If', 'Assign', 'If']), ('orelse', ['If', 'Assign', 'If'])]": 1, "With -> [('context_expr', 'Name'), ('optional_vars', 'Name'), ('body', ['Return'])]": 2, "Print -> [('dest', 'NoneType'), ('values', ['Str']), ('nl', 'bool')]": 586, "Call -> [('func', 'Attribute'), ('args', ['Tuple', 'Attribute', 'BinOp', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'If']), ('decorator_list', [])]": 9, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ClassDef', 'If'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Name', 'Attribute']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'For', 'If', 'Expr']), ('decorator_list', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Expr', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 2, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'TryExcept']), ('orelse', [])]": 1, "If -> [('test', 'Name'), ('body', ['If', 'For']), ('orelse', [])]": 3, "IsNot -> <NULL>": 982, "Index -> [('value', 'List')]": 2, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Str', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 8, "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['TryExcept'])]": 40, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign']), ('orelse', [])]": 1, "Dict -> [('keys', ['Str', 'Subscript']), ('values', ['Attribute', 'Dict'])]": 1, "If -> [('test', 'Name'), ('body', ['Assign', 'For', 'Return']), ('orelse', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'If']), ('decorator_list', [])]": 2, "If -> [('test', 'Compare'), ('body', ['Assign', 'Expr', 'Expr']), ('orelse', [])]": 19, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'Assign', 'Assign', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'Assign', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Return']), ('decorator_list', ['Attribute'])]": 1, "TryFinally -> [('body', ['Assign']), ('finalbody', ['Assign'])]": 2, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('orelse', [])]": 2, "If -> [('test', 'Compare'), ('body', ['Assign', 'If', 'Assign', 'If']), ('orelse', ['For'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'TryExcept', 'Return']), ('decorator_list', [])]": 4, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Attribute']), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'For']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['List']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 461, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Assign', 'Assign', 'Assign', 'Assign', 'ClassDef', 'ClassDef', 'Assign', 'Assign', 'ClassDef', 'Assign', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'Assign', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'If', 'AugAssign', 'Expr', 'Assign', 'Assign', 'Expr', 'If']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Expr', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assert', 'If']), ('decorator_list', [])]": 6, "With -> [('context_expr', 'Call'), ('optional_vars', 'NoneType'), ('body', ['ImportFrom'])]": 1, "Assign -> [('targets', ['Subscript']), ('value', 'ListComp')]": 28, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Global', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Assign', 'Assign', 'If', 'For', 'Assign', 'Assign', 'Assign', 'For', 'Expr', 'If', 'Return']), ('decorator_list', [])]": 1, "While -> [('test', 'Name'), ('body', ['Assign', 'If', 'TryExcept']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Return']), ('decorator_list', ['Call'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'If', 'Assign', 'Return']), ('decorator_list', [])]": 2, "Compare -> [('left', 'Name'), ('ops', ['Eq']), ('comparators', ['Subscript'])]": 16, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'If', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Expr', 'Expr', 'Expr', 'Expr']), ('orelse', ['If'])]": 1, "IfExp -> [('test', 'Name'), ('body', 'Call'), ('orelse', 'Str')]": 7, "BinOp -> [('left', 'Name'), ('op', 'Mult'), ('right', 'Attribute')]": 20, "Print -> [('dest', 'Name'), ('values', []), ('nl', 'bool')]": 1, "With -> [('context_expr', 'Call'), ('optional_vars', 'Name'), ('body', ['Assign', 'If', 'AugAssign'])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('orelse', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'If', 'TryExcept', 'Expr']), ('orelse', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Str', 'Str']), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 6, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'ClassDef']), ('decorator_list', [])]": 1, "List -> [('elts', ['Dict', 'Dict', 'Dict', 'Dict', 'Dict', 'Dict', 'Dict']), ('ctx', 'Load')]": 1, "If -> [('test', 'Call'), ('body', ['If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('orelse', ['If'])]": 1, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Assign', 'If', 'Assign']), ('orelse', [])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'str'), ('defaults', ['Str', 'Name', 'Name', 'Name'])]": 2, "Module -> [('body', ['Import', 'Import', 'Import', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Attribute', 'Attribute', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 3, "Call -> [('func', 'Attribute'), ('args', ['Num']), ('keywords', []), ('starargs', 'Name'), ('kwargs', 'Name')]": 5, "Is -> <NULL>": 1505, "List -> [('elts', ['Num', 'Num', 'BinOp', 'Num']), ('ctx', 'Load')]": 2, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Num', 'Str']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "arguments -> [('args', ['Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Name'])]": 92, "If -> [('test', 'Compare'), ('body', ['Expr']), ('orelse', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'If'])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Num', 'Num', 'Str', 'Str', 'Str', 'Str', 'Str'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'Assign', 'For', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "Tuple -> [('elts', ['Name', 'Str', 'Name', 'Attribute']), ('ctx', 'Load')]": 6, "ClassDef -> [('name', 'str'), ('bases', ['Name', 'Name']), ('body', ['Pass']), ('decorator_list', [])]": 6, "Tuple -> [('elts', ['Attribute', 'Name', 'Attribute', 'Attribute', 'IfExp', 'Call', 'IfExp', 'IfExp', 'IfExp', 'Attribute', 'Attribute']), ('ctx', 'Load')]": 1, "BinOp -> [('left', 'Call'), ('op', 'Add'), ('right', 'Num')]": 155, "If -> [('test', 'Call'), ('body', ['Assert', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If']), ('orelse', ['If'])]": 1, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'For']), ('orelse', [])]": 9, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Attribute', 'Str', 'Name', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "If -> [('test', 'Attribute'), ('body', ['Import', 'Raise']), ('orelse', [])]": 1, "List -> [('elts', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('ctx', 'Load')]": 17, "Call -> [('func', 'Name'), ('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 3, "While -> [('test', 'Name'), ('body', ['Print', 'AugAssign', 'Assign', 'Assign', 'AugAssign', 'Assign', 'Assign', 'For', 'For', 'If']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'TryFinally', 'If']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['If', 'TryExcept', 'TryExcept', 'Expr', 'Expr']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Return']), ('decorator_list', [])]": 1, "Call -> [('func', 'Name'), ('args', ['List']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'Dict')]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 2, "List -> [('elts', ['Num', 'Name', 'Name', 'Name', 'Name', 'Name']), ('ctx', 'Load')]": 1, "If -> [('test', 'Name'), ('body', ['Assign', 'Assign', 'Assign']), ('orelse', ['Assign'])]": 2, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign']), ('orelse', [])]": 110, "BoolOp -> [('op', 'And'), ('values', ['Compare', 'Compare'])]": 384, "If -> [('test', 'Call'), ('body', ['If', 'If', 'If', 'Expr']), ('orelse', ['Return'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'FunctionDef', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "Compare -> [('left', 'Attribute'), ('ops', ['Lt', 'Lt']), ('comparators', ['Call', 'Attribute'])]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'ImportFrom', 'Expr', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'Assign'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Assign', 'Assign']), ('decorator_list', [])]": 3, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Num', 'Name'])]": 2, "If -> [('test', 'Call'), ('body', ['Delete']), ('orelse', [])]": 26, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'ImportFrom', 'If', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 1, "BinOp -> [('left', 'Attribute'), ('op', 'Div'), ('right', 'Call')]": 1, "Print -> [('dest', 'Name'), ('values', ['BinOp']), ('nl', 'bool')]": 2, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'FunctionDef', 'ClassDef', 'FunctionDef', 'Expr', 'Expr', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]": 1, "With -> [('context_expr', 'Call'), ('optional_vars', 'Name'), ('body', ['TryExcept', 'Assign', 'If'])]": 1, "Return -> [('value', 'UnaryOp')]": 32, "Dict -> [('keys', ['Str', 'Str']), ('values', ['Num', 'BinOp'])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'Assign', 'For', 'Expr', 'Assign', 'Assign', 'For', 'Expr', 'Expr']), ('orelse', ['Assert'])]": 1, "While -> [('test', 'Name'), ('body', ['Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'If', 'If']), ('orelse', [])]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'For', 'Expr', 'For', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Print', 'For', 'Expr'])]": 1, "If -> [('test', 'Call'), ('body', ['Print', 'Expr']), ('orelse', [])]": 3, "ClassDef -> [('name', 'str'), ('bases', []), ('body', ['Expr', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'If', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Attribute', 'Call', 'Call', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['TryExcept', 'Expr', 'For']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Attribute', 'Str', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 5, "Compare -> [('left', 'Subscript'), ('ops', ['LtE']), ('comparators', ['Num'])]": 2, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Call', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 5, "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['Name', 'Name', 'Compare'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assert', 'Assign', 'Assert', 'For', 'Return']), ('decorator_list', [])]": 1, "Call -> [('func', 'Name'), ('args', ['UnaryOp', 'Attribute', 'UnaryOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'If', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'If', 'Return']), ('decorator_list', [])]": 1, "Del -> <NULL>": 274, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 16, "arguments -> [('args', ['Name', 'Name']), ('vararg', 'str'), ('kwarg', 'str'), ('defaults', ['Call'])]": 1, "While -> [('test', 'Compare'), ('body', ['Expr', 'Assign']), ('orelse', [])]": 6, "Compare -> [('left', 'Subscript'), ('ops', ['In']), ('comparators', ['Call'])]": 5, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'For']), ('decorator_list', [])]": 1, "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef'])]": 1, "If -> [('test', 'Compare'), ('body', ['Import', 'Expr']), ('orelse', [])]": 3, "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'FunctionDef', 'FunctionDef', 'Expr']), ('orelse', [])]": 1, "BoolOp -> [('op', 'And'), ('values', ['Name', 'List'])]": 7, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Str', 'Str', 'Str', 'Str'])]": 3, "ExceptHandler -> [('type', 'Tuple'), ('name', 'Name'), ('body', ['Raise'])]": 7, "ListComp -> [('elt', 'ListComp'), ('generators', ['comprehension'])]": 5, "If -> [('test', 'Attribute'), ('body', ['If', 'If', 'Expr', 'If']), ('orelse', ['If'])]": 2, "BoolOp -> [('op', 'Or'), ('values', ['Call', 'Call', 'Call', 'Compare', 'Call', 'BoolOp'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'While', 'Return']), ('decorator_list', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Assign', 'Assign', 'FunctionDef']), ('decorator_list', [])]": 5, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Expr', 'Expr', 'If']), ('orelse', [])]": 2, "If -> [('test', 'UnaryOp'), ('body', ['Expr']), ('orelse', ['Assign', 'Assign', 'If', 'Assign', 'Assign', 'FunctionDef', 'If'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Print', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Return']), ('decorator_list', ['Attribute'])]": 2, "List -> [('elts', ['Str', 'Str', 'Str', 'Attribute', 'Attribute']), ('ctx', 'Load')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Expr', 'Assign']), ('decorator_list', [])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str']), ('values', ['Attribute', 'Attribute', 'Attribute', 'Attribute'])]": 6, "Call -> [('func', 'Name'), ('args', ['Attribute', 'Call', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Tuple -> [('elts', ['BinOp', 'BinOp', 'Name', 'Name', 'Name']), ('ctx', 'Load')]": 1, "If -> [('test', 'BoolOp'), ('body', ['Print', 'Assign', 'Assign', 'Expr']), ('orelse', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'Call')]": 3, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 4, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'If', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "BoolOp -> [('op', 'Or'), ('values', ['Name', 'UnaryOp'])]": 7, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'If', 'If', 'Assign', 'Assign', 'If', 'Return']), ('decorator_list', [])]": 1, "TryFinally -> [('body', ['Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'If', 'Expr', 'Assign', 'For']), ('finalbody', ['Expr', 'Expr'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'If', 'Expr', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "If -> [('test', 'Subscript'), ('body', ['Expr']), ('orelse', ['Expr', 'Assign', 'TryExcept', 'Expr'])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Str', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name'])]": 1, "TryExcept -> [('body', ['If', 'Return']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 5, "List -> [('elts', ['Str', 'Str', 'Str', 'Call', 'Call']), ('ctx', 'Load')]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Attribute']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'If', 'If', 'Assign', 'If', 'Assign']), ('decorator_list', [])]": 1, "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Expr', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'ClassDef', 'ClassDef'])]": 1, "If -> [('test', 'Call'), ('body', ['Assign', 'Expr', 'If']), ('orelse', [])]": 2, "If -> [('test', 'BoolOp'), ('body', ['If']), ('orelse', ['Expr', 'Expr'])]": 2, "If -> [('test', 'Name'), ('body', ['For']), ('orelse', ['For'])]": 2, "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['If', 'Assign'])]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'For', 'Assign', 'Assign', 'Assign', 'If', 'For']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'If', 'If', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'For']), ('decorator_list', [])]": 1, "Call -> [('func', 'Name'), ('args', ['BinOp', 'Str']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'ImportFrom', 'If', 'If', 'Assign', 'Assign', 'Assign', 'If']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'TryExcept', 'Expr', 'Expr']), ('orelse', ['If'])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Import', 'Assign']), ('orelse', ['If'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'If', 'If', 'FunctionDef', 'If']), ('decorator_list', [])]": 2, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'ClassDef', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Exec']), ('decorator_list', [])]": 1, "TryExcept -> [('body', ['Assign', 'Assign']), ('handlers', ['ExceptHandler']), ('orelse', ['Expr', 'Expr'])]": 1, "BinOp -> [('left', 'Name'), ('op', 'Div'), ('right', 'Subscript')]": 6, "If -> [('test', 'Call'), ('body', ['Print', 'Return']), ('orelse', [])]": 3, "Call -> [('func', 'Attribute'), ('args', ['Dict']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 297, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'Expr', 'Import', 'ClassDef', 'FunctionDef', 'If'])]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['TryExcept', 'If', 'Assign', 'Expr']), ('orelse', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef']), ('decorator_list', [])]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'For', 'If', 'If', 'Assign', 'For', 'For', 'For', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assert', 'Assert']), ('decorator_list', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Name', 'Attribute']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 4, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Str', 'Attribute', 'BoolOp', 'Name'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Expr', 'Assign']), ('decorator_list', [])]": 1, "Subscript -> [('value', 'Attribute'), ('slice', 'Slice'), ('ctx', 'Del')]": 5, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['AugAssign', 'Expr']), ('decorator_list', [])]": 1, "Call -> [('func', 'Subscript'), ('args', ['Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'Name')]": 2, "Assert -> [('test', 'Name'), ('msg', 'Str')]": 49, "If -> [('test', 'Compare'), ('body', ['If', 'Expr']), ('orelse', ['Return'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'For', 'Expr']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['AugAssign', 'Assign']), ('orelse', ['If'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 1, "While -> [('test', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'For']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'For', 'Expr', 'If', 'For', 'Return']), ('decorator_list', [])]": 2, "Call -> [('func', 'Name'), ('args', ['Call', 'Str', 'Attribute', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 9, "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['Expr', 'Expr', 'Expr'])]": 2, "BinOp -> [('left', 'Subscript'), ('op', 'Mod'), ('right', 'Name')]": 11, "Module -> [('body', ['Import', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef'])]": 1, "Attribute -> [('value', 'Dict'), ('attr', 'str'), ('ctx', 'Load')]": 6, "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'ClassDef'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name']), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'str'), ('defaults', ['Str'])]": 1, "For -> [('target', 'Tuple'), ('iter', 'Name'), ('body', ['Assign', 'If', 'AugAssign']), ('orelse', [])]": 1, "If -> [('test', 'Attribute'), ('body', ['Expr']), ('orelse', ['Expr', 'Expr'])]": 1, "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['If', 'Assign', 'Expr']), ('orelse', [])]": 1, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Expr', 'Assign', 'If', 'Assign', 'Assign', 'If', 'Expr']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'If', 'Assign', 'TryFinally']), ('decorator_list', ['Name'])]": 1, "If -> [('test', 'Compare'), ('body', ['Expr', 'Break']), ('orelse', [])]": 13, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Expr']), ('orelse', [])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Name', 'Call', 'Name', 'Name', 'Name', 'Call', 'Name', 'Name', 'Name', 'Compare', 'Call', 'Name'])]": 1, "If -> [('test', 'Name'), ('body', ['If', 'AugAssign']), ('orelse', ['Assign'])]": 1, "Call -> [('func', 'Name'), ('args', ['Str', 'Name', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'If', 'If', 'If']), ('decorator_list', ['Name'])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Str', 'Str', 'Str', 'Str', 'Str', 'Call', 'Str', 'Str'])]": 1, "arguments -> [('args', ['Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Str'])]": 6, "If -> [('test', 'Compare'), ('body', ['Assign', 'If']), ('orelse', ['Assign', 'Assign', 'Assign', 'If', 'Assign', 'Expr', 'Expr'])]": 2, "If -> [('test', 'BoolOp'), ('body', ['If', 'Expr', 'Expr']), ('orelse', [])]": 1, "TryExcept -> [('body', ['Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Return']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 1, "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['Expr', 'Expr', 'Continue'])]": 1, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'ClassDef', 'Expr', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'Assign', 'ClassDef', 'Assign', 'ClassDef', 'ClassDef', 'Assign', 'Assign', 'ClassDef', 'ClassDef', 'FunctionDef', 'Expr'])]": 1, "BoolOp -> [('op', 'And'), ('values', ['Call', 'Compare'])]": 60, "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['Name', 'Attribute', 'Attribute'])]": 8, "If -> [('test', 'BoolOp'), ('body', ['Expr', 'AugAssign']), ('orelse', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Attribute', 'Name', 'Name', 'UnaryOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'ImportFrom', 'Return']), ('decorator_list', [])]": 8, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'TryExcept']), ('decorator_list', ['Name'])]": 1, "Compare -> [('left', 'ListComp'), ('ops', ['Eq']), ('comparators', ['Call'])]": 2, "If -> [('test', 'Name'), ('body', ['Print', 'Assign']), ('orelse', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Assign', 'If', 'If', 'If']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'Assign', 'Assign', 'If']), ('decorator_list', ['Name'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Subscript', 'Num', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 5, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr']), ('decorator_list', ['Name'])]": 2, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'If', 'Continue']), ('orelse', [])]": 1, "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'FunctionDef', 'If'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'If', 'If']), ('decorator_list', [])]": 1, "Tuple -> [('elts', ['Name', 'ListComp']), ('ctx', 'Load')]": 3, "If -> [('test', 'Attribute'), ('body', ['ImportFrom', 'Assign']), ('orelse', ['TryExcept'])]": 2, "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['Name', 'Call', 'Name'])]": 3, "If -> [('test', 'Call'), ('body', ['Assign']), ('orelse', ['Return'])]": 3, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'Assign', 'FunctionDef', 'Assign', 'FunctionDef', 'Assign', 'FunctionDef', 'Assign', 'FunctionDef', 'Assign', 'FunctionDef', 'Assign', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 2, "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'If'])]": 1, "If -> [('test', 'Call'), ('body', ['Expr', 'Assign', 'Return']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Str', 'Str', 'Name'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Print']), ('orelse', ['If'])]": 8, "Call -> [('func', 'Name'), ('args', ['Call', 'Tuple']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 4, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'AugAssign', 'Assign', 'AugAssign']), ('orelse', [])]": 1, "If -> [('test', 'UnaryOp'), ('body', ['Expr']), ('orelse', ['Expr'])]": 18, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'Assign', 'If', 'Assign', 'Assign', 'Expr', 'ImportFrom', 'Expr', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Expr', 'Assign', 'Assign']), ('orelse', [])]": 2, "Import -> [('names', ['alias', 'alias', 'alias'])]": 27, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Attribute', 'Call', 'Dict', 'Call', 'BoolOp', 'Attribute', 'Attribute', 'Attribute', 'Call'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'TryExcept', 'Assert', 'Assign', 'Expr', 'Assign', 'For', 'Return']), ('decorator_list', ['Attribute'])]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'ImportFrom', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'ClassDef', 'ClassDef', 'ClassDef', 'FunctionDef', 'FunctionDef', 'If'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'Assign', 'If', 'If', 'Assign', 'TryExcept']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Str', 'Str', 'List']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "While -> [('test', 'BinOp'), ('body', ['Expr']), ('orelse', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'TryExcept', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Return']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Subscript', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Compare -> [('left', 'BinOp'), ('ops', ['Gt']), ('comparators', ['Name'])]": 8, "If -> [('test', 'Subscript'), ('body', ['If']), ('orelse', [])]": 4, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'For', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Str', 'Num', 'Num', 'Num', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'For', 'For', 'For', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['ImportFrom', 'Expr']), ('orelse', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'ClassDef']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'For', 'If', 'Return']), ('decorator_list', ['Name'])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign']), ('orelse', ['Assign', 'Expr'])]": 4, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Print', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Return']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Attribute', 'Name', 'Name', 'List']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Tuple -> [('elts', ['Str', 'Num', 'Str', 'Str', 'Num']), ('ctx', 'Load')]": 19, "If -> [('test', 'Compare'), ('body', ['Print']), ('orelse', [])]": 36, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'If', 'If', 'If', 'Return']), ('decorator_list', ['Name'])]": 1, "If -> [('test', 'Compare'), ('body', ['Expr', 'Expr', 'If']), ('orelse', ['Raise'])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['Attribute', 'Attribute', 'List'])]": 1, "Call -> [('func', 'Name'), ('args', ['Attribute', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'Attribute')]": 1, "BoolOp -> [('op', 'And'), ('values', ['UnaryOp', 'Name', 'Name'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]": 1, "If -> [('test', 'Name'), ('body', ['For', 'For', 'For']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'Assign', 'If', 'Expr', 'Return']), ('decorator_list', [])]": 1, "Tuple -> [('elts', ['Name', 'Attribute', 'Call', 'Name']), ('ctx', 'Load')]": 1, "For -> [('target', 'Name'), ('iter', 'Tuple'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'Assign', 'If']), ('orelse', [])]": 1, "If -> [('test', 'Call'), ('body', ['Assign', 'Expr', 'Assign']), ('orelse', [])]": 2, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Expr', 'Expr', 'Assign']), ('orelse', [])]": 1, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'ImportFrom', 'ClassDef'])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Expr', 'If']), ('orelse', [])]": 2, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'If', 'Expr', 'Expr']), ('orelse', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Expr', 'If', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['FunctionDef', 'Assign', 'Assign', 'Expr', 'TryExcept']), ('decorator_list', [])]": 2, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Expr', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 5, "If -> [('test', 'BoolOp'), ('body', ['Continue']), ('orelse', ['For'])]": 1, "AugAssign -> [('target', 'Subscript'), ('op', 'Add'), ('value', 'Name')]": 2, "If -> [('test', 'Call'), ('body', ['Expr']), ('orelse', ['Expr', 'TryExcept'])]": 4, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Name', 'Name', 'BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "Compare -> [('left', 'Subscript'), ('ops', ['Eq']), ('comparators', ['Str'])]": 343, "If -> [('test', 'Attribute'), ('body', ['Assign', 'If', 'Print']), ('orelse', ['If'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'If', 'If', 'If', 'Return']), ('decorator_list', [])]": 2, "Compare -> [('left', 'Name'), ('ops', ['Is']), ('comparators', ['Subscript'])]": 2, "Call -> [('func', 'Attribute'), ('args', ['Subscript', 'Name', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'For', 'Return']), ('decorator_list', ['Name', 'Call'])]": 4, "arguments -> [('args', ['Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['List'])]": 11, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'If', 'Assign', 'Return']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Num', 'Tuple', 'Str']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 7, "Call -> [('func', 'Attribute'), ('args', ['Name', 'BinOp', 'Attribute', 'Name', 'Name', 'Name']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Pass']), ('decorator_list', ['Name'])]": 2, "BinOp -> [('left', 'BinOp'), ('op', 'FloorDiv'), ('right', 'Attribute')]": 3, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 3, "If -> [('test', 'Call'), ('body', ['If', 'Expr']), ('orelse', ['Raise'])]": 2, "If -> [('test', 'UnaryOp'), ('body', ['AugAssign']), ('orelse', [])]": 13, "Call -> [('func', 'Name'), ('args', ['Num', 'Str', 'Dict', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 4, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['FunctionDef', 'ClassDef']), ('decorator_list', [])]": 1, "If -> [('test', 'Call'), ('body', ['Delete', 'Delete']), ('orelse', [])]": 3, "If -> [('test', 'Compare'), ('body', ['Expr', 'Expr', 'Expr']), ('orelse', ['Expr'])]": 4, "If -> [('test', 'Call'), ('body', ['AugAssign']), ('orelse', [])]": 18, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 444, "ExceptHandler -> [('type', 'Attribute'), ('name', 'Name'), ('body', ['Print', 'AugAssign', 'Continue'])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name'])]": 1, "If -> [('test', 'Name'), ('body', ['Assign', 'Assign', 'If', 'Assign']), ('orelse', ['Assign'])]": 1, "Compare -> [('left', 'BinOp'), ('ops', ['Eq']), ('comparators', ['Name'])]": 5, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]": 1, "For -> [('target', 'Name'), ('iter', 'List'), ('body', ['Expr', 'Expr']), ('orelse', [])]": 1, "BinOp -> [('left', 'Attribute'), ('op', 'Pow'), ('right', 'Attribute')]": 6, "If -> [('test', 'Call'), ('body', ['Assert', 'Expr']), ('orelse', ['Assert', 'Expr'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assert', 'Assign', 'Assign', 'Assert', 'Assert', 'Assert', 'Assert', 'Assert', 'If', 'If', 'Assign', 'Assert', 'Assign', 'Assert', 'Assign', 'Assert', 'For', 'For']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'If', 'For']), ('orelse', ['If', 'Assign', 'For'])]": 1, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'ClassDef', 'ClassDef', 'ClassDef'])]": 1, "Call -> [('func', 'Name'), ('args', ['Str', 'Str', 'Str', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Str', 'Lambda']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 8, "Call -> [('func', 'Name'), ('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 3, "If -> [('test', 'Name'), ('body', ['If', 'Assign', 'If']), ('orelse', ['Assign'])]": 2, "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['Subscript', 'Subscript', 'Call'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ClassDef', 'Assign', 'Expr']), ('decorator_list', [])]": 11, "Call -> [('func', 'Attribute'), ('args', ['Dict', 'Call']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Expr']), ('decorator_list', ['Call'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'FunctionDef', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'ImportFrom', 'ClassDef'])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Call', 'Call', 'Name'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'If', 'Return']), ('decorator_list', [])]": 1, "Compare -> [('left', 'Tuple'), ('ops', ['In']), ('comparators', ['Name'])]": 12, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'TryExcept', 'If']), ('orelse', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Expr', 'If', 'AugAssign', 'Expr']), ('orelse', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Call', 'Call', 'Call', 'Call', 'Call', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "BoolOp -> [('op', 'Or'), ('values', ['Subscript', 'Num'])]": 1, "If -> [('test', 'UnaryOp'), ('body', ['Return']), ('orelse', ['TryExcept'])]": 1, "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['Assign', 'Expr', 'Expr', 'Expr', 'If']), ('orelse', [])]": 3, "Call -> [('func', 'Attribute'), ('args', ['Num', 'Num', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'For', 'For', 'For']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Assert', 'Expr', 'Expr', 'Expr', 'Assert']), ('decorator_list', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', ['Attribute'])]": 4, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'TryExcept', 'If', 'If', 'If', 'Return']), ('decorator_list', ['Name', 'Name', 'Call', 'Call'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'If', 'Assign', 'TryExcept']), ('decorator_list', [])]": 1, "ExceptHandler -> [('type', 'Attribute'), ('name', 'NoneType'), ('body', ['Expr', 'Assign', 'Raise'])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'ClassDef', 'FunctionDef']), ('decorator_list', [])]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'If', 'Assign', 'Return']), ('decorator_list', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'ClassDef']), ('decorator_list', [])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Dict'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Name']), ('keywords', []), ('starargs', 'Name'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'If', 'Return']), ('decorator_list', ['Name'])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 2, "Compare -> [('left', 'Subscript'), ('ops', ['LtE']), ('comparators', ['Subscript'])]": 1, "TryFinally -> [('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'If', 'If']), ('finalbody', ['Delete'])]": 1, "If -> [('test', 'Call'), ('body', ['Assign', 'Expr', 'Expr', 'Expr', 'TryFinally']), ('orelse', ['Return'])]": 1, "TryExcept -> [('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'For', 'Expr', 'Expr']), ('handlers', ['ExceptHandler', 'ExceptHandler']), ('orelse', [])]": 1, "If -> [('test', 'Compare'), ('body', ['If', 'If', 'If']), ('orelse', ['If'])]": 2, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Print', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'For', 'Expr', 'Expr']), ('orelse', [])]": 1, "While -> [('test', 'Name'), ('body', ['Assign', 'Expr', 'Expr', 'Assign']), ('orelse', [])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['List', 'Name', 'Name', 'Name', 'Name'])]": 1, "ExceptHandler -> [('type', 'Attribute'), ('name', 'Name'), ('body', ['Expr', 'Assign'])]": 1, "ExceptHandler -> [('type', 'Name'), ('name', 'Name'), ('body', ['Print', 'Expr', 'Continue'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'For', 'Assign']), ('decorator_list', ['Name'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Subscript', 'Subscript']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "BinOp -> [('left', 'ListComp'), ('op', 'Add'), ('right', 'ListComp')]": 4, "If -> [('test', 'Compare'), ('body', ['Import', 'Assign']), ('orelse', ['Raise'])]": 2, "If -> [('test', 'BoolOp'), ('body', ['AugAssign']), ('orelse', ['If'])]": 2, "If -> [('test', 'Compare'), ('body', ['If']), ('orelse', ['Raise'])]": 4, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'If', 'FunctionDef', 'Assign', 'FunctionDef', 'Assign', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Str', 'Name', 'Str', 'Str', 'Str']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'If', 'Assign', 'For', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'TryExcept', 'Assign', 'Assign', 'If', 'Assign', 'For', 'Assign', 'Assign', 'Expr', 'Return']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Attribute']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 43, "If -> [('test', 'Call'), ('body', ['Assign', 'Assign', 'With']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Import', 'Assign', 'Assign', 'For']), ('decorator_list', [])]": 1, "With -> [('context_expr', 'Attribute'), ('optional_vars', 'Name'), ('body', ['Assign', 'Expr', 'Return'])]": 1, "If -> [('test', 'BinOp'), ('body', ['Expr', 'Expr']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'Print', 'Print', 'Print', 'Print', 'For', 'Print', 'Print', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'If', 'Assign', 'If', 'Expr', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['Name', 'Str', 'Name'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign']), ('decorator_list', [])]": 1, "Tuple -> [('elts', ['Num', 'Attribute']), ('ctx', 'Load')]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'Return']), ('orelse', ['Assign', 'Assign', 'Assign', 'Return'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Assign', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'TryExcept', 'Assign', 'Assign', 'Assign', 'TryExcept']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'For', 'For', 'For']), ('decorator_list', [])]": 4, "Call -> [('func', 'Attribute'), ('args', ['Name']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 519, "List -> [('elts', ['Name', 'Str', 'Name', 'Name']), ('ctx', 'Load')]": 3, "Call -> [('func', 'Attribute'), ('args', ['BinOp', 'Tuple', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "While -> [('test', 'Num'), ('body', ['Assign', 'If', 'AugAssign', 'If', 'If', 'Expr']), ('orelse', [])]": 2, "If -> [('test', 'Compare'), ('body', ['If', 'Assign', 'Assign', 'If', 'If']), ('orelse', [])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Name', 'Str'])]": 1, "Call -> [('func', 'Name'), ('args', ['Attribute', 'Num', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 3, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Attribute', 'List']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "If -> [('test', 'Subscript'), ('body', ['Assign', 'Assert', 'Return']), ('orelse', [])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Str', 'Str', 'Num', 'Num', 'Num', 'List'])]": 1, "BoolOp -> [('op', 'And'), ('values', ['BoolOp', 'BoolOp', 'BoolOp'])]": 1, "Tuple -> [('elts', ['Name', 'Call', 'Name', 'Call']), ('ctx', 'Load')]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'Expr', 'Return']), ('decorator_list', [])]": 3, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Str', 'Num', 'Name', 'Num', 'Name', 'Num', 'Name'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'TryExcept', 'TryExcept', 'If', 'Expr']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'For', 'Expr']), ('orelse', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Tuple', 'Tuple', 'Num', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign']), ('decorator_list', [])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'str'), ('defaults', ['Name', 'Tuple', 'Name', 'Num', 'Tuple', 'Name', 'Tuple'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 2, "If -> [('test', 'Compare'), ('body', ['Assign', 'If', 'Assign', 'Assign']), ('orelse', ['Assign'])]": 1, "If -> [('test', 'Compare'), ('body', ['ImportFrom', 'Expr', 'Assign', 'Assign', 'Expr']), ('orelse', [])]": 1, "BoolOp -> [('op', 'And'), ('values', ['Compare', 'Compare', 'UnaryOp', 'Subscript'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Tuple', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'If']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If']), ('decorator_list', [])]": 133, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'For', 'Expr', 'If', 'Return']), ('decorator_list', [])]": 1, "Tuple -> [('elts', ['Name', 'Attribute', 'Attribute', 'Name']), ('ctx', 'Load')]": 1, "TryExcept -> [('body', ['Expr', 'Assign', 'If', 'Assign']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 1, "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign', 'Return']), ('orelse', ['If'])]": 1, "If -> [('test', 'Compare'), ('body', ['ImportFrom']), ('orelse', ['Assign'])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'If', 'TryExcept']), ('orelse', ['Assign', 'Assign', 'If', 'TryExcept'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Name', 'Name', 'Name']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 5, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'Expr', 'Expr']), ('decorator_list', [])]": 3, "List -> [('elts', ['Dict', 'Dict', 'Dict', 'Dict', 'Dict', 'Dict', 'Dict', 'Dict', 'Dict']), ('ctx', 'Load')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'For', 'Return']), ('decorator_list', [])]": 2, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If']), ('orelse', [])]": 1, "Compare -> [('left', 'Tuple'), ('ops', ['Eq']), ('comparators', ['Tuple'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'For', 'Assign', 'While', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('decorator_list', ['Call'])]": 1, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'Return']), ('decorator_list', ['Name', 'Attribute'])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'If']), ('orelse', ['Expr'])]": 1, "While -> [('test', 'Num'), ('body', ['Expr', 'Assign']), ('orelse', [])]": 2, "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'FunctionDef', 'ClassDef'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'TryExcept', 'Expr', 'If']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Expr', 'Expr', 'Expr', 'AugAssign', 'Expr', 'Expr', 'Expr', 'AugAssign', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'For', 'Assign', 'AugAssign', 'Expr', 'Expr', 'AugAssign', 'For', 'Assign', 'AugAssign', 'Expr', 'Expr', 'Expr', 'AugAssign', 'For']), ('decorator_list', [])]": 1, "If -> [('test', 'Name'), ('body', ['Expr', 'Expr', 'Expr', 'Expr']), ('orelse', [])]": 2, "UnaryOp -> [('op', 'USub'), ('operand', 'BinOp')]": 17, "comprehension -> [('target', 'Name'), ('iter', 'Attribute'), ('ifs', [])]": 135, "If -> [('test', 'Compare'), ('body', ['Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr']), ('orelse', [])]": 3, "BinOp -> [('left', 'Num'), ('op', 'Mult'), ('right', 'List')]": 16, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Assign', 'Expr', 'TryExcept']), ('orelse', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'AugAssign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'If']), ('orelse', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Num', 'UnaryOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign']), ('decorator_list', [])]": 41, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'If', 'ImportFrom', 'If', 'If', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'If']), ('decorator_list', [])]": 1, "Dict -> [('keys', ['Name']), ('values', ['Tuple'])]": 1, "BinOp -> [('left', 'Attribute'), ('op', 'LShift'), ('right', 'Num')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'For', 'Assign', 'Assign', 'Expr', 'Assign', 'If', 'TryExcept']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Print']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Return']), ('decorator_list', [])]": 100, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Expr', 'For', 'For']), ('decorator_list', [])]": 2, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "Compare -> [('left', 'BinOp'), ('ops', ['NotEq']), ('comparators', ['Num'])]": 4, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'str'), ('kwarg', 'str'), ('defaults', ['Name', 'Name', 'Name', 'Name', 'Name'])]": 1, "BoolOp -> [('op', 'Or'), ('values', ['Call', 'Call'])]": 83, "Call -> [('func', 'Name'), ('args', ['Lambda', 'GeneratorExp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assert', 'ImportFrom', 'Expr', 'Expr', 'Assign', 'Assign', 'For']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'AugAssign', 'Return']), ('decorator_list', ['Name', 'Call'])]": 1, "Tuple -> [('elts', ['Num', 'Num', 'Num', 'BinOp']), ('ctx', 'Load')]": 1, "Call -> [('func', 'Name'), ('args', ['Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 341, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assert', 'Assert', 'Assert', 'Assert', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Str', 'Attribute']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "BoolOp -> [('op', 'And'), ('values', ['Name', 'BoolOp'])]": 12, "For -> [('target', 'Tuple'), ('iter', 'Name'), ('body', ['Assign', 'If', 'For', 'If']), ('orelse', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Subscript', 'Name', 'BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 4, "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'If']), ('orelse', ['Return'])]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'If'])]": 1, "If -> [('test', 'Name'), ('body', ['Assign']), ('orelse', ['Expr', 'Return'])]": 1, "Tuple -> [('elts', ['Num', 'Str', 'Name']), ('ctx', 'Load')]": 13, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'With']), ('decorator_list', [])]": 6, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'TryExcept', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'TryExcept', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'If'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'If', 'Assign', 'For', 'Assign', 'Expr', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'Print', 'Assign', 'Expr', 'For', 'Expr']), ('decorator_list', [])]": 1, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Assign', 'TryExcept', 'Expr']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Global', 'ImportFrom', 'Print', 'Assign', 'For']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'With', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', ['Name', 'Name'])]": 1, "Compare -> [('left', 'Name'), ('ops', ['NotIn']), ('comparators', ['ListComp'])]": 6, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'If', 'Assign', 'If', 'Expr']), ('decorator_list', [])]": 2, "arguments -> [('args', ['Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Tuple'])]": 7, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'BinOp', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Attribute', 'Name', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 4, "BinOp -> [('left', 'Call'), ('op', 'Mod'), ('right', 'Str')]": 12, "Tuple -> [('elts', ['BoolOp', 'Call']), ('ctx', 'Load')]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'FunctionDef', 'FunctionDef'])]": 1, "Tuple -> [('elts', ['Call', 'Tuple']), ('ctx', 'Load')]": 7, "TryExcept -> [('body', ['Assign']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 619, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Assign', 'While', 'Assign', 'Assign', 'For', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Expr', 'While']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'Assign', 'Assign', 'If']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'TryExcept', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'TryExcept', 'Expr', 'If', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Expr', 'If', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'BinOp'), ('body', ['Delete']), ('orelse', [])]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef'])]": 2, "List -> [('elts', ['Str', 'Str', 'Str', 'Str', 'BinOp']), ('ctx', 'Load')]": 1, "For -> [('target', 'Name'), ('iter', 'ListComp'), ('body', ['If', 'If']), ('orelse', [])]": 2, "If -> [('test', 'Compare'), ('body', ['Assign', 'With', 'If', 'TryExcept']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['TryExcept', 'If', 'TryExcept', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'While', 'Return']), ('decorator_list', [])]": 1, "Lambda -> [('args', 'arguments'), ('body', 'Name')]": 87, "Call -> [('func', 'Subscript'), ('args', []), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 6, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Name', 'Num', 'Num', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "If -> [('test', 'Compare'), ('body', ['Print', 'Assign']), ('orelse', ['Assign', 'For'])]": 1, "Tuple -> [('elts', ['Num', 'Subscript']), ('ctx', 'Load')]": 1, "While -> [('test', 'Compare'), ('body', ['If', 'Assign']), ('orelse', [])]": 2, "IfExp -> [('test', 'BinOp'), ('body', 'Str'), ('orelse', 'Str')]": 1, "If -> [('test', 'Name'), ('body', ['Assign', 'If', 'Expr']), ('orelse', ['If', 'Expr'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', ['Name', 'Call', 'Name'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'FunctionDef', 'FunctionDef', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'While', 'While', 'Assign', 'If']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'If', 'Assign', 'Assign', 'Delete', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', ['Call', 'Name', 'Name'])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'Expr', 'If', 'Assign', 'If', 'Assign', 'If', 'Assign', 'While', 'Expr', 'Return']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Str', 'Subscript', 'Name', 'Name', 'Str', 'Dict']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'ClassDef']), ('decorator_list', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Name', 'Tuple']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 136, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Subscript']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 76, "Call -> [('func', 'Attribute'), ('args', ['Str', 'Call', 'Name', 'Name', 'Name', 'Repr', 'Repr']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Tuple -> [('elts', ['BinOp', 'Tuple']), ('ctx', 'Load')]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Num', 'Num', 'Num', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'AugAssign', 'AugAssign']), ('decorator_list', [])]": 1, "Print -> [('dest', 'NoneType'), ('values', ['Str', 'Attribute']), ('nl', 'bool')]": 17, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Num'])]": 4, "Call -> [('func', 'Name'), ('args', ['Str', 'Str', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 76, "If -> [('test', 'Name'), ('body', ['Assert', 'Expr']), ('orelse', ['If'])]": 1, "If -> [('test', 'Subscript'), ('body', ['Assign', 'Assign', 'If']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Delete', 'Return']), ('decorator_list', [])]": 1, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Assign', 'AugAssign', 'Assign', 'Assign', 'If', 'Expr', 'Expr']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'If', 'Assign', 'AugAssign', 'Return']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'TryExcept', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'Name'), ('body', ['TryExcept']), ('orelse', ['If'])]": 2, "BoolOp -> [('op', 'And'), ('values', ['Compare', 'Subscript'])]": 18, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'For', 'If']), ('orelse', [])]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'TryExcept', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'TryExcept', 'TryExcept', 'TryExcept', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'AugAssign', 'Delete', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'If', 'If']), ('orelse', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Attribute', 'Name', 'Call', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "While -> [('test', 'Compare'), ('body', ['Expr', 'If', 'Assign']), ('orelse', [])]": 1, "If -> [('test', 'Subscript'), ('body', ['Assign']), ('orelse', [])]": 12, "TryExcept -> [('body', ['AugAssign']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 4, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'TryExcept', 'If', 'Return']), ('decorator_list', [])]": 1, "Call -> [('func', 'Call'), ('args', ['Call', 'Name', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "TryExcept -> [('body', ['Expr', 'Expr', 'TryExcept']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'If', 'For', 'If', 'If', 'Return']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Print', 'Assign', 'Assign']), ('orelse', [])]": 1, "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'TryExcept', 'TryExcept', 'If', 'Assign', 'If', 'ClassDef'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'Return']), ('decorator_list', [])]": 39, "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('orelse', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'If', 'Return']), ('decorator_list', [])]": 12, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Return']), ('decorator_list', ['Call', 'Name', 'Call'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]": 24, "If -> [('test', 'Call'), ('body', ['Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'If', 'Expr', 'Assign', 'If', 'Return']), ('orelse', ['Expr', 'Return'])]": 1, "Tuple -> [('elts', ['Num', 'Name', 'Tuple', 'Dict', 'Tuple']), ('ctx', 'Load')]": 5, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'TryExcept', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'TryExcept', 'Assign', 'Expr', 'TryExcept', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'TryExcept', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'str'), ('defaults', ['Num', 'Name'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 10, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Return']), ('orelse', ['If'])]": 3, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ImportFrom'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Call', 'Call', 'Tuple']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'If', 'Assign', 'TryExcept']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'If', 'For', 'If']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If']), ('decorator_list', ['Name'])]": 6, "Call -> [('func', 'Name'), ('args', ['Lambda', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 44, "TryExcept -> [('body', ['Assign', 'Assign', 'Assign', 'For']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 2, "If -> [('test', 'Name'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'If', 'If']), ('orelse', [])]": 1, "Compare -> [('left', 'Call'), ('ops', ['LtE']), ('comparators', ['Name'])]": 3, "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign', 'Expr', 'For']), ('orelse', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "If -> [('test', 'Call'), ('body', ['FunctionDef', 'Return']), ('orelse', ['Return'])]": 2, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'TryExcept', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef'])]": 1, "If -> [('test', 'Name'), ('body', ['If', 'If', 'AugAssign', 'Return']), ('orelse', ['Return'])]": 1, "If -> [('test', 'Call'), ('body', ['Assign', 'Expr', 'For']), ('orelse', [])]": 2, "TryExcept -> [('body', ['Assign', 'Assign', 'For', 'Expr']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str'])]": 11, "Module -> [('body', ['Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'TryExcept', 'TryExcept', 'TryExcept', 'ClassDef', 'ClassDef', 'ClassDef'])]": 1, "BinOp -> [('left', 'Num'), ('op', 'Div'), ('right', 'UnaryOp')]": 1, "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'For']), ('orelse', [])]": 1, "If -> [('test', 'Attribute'), ('body', ['Expr', 'Expr', 'If']), ('orelse', ['Expr'])]": 4, "While -> [('test', 'Name'), ('body', ['For', 'Expr']), ('orelse', [])]": 1, "If -> [('test', 'Compare'), ('body', ['For']), ('orelse', ['Print'])]": 2, "Call -> [('func', 'Attribute'), ('args', ['Str', 'Str', 'Name']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "If -> [('test', 'Name'), ('body', ['Assign', 'Assign']), ('orelse', ['Assign', 'Assign', 'If', 'If', 'Assign'])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'If']), ('orelse', [])]": 15, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'If', 'Return']), ('decorator_list', [])]": 4, "Print -> [('dest', 'NoneType'), ('values', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('nl', 'bool')]": 1, "Call -> [('func', 'Attribute'), ('args', []), ('keywords', ['keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'Name')]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'If', 'Return']), ('decorator_list', [])]": 6, "Compare -> [('left', 'Attribute'), ('ops', ['Eq', 'Eq']), ('comparators', ['Attribute', 'Str'])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Dict'])]": 1, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'ClassDef', 'ClassDef'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Assign', 'For', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'For', 'Assign', 'For', 'Return']), ('decorator_list', [])]": 9, "TryFinally -> [('body', ['With', 'Assign', 'Expr']), ('finalbody', ['Expr'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['With', 'Assign', 'Assert', 'Assert', 'Assert', 'Assert', 'For']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Return']), ('decorator_list', ['Name', 'Name'])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Name', 'Name', 'Name', 'Dict', 'Name'])]": 1, "Tuple -> [('elts', ['Str', 'Attribute']), ('ctx', 'Load')]": 35, "If -> [('test', 'Compare'), ('body', ['Assign', 'Raise']), ('orelse', ['If'])]": 1, "If -> [('test', 'Name'), ('body', ['If', 'Assign', 'Assign', 'For', 'Assign', 'Break']), ('orelse', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'If', 'Expr']), ('decorator_list', [])]": 4, "If -> [('test', 'Subscript'), ('body', ['Expr']), ('orelse', ['Expr', 'Expr'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'Assign', 'If', 'Expr', 'Expr', 'If', 'Return']), ('decorator_list', [])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Str', 'Str', 'Name', 'Name', 'Name', 'List', 'Name'])]": 1, "If -> [('test', 'Call'), ('body', ['Assign', 'Assign', 'Return']), ('orelse', [])]": 4, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'If', 'If']), ('orelse', [])]": 1, "GtE -> <NULL>": 333, "If -> [('test', 'Compare'), ('body', ['Print', 'Assign', 'Print', 'Assign', 'Expr', 'Print', 'Print', 'Print', 'Assign', 'If']), ('orelse', ['If'])]": 1, "Module -> [('body', ['Import', 'Assign', 'Expr', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'Import', 'Import', 'FunctionDef', 'FunctionDef', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Expr', 'Assign', 'Assign', 'Assign', 'Print', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'While'])]": 1, "If -> [('test', 'Call'), ('body', ['TryExcept']), ('orelse', ['If'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['TryExcept', 'Assign', 'Expr', 'If', 'Expr']), ('decorator_list', [])]": 1, "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Expr']), ('orelse', ['If', 'Expr'])]": 2, "If -> [('test', 'Compare'), ('body', ['Print', 'Assign', 'Assign', 'Assign', 'If', 'If', 'If', 'If', 'Expr']), ('orelse', [])]": 4, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef']), ('decorator_list', [])]": 1, "If -> [('test', 'BoolOp'), ('body', ['Expr', 'Return']), ('orelse', ['If', 'Return'])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name', 'Attribute']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Print', 'Print', 'Print', 'With']), ('orelse', [])]": 1, "List -> [('elts', ['List', 'List', 'List']), ('ctx', 'Load')]": 12, "If -> [('test', 'Compare'), ('body', ['Raise']), ('orelse', ['Delete'])]": 1, "If -> [('test', 'Name'), ('body', ['AugAssign', 'Assign']), ('orelse', [])]": 1, "Tuple -> [('elts', ['BinOp', 'Num']), ('ctx', 'Load')]": 23, "While -> [('test', 'Name'), ('body', ['If', 'Assign', 'TryExcept', 'Expr']), ('orelse', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Import', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('orelse', [])]": 1, "If -> [('test', 'Attribute'), ('body', ['Expr', 'Expr', 'Expr']), ('orelse', [])]": 3, "If -> [('test', 'Compare'), ('body', ['TryExcept']), ('orelse', ['TryExcept'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', ['Call'])]": 1, "Call -> [('func', 'Name'), ('args', ['Attribute', 'UnaryOp', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'If', 'Assign', 'Expr', 'Assign']), ('orelse', [])]": 1, "Call -> [('func', 'Name'), ('args', ['List', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "Tuple -> [('elts', ['Subscript', 'Name', 'Name', 'BinOp', 'Subscript']), ('ctx', 'Load')]": 1, "If -> [('test', 'Call'), ('body', ['Assign']), ('orelse', ['Expr'])]": 6, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign']), ('decorator_list', [])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Str', 'Tuple', 'Tuple', 'Name'])]": 1, "Tuple -> [('elts', ['Tuple', 'Tuple']), ('ctx', 'Store')]": 6, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'If', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 2, "Dict -> [('keys', ['Str', 'Str']), ('values', ['Call', 'Attribute'])]": 4, "While -> [('test', 'BoolOp'), ('body', ['If', 'Assign', 'If', 'If', 'AugAssign', 'TryFinally']), ('orelse', [])]": 2, "Assign -> [('targets', ['Subscript', 'Subscript']), ('value', 'Str')]": 3, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'Import', 'Import', 'ClassDef'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assert']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 40, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'Import', 'Import', 'Assign', 'ImportFrom', 'Expr', 'Delete', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'If'])]": 1, "If -> [('test', 'Name'), ('body', ['If']), ('orelse', ['If'])]": 6, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'If', 'If', 'Expr', 'Assign', 'If', 'Assign', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'Return']), ('decorator_list', ['Name'])]": 6, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assert', 'If', 'Assign', 'Assign', 'If', 'Assign', 'Expr', 'If', 'Expr', 'Expr', 'TryFinally']), ('decorator_list', [])]": 1, "BinOp -> [('left', 'Call'), ('op', 'Sub'), ('right', 'Subscript')]": 2, "If -> [('test', 'Compare'), ('body', ['Print', 'If']), ('orelse', ['If'])]": 2, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['TryExcept', 'Expr']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "ExceptHandler -> [('type', 'Name'), ('name', 'Name'), ('body', ['Return'])]": 57, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'TryExcept', 'Assign', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Num', 'Name', 'Tuple', 'Dict', 'Tuple', 'Str', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 9, "If -> [('test', 'Compare'), ('body', ['If', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'If']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Return']), ('decorator_list', [])]": 155, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'ImportFrom', 'ImportFrom', 'Import', 'ImportFrom', 'Assign', 'Assign', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]": 1, "List -> [('elts', ['Num', 'Num', 'Num', 'Attribute']), ('ctx', 'Load')]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 5, "List -> [('elts', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('ctx', 'Load')]": 1, "If -> [('test', 'BoolOp'), ('body', ['Expr', 'Break']), ('orelse', [])]": 3, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Str', 'Str', 'Str', 'Str', 'Call', 'Str', 'Str', 'Dict'])]": 1, "If -> [('test', 'BoolOp'), ('body', ['Expr']), ('orelse', ['Delete', 'Raise'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'If', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assert', 'Assign', 'If']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Print', 'If']), ('orelse', ['Return'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Call', 'List', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['Import'])]": 20, "Module -> [('body', ['Import', 'ImportFrom', 'Import', 'ClassDef', 'Assign', 'Assign', 'Assign', 'Assign'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'TryExcept', 'Assign', 'Assign', 'If', 'If', 'If', 'TryExcept', 'If', 'If', 'Assign', 'For', 'Assign', 'Expr', 'Return']), ('decorator_list', [])]": 2, "BinOp -> [('left', 'BinOp'), ('op', 'Mod'), ('right', 'Num')]": 9, "If -> [('test', 'Compare'), ('body', ['If', 'Assign', 'Return']), ('orelse', ['If', 'If', 'Assign', 'Return'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign']), ('decorator_list', ['Call'])]": 2, "AugAssign -> [('target', 'Attribute'), ('op', 'Mult'), ('value', 'Name')]": 1, "Module -> [('body', ['Import', 'Import', 'Expr', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'ImportFrom', 'ImportFrom', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 5, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assert', 'Assign', 'Assign']), ('decorator_list', [])]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['FunctionDef', 'Assign', 'For', 'Return']), ('decorator_list', [])]": 3, "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['Assign', 'If']), ('orelse', [])]": 57, "Print -> [('dest', 'NoneType'), ('values', ['Str', 'Name', 'Str']), ('nl', 'bool')]": 7, "If -> [('test', 'Call'), ('body', ['Assign', 'Expr']), ('orelse', ['Print'])]": 1, "For -> [('target', 'Tuple'), ('iter', 'List'), ('body', ['Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "TryExcept -> [('body', ['Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'AugAssign']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Expr', 'Expr', 'Expr', 'If', 'Return']), ('orelse', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Name', 'Attribute', 'Name']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Assign', 'Print', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'While', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 5, "TryFinally -> [('body', ['Expr', 'Expr', 'Assign', 'Assign', 'Expr']), ('finalbody', ['Expr', 'TryExcept'])]": 2, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Expr', 'ImportFrom', 'Expr', 'ClassDef', 'ClassDef', 'FunctionDef', 'If'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'TryExcept']), ('decorator_list', [])]": 4, "Compare -> [('left', 'Attribute'), ('ops', ['IsNot']), ('comparators', ['Attribute'])]": 4, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['FunctionDef', 'ClassDef', 'ClassDef']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'If']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Num', 'Tuple', 'Str']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]": 1, "Tuple -> [('elts', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('ctx', 'Load')]": 8, "TryExcept -> [('body', ['With']), ('handlers', ['ExceptHandler']), ('orelse', ['If'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 4, "If -> [('test', 'Compare'), ('body', ['Assign', 'Return']), ('orelse', ['Assign', 'Return'])]": 1, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'ClassDef', 'ClassDef', 'FunctionDef', 'ClassDef', 'ClassDef', 'ClassDef'])]": 1, "Tuple -> [('elts', ['Attribute', 'BoolOp', 'Attribute']), ('ctx', 'Load')]": 3, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Str', 'BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "If -> [('test', 'Call'), ('body', ['Expr', 'AugAssign']), ('orelse', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "If -> [('test', 'Name'), ('body', ['ImportFrom', 'Assign', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign']), ('orelse', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'FunctionDef', 'FunctionDef'])]": 1, "If -> [('test', 'BoolOp'), ('body', ['Expr', 'Print', 'Print', 'Print']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 4, "If -> [('test', 'Call'), ('body', ['Assign', 'FunctionDef']), ('orelse', [])]": 1, "BinOp -> [('left', 'Subscript'), ('op', 'BitOr'), ('right', 'Call')]": 1, "BinOp -> [('left', 'BinOp'), ('op', 'Sub'), ('right', 'Call')]": 4, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', ['Attribute'])]": 1, "ImportFrom -> [('module', 'str'), ('names', ['alias', 'alias', 'alias', 'alias', 'alias', 'alias']), ('level', 'int')]": 30, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str']), ('values', ['Attribute', 'BinOp', 'Dict', 'Attribute'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'TryExcept', 'Assign', 'If', 'Return']), ('decorator_list', ['Name'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "Dict -> [('keys', ['Subscript']), ('values', ['Subscript'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'BinOp', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'UnaryOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 6, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'TryExcept', 'If', 'Assign', 'Assign', 'Assign', 'If', 'If', 'If', 'If', 'Return']), ('decorator_list', [])]": 1, "Print -> [('dest', 'Name'), ('values', ['Call']), ('nl', 'bool')]": 1, "Call -> [('func', 'Name'), ('args', ['Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Delete', 'Expr']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['Expr', 'If']), ('orelse', [])]": 4, "List -> [('elts', ['Dict', 'Dict', 'Dict']), ('ctx', 'Load')]": 10, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'For']), ('orelse', [])]": 1, "BinOp -> [('left', 'Attribute'), ('op', 'Mod'), ('right', 'Name')]": 26, "Tuple -> [('elts', ['Subscript', 'Name', 'Call']), ('ctx', 'Load')]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'For', 'For', 'Expr', 'Assign']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "BinOp -> [('left', 'Repr'), ('op', 'Add'), ('right', 'Repr')]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name', 'Name']), ('body', ['Assign', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "BinOp -> [('left', 'BinOp'), ('op', 'Pow'), ('right', 'BinOp')]": 14, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Name', 'Attribute', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "If -> [('test', 'Compare'), ('body', ['ImportFrom', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'If', 'If', 'If', 'If', 'Assign', 'If', 'Expr']), ('orelse', [])]": 1, "If -> [('test', 'Call'), ('body', ['Print', 'Assign', 'Continue']), ('orelse', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Str', 'Str', 'Str', 'Str', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "TryExcept -> [('body', ['Assign', 'Assign', 'Expr', 'Assign']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 3, "If -> [('test', 'BoolOp'), ('body', ['AugAssign', 'For', 'Assign']), ('orelse', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Expr']), ('decorator_list', [])]": 1, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Expr', 'AugAssign']), ('orelse', [])]": 2, "If -> [('test', 'BoolOp'), ('body', ['ImportFrom', 'Assign']), ('orelse', ['ImportFrom', 'Assign'])]": 1, "While -> [('test', 'Num'), ('body', ['Expr', 'Assign', 'If']), ('orelse', [])]": 2, "If -> [('test', 'BoolOp'), ('body', ['Return']), ('orelse', ['Raise'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['If', 'If', 'If']), ('orelse', [])]": 3, "If -> [('test', 'Call'), ('body', ['Assign', 'TryExcept', 'Assign', 'Return']), ('orelse', ['If'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'ImportFrom', 'ImportFrom', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "BoolOp -> [('op', 'Or'), ('values', ['Call', 'Compare'])]": 30, "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'Assign', 'Assign', 'Return']), ('orelse', ['TryExcept', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr'])]": 1, "TryFinally -> [('body', ['TryExcept', 'Expr']), ('finalbody', ['If', 'Expr'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'ImportFrom', 'TryExcept', 'Assign', 'FunctionDef', 'FunctionDef', 'Assign', 'Assign', 'Expr', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'If'])]": 1, "For -> [('target', 'Name'), ('iter', 'Tuple'), ('body', ['Assign']), ('orelse', [])]": 3, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Name', 'Name', 'Name', 'Name'])]": 3, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'TryExcept', 'TryExcept', 'Expr', 'Expr']), ('orelse', ['Expr', 'Return'])]": 1, "BinOp -> [('left', 'BinOp'), ('op', 'Add'), ('right', 'Num')]": 77, "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign', 'If', 'If']), ('orelse', ['If'])]": 2, "Call -> [('func', 'Name'), ('args', ['Str', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "TryExcept -> [('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'Assign', 'Assign']), ('decorator_list', [])]": 2, "If -> [('test', 'Compare'), ('body', ['Assign', 'If', 'Assign', 'For', 'Assign', 'Expr', 'Expr', 'Return']), ('orelse', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Call', 'Call', 'Call', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Expr', 'TryExcept', 'Assign', 'TryExcept', 'Assign', 'FunctionDef', 'FunctionDef', 'ClassDef', 'Expr', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'Assign', 'Assign'])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Expr', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Assign']), ('orelse', [])]": 66, "TryExcept -> [('body', ['AugAssign', 'Assign']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 3, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['If', 'If', 'Assign']), ('orelse', [])]": 1, "BinOp -> [('left', 'Call'), ('op', 'Mod'), ('right', 'Dict')]": 37, "If -> [('test', 'Compare'), ('body', ['Expr', 'While', 'If', 'While']), ('orelse', ['If'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'If', 'If']), ('decorator_list', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Name', 'Name', 'Subscript', 'Subscript']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'Name')]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Expr', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Expr', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'For', 'Expr', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Return']), ('orelse', ['Return'])]": 5, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Assert', 'Assign', 'Expr', 'If', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assert', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'If', 'If']), ('decorator_list', ['Attribute'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assert', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assert', 'Assert', 'Assign', 'Expr', 'Assign']), ('decorator_list', [])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Name', 'Str'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'Assign', 'Assign', 'Assign', 'Assign', 'ClassDef', 'Assign', 'ClassDef', 'Assign']), ('decorator_list', [])]": 1, "Compare -> [('left', 'Name'), ('ops', ['NotIn']), ('comparators', ['BinOp'])]": 1, "AugAssign -> [('target', 'Name'), ('op', 'Add'), ('value', 'Attribute')]": 12, "Module -> [('body', ['Import', 'Expr', 'Import', 'ImportFrom', 'ImportFrom', 'Import', 'ImportFrom', 'Expr', 'ImportFrom', 'Expr', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'For', 'ClassDef', 'Assign', 'Expr', 'Expr'])]": 1, "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'Assign', 'Assign', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'If'])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['Str', 'Str', 'Tuple'])]": 2, "ClassDef -> [('name', 'str'), ('bases', []), ('body', ['Assign', 'FunctionDef']), ('decorator_list', [])]": 1, "While -> [('test', 'UnaryOp'), ('body', ['Assign', 'Assign', 'Expr', 'AugAssign', 'Assign']), ('orelse', [])]": 1, "If -> [('test', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Return']), ('orelse', ['Expr'])]": 1, "If -> [('test', 'Compare'), ('body', ['Continue']), ('orelse', ['Assign', 'AugAssign'])]": 1, "If -> [('test', 'Compare'), ('body', ['If', 'Expr', 'Expr']), ('orelse', ['Expr'])]": 1, "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Raise']), ('orelse', ['Raise'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'For']), ('decorator_list', ['Name', 'Name', 'Name'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['For', 'For', 'Assign', 'For']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name']), ('keywords', []), ('starargs', 'Name'), ('kwargs', 'NoneType')]": 5, "TryExcept -> [('body', ['Assign']), ('handlers', ['ExceptHandler']), ('orelse', ['Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr'])]": 1, "List -> [('elts', ['Attribute', 'Attribute']), ('ctx', 'Load')]": 33, "Module -> [('body', ['Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'TryExcept', 'TryExcept', 'TryExcept', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]": 1, "NotIn -> <NULL>": 451, "If -> [('test', 'Compare'), ('body', ['Assign', 'Print', 'Print', 'Print']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'For', 'Assign', 'Assign', 'Assign', 'While', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Print', 'Assign', 'For', 'Print', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'Assign', 'If', 'Print', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['While']), ('decorator_list', [])]": 17, "BinOp -> [('left', 'BinOp'), ('op', 'Mod'), ('right', 'Call')]": 6, "List -> [('elts', ['Call', 'Call', 'Str', 'Str', 'Call']), ('ctx', 'Load')]": 1, "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'Assign', 'Expr', 'For', 'Assign', 'Assign']), ('orelse', ['Assign', 'Assign', 'Assign'])]": 1, "TryExcept -> [('body', ['Assign']), ('handlers', ['ExceptHandler']), ('orelse', ['Assign', 'Assign', 'If', 'If', 'Expr'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['UnaryOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 50, "Print -> [('dest', 'Attribute'), ('values', ['Str']), ('nl', 'bool')]": 8, "If -> [('test', 'Call'), ('body', ['If', 'Return']), ('orelse', ['Return'])]": 1, "Tuple -> [('elts', ['BinOp', 'Num', 'Num']), ('ctx', 'Load')]": 5, "If -> [('test', 'BoolOp'), ('body', ['If', 'For', 'If']), ('orelse', [])]": 2, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'Assign']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 125, "Call -> [('func', 'Attribute'), ('args', ['Str', 'Num']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 7, "If -> [('test', 'Compare'), ('body', ['If', 'Return']), ('orelse', ['Return'])]": 1, "List -> [('elts', ['Name']), ('ctx', 'Load')]": 524, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'If', 'If', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "Compare -> [('left', 'Attribute'), ('ops', ['In']), ('comparators', ['ListComp'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'If', 'If', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['BinOp', 'Dict']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "List -> [('elts', ['Num', 'Num', 'BinOp', 'BinOp', 'BinOp', 'Name']), ('ctx', 'Load')]": 1, "Call -> [('func', 'Name'), ('args', ['Call', 'Attribute', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'Import', 'If']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'For']), ('orelse', ['Expr'])]": 1, "If -> [('test', 'Name'), ('body', ['TryExcept']), ('orelse', ['Expr'])]": 3, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Attribute', 'Attribute', 'Name', 'Call'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Expr', 'Expr', 'For']), ('decorator_list', [])]": 2, "If -> [('test', 'Compare'), ('body', ['Assign', 'Expr', 'Assign', 'Assign']), ('orelse', ['If'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Expr', 'Return']), ('decorator_list', [])]": 6, "ClassDef -> [('name', 'str'), ('bases', ['Name', 'Name']), ('body', ['FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 4, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Global', 'Assign', 'Assign', 'Assign', 'Assign']), ('decorator_list', ['Name', 'Attribute'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'Expr', 'Expr', 'For', 'Assign', 'For']), ('orelse', [])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Str', 'Str', 'Str', 'List', 'Str', 'Str', 'Str', 'Str', 'Str', 'Dict'])]": 2, "Call -> [('func', 'Attribute'), ('args', ['Num', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 107, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'For']), ('decorator_list', [])]": 1, "Module -> [('body', ['Import', 'ClassDef', 'FunctionDef', 'FunctionDef'])]": 1, "Call -> [('func', 'Name'), ('args', ['Name', 'Name', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 88, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Expr', 'Expr', 'Expr', 'For']), ('orelse', ['Assign', 'Expr'])]": 1, "Dict -> [('keys', ['Str', 'Str']), ('values', ['Attribute', 'List'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'Print', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Str']), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assert', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Dict', 'Dict', 'Dict', 'Dict', 'Dict', 'Dict', 'Dict', 'Dict'])]": 1, "Compare -> [('left', 'BinOp'), ('ops', ['NotEq']), ('comparators', ['Attribute'])]": 2, "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['Str', 'Str', 'Call'])]": 2, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "Module -> [('body', ['Import', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Print', 'ImportFrom', 'For', 'Expr'])]": 1, "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['Assign', 'Assign', 'If', 'If']), ('orelse', [])]": 2, "If -> [('test', 'Compare'), ('body', ['Print', 'Print', 'Print', 'Print', 'Print', 'Print', 'Print', 'Print', 'Print', 'Print', 'Return']), ('orelse', ['Return'])]": 1, "Call -> [('func', 'Name'), ('args', ['Str', 'Name', 'Name', 'List']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'ClassDef'])]": 1, "TryExcept -> [('body', ['Assign']), ('handlers', ['ExceptHandler']), ('orelse', ['Assign', 'Assign'])]": 1, "Tuple -> [('elts', ['Num', 'BinOp']), ('ctx', 'Load')]": 29, "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['Name', 'Num', 'Str'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 13, "Assign -> [('targets', ['Name']), ('value', 'ListComp')]": 480, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'Assign', 'If', 'Expr', 'Assign', 'If']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'Assign', 'For', 'If']), ('decorator_list', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Subscript', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 21, "Compare -> [('left', 'Attribute'), ('ops', ['NotEq']), ('comparators', ['Tuple'])]": 2, "BinOp -> [('left', 'Attribute'), ('op', 'Add'), ('right', 'Attribute')]": 67, "Call -> [('func', 'Subscript'), ('args', []), ('keywords', []), ('starargs', 'Name'), ('kwargs', 'NoneType')]": 2, "If -> [('test', 'Compare'), ('body', ['If', 'Expr']), ('orelse', [])]": 9, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Dict', 'Str'])]": 1, "Compare -> [('left', 'Subscript'), ('ops', ['Eq']), ('comparators', ['Subscript'])]": 65, "For -> [('target', 'Name'), ('iter', 'Subscript'), ('body', ['Assign', 'Expr', 'Expr', 'Expr', 'Expr']), ('orelse', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['With', 'Return']), ('decorator_list', ['Call'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'TryExcept', 'If']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'If']), ('decorator_list', [])]": 4, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'ClassDef', 'FunctionDef'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Assign', 'Assert', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 1, "Assign -> [('targets', ['Attribute']), ('value', 'Yield')]": 2, "If -> [('test', 'Compare'), ('body', ['Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('orelse', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Str', 'Call', 'Str', 'Str', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "ExceptHandler -> [('type', 'Name'), ('name', 'Name'), ('body', ['If', 'Assign'])]": 3, "Call -> [('func', 'Name'), ('args', ['Name', 'Attribute', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 7, "ClassDef -> [('name', 'str'), ('bases', ['Name', 'Name']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'TryExcept']), ('decorator_list', [])]": 1, "TryExcept -> [('body', ['If', 'Assign', 'Print', 'For', 'Print', 'If', 'Expr']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'Name')]": 4, "For -> [('target', 'Tuple'), ('iter', 'Tuple'), ('body', ['Expr']), ('orelse', [])]": 2, "Call -> [('func', 'Name'), ('args', ['Name']), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Call -> [('func', 'Name'), ('args', ['Attribute']), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Call -> [('func', 'Attribute'), ('args', ['Call', 'Name', 'Name', 'Tuple']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "For -> [('target', 'Name'), ('iter', 'Subscript'), ('body', ['Assign', 'Assign', 'If']), ('orelse', [])]": 2, "Call -> [('func', 'Name'), ('args', ['Str', 'Str', 'Str', 'List']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'Print', 'TryExcept', 'If', 'Assign', 'For']), ('decorator_list', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Call', 'Call']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "arguments -> [('args', ['Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Tuple', 'Tuple'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assert', 'Assert', 'Assert', 'Assert']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Print', 'Assign', 'Assign', 'Assign', 'Assign', 'AugAssign', 'Assign', 'AugAssign', 'Assign', 'AugAssign', 'For', 'For', 'If']), ('decorator_list', [])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Name', 'Name', 'Name'])]": 19, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'Return']), ('decorator_list', ['Call'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'For', 'If', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 1, "Tuple -> [('elts', ['Str', 'Call', 'Dict']), ('ctx', 'Load')]": 1, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 41, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'ClassDef', 'If'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Name', 'Name', 'Attribute', 'Num', 'Num', 'Num', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "If -> [('test', 'Compare'), ('body', ['Import', 'If', 'Assign', 'If']), ('orelse', [])]": 1, "With -> [('context_expr', 'Call'), ('optional_vars', 'Name'), ('body', ['Expr', 'Expr'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'ImportFrom', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 2, "Break -> <NULL>": 366, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Assign', 'For', 'Expr']), ('decorator_list', [])]": 1, "Compare -> [('left', 'Call'), ('ops', ['LtE']), ('comparators', ['Call'])]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'If', 'Return']), ('decorator_list', [])]": 5, "If -> [('test', 'BoolOp'), ('body', ['Return']), ('orelse', ['Expr', 'Return'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For']), ('decorator_list', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', []), ('body', ['Pass']), ('decorator_list', ['Call'])]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'If', 'If', 'Return']), ('decorator_list', ['Name'])]": 1, "If -> [('test', 'Name'), ('body', ['Assert', 'AugAssign']), ('orelse', [])]": 1, "If -> [('test', 'UnaryOp'), ('body', ['ImportFrom', 'TryExcept', 'TryExcept']), ('orelse', ['If'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Global', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'For', 'Expr', 'If']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'TryFinally']), ('decorator_list', [])]": 1, "If -> [('test', 'Attribute'), ('body', ['Assign', 'For', 'For', 'Assign', 'If', 'Assign', 'Assign', 'If']), ('orelse', ['Assign'])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str']), ('values', ['Attribute', 'ListComp', 'Attribute', 'Call'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'If', 'Return']), ('decorator_list', [])]": 3, "Tuple -> [('elts', ['Name', 'Str', 'BinOp']), ('ctx', 'Load')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'TryExcept', 'For', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'If', 'For', 'Return']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Tuple', 'Name', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'FunctionDef', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'Expr', 'Assign', 'Assign', 'If']), ('decorator_list', [])]": 2, "With -> [('context_expr', 'Attribute'), ('optional_vars', 'Name'), ('body', ['Expr'])]": 3, "If -> [('test', 'Attribute'), ('body', ['Assign', 'Assign', 'Expr']), ('orelse', ['Assign'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'If', 'For']), ('decorator_list', [])]": 2, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'If', 'Print', 'Assign', 'Assign', 'Assign', 'Assign', 'Print', 'Print', 'Print', 'Print', 'Assign', 'If', 'Expr', 'Print', 'Print'])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'str'), ('defaults', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name'])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['List', 'Num', 'Name'])]": 5, "If -> [('test', 'BoolOp'), ('body', ['FunctionDef', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'Assign']), ('orelse', [])]": 1, "Dict -> [('keys', ['BinOp']), ('values', ['Name'])]": 17, "Dict -> [('keys', ['Attribute']), ('values', ['List'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'Assign', 'If', 'Return']), ('decorator_list', ['Name', 'Name', 'Call', 'Call'])]": 1, "Call -> [('func', 'Name'), ('args', ['BinOp', 'Num', 'Num', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 4, "Call -> [('func', 'Name'), ('args', ['UnaryOp']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "If -> [('test', 'Subscript'), ('body', ['Assign', 'If']), ('orelse', ['AugAssign'])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'While', 'Assign', 'For']), ('orelse', [])]": 2, "If -> [('test', 'UnaryOp'), ('body', ['Expr', 'AugAssign']), ('orelse', ['Assign'])]": 2, "arguments -> [('args', []), ('vararg', 'NoneType'), ('kwarg', 'str'), ('defaults', [])]": 12, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'FunctionDef', 'For', 'If', 'FunctionDef', 'For', 'For']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'AugAssign', 'TryFinally']), ('orelse', [])]": 1, "If -> [('test', 'Call'), ('body', ['Print']), ('orelse', ['Print', 'Print'])]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'Return']), ('decorator_list', ['Call'])]": 1, "ExceptHandler -> [('type', 'Name'), ('name', 'Name'), ('body', ['Delete', 'Expr'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'If', 'If', 'Assign', 'TryExcept']), ('decorator_list', [])]": 2, "If -> [('test', 'Attribute'), ('body', ['Assign', 'If', 'Assign', 'Assign']), ('orelse', ['If'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'For', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'ImportFrom', 'FunctionDef', 'Expr', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "If -> [('test', 'Call'), ('body', ['Assign', 'Expr', 'Assign', 'Assign', 'TryExcept']), ('orelse', ['Assign'])]": 2, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Expr']), ('orelse', [])]": 45, "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'Expr', 'Expr']), ('orelse', [])]": 8, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'TryExcept', 'For', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'If', 'If', 'Assign', 'Assign', 'Assign', 'Expr', 'Return']), ('decorator_list', [])]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef'])]": 2, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Name', 'Name'])]": 3, "While -> [('test', 'Num'), ('body', ['Expr', 'Print', 'Expr']), ('orelse', [])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'BoolOp', 'Call'])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Str', 'Attribute', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'ImportFrom', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr']), ('orelse', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Call', 'Str', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 14, "Call -> [('func', 'Name'), ('args', ['Call', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 43, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'With', 'Expr']), ('decorator_list', ['Name', 'Name'])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Str'])]": 38, "If -> [('test', 'Call'), ('body', ['Assign', 'Assign', 'If']), ('orelse', ['Assign', 'Assign', 'Assign'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assert', 'Assert', 'Assert', 'Assert', 'If', 'Assign', 'Expr', 'Assign', 'Assign', 'Assert', 'If', 'If']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'Expr', 'Expr', 'Assign', 'If', 'Expr']), ('decorator_list', [])]": 1, "IfExp -> [('test', 'Compare'), ('body', 'Subscript'), ('orelse', 'Str')]": 5, "If -> [('test', 'Name'), ('body', ['Expr', 'For', 'If', 'Expr', 'Expr', 'Assign']), ('orelse', ['Expr', 'For', 'If', 'Expr', 'Assign'])]": 1, "Tuple -> [('elts', ['Str', 'Str', 'Name']), ('ctx', 'Load')]": 11, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Name']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'Name')]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Print', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Print', 'Print', 'Assign', 'Print', 'Assign', 'Print']), ('orelse', [])]": 1, "If -> [('test', 'Name'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('orelse', [])]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ClassDef', 'ClassDef'])]": 1, "Call -> [('func', 'Name'), ('args', ['Name', 'Name', 'List']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Import', 'Import', 'Import', 'Import', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Expr', 'Assign', 'Assign', 'If', 'Assign', 'If', 'Expr', 'Assign', 'If', 'If', 'If', 'Expr']), ('decorator_list', [])]": 1, "If -> [('test', 'Call'), ('body', ['Assign', 'If', 'Assign', 'TryFinally', 'If', 'Assign', 'TryFinally', 'Expr']), ('orelse', [])]": 1, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['TryExcept', 'TryExcept']), ('orelse', [])]": 3, "TryExcept -> [('body', ['Assign']), ('handlers', ['ExceptHandler']), ('orelse', ['If', 'Raise'])]": 2, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['If', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Expr']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'For', 'Expr', 'Return']), ('decorator_list', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Num', 'Name', 'Tuple', 'Dict', 'Tuple', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 3, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'Assign'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'With', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'If', 'With', 'Expr', 'With', 'Return']), ('decorator_list', ['Name', 'Name'])]": 1, "Call -> [('func', 'Name'), ('args', []), ('keywords', []), ('starargs', 'GeneratorExp'), ('kwargs', 'NoneType')]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If']), ('decorator_list', ['Name'])]": 9, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assert', 'Return']), ('decorator_list', ['Call'])]": 4, "If -> [('test', 'Call'), ('body', ['Expr', 'Assign', 'Expr']), ('orelse', [])]": 1, "Module -> [('body', ['Import', 'ImportFrom', 'Import', 'Import', 'Import', 'Import', 'Import', 'TryExcept', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'ClassDef', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'ClassDef'])]": 1, "Call -> [('func', 'Attribute'), ('args', []), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'Call')]": 1, "BinOp -> [('left', 'Name'), ('op', 'BitAnd'), ('right', 'Call')]": 21, "Slice -> [('lower', 'NoneType'), ('upper', 'Subscript'), ('step', 'NoneType')]": 4, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'Assign', 'If', 'Return']), ('decorator_list', [])]": 1, "Assert -> [('test', 'Compare'), ('msg', 'ListComp')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'If', 'Return']), ('decorator_list', ['Name', 'Call'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Return']), ('decorator_list', ['Call'])]": 11, "BoolOp -> [('op', 'Or'), ('values', ['UnaryOp', 'Attribute', 'BoolOp'])]": 1, "BoolOp -> [('op', 'And'), ('values', ['UnaryOp', 'Name', 'Call'])]": 2, "While -> [('test', 'Compare'), ('body', ['AugAssign']), ('orelse', [])]": 5, "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['If']), ('orelse', ['Assign', 'For'])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str'])]": 3, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Name', 'Str', 'Num', 'Name', 'Name', 'Name'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Call', 'Call', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 6, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['List', 'Dict', 'List'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'TryExcept', 'If', 'Expr', 'Return']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Name', 'Num', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['For', 'Return']), ('decorator_list', ['Call', 'Name'])]": 4, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'Expr']), ('orelse', ['Expr'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Str', 'Attribute', 'Attribute']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "Tuple -> [('elts', ['Attribute', 'Name']), ('ctx', 'Load')]": 245, "Attribute -> [('value', 'Call'), ('attr', 'str'), ('ctx', 'Load')]": 4276, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'If', 'Assign', 'If', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Import', 'ImportFrom', 'If', 'Assign', 'If', 'Expr', 'Return']), ('decorator_list', [])]": 1, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'FunctionDef', 'ClassDef', 'ClassDef', 'FunctionDef'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Str', 'Str', 'Str']), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'Assign', 'For', 'If']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 9, "If -> [('test', 'Attribute'), ('body', ['If', 'If']), ('orelse', [])]": 8, "If -> [('test', 'Call'), ('body', ['Print', 'For', 'Print']), ('orelse', ['Print'])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'ClassDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 2, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Subscript', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 3, "Call -> [('func', 'Name'), ('args', ['Call', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 229, "keyword -> [('arg', 'str'), ('value', 'BoolOp')]": 27, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'For', 'Assign']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'Assign', 'If', 'Assign', 'If', 'If', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Num', 'Num', 'Name', 'Str'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'Assign', 'Expr', 'Return']), ('decorator_list', [])]": 2, "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'TryExcept']), ('decorator_list', ['Name'])]": 25, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Num']), ('keywords', ['keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "While -> [('test', 'Name'), ('body', ['Assign', 'If', 'Assign', 'TryExcept']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assert', 'If', 'Assign', 'If']), ('decorator_list', [])]": 2, "If -> [('test', 'Call'), ('body', ['Assign', 'If']), ('orelse', ['Assign'])]": 3, "TryExcept -> [('body', ['ImportFrom', 'ImportFrom', 'FunctionDef']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'Assign', 'If', 'Assign', 'Expr']), ('orelse', [])]": 2, "TryExcept -> [('body', ['If', 'TryFinally', 'If']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 1, "If -> [('test', 'Attribute'), ('body', ['Assign', 'Raise']), ('orelse', [])]": 2, "Compare -> [('left', 'Name'), ('ops', ['Eq', 'Eq']), ('comparators', ['Name', 'Name'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['TryExcept', 'Expr', 'If']), ('decorator_list', [])]": 1, "Lambda -> [('args', 'arguments'), ('body', 'Tuple')]": 2, "Tuple -> [('elts', ['Str', 'Str']), ('ctx', 'Load')]": 534, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'If', 'Assign', 'TryExcept']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Import', 'Import', 'Import', 'ImportFrom', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'FunctionDef', 'FunctionDef', 'ClassDef'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Call', 'Name']), ('keywords', []), ('starargs', 'Name'), ('kwargs', 'Name')]": 1, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef'])]": 3, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Assign', 'For', 'Return']), ('decorator_list', ['Call'])]": 1, "For -> [('target', 'Name'), ('iter', 'List'), ('body', ['Expr', 'Assign', 'Assign', 'If']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'If', 'Assign', 'Expr']), ('decorator_list', [])]": 2, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'ClassDef'])]": 1, "If -> [('test', 'BinOp'), ('body', ['Assign', 'AugAssign']), ('orelse', [])]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'ImportFrom', 'Import', 'Import', 'Import', 'ClassDef', 'If'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'ClassDef', 'FunctionDef', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Subscript', 'Name', 'Name', 'Name', 'Name', 'Name']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'If', 'Return']), ('decorator_list', ['Name'])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name', 'Attribute']), ('body', ['Assign', 'FunctionDef']), ('decorator_list', [])]": 1, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['If', 'Assign', 'If', 'Assign', 'Expr', 'AugAssign', 'Expr', 'For', 'Expr', 'For']), ('orelse', [])]": 1, "While -> [('test', 'UnaryOp'), ('body', ['Assign', 'Assign', 'If']), ('orelse', [])]": 1, "ImportFrom -> [('module', 'str'), ('names', ['alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias']), ('level', 'int')]": 1, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'Assign']), ('orelse', [])]": 7, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'While', 'Expr', 'Expr']), ('orelse', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'AugAssign', 'Return']), ('decorator_list', [])]": 5, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'Assign'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Name', 'Call', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr']), ('decorator_list', ['Attribute'])]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['If', 'Expr']), ('orelse', [])]": 18, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "Tuple -> [('elts', ['Attribute', 'Str', 'BinOp', 'Num']), ('ctx', 'Load')]": 1, "If -> [('test', 'Call'), ('body', ['Assign', 'Assign', 'Return']), ('orelse', ['If', 'Return'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assert', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'If', 'If', 'Assign', 'Assign', 'For', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 2, "Call -> [('func', 'Attribute'), ('args', []), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'Call')]": 7, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'ImportFrom', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'For', 'Return']), ('decorator_list', [])]": 12, "If -> [('test', 'Compare'), ('body', ['Assign', 'Expr', 'Assign', 'For']), ('orelse', [])]": 1, "List -> [('elts', ['Str', 'Attribute']), ('ctx', 'Load')]": 6, "If -> [('test', 'UnaryOp'), ('body', ['Expr']), ('orelse', ['Assign'])]": 1, "Dict -> [('keys', ['Str', 'Str']), ('values', ['Call', 'Name'])]": 20, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'Expr', 'For']), ('orelse', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Assign', 'For', 'Expr', 'If', 'Global', 'Assign']), ('decorator_list', [])]": 1, "Module -> [('body', ['Import', 'Assign', 'Expr', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Print', 'For', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Print', 'Print', 'For', 'Expr', 'Expr'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'If', 'Assign', 'Assign']), ('orelse', [])]": 1, "List -> [('elts', ['Name', 'Str', 'Str']), ('ctx', 'Load')]": 2, "If -> [('test', 'Call'), ('body', ['If', 'If']), ('orelse', ['If'])]": 2, "Call -> [('func', 'Name'), ('args', ['Str', 'Str', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef'])]": 3, "List -> [('elts', ['Num', 'Str', 'Num']), ('ctx', 'Load')]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'For']), ('decorator_list', [])]": 6, "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'Expr']), ('orelse', [])]": 24, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Attribute', 'BoolOp', 'Attribute', 'BoolOp', 'BoolOp', 'BoolOp', 'BoolOp', 'Name'])]": 1, "TryExcept -> [('body', ['Assign', 'For', 'If', 'If', 'If', 'If']), ('handlers', ['ExceptHandler', 'ExceptHandler', 'ExceptHandler', 'ExceptHandler']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Expr', 'Return']), ('decorator_list', [])]": 1, "For -> [('target', 'Tuple'), ('iter', 'List'), ('body', ['Assign', 'Expr', 'Expr', 'Assign', 'If']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['TryExcept', 'Assign', 'While', 'Return']), ('decorator_list', ['Call'])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Num', 'Str', 'Str'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['TryExcept', 'Assign', 'If', 'Assign', 'Assign', 'Expr', 'Assign', 'If', 'If', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'If', 'Expr']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['If', 'Assign', 'If', 'If', 'Assert', 'If', 'Assign']), ('orelse', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'If']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Lambda', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "For -> [('target', 'Tuple'), ('iter', 'Name'), ('body', ['Print', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'If', 'For', 'Assign', 'Delete', 'Assign']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['TryExcept', 'If', 'Assign', 'If', 'Return']), ('decorator_list', ['Name', 'Name'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Str', 'Name', 'Name', 'Name', 'Str', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 3, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'FunctionDef'])]": 1, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Expr', 'Print']), ('orelse', [])]": 4, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['TryExcept', 'If', 'If', 'Assign', 'For', 'If']), ('orelse', [])]": 1, "ExceptHandler -> [('type', 'Name'), ('name', 'Name'), ('body', ['Pass'])]": 20, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 4, "If -> [('test', 'Compare'), ('body', ['Expr', 'If', 'For']), ('orelse', ['If'])]": 1, "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['Assign', 'Assign', 'Expr']), ('orelse', [])]": 8, "Module -> [('body', ['Import', 'ImportFrom', 'ClassDef', 'If'])]": 1, "If -> [('test', 'BoolOp'), ('body', ['Return']), ('orelse', ['FunctionDef', 'Expr'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ClassDef', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 1, "For -> [('target', 'Tuple'), ('iter', 'Name'), ('body', ['AugAssign']), ('orelse', [])]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['TryExcept', 'If', 'Return']), ('decorator_list', ['Name', 'Name'])]": 1, "If -> [('test', 'Name'), ('body', ['Expr', 'Expr', 'Assign', 'Expr', 'If']), ('orelse', [])]": 1, "ExceptHandler -> [('type', 'Attribute'), ('name', 'NoneType'), ('body', ['If', 'If', 'Return'])]": 1, "While -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'While', 'AugAssign', 'Expr']), ('orelse', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'For', 'Assign', 'Assign']), ('orelse', ['Assign'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'If', 'Assign', 'Global', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['If', 'Expr', 'AugAssign', 'Assign', 'If', 'If']), ('orelse', ['If'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign']), ('decorator_list', ['Attribute'])]": 1, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'If', 'If']), ('orelse', [])]": 2, "If -> [('test', 'Compare'), ('body', ['Assign', 'TryExcept', 'Assign', 'If']), ('orelse', ['Print'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Num', 'Num', 'Num', 'Num', 'Num', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 64, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assert', 'Assert', 'Assert', 'Assert']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Call', 'Dict']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 38, "If -> [('test', 'UnaryOp'), ('body', ['Return']), ('orelse', ['Expr', 'Assign', 'Assign', 'Assign', 'If'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]": 2, "AugAssign -> [('target', 'Name'), ('op', 'Add'), ('value', 'Num')]": 265, "Call -> [('func', 'Name'), ('args', []), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "For -> [('target', 'Name'), ('iter', 'GeneratorExp'), ('body', ['Assign']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'If', 'If', 'Assign', 'For', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 2, "If -> [('test', 'Call'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'If']), ('orelse', ['Pass'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign']), ('decorator_list', [])]": 11, "If -> [('test', 'Num'), ('body', ['Assign', 'Return']), ('orelse', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Return'])]": 1, "ExceptHandler -> [('type', 'Name'), ('name', 'Name'), ('body', ['Print', 'Pass'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Tuple', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 6, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'ClassDef', 'ClassDef', 'FunctionDef', 'FunctionDef', 'Assign'])]": 1, "TryExcept -> [('body', ['For', 'Expr', 'Assign', 'Expr']), ('handlers', ['ExceptHandler', 'ExceptHandler']), ('orelse', [])]": 1, "If -> [('test', 'Call'), ('body', ['Assign', 'If']), ('orelse', ['Assign', 'Assign', 'TryExcept'])]": 1, "comprehension -> [('target', 'Name'), ('iter', 'GeneratorExp'), ('ifs', ['Call'])]": 1, "Call -> [('func', 'Name'), ('args', ['Attribute', 'Str', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Call -> [('func', 'Name'), ('args', ['Name', 'Name', 'Name']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 10, "For -> [('target', 'Tuple'), ('iter', 'Attribute'), ('body', ['TryExcept']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 2, "Tuple -> [('elts', ['Name', 'Call', 'Subscript']), ('ctx', 'Load')]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'str'), ('kwarg', 'str'), ('defaults', ['Name', 'Name', 'Name', 'Name'])]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef'])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['Name', 'Call', 'Call'])]": 3, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Expr', 'Assign']), ('orelse', [])]": 5, "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'Return']), ('orelse', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'For', 'Assign', 'Assign', 'For', 'Expr', 'For', 'Expr', 'Expr', 'Return'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Str', 'Name', 'Str']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'TryExcept', 'If', 'TryExcept', 'Assign', 'Expr', 'Return']), ('decorator_list', ['Name', 'Name', 'Call', 'Call'])]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'Expr']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]": 2, "List -> [('elts', ['Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num']), ('ctx', 'Load')]": 9, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'ImportFrom', 'Assign', 'If']), ('decorator_list', [])]": 2, "Compare -> [('left', 'Call'), ('ops', ['Eq']), ('comparators', ['Attribute'])]": 40, "TryExcept -> [('body', ['Expr', 'If', 'Return']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Name', 'BinOp', 'BinOp', 'BinOp', 'Name']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Call -> [('func', 'Subscript'), ('args', ['Attribute']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'If', 'Assign', 'Assign', 'Assign', 'If']), ('orelse', ['If'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['For', 'If']), ('decorator_list', [])]": 3, "ClassDef -> [('name', 'str'), ('bases', ['Name', 'Name']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef'])]": 1, "If -> [('test', 'Attribute'), ('body', ['Expr']), ('orelse', ['Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['FunctionDef', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', ['Call'])]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'TryExcept', 'Assign', 'If', 'If', 'Return']), ('decorator_list', [])]": 1, "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'For', 'For', 'For', 'Return']), ('decorator_list', [])]": 2, "Call -> [('func', 'Name'), ('args', ['List', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 6, "If -> [('test', 'Call'), ('body', ['Expr']), ('orelse', ['Assert'])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'Expr', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Expr', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "TryExcept -> [('body', ['Assign', 'Assign', 'For', 'Return']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'For', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 1, "BoolOp -> [('op', 'And'), ('values', ['Compare', 'Attribute', 'UnaryOp'])]": 2, "If -> [('test', 'Call'), ('body', ['Print', 'Assign', 'Expr', 'If']), ('orelse', [])]": 1, "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Attribute', 'Name', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "If -> [('test', 'Call'), ('body', ['If', 'For']), ('orelse', ['If'])]": 1, "Print -> [('dest', 'Attribute'), ('values', ['Call']), ('nl', 'bool')]": 2, "IfExp -> [('test', 'Compare'), ('body', 'Str'), ('orelse', 'BinOp')]": 1, "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Return']), ('orelse', [])]": 2, "Tuple -> [('elts', ['Str', 'Tuple']), ('ctx', 'Load')]": 19, "Module -> [('body', ['Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'FunctionDef', 'ClassDef', 'If'])]": 2, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Assign', 'AugAssign']), ('orelse', [])]": 3, "Call -> [('func', 'Attribute'), ('args', ['BinOp', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 11, "TryFinally -> [('body', ['Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'If', 'If', 'Expr']), ('finalbody', ['Expr'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assert', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assert']), ('decorator_list', [])]": 1, "Compare -> [('left', 'Call'), ('ops', ['GtE']), ('comparators', ['BinOp'])]": 3, "Compare -> [('left', 'Call'), ('ops', ['Eq']), ('comparators', ['Str'])]": 128, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Call', 'Call', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 4, "If -> [('test', 'UnaryOp'), ('body', ['Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr']), ('orelse', [])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Name', 'Name', 'Name', 'Tuple', 'Tuple', 'Name'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Num', 'UnaryOp', 'Num', 'BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "If -> [('test', 'Name'), ('body', ['If', 'Expr', 'Continue']), ('orelse', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Str', 'Name', 'Name', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'If', 'Assign', 'If', 'If', 'Return']), ('decorator_list', [])]": 1, "Assign -> [('targets', ['Attribute']), ('value', 'IfExp')]": 20, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'While', 'If', 'Assign', 'Assign', 'Assign', 'While', 'If', 'If', 'Return']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Name', 'Name', 'Call', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Call -> [('func', 'Name'), ('args', ['Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'Attribute')]": 3, "Compare -> [('left', 'Subscript'), ('ops', ['NotIn']), ('comparators', ['Str'])]": 3, "Assert -> [('test', 'Call'), ('msg', 'Str')]": 9, "If -> [('test', 'Compare'), ('body', ['Assign', 'If']), ('orelse', ['Print', 'Return'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'TryExcept']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'For', 'Print']), ('decorator_list', ['Name'])]": 1, "ExceptHandler -> [('type', 'Tuple'), ('name', 'NoneType'), ('body', ['Assign', 'Expr', 'Return'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Expr', 'Return']), ('decorator_list', ['Name'])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "For -> [('target', 'Tuple'), ('iter', 'Name'), ('body', ['Assign', 'If', 'If']), ('orelse', [])]": 2, "Call -> [('func', 'Attribute'), ('args', ['Tuple', 'Name', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "If -> [('test', 'BinOp'), ('body', ['Expr']), ('orelse', [])]": 8, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Attribute']), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'If']), ('decorator_list', [])]": 4, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'TryExcept', 'AugAssign', 'TryExcept', 'Assign', 'Assign', 'Assign', 'TryExcept', 'Assign', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'Assign', 'FunctionDef', 'TryExcept', 'Assign', 'Return']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', []), ('keywords', []), ('starargs', 'Name'), ('kwargs', 'NoneType')]": 43, "Module -> [('body', ['Import', 'Expr', 'ImportFrom', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'If', 'AugAssign', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Return']), ('decorator_list', ['Attribute'])]": 2, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Call', 'Call', 'Call', 'Call', 'Call', 'Attribute', 'Attribute', 'Name', 'Name'])]": 2, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str']), ('values', ['Attribute', 'Name', 'Name', 'Call'])]": 1, "BoolOp -> [('op', 'Or'), ('values', ['BoolOp', 'BoolOp'])]": 20, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "If -> [('test', 'Name'), ('body', ['Assign', 'Assign', 'For', 'Return']), ('orelse', ['Assign', 'Assign', 'If', 'Return'])]": 2, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Assign', 'AugAssign', 'AugAssign', 'Assign', 'If', 'Assign', 'AugAssign', 'Assign', 'If']), ('orelse', [])]": 1, "comprehension -> [('target', 'Tuple'), ('iter', 'Call'), ('ifs', ['Name'])]": 2, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Assign', 'If', 'Assign', 'If', 'For']), ('orelse', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Assign', 'If']), ('orelse', [])]": 16, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef']), ('decorator_list', [])]": 1, "While -> [('test', 'Compare'), ('body', ['If', 'If']), ('orelse', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Assign', 'Expr', 'Expr']), ('orelse', [])]": 1, "Tuple -> [('elts', ['Attribute', 'Attribute', 'Attribute']), ('ctx', 'Load')]": 38, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Pass']), ('decorator_list', ['Call'])]": 16, "Call -> [('func', 'Attribute'), ('args', ['Num', 'Num', 'Num', 'Num', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 26, "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'Assign', 'Expr', 'Assign', 'Expr']), ('orelse', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', []), ('body', ['Expr', 'Assign', 'Assign']), ('decorator_list', [])]": 6, "If -> [('test', 'Compare'), ('body', ['Import', 'Assign']), ('orelse', ['Assign'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'For', 'Assign', 'Assign', 'For', 'Return']), ('decorator_list', [])]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef'])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Print', 'If']), ('orelse', [])]": 3, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['ClassDef']), ('decorator_list', [])]": 9, "Dict -> [('keys', ['Str', 'Str']), ('values', ['Call', 'List'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Return']), ('decorator_list', [])]": 1, "Tuple -> [('elts', ['Subscript', 'Subscript', 'Subscript']), ('ctx', 'Load')]": 17, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'FunctionDef', 'TryExcept']), ('decorator_list', ['Name'])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Attribute', 'Call', 'Dict', 'Call', 'BoolOp', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Call'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'ImportFrom', 'If']), ('decorator_list', [])]": 3, "For -> [('target', 'Tuple'), ('iter', 'Tuple'), ('body', ['For']), ('orelse', [])]": 1, "If -> [('test', 'BoolOp'), ('body', ['Expr', 'If', 'If']), ('orelse', [])]": 4, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Expr', 'Expr', 'Expr', 'If', 'Return']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Name', 'Name', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 6, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['AugAssign', 'If']), ('orelse', [])]": 3, "For -> [('target', 'Name'), ('iter', 'BinOp'), ('body', ['TryExcept']), ('orelse', [])]": 5, "If -> [('test', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'If', 'Return']), ('orelse', ['Expr', 'Return'])]": 1, "If -> [('test', 'UnaryOp'), ('body', ['Raise']), ('orelse', ['If'])]": 2, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['FunctionDef', 'FunctionDef', 'Assign']), ('decorator_list', [])]": 2, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Expr', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Attribute', 'Num', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 7, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'For', 'Assign', 'For', 'For', 'For', 'Assign', 'Expr', 'If', 'Print']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'If', 'If', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'If', 'Return']), ('decorator_list', ['Name', 'Name'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'For']), ('decorator_list', [])]": 4, "TryExcept -> [('body', ['If', 'Assign', 'If']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 4, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 2, "BinOp -> [('left', 'Call'), ('op', 'BitAnd'), ('right', 'Num')]": 7, "Subscript -> [('value', 'Attribute'), ('slice', 'Index'), ('ctx', 'Del')]": 62, "TryFinally -> [('body', ['If', 'Expr']), ('finalbody', ['AugAssign'])]": 5, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Return']), ('decorator_list', [])]": 2, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['TryExcept', 'Assign', 'Assign', 'For', 'Assign', 'Print', 'Print', 'Print', 'For', 'Print']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'AugAssign', 'Import', 'Import', 'Import', 'ImportFrom', 'Assign', 'Assign', 'If', 'AugAssign', 'Import', 'Import', 'Import', 'ImportFrom', 'Assign', 'AugAssign', 'Import', 'Import', 'Import', 'ImportFrom', 'Assign', 'AugAssign', 'Assign', 'AugAssign', 'Assign', 'Assign', 'Assign', 'If', 'AugAssign', 'Assign', 'AugAssign', 'Assign', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'List', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "Call -> [('func', 'Attribute'), ('args', ['Name']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 238, "Module -> [('body', ['Import', 'Assign', 'TryExcept', 'Import', 'Import', 'Import', 'ImportFrom', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['List']), ('keywords', ['keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 26, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Expr', 'ClassDef', 'Expr'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Str', 'Name', 'Dict']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 13, "For -> [('target', 'Tuple'), ('iter', 'Attribute'), ('body', ['Assign', 'TryExcept']), ('orelse', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Tuple', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 3, "If -> [('test', 'Call'), ('body', ['Return']), ('orelse', ['If'])]": 44, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]": 1, "BoolOp -> [('op', 'And'), ('values', ['UnaryOp', 'UnaryOp', 'Attribute'])]": 3, "Call -> [('func', 'Attribute'), ('args', ['Call', 'BinOp']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 11, "If -> [('test', 'Compare'), ('body', ['Return', 'Pass']), ('orelse', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Attribute', 'Num']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'For', 'If', 'Assign']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'If', 'If', 'If', 'If']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'AugAssign', 'AugAssign', 'AugAssign', 'AugAssign', 'Assign', 'AugAssign', 'AugAssign', 'AugAssign', 'AugAssign', 'Return']), ('decorator_list', [])]": 1, "Tuple -> [('elts', ['Name', 'List', 'Name', 'List']), ('ctx', 'Load')]": 2, "Call -> [('func', 'Attribute'), ('args', ['Call', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 120, "Tuple -> [('elts', ['Call', 'Call', 'Name']), ('ctx', 'Load')]": 22, "BinOp -> [('left', 'Call'), ('op', 'Div'), ('right', 'Str')]": 1, "Tuple -> [('elts', ['Str', 'List', 'Str', 'Str', 'Num']), ('ctx', 'Load')]": 1, "Call -> [('func', 'Name'), ('args', ['Num', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'If']), ('decorator_list', [])]": 1, "TryFinally -> [('body', ['Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr']), ('finalbody', ['Expr', 'Expr'])]": 2, "If -> [('test', 'Name'), ('body', ['If', 'Assign', 'Expr']), ('orelse', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'Assign', 'If', 'Assign', 'If', 'Assign', 'If', 'Return']), ('decorator_list', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', ['Attribute'])]": 5, "BoolOp -> [('op', 'And'), ('values', ['Subscript', 'Attribute'])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name', 'Name']), ('body', ['Expr', 'Assign', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Call', 'Attribute', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "Assign -> [('targets', ['Attribute']), ('value', 'GeneratorExp')]": 2, "Call -> [('func', 'Attribute'), ('args', ['Call', 'Num', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['TryExcept', 'Import', 'Assign', 'Assign', 'Assign', 'For']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str']), ('values', ['Str', 'Tuple', 'Num', 'Num'])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 2, "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['If']), ('orelse', ['Assign'])]": 2, "Subscript -> [('value', 'Attribute'), ('slice', 'Slice'), ('ctx', 'Load')]": 180, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['With']), ('decorator_list', [])]": 20, "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'TryExcept', 'ImportFrom', 'ImportFrom', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'If', 'Assign', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'Assign', 'FunctionDef', 'TryExcept', 'FunctionDef', 'ClassDef'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assert', 'Assert', 'Assert']), ('decorator_list', [])]": 6, "Call -> [('func', 'Name'), ('args', ['Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2247, "If -> [('test', 'Compare'), ('body', ['Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('orelse', [])]": 2, "IfExp -> [('test', 'Attribute'), ('body', 'Call'), ('orelse', 'Str')]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'If', 'TryExcept', 'Return']), ('decorator_list', [])]": 1, "Index -> [('value', 'BinOp')]": 393, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'If', 'Assign', 'Return']), ('decorator_list', [])]": 2, "BoolOp -> [('op', 'And'), ('values', ['Attribute', 'Call'])]": 45, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Expr', 'If', 'Return']), ('decorator_list', [])]": 1, "Dict -> [('keys', ['Str', 'Str']), ('values', ['Tuple', 'Str'])]": 8, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'If', 'If']), ('decorator_list', [])]": 5, "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['Assign', 'For', 'Assign', 'If', 'Assign', 'Assign']), ('orelse', [])]": 1, "arguments -> [('args', ['Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', [])]": 4193, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'For']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assert', 'Expr']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'TryExcept', 'Assign', 'TryExcept', 'Assign', 'For', 'Return']), ('decorator_list', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['FunctionDef', 'FunctionDef', 'Assign', 'Assign', 'FunctionDef']), ('decorator_list', [])]": 1, "Tuple -> [('elts', ['Num']), ('ctx', 'Load')]": 103, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "AugAssign -> [('target', 'Attribute'), ('op', 'Add'), ('value', 'Attribute')]": 5, "If -> [('test', 'Name'), ('body', ['Expr', 'Expr', 'If', 'Return']), ('orelse', ['AugAssign', 'Assign', 'Assign', 'If', 'TryExcept', 'Expr', 'If'])]": 2, "If -> [('test', 'BoolOp'), ('body', ['Print', 'Assign']), ('orelse', [])]": 2, "TryExcept -> [('body', ['Assign', 'If', 'Assign', 'If', 'If', 'If', 'Return']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Call', 'Call', 'Tuple', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Expr', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'ClassDef']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Print', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr']), ('orelse', [])]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Expr', 'FunctionDef', 'Expr', 'FunctionDef', 'Expr', 'FunctionDef', 'Expr', 'FunctionDef', 'Expr', 'FunctionDef', 'Expr'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'ClassDef', 'Assign', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 1, "BinOp -> [('left', 'ListComp'), ('op', 'Add'), ('right', 'List')]": 5, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'TryExcept', 'Assign', 'Assign', 'ClassDef'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'Assign', 'While']), ('decorator_list', [])]": 1, "Call -> [('func', 'Subscript'), ('args', ['Call', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 7, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "List -> [('elts', ['Call', 'Call']), ('ctx', 'Load')]": 64, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'For', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Return']), ('decorator_list', [])]": 1, "Dict -> [('keys', ['Str', 'BinOp', 'Str', 'Str', 'Str']), ('values', ['Name', 'Name', 'Name', 'Name', 'Name'])]": 2, "If -> [('test', 'Call'), ('body', ['Assign', 'For', 'If']), ('orelse', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Delete', 'If']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assert', 'Expr']), ('decorator_list', ['Attribute'])]": 2, "If -> [('test', 'Compare'), ('body', ['Assign', 'Expr', 'For', 'If']), ('orelse', [])]": 1, "If -> [('test', 'Name'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('orelse', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['TryExcept', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Return']), ('decorator_list', ['Name'])]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Assign', 'If', 'If']), ('orelse', [])]": 2, "Tuple -> [('elts', ['Subscript', 'Attribute']), ('ctx', 'Load')]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'AugAssign', 'Assign', 'Expr', 'Expr']), ('orelse', [])]": 3, "Dict -> [('keys', ['Str', 'Str']), ('values', ['BinOp', 'Name'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'While']), ('decorator_list', [])]": 5, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign']), ('orelse', [])]": 1, "BinOp -> [('left', 'Subscript'), ('op', 'Add'), ('right', 'List')]": 9, "If -> [('test', 'Compare'), ('body', ['ImportFrom']), ('orelse', ['ImportFrom'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'While', 'Assign', 'For', 'If', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'If', 'If', 'Return']), ('decorator_list', [])]": 1, "Compare -> [('left', 'Tuple'), ('ops', ['In']), ('comparators', ['Attribute'])]": 4, "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ClassDef'])]": 1, "BinOp -> [('left', 'Subscript'), ('op', 'Mult'), ('right', 'Name')]": 19, "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['UnaryOp', 'Name', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'If', 'Assign']), ('orelse', [])]": 2, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'ImportFrom', 'Assign', 'Assign', 'For', 'Assign', 'Delete', 'Delete', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "Module -> [('body', ['Import', 'Import', 'Assign', 'Assign', 'Assign', 'Assign', 'ClassDef', 'Import', 'Import', 'Import', 'Import', 'FunctionDef', 'If'])]": 1, "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'Print']), ('orelse', [])]": 2, "Call -> [('func', 'Name'), ('args', ['Attribute', 'Name']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Return']), ('decorator_list', ['Call'])]": 15, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'AugAssign']), ('decorator_list', [])]": 3, "arguments -> [('args', ['Name', 'Name']), ('vararg', 'str'), ('kwarg', 'str'), ('defaults', [])]": 104, "While -> [('test', 'Name'), ('body', ['Assign', 'Assign', 'TryExcept']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assert', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assert', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assert']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Return', 'Assign', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'UnaryOp'), ('body', ['FunctionDef', 'Assign']), ('orelse', ['Assign'])]": 2, "Call -> [('func', 'Name'), ('args', ['Lambda', 'Num', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "With -> [('context_expr', 'Call'), ('optional_vars', 'NoneType'), ('body', ['If', 'Expr', 'Expr', 'Expr', 'If'])]": 1, "Module -> [('body', ['Import', 'Import', 'TryExcept', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef'])]": 1, "If -> [('test', 'Attribute'), ('body', ['ImportFrom', 'Return']), ('orelse', [])]": 4, "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['Assign', 'If', 'If']), ('orelse', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'TryExcept', 'If', 'If', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Str', 'Name'])]": 2, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign']), ('orelse', [])]": 1, "Tuple -> [('elts', ['BinOp', 'Name', 'Call']), ('ctx', 'Load')]": 1, "If -> [('test', 'BoolOp'), ('body', ['For', 'If']), ('orelse', [])]": 1, "Call -> [('func', 'Attribute'), ('args', []), ('keywords', ['keyword', 'keyword', 'keyword']), ('starargs', 'Name'), ('kwargs', 'Name')]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Tuple', 'Call', 'Call', 'Call', 'Call', 'Call'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Expr', 'If', 'Assign', 'If', 'Assign', 'Assign', 'If', 'If', 'Return']), ('decorator_list', [])]": 1, "Compare -> [('left', 'Name'), ('ops', ['Is']), ('comparators', ['Num'])]": 5, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'FunctionDef', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', ['Attribute'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Print', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'FunctionDef', 'Assign', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'ClassDef', 'ClassDef', 'FunctionDef', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]": 1, "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['Print', 'Return'])]": 2, "If -> [('test', 'Call'), ('body', ['Expr']), ('orelse', ['Raise'])]": 2, "Module -> [('body', ['Import', 'ImportFrom', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'If'])]": 1, "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['Expr', 'Expr', 'Raise'])]": 1, "Return -> [('value', 'GeneratorExp')]": 17, "If -> [('test', 'BinOp'), ('body', ['Assign', 'Print', 'Return']), ('orelse', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Expr', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'Assign', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'Assign', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'Assign', 'FunctionDef', 'Assign', 'Assign', 'FunctionDef', 'Assign', 'Assign', 'FunctionDef', 'Assign', 'FunctionDef', 'Assign', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'Assign', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'Assign', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Assign', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'Assign', 'TryExcept']), ('decorator_list', [])]": 1, "BinOp -> [('left', 'Name'), ('op', 'Mod'), ('right', 'Attribute')]": 33, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'For', 'Assign', 'Assign', 'For', 'Assign', 'Assign', 'For', 'For']), ('decorator_list', [])]": 1, "If -> [('test', 'BoolOp'), ('body', ['Import', 'Expr', 'For', 'For', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('orelse', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Num']), ('keywords', ['keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "Assign -> [('targets', ['Subscript']), ('value', 'BoolOp')]": 5, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 3, "Call -> [('func', 'Name'), ('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "If -> [('test', 'Name'), ('body', ['Assign', 'Expr']), ('orelse', ['Assign'])]": 2, "Assign -> [('targets', ['Attribute']), ('value', 'Str')]": 517, "TryExcept -> [('body', ['ImportFrom']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 77, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'For', 'If', 'Assign', 'If']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['While', 'Print']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'If', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'If', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'AugAssign']), ('orelse', ['If'])]": 2, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'Name')]": 2, "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['Assign', 'For', 'Expr']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'If', 'If', 'If', 'Assign', 'Return']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'ListComp'), ('body', ['Expr', 'Expr']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'If', 'Return']), ('decorator_list', ['Call'])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign']), ('orelse', ['Assign', 'If'])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Name', 'Name', 'Call'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'ClassDef', 'For']), ('decorator_list', [])]": 1, "TryExcept -> [('body', ['Assign', 'Assign']), ('handlers', ['ExceptHandler']), ('orelse', ['Assign'])]": 1, "Compare -> [('left', 'Call'), ('ops', ['GtE']), ('comparators', ['Name'])]": 8, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Global', 'Global', 'Print', 'If', 'Assign', 'Assign', 'Print', 'Assign', 'TryExcept', 'Print', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'AugAssign', 'AugAssign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "BinOp -> [('left', 'Attribute'), ('op', 'Sub'), ('right', 'Name')]": 24, "If -> [('test', 'Name'), ('body', ['If']), ('orelse', ['Assign'])]": 6, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'With']), ('decorator_list', ['Name'])]": 3, "Tuple -> [('elts', ['Str', 'BinOp', 'Name']), ('ctx', 'Load')]": 1, "Repr -> [('value', 'Attribute')]": 8, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Subscript', 'Subscript']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "Call -> [('func', 'Attribute'), ('args', ['Tuple', 'List']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 7, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Assign', 'If', 'Assign', 'Assign', 'If', 'Expr']), ('orelse', [])]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'For', 'Assign']), ('decorator_list', [])]": 1, "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Expr']), ('orelse', ['If'])]": 2, "Compare -> [('left', 'Call'), ('ops', ['GtE']), ('comparators', ['Num'])]": 33, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'For']), ('decorator_list', ['Name'])]": 2, "If -> [('test', 'UnaryOp'), ('body', ['If', 'If', 'If']), ('orelse', [])]": 2, "Tuple -> [('elts', ['Attribute', 'Name', 'Name', 'Attribute', 'Attribute', 'Attribute', 'Name', 'Name']), ('ctx', 'Load')]": 1, "Tuple -> [('elts', ['Name', 'BinOp', 'Tuple']), ('ctx', 'Load')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'TryExcept', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Pass']), ('decorator_list', ['Name', 'Call', 'Call'])]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Expr', 'Assign']), ('orelse', ['Assign'])]": 3, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'Expr']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'ImportFrom', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'For']), ('decorator_list', [])]": 2, "BinOp -> [('left', 'Call'), ('op', 'BitOr'), ('right', 'Call')]": 86, "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['Assign', 'Expr', 'Raise'])]": 2, "List -> [('elts', ['Str', 'Str', 'Str', 'Name']), ('ctx', 'Load')]": 5, "Call -> [('func', 'Name'), ('args', ['BinOp', 'List']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Tuple -> [('elts', ['Name', 'Str', 'Tuple']), ('ctx', 'Load')]": 4, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['TryExcept', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Assign', 'For', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 2, "TryFinally -> [('body', ['Assign', 'Assign', 'Expr', 'Assign', 'Expr']), ('finalbody', ['Assign'])]": 1, "BoolOp -> [('op', 'Or'), ('values', ['Compare', 'Compare', 'Compare', 'Compare'])]": 5, "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['Expr', 'Expr', 'If', 'If', 'If']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "If -> [('test', 'Call'), ('body', ['Print', 'If', 'Expr', 'If', 'Expr', 'Return']), ('orelse', ['If'])]": 1, "Compare -> [('left', 'Name'), ('ops', ['Eq']), ('comparators', ['Dict'])]": 6, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'For', 'Assign', 'Assign', 'Assign', 'AugAssign', 'AugAssign', 'AugAssign', 'AugAssign', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'If', 'If', 'Return']), ('decorator_list', [])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str']), ('values', ['Num', 'Call', 'Num', 'Call'])]": 1, "If -> [('test', 'Call'), ('body', ['Assign', 'Assert', 'Assign', 'Assign']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'For', 'If', 'Return']), ('decorator_list', ['Name', 'Call'])]": 1, "If -> [('test', 'UnaryOp'), ('body', ['Expr', 'Expr', 'AugAssign']), ('orelse', ['Expr', 'Expr', 'AugAssign'])]": 3, "If -> [('test', 'Compare'), ('body', ['Expr', 'Assign']), ('orelse', ['Expr', 'Assign'])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'TryExcept', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ClassDef', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "If -> [('test', 'Attribute'), ('body', ['If', 'Assign', 'Expr']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'FunctionDef', 'Assign', 'Assign', 'FunctionDef', 'Assign', 'Expr', 'Assign', 'Assign', 'For', 'Assign', 'Return']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'BinOp'), ('body', ['If', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'For']), ('orelse', [])]": 1, "AugAssign -> [('target', 'Name'), ('op', 'BitAnd'), ('value', 'Call')]": 5, "If -> [('test', 'Compare'), ('body', ['Assign', 'For']), ('orelse', ['Pass'])]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['If', 'Expr', 'AugAssign']), ('orelse', [])]": 2, "While -> [('test', 'Name'), ('body', ['Assign', 'Assign']), ('orelse', [])]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'For']), ('decorator_list', [])]": 2, "If -> [('test', 'Name'), ('body', ['Assign', 'For', 'Expr']), ('orelse', [])]": 3, "Assign -> [('targets', ['Subscript']), ('value', 'IfExp')]": 17, "comprehension -> [('target', 'Name'), ('iter', 'ListComp'), ('ifs', [])]": 1, "Compare -> [('left', 'Num'), ('ops', ['In']), ('comparators', ['Name'])]": 1, "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Assert', 'If']), ('orelse', [])]": 1, "If -> [('test', 'Call'), ('body', ['Assign', 'Print', 'Expr']), ('orelse', ['TryExcept'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'TryExcept', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 2, "Compare -> [('left', 'Str'), ('ops', ['Is']), ('comparators', ['Name'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Attribute']), ('keywords', []), ('starargs', 'Name'), ('kwargs', 'NoneType')]": 4, "Call -> [('func', 'Attribute'), ('args', ['Call', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 9, "BinOp -> [('left', 'BinOp'), ('op', 'BitOr'), ('right', 'Name')]": 11, "ExceptHandler -> [('type', 'NoneType'), ('name', 'NoneType'), ('body', ['Expr', 'Assign', 'For'])]": 1, "ListComp -> [('elt', 'Dict'), ('generators', ['comprehension'])]": 19, "If -> [('test', 'Compare'), ('body', ['Expr']), ('orelse', ['If', 'If'])]": 1, "BinOp -> [('left', 'List'), ('op', 'Add'), ('right', 'Call')]": 24, "Tuple -> [('elts', ['Attribute', 'Name', 'Name', 'Name', 'Attribute', 'Call', 'Attribute']), ('ctx', 'Load')]": 1, "BinOp -> [('left', 'Call'), ('op', 'Add'), ('right', 'ListComp')]": 1, "For -> [('target', 'Tuple'), ('iter', 'Name'), ('body', ['Assign', 'Expr']), ('orelse', [])]": 5, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'If', 'If', 'If']), ('decorator_list', [])]": 1, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Assign', 'If', 'Expr', 'Assign', 'For', 'Print', 'Expr', 'Expr']), ('orelse', [])]": 1, "UAdd -> <NULL>": 4, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'TryExcept', 'FunctionDef', 'If'])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['List', 'Str', 'Name'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'If', 'If', 'Assign', 'If', 'Assign', 'If', 'Assign', 'If', 'If', 'Return']), ('decorator_list', ['Name', 'Attribute'])]": 1, "Tuple -> [('elts', ['Attribute', 'Num', 'Str', 'Num']), ('ctx', 'Load')]": 2, "Call -> [('func', 'Attribute'), ('args', ['Str', 'Num', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'Return']), ('decorator_list', ['Name', 'Name'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 2, "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'AugAssign']), ('orelse', [])]": 1, "And -> <NULL>": 1981, "TryExcept -> [('body', ['ImportFrom', 'Assign', 'Expr']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 2, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'BinOp']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'Assign', 'Assign', 'Assign', 'If', 'If', 'Assign', 'Assign', 'Assign', 'While', 'Assign', 'Expr', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Return']), ('decorator_list', ['Call'])]": 6, "IfExp -> [('test', 'Compare'), ('body', 'Call'), ('orelse', 'Name')]": 3, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Str', 'Name', 'Name'])]": 6, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Num', 'Num', 'Num', 'Name', 'Name', 'Name', 'List', 'Num', 'Name', 'Name'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Return']), ('decorator_list', [])]": 4, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'If', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'For', 'Raise']), ('decorator_list', [])]": 2, "For -> [('target', 'Name'), ('iter', 'Tuple'), ('body', ['Assign', 'TryExcept', 'Expr']), ('orelse', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'Name')]": 3, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Subscript', 'Call', 'BinOp'])]": 1, "arguments -> [('args', ['Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Num'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'Print', 'Expr', 'Print', 'Print', 'Print', 'Expr', 'TryExcept']), ('decorator_list', [])]": 1, "ExceptHandler -> [('type', 'NoneType'), ('name', 'NoneType'), ('body', ['Import', 'Assign', 'Print', 'Expr', 'Expr', 'Assign'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 2, "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign', 'For']), ('orelse', ['For'])]": 1, "If -> [('test', 'Attribute'), ('body', ['If', 'Print']), ('orelse', ['If'])]": 1, "Store -> <NULL>": 77407, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['TryExcept', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Expr', 'Return']), ('decorator_list', [])]": 1, "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'FunctionDef', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'TryFinally']), ('decorator_list', [])]": 2, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Tuple', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name'])]": 1, "If -> [('test', 'Attribute'), ('body', ['Assign', 'Assign', 'Assign']), ('orelse', ['Assign'])]": 4, "If -> [('test', 'BoolOp'), ('body', ['Assign']), ('orelse', ['If', 'If', 'Assign'])]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'ClassDef'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'FunctionDef', 'FunctionDef', 'Expr', 'Expr', 'For', 'If', 'If', 'Return', 'Return']), ('decorator_list', [])]": 1, "Tuple -> [('elts', ['Str', 'Str', 'Name', 'Name']), ('ctx', 'Load')]": 7, "Call -> [('func', 'Name'), ('args', ['Tuple', 'Num', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 6, "BinOp -> [('left', 'Num'), ('op', 'Add'), ('right', 'Call')]": 13, "Call -> [('func', 'Attribute'), ('args', ['BinOp', 'List', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign', 'Assign', 'Expr']), ('orelse', ['Pass'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'For', 'Expr', 'Assign', 'Assign', 'Expr', 'For', 'Expr', 'For']), ('decorator_list', [])]": 1, "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'Assign']), ('orelse', ['If'])]": 1, "List -> [('elts', ['BinOp', 'BinOp', 'BinOp', 'Str', 'Call']), ('ctx', 'Load')]": 2, "If -> [('test', 'Name'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Return']), ('orelse', [])]": 1, "TryExcept -> [('body', ['Assign', 'Assign']), ('handlers', ['ExceptHandler', 'ExceptHandler']), ('orelse', [])]": 4, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'If']), ('decorator_list', [])]": 2, "If -> [('test', 'Compare'), ('body', ['If', 'Expr', 'Return']), ('orelse', [])]": 1, "TryExcept -> [('body', ['Import']), ('handlers', ['ExceptHandler']), ('orelse', ['Assign', 'Expr'])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Attribute', 'Name']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "ExceptHandler -> [('type', 'NoneType'), ('name', 'NoneType'), ('body', ['AugAssign'])]": 1, "If -> [('test', 'Compare'), ('body', ['Raise']), ('orelse', ['Assign'])]": 4, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'List'), ('body', ['TryExcept']), ('orelse', ['Assign', 'TryExcept'])]": 1, "Compare -> [('left', 'Attribute'), ('ops', ['NotIn']), ('comparators', ['ListComp'])]": 3, "If -> [('test', 'UnaryOp'), ('body', ['If', 'Assign', 'For', 'Return']), ('orelse', [])]": 1, "Dict -> [('keys', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('values', ['Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'TryExcept']), ('decorator_list', [])]": 3, "If -> [('test', 'Call'), ('body', ['Expr']), ('orelse', ['Expr'])]": 66, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'ImportFrom', 'Assign', 'For', 'Expr', 'Assign', 'Assign', 'For']), ('decorator_list', [])]": 2, "If -> [('test', 'Compare'), ('body', ['Assign', 'Expr', 'Break']), ('orelse', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Call', 'Call', 'Call', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Expr', 'Expr', 'Expr', 'Expr']), ('orelse', [])]": 3, "Call -> [('func', 'Attribute'), ('args', ['Str', 'Str']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 43, "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('orelse', [])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Str', 'Str', 'Name', 'Name'])]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Expr', 'If']), ('orelse', [])]": 6, "Call -> [('func', 'Name'), ('args', ['Num', 'Num']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 6, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['FunctionDef', 'FunctionDef', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "If -> [('test', 'Call'), ('body', ['Print', 'Raise']), ('orelse', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "TryExcept -> [('body', ['Expr']), ('handlers', ['ExceptHandler']), ('orelse', ['Assign', 'For'])]": 1, "Call -> [('func', 'Name'), ('args', ['Str', 'Call', 'Call', 'List', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('orelse', ['Continue'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Attribute']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 5, "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('orelse', [])]": 1, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'TryExcept', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'BinOp'), ('body', ['AugAssign']), ('orelse', [])]": 3, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'If']), ('orelse', ['Expr', 'Return'])]": 2, "If -> [('test', 'Compare'), ('body', ['TryExcept', 'For', 'Assign', 'Assign', 'For', 'If', 'Expr', 'Assign', 'If', 'Assign', 'Assign', 'If', 'If', 'Expr', 'Expr', 'Expr']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'ClassDef', 'Expr']), ('decorator_list', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Name', 'Call', 'Name', 'Name', 'Call', 'Call']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "Call -> [('func', 'Attribute'), ('args', ['Str', 'Str', 'Str']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "If -> [('test', 'Compare'), ('body', ['Assign']), ('orelse', ['If', 'Assign', 'Assign'])]": 4, "ExceptHandler -> [('type', 'Name'), ('name', 'Name'), ('body', ['Assign'])]": 12, "Call -> [('func', 'Name'), ('args', []), ('keywords', []), ('starargs', 'ListComp'), ('kwargs', 'NoneType')]": 5, "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'Expr', 'Assign']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'TryExcept', 'For', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 2, "ListComp -> [('elt', 'Call'), ('generators', ['comprehension'])]": 484, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'For', 'For', 'If', 'Return']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'Return']), ('decorator_list', ['Name', 'Call'])]": 1, "TryExcept -> [('body', ['For', 'Assign', 'Print']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 1, "For -> [('target', 'Tuple'), ('iter', 'Attribute'), ('body', ['Assign', 'If']), ('orelse', [])]": 4, "Call -> [('func', 'Name'), ('args', ['BinOp', 'Attribute', 'Dict']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'TryExcept', 'If', 'If']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Print', 'Assign', 'Assign', 'Assign', 'Assign']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'For', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'ClassDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Expr', 'Expr', 'Raise']), ('orelse', [])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str']), ('values', ['Call', 'Call', 'Call', 'Call'])]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'While', 'If', 'Return']), ('decorator_list', [])]": 1, "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'Import', 'ImportFrom', 'ImportFrom', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'If', 'Assign', 'FunctionDef', 'TryExcept', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'For', 'Return']), ('decorator_list', [])]": 1, "Module -> [('body', ['Import', 'TryExcept', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'FunctionDef', 'FunctionDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'Return']), ('decorator_list', [])]": 96, "TryExcept -> [('body', ['Assign', 'Assign', 'If']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 9, "If -> [('test', 'Name'), ('body', ['Expr', 'Return']), ('orelse', [])]": 7, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "ImportFrom -> [('module', 'str'), ('names', ['alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias']), ('level', 'int')]": 10, "Call -> [('func', 'Attribute'), ('args', ['Call', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 315, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Dict', 'Dict', 'Dict', 'Dict', 'Dict', 'Dict', 'Dict', 'Dict', 'Dict', 'Dict', 'Dict'])]": 1, "If -> [('test', 'Compare'), ('body', ['Print', 'Assign', 'Expr']), ('orelse', [])]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'If', 'Assign', 'For']), ('decorator_list', [])]": 1, "ExtSlice -> [('dims', ['Slice', 'Slice'])]": 63, "If -> [('test', 'UnaryOp'), ('body', ['Expr', 'Return']), ('orelse', [])]": 78, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'Assign', 'Return']), ('decorator_list', [])]": 3, "Module -> [('body', ['Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'Import', 'ImportFrom', 'If', 'FunctionDef', 'ClassDef', 'FunctionDef', 'Assign', 'ClassDef', 'ClassDef', 'Assign'])]": 1, "TryExcept -> [('body', ['Print', 'If', 'If', 'Assign', 'Expr', 'Assign', 'Assign', 'While', 'Print']), ('handlers', ['ExceptHandler', 'ExceptHandler']), ('orelse', [])]": 1, "Print -> [('dest', 'NoneType'), ('values', ['BinOp', 'Str']), ('nl', 'bool')]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'Import', 'Assign', 'Assign', 'If', 'If', 'If', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If']), ('decorator_list', [])]": 155, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'For', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'Name'), ('body', ['Expr', 'Assign']), ('orelse', [])]": 8, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'TryExcept', 'For', 'If', 'If', 'Expr']), ('decorator_list', [])]": 1, "If -> [('test', 'Call'), ('body', ['Continue']), ('orelse', ['Assign', 'Assign', 'Assign', 'If'])]": 1, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'FunctionDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'Expr', 'While', 'If']), ('decorator_list', [])]": 1, "Assign -> [('targets', ['Name', 'Name']), ('value', 'Str')]": 4, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 40, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'For', 'FunctionDef', 'Expr', 'Return']), ('decorator_list', [])]": 1, "Tuple -> [('elts', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Call', 'Name', 'Name', 'BinOp', 'Name']), ('ctx', 'Load')]": 1, "TryExcept -> [('body', ['Expr', 'Return']), ('handlers', ['ExceptHandler', 'ExceptHandler', 'ExceptHandler', 'ExceptHandler', 'ExceptHandler', 'ExceptHandler', 'ExceptHandler', 'ExceptHandler']), ('orelse', [])]": 1, "If -> [('test', 'Call'), ('body', ['TryExcept', 'Assign', 'If']), ('orelse', [])]": 1, "Compare -> [('left', 'Str'), ('ops', ['Eq']), ('comparators', ['Subscript'])]": 1, "Tuple -> [('elts', ['Attribute', 'BinOp', 'Attribute']), ('ctx', 'Load')]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Num', 'Name', 'Attribute', 'Attribute', 'Name'])]": 2, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'If', 'If', 'FunctionDef', 'Assign', 'Expr', 'Expr', 'Expr']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'If', 'Assign', 'Return']), ('decorator_list', ['Name'])]": 2, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'ClassDef'])]": 1, "TryFinally -> [('body', ['If', 'Expr']), ('finalbody', ['Expr'])]": 1, "BoolOp -> [('op', 'Or'), ('values', ['Subscript', 'Str'])]": 8, "Compare -> [('left', 'BinOp'), ('ops', ['Gt', 'Gt']), ('comparators', ['Name', 'BinOp'])]": 2, "If -> [('test', 'Name'), ('body', ['If', 'Assign', 'Assign', 'Expr']), ('orelse', ['Expr'])]": 1, "If -> [('test', 'BoolOp'), ('body', ['Assign', 'For', 'Expr']), ('orelse', [])]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "List -> [('elts', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('ctx', 'Load')]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'List', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['FunctionDef']), ('decorator_list', [])]": 78, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "TryExcept -> [('body', ['Assign', 'While']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 1, "If -> [('test', 'Name'), ('body', ['Print', 'Assign']), ('orelse', ['Assign'])]": 1, "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['Assign', 'Assign']), ('orelse', [])]": 5, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 1, "Module -> [('body', ['Import', 'Assign', 'Expr', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Print', 'Assign', 'Assign', 'Assign', 'Print', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Assign', 'Assign', 'For', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'For', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Print', 'Print', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'TryExcept', 'TryExcept', 'Expr', 'TryExcept', 'If']), ('decorator_list', ['Name'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Subscript', 'Num', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Expr', 'For', 'If']), ('decorator_list', [])]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'If'])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Attribute', 'BoolOp', 'Name', 'Compare'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'If', 'For']), ('decorator_list', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 2, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Tuple']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 55, "While -> [('test', 'UnaryOp'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'For', 'If', 'Expr', 'Assign']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'BinOp'), ('body', ['Assign', 'Return']), ('orelse', [])]": 1, "Compare -> [('left', 'Subscript'), ('ops', ['LtE']), ('comparators', ['Attribute'])]": 1, "Tuple -> [('elts', ['Subscript', 'BinOp', 'Name', 'Name']), ('ctx', 'Load')]": 1, "Not -> <NULL>": 3703, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'Global', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'If'])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'str'), ('kwarg', 'str'), ('defaults', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name'])]": 1, "BinOp -> [('left', 'Name'), ('op', 'BitAnd'), ('right', 'Name')]": 10, "If -> [('test', 'Name'), ('body', ['Expr', 'Expr', 'Expr']), ('orelse', ['Expr', 'Expr'])]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'Expr', 'Assign', 'Expr', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Num', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 6, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Call', 'Call', 'Name', 'Name', 'Call'])]": 1, "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'ImportFrom', 'Import', 'ImportFrom', 'ClassDef', 'FunctionDef', 'If'])]": 1, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'For', 'Expr']), ('orelse', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ImportFrom', 'ClassDef'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'If', 'Expr', 'Assign', 'Expr', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'Name'), ('body', ['ImportFrom', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef']), ('orelse', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Expr', 'Assign', 'Assign', 'Expr']), ('orelse', ['Assign', 'Expr', 'Expr'])]": 1, "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['TryExcept', 'Assign'])]": 1, "If -> [('test', 'Compare'), ('body', ['AugAssign', 'If']), ('orelse', [])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str']), ('values', ['Subscript', 'Str', 'Subscript', 'Subscript'])]": 1, "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'If', 'Return']), ('orelse', [])]": 1, "TryFinally -> [('body', ['Assign', 'For']), ('finalbody', ['Expr'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'If', 'Assign', 'Assign', 'Assign', 'If', 'Return']), ('decorator_list', [])]": 1, "comprehension -> [('target', 'Tuple'), ('iter', 'Subscript'), ('ifs', [])]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['ImportFrom', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Expr', 'Expr', 'Expr']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 40, "Return -> [('value', 'Name')]": 4344, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'If', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'ClassDef', 'Assign', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'Subscript'), ('body', ['TryExcept', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr']), ('orelse', ['Assign'])]": 1, "Tuple -> [('elts', ['Name', 'Name', 'Name', 'Name', 'Name']), ('ctx', 'Store')]": 40, "Call -> [('func', 'Name'), ('args', []), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 3289, "Dict -> [('keys', ['Name', 'Name']), ('values', ['Str', 'Str'])]": 2, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Str', 'Str', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name'])]": 2, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 2, "Call -> [('func', 'Attribute'), ('args', ['Lambda', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "TryExcept -> [('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Expr', 'Assign', 'Return']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 1, "If -> [('test', 'Attribute'), ('body', ['Raise']), ('orelse', ['Continue'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'If', 'For', 'For', 'Expr', 'If', 'Assign', 'Return']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign']), ('orelse', [])]": 65, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assert', 'If', 'Assign', 'If', 'Expr']), ('decorator_list', [])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Name', 'Num', 'Num', 'Name'])]": 1, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['TryExcept', 'If', 'Assign', 'Return']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'While']), ('decorator_list', [])]": 1, "Module -> [('body', ['Import', 'Import', 'Expr', 'Import', 'Import', 'ImportFrom', 'Import', 'ImportFrom', 'Import', 'ImportFrom', 'ClassDef', 'FunctionDef', 'If'])]": 1, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'Expr', 'Expr', 'TryExcept']), ('decorator_list', [])]": 1, "If -> [('test', 'BoolOp'), ('body', ['Print', 'Print', 'Print', 'Expr']), ('orelse', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]": 2, "While -> [('test', 'Num'), ('body', ['Assign', 'For', 'If']), ('orelse', [])]": 6, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'If', 'If', 'Assign', 'Assign', 'If', 'Assign', 'If', 'Return']), ('decorator_list', [])]": 2, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Attribute', 'BoolOp', 'Call', 'Compare'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'If', 'Assign', 'Assign', 'If', 'If', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'If', 'Assign', 'FunctionDef', 'Assign', 'Return']), ('decorator_list', [])]": 1, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'Import', 'Import', 'Import', 'Assign', 'Assign', 'ClassDef', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]": 1, "ClassDef -> [('name', 'str'), ('bases', []), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]": 4, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'If', 'Assign', 'If', 'If']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['TryExcept', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'If', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Print', 'FunctionDef', 'For']), ('decorator_list', [])]": 1, "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('orelse', [])]": 1, "If -> [('test', 'Name'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'Assign', 'TryFinally']), ('orelse', [])]": 1, "ExceptHandler -> [('type', 'Name'), ('name', 'Name'), ('body', ['Expr', 'Raise'])]": 25, "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign']), ('orelse', ['If'])]": 9, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name']), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Return']), ('decorator_list', [])]": 26, "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Expr', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'If'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Print', 'If', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Assign', 'AugAssign', 'Assign', 'Assign', 'For', 'Assign', 'AugAssign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Print', 'Expr', 'Print', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Return']), ('decorator_list', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Str', 'Str', 'Str', 'Name'])]": 1, "If -> [('test', 'Call'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'If', 'If']), ('orelse', ['If'])]": 1, "With -> [('context_expr', 'Call'), ('optional_vars', 'NoneType'), ('body', ['Expr'])]": 17, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'Assign', 'Delete', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]": 1, "If -> [('test', 'BoolOp'), ('body', ['If', 'Return']), ('orelse', [])]": 6, "Call -> [('func', 'Name'), ('args', ['Name']), ('keywords', []), ('starargs', 'Name'), ('kwargs', 'NoneType')]": 9, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Num', 'Name', 'Name'])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'If']), ('orelse', ['Assign', 'Assign', 'Assign', 'If'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If']), ('decorator_list', ['Name'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "If -> [('test', 'BoolOp'), ('body', ['Assign']), ('orelse', ['For', 'Expr', 'If', 'If'])]": 1, "If -> [('test', 'Compare'), ('body', ['Return', 'For']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Return']), ('decorator_list', [])]": 8, "ExceptHandler -> [('type', 'Tuple'), ('name', 'Name'), ('body', ['Expr', 'Raise'])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'str'), ('kwarg', 'str'), ('defaults', ['Name', 'Name', 'Name', 'Dict'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign']), ('decorator_list', [])]": 1, "Compare -> [('left', 'Num'), ('ops', ['Lt', 'LtE']), ('comparators', ['Call', 'Num'])]": 6, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Assign', 'Expr', 'Assign', 'For']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'Attribute')]": 2, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Tuple'])]": 3, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Assign', 'AugAssign']), ('orelse', [])]": 1, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]": 1, "BoolOp -> [('op', 'And'), ('values', ['Compare', 'Attribute'])]": 33, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'Expr', 'For']), ('decorator_list', [])]": 2, "If -> [('test', 'Compare'), ('body', ['Assign', 'If', 'Assign', 'For']), ('orelse', ['If'])]": 2, "BoolOp -> [('op', 'Or'), ('values', ['UnaryOp', 'Attribute'])]": 19, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'TryExcept', 'If', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', ['Name', 'Attribute'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'Assert', 'Assert', 'Assign', 'Assert']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'If', 'For']), ('decorator_list', [])]": 2, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'FunctionDef', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]": 1, "IfExp -> [('test', 'Compare'), ('body', 'Num'), ('orelse', 'Num')]": 2, "BinOp -> [('left', 'Attribute'), ('op', 'Mod'), ('right', 'Call')]": 14, "IfExp -> [('test', 'Name'), ('body', 'Call'), ('orelse', 'Num')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'If', 'Assign', 'Assign', 'If', 'If', 'Assign', 'Assign', 'Expr', 'Assign', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'Call'), ('body', ['ImportFrom', 'Assign', 'Assign', 'For']), ('orelse', [])]": 1, "BinOp -> [('left', 'Call'), ('op', 'Sub'), ('right', 'Attribute')]": 12, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'TryExcept', 'Return']), ('decorator_list', ['Name'])]": 1, "Assert -> [('test', 'Call'), ('msg', 'Attribute')]": 2, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'If', 'If', 'Assign', 'If']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'Assign', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]": 1, "Yield -> [('value', 'Name')]": 103, "If -> [('test', 'Compare'), ('body', ['If', 'For']), ('orelse', [])]": 4, "Call -> [('func', 'Attribute'), ('args', ['Tuple', 'Call', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'Name')]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'BinOp']), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Tuple -> [('elts', ['Attribute', 'Subscript']), ('ctx', 'Load')]": 18, "If -> [('test', 'Compare'), ('body', ['Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'If']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'AugAssign', 'Expr', 'Assign', 'If', 'AugAssign', 'Assign', 'If', 'For', 'AugAssign', 'If', 'If', 'AugAssign', 'Return']), ('decorator_list', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Str', 'Str', 'ListComp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 3, "If -> [('test', 'Name'), ('body', ['If', 'Expr']), ('orelse', ['If', 'Expr', 'Expr', 'Expr'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assert', 'Expr', 'Assign', 'Return']), ('decorator_list', ['Call', 'Name'])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Str', 'Tuple'])]": 1, "If -> [('test', 'Name'), ('body', ['Assign', 'Break']), ('orelse', [])]": 4, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'For', 'If', 'If', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 1, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'Import', 'ImportFrom', 'Import', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'For'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'If', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['TryExcept', 'If', 'TryExcept', 'TryExcept', 'Return']), ('decorator_list', [])]": 2, "If -> [('test', 'Name'), ('body', ['For', 'Expr', 'Return']), ('orelse', ['Assign', 'For', 'Return'])]": 1, "If -> [('test', 'Call'), ('body', ['Assign']), ('orelse', [])]": 300, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Return']), ('decorator_list', ['Call'])]": 12, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['If', 'For']), ('orelse', [])]": 4, "TryExcept -> [('body', ['Assign', 'Expr', 'Assign']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'If', 'Assign', 'Assign', 'If', 'Expr', 'Expr', 'Print']), ('decorator_list', [])]": 2, "keyword -> [('arg', 'str'), ('value', 'Dict')]": 403, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'ClassDef', 'Expr', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign']), ('orelse', ['Assert'])]": 2, "Compare -> [('left', 'Name'), ('ops', ['NotIn']), ('comparators', ['List'])]": 8, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['If', 'Assign', 'Expr', 'Expr', 'Expr', 'If', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr']), ('orelse', [])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Call', 'Call', 'Name'])]": 1, "TryExcept -> [('body', ['Assign', 'Expr', 'Print']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 1, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]": 1, "Assign -> [('targets', ['Name', 'Attribute']), ('value', 'List')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 7, "If -> [('test', 'Compare'), ('body', ['Assign', 'If']), ('orelse', ['Raise'])]": 3, "For -> [('target', 'Name'), ('iter', 'Tuple'), ('body', ['Assign', 'Assign', 'Expr', 'Assign', 'If', 'Expr', 'TryExcept', 'Expr', 'TryExcept', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If']), ('decorator_list', ['Call', 'Name'])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Tuple', 'Tuple', 'Tuple']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'For', 'Expr', 'Expr']), ('orelse', [])]": 1, "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Expr']), ('orelse', ['Expr', 'Expr', 'Expr'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'BinOp', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 4, "TryFinally -> [('body', ['Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'TryExcept', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('finalbody', ['Expr', 'Assign', 'Assign'])]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'If'])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Name', 'Attribute', 'Attribute', 'Name', 'Attribute'])]": 1, "If -> [('test', 'Name'), ('body', ['Assign', 'Expr']), ('orelse', ['Return'])]": 2, "Index -> [('value', 'Subscript')]": 162, "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'Assign', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'Assign', 'ClassDef', 'ClassDef', 'ClassDef'])]": 1, "Call -> [('func', 'Name'), ('args', ['Name', 'Attribute', 'Attribute', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 3, "BinOp -> [('left', 'Name'), ('op', 'Div'), ('right', 'Num')]": 128, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Import', 'Return']), ('decorator_list', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Subscript', 'Str', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "TryFinally -> [('body', ['Assign', 'If']), ('finalbody', ['AugAssign'])]": 1, "Call -> [('func', 'Name'), ('args', ['Name', 'Name']), ('keywords', []), ('starargs', 'Name'), ('kwargs', 'NoneType')]": 2, "Call -> [('func', 'Attribute'), ('args', ['Num', 'Lambda']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Tuple -> [('elts', ['Name', 'BinOp', 'Str']), ('ctx', 'Load')]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'TryExcept', 'If', 'Assign', 'If', 'Return']), ('decorator_list', [])]": 1, "Compare -> [('left', 'Attribute'), ('ops', ['Is', 'Is']), ('comparators', ['Name', 'Name'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'For', 'If']), ('decorator_list', [])]": 3, "BoolOp -> [('op', 'And'), ('values', ['Attribute', 'UnaryOp', 'Attribute'])]": 2, "TryFinally -> [('body', ['Assign', 'Assign', 'Assign']), ('finalbody', ['Expr', 'Expr', 'Expr'])]": 2, "Print -> [('dest', 'NoneType'), ('values', ['ListComp']), ('nl', 'bool')]": 1, "arguments -> [('args', ['Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'str'), ('defaults', ['Name', 'Name'])]": 4, "Call -> [('func', 'Attribute'), ('args', ['Str', 'Str', 'Attribute', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'For', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "If -> [('test', 'BoolOp'), ('body', ['If', 'While']), ('orelse', [])]": 1, "List -> [('elts', ['Name', 'Name', 'Name']), ('ctx', 'Load')]": 46, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assert', 'Assign', 'Assert', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'For', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'AugAssign', 'AugAssign', 'AugAssign', 'AugAssign', 'If', 'AugAssign', 'AugAssign', 'AugAssign', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'Call'), ('body', ['Assign']), ('orelse', ['If', 'Assign'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'Expr', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Return', 'If', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Expr']), ('orelse', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'Expr', 'Return']), ('decorator_list', [])]": 2, "If -> [('test', 'Call'), ('body', ['Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Return']), ('orelse', [])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute'])]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Expr', 'Assign', 'Assign', 'Expr']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'If', 'Raise']), ('decorator_list', ['Call'])]": 1, "Compare -> [('left', 'Call'), ('ops', ['In']), ('comparators', ['Attribute'])]": 7, "ExceptHandler -> [('type', 'Attribute'), ('name', 'NoneType'), ('body', ['TryExcept'])]": 5, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 80, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'FunctionDef', 'Assign', 'Expr', 'Assign', 'For', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'For']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assert', 'If', 'Assign', 'If', 'For', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assert', 'Assert', 'Assign', 'Assert', 'Assert', 'Assert', 'Assign', 'Assign', 'Assert']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'TryExcept', 'If', 'Assign', 'Assign', 'Assign', 'TryExcept', 'If', 'If', 'Assign', 'If', 'Expr', 'Expr', 'Expr', 'Return']), ('decorator_list', ['Name', 'Name', 'Call', 'Call'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'For']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'If', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'If', 'If', 'If', 'If', 'If', 'If', 'Expr']), ('decorator_list', [])]": 1, "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign', 'Assign', 'AugAssign']), ('orelse', [])]": 1, "If -> [('test', 'Attribute'), ('body', ['Assign', 'Assign', 'Assign', 'For', 'For']), ('orelse', [])]": 2, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "If -> [('test', 'UnaryOp'), ('body', ['Assign']), ('orelse', [])]": 390, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'ClassDef', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 4, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str']), ('values', ['Call', 'Call', 'Call', 'BinOp'])]": 1, "Call -> [('func', 'Name'), ('args', ['Str', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Call -> [('func', 'Name'), ('args', ['Str', 'Subscript']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'FunctionDef', 'Expr']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'List'), ('body', ['Expr', 'For']), ('orelse', [])]": 2, "Tuple -> [('elts', ['Subscript', 'Compare']), ('ctx', 'Load')]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'Expr', 'Return']), ('decorator_list', [])]": 3, "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef'])]": 1, "If -> [('test', 'BoolOp'), ('body', ['If', 'Raise']), ('orelse', [])]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'If', 'Assign', 'For', 'Return']), ('decorator_list', [])]": 2, "Module -> [('body', ['Import', 'Import', 'Import', 'ImportFrom', 'Import', 'ImportFrom', 'ImportFrom', 'Import', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Return']), ('decorator_list', ['Attribute', 'Call'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Print', 'Expr', 'Assign', 'Print']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'TryExcept', 'If', 'If', 'Expr', 'Assign', 'If']), ('decorator_list', [])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', [])]": 2, "Print -> [('dest', 'NoneType'), ('values', ['Name', 'Str', 'BinOp']), ('nl', 'bool')]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'TryExcept', 'Expr', 'TryExcept', 'Expr']), ('orelse', [])]": 1, "List -> [('elts', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Num', 'Name', 'Name']), ('ctx', 'Load')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'TryExcept', 'AugAssign', 'If', 'If', 'If', 'While', 'Return']), ('decorator_list', [])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Str', 'Name', 'Name'])]": 1, "While -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'AugAssign', 'Assign', 'Expr', 'Assign', 'AugAssign']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'If', 'Assign', 'TryExcept']), ('decorator_list', ['Name'])]": 1, "ListComp -> [('elt', 'Name'), ('generators', ['comprehension', 'comprehension'])]": 3, "TryFinally -> [('body', ['Assign', 'Expr']), ('finalbody', ['Expr'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'For', 'For', 'If', 'If', 'Assign', 'For', 'Return']), ('decorator_list', [])]": 1, "BoolOp -> [('op', 'Or'), ('values', ['Compare', 'Call', 'Call', 'Call'])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Str', 'Str'])]": 7, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'For', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'If', 'If', 'If']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'TryExcept', 'If', 'If', 'Return']), ('decorator_list', [])]": 1, "BoolOp -> [('op', 'Or'), ('values', ['Name', 'Attribute'])]": 35, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Return']), ('decorator_list', ['Call'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "Tuple -> [('elts', ['Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num']), ('ctx', 'Load')]": 1, "Tuple -> [('elts', ['Name', 'Subscript', 'Subscript', 'Subscript', 'Subscript']), ('ctx', 'Load')]": 1, "For -> [('target', 'Tuple'), ('iter', 'Subscript'), ('body', ['Expr']), ('orelse', [])]": 2, "BoolOp -> [('op', 'And'), ('values', ['Name', 'UnaryOp', 'Call'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'ImportFrom', 'If', 'Assign', 'If', 'Assert', 'Expr']), ('decorator_list', [])]": 1, "List -> [('elts', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('ctx', 'Load')]": 1, "BoolOp -> [('op', 'Or'), ('values', ['Name', 'Name'])]": 65, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 9, "If -> [('test', 'Compare'), ('body', ['ImportFrom', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'If', 'If', 'If', 'For', 'Expr']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'TryExcept', 'TryFinally']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Str', 'Attribute', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 4, "Compare -> [('left', 'Name'), ('ops', ['NotIn']), ('comparators', ['Subscript'])]": 4, "Call -> [('func', 'Attribute'), ('args', ['Dict', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 8, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'If', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'FunctionDef', 'For', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'If', 'Expr', 'For', 'Assign', 'If']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'TryExcept']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "TryFinally -> [('body', ['For', 'TryExcept']), ('finalbody', ['Pass'])]": 1, "If -> [('test', 'BoolOp'), ('body', ['If', 'Expr', 'If', 'If']), ('orelse', ['If'])]": 1, "If -> [('test', 'Subscript'), ('body', ['ImportFrom', 'TryExcept']), ('orelse', ['Assign'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'FunctionDef', 'Expr', 'FunctionDef', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "With -> [('context_expr', 'Call'), ('optional_vars', 'Name'), ('body', ['With'])]": 4, "Call -> [('func', 'Name'), ('args', ['Call', 'Num']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "If -> [('test', 'Compare'), ('body', ['Raise']), ('orelse', [])]": 329, "If -> [('test', 'Attribute'), ('body', ['Assign', 'Assign', 'Expr']), ('orelse', [])]": 5, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'For', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "BoolOp -> [('op', 'And'), ('values', ['Name', 'Compare', 'Compare'])]": 13, "Compare -> [('left', 'Call'), ('ops', ['Gt']), ('comparators', ['BinOp'])]": 8, "TryExcept -> [('body', ['For', 'Assign', 'Return']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Assign', 'Assign', 'Delete', 'Return']), ('decorator_list', [])]": 1, "BinOp -> [('left', 'BinOp'), ('op', 'Mult'), ('right', 'Name')]": 65, "For -> [('target', 'Tuple'), ('iter', 'Attribute'), ('body', ['Assign', 'For']), ('orelse', [])]": 3, "Call -> [('func', 'Attribute'), ('args', ['Subscript', 'Str', 'List']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'TryExcept', 'If']), ('orelse', [])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['Name', 'Name', 'Str'])]": 1, "TryExcept -> [('body', ['Expr', 'Assign']), ('handlers', ['ExceptHandler']), ('orelse', ['Expr', 'TryExcept', 'Return'])]": 1, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'ClassDef', 'If'])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'ClassDef']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'Expr', 'Assign', 'Return']), ('decorator_list', ['Call'])]": 2, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Raise']), ('orelse', [])]": 3, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign'])]": 2, "Call -> [('func', 'Attribute'), ('args', ['Str', 'BinOp', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Name', 'Name'])]": 1, "If -> [('test', 'Call'), ('body', ['Raise']), ('orelse', [])]": 28, "If -> [('test', 'UnaryOp'), ('body', ['Print', 'Continue']), ('orelse', [])]": 2, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Assign', 'Assign', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "TryExcept -> [('body', ['Assign', 'Assign', 'Expr', 'Assign']), ('handlers', ['ExceptHandler', 'ExceptHandler', 'ExceptHandler', 'ExceptHandler', 'ExceptHandler']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'ImportFrom', 'If', 'Expr', 'TryFinally']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'Expr', 'Assign', 'Expr', 'FunctionDef', 'FunctionDef', 'For', 'Assign', 'Expr', 'Assign', 'Expr', 'Return']), ('decorator_list', ['Name'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'If', 'If', 'For']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Assign', 'Assign', 'While']), ('orelse', [])]": 1, "TryExcept -> [('body', ['Expr', 'Assign', 'Return']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'If', 'With', 'Return']), ('decorator_list', [])]": 1, "List -> [('elts', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('ctx', 'Load')]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'BinOp', 'Num', 'BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "If -> [('test', 'Name'), ('body', ['If', 'Assign', 'Expr', 'Expr', 'Return']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assert', 'Assert', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'For', 'Expr']), ('decorator_list', ['Attribute'])]": 1, "Call -> [('func', 'Name'), ('args', ['Attribute', 'Name', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 19, "List -> [('elts', ['BinOp', 'BinOp', 'BinOp']), ('ctx', 'Load')]": 7, "If -> [('test', 'Compare'), ('body', ['Assign', 'Expr', 'Continue']), ('orelse', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['TryExcept', 'If', 'Expr']), ('orelse', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'With', 'Assign', 'Assign', 'AugAssign', 'Assign']), ('decorator_list', [])]": 1, "List -> [('elts', ['Tuple', 'Tuple', 'Call', 'Tuple', 'Tuple', 'Call', 'Tuple']), ('ctx', 'Load')]": 1, "Dict -> [('keys', ['Str', 'Name', 'Str', 'Str', 'Str', 'Name']), ('values', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Subscript', 'Attribute']), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 5, "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['TryExcept']), ('orelse', [])]": 21, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef']), ('decorator_list', [])]": 2, "Module -> [('body', ['Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'If'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', ['Name'])]": 4, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Expr', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "Compare -> [('left', 'Str'), ('ops', ['NotEq']), ('comparators', ['Subscript'])]": 1, "BinOp -> [('left', 'Subscript'), ('op', 'Div'), ('right', 'Attribute')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 13, "If -> [('test', 'Name'), ('body', ['Assign', 'Return']), ('orelse', [])]": 8, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef'])]": 3, "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['Name', 'Call', 'Attribute'])]": 2, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['If']), ('orelse', ['AugAssign', 'Assign'])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'If']), ('orelse', ['If', 'Assign'])]": 1, "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'ClassDef'])]": 1, "If -> [('test', 'Compare'), ('body', ['If', 'Return']), ('orelse', [])]": 19, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "comprehension -> [('target', 'Tuple'), ('iter', 'Call'), ('ifs', ['UnaryOp'])]": 4, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Return']), ('decorator_list', [])]": 164, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'For']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['With']), ('orelse', ['Raise'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'For', 'Assign', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 1, "Compare -> [('left', 'Name'), ('ops', ['Eq']), ('comparators', ['UnaryOp'])]": 2, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'FunctionDef', 'Assign', 'Assign', 'ClassDef', 'Assign', 'FunctionDef', 'FunctionDef', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef'])]": 1, "Call -> [('func', 'Name'), ('args', ['Subscript', 'Subscript', 'Subscript', 'Subscript', 'Subscript', 'Subscript']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "Slice -> [('lower', 'Subscript'), ('upper', 'NoneType'), ('step', 'NoneType')]": 1, "BoolOp -> [('op', 'Or'), ('values', ['Compare', 'Call', 'Call'])]": 2, "Call -> [('func', 'Name'), ('args', ['Name', 'Num']), ('keywords', ['keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 4, "List -> [('elts', ['Call', 'Call', 'Call', 'Name']), ('ctx', 'Load')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'ImportFrom', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'If', 'Assign', 'TryExcept', 'If', 'Assign', 'If', 'If', 'If', 'Assign', 'Expr', 'Assign', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'If', 'Return']), ('decorator_list', ['Name'])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Name', 'Call', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 4, "If -> [('test', 'BoolOp'), ('body', ['AugAssign']), ('orelse', ['Expr'])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'str'), ('defaults', ['Num', 'Str'])]": 1, "While -> [('test', 'Num'), ('body', ['Assign', 'For']), ('orelse', [])]": 2, "If -> [('test', 'Compare'), ('body', ['AugAssign', 'AugAssign']), ('orelse', [])]": 4, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "TryExcept -> [('body', ['Import', 'Import', 'Import', 'Assign']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Num', 'BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 28, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assert', 'Return']), ('decorator_list', [])]": 1, "arguments -> [('args', ['Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'str'), ('defaults', [])]": 130, "List -> [('elts', ['Str', 'Subscript', 'Call', 'Subscript']), ('ctx', 'Load')]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign']), ('orelse', ['Assign', 'Expr', 'Expr'])]": 2, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Assign', 'If']), ('orelse', [])]": 18, "Import -> [('names', ['alias'])]": 4273, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Return']), ('decorator_list', ['Name'])]": 1, "With -> [('context_expr', 'Subscript'), ('optional_vars', 'NoneType'), ('body', ['Assign', 'If', 'If', 'ImportFrom', 'Expr', 'Return'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'Assign', 'Expr', 'Return']), ('decorator_list', [])]": 1, "comprehension -> [('target', 'Name'), ('iter', 'Call'), ('ifs', [])]": 394, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'If', 'Assign', 'If', 'TryFinally']), ('decorator_list', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Str', 'Attribute', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assert', 'Assign', 'Expr']), ('decorator_list', [])]": 2, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'TryExcept', 'ClassDef', 'ClassDef'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'For', 'Assign', 'Expr', 'Assign', 'For', 'Assign', 'Return']), ('decorator_list', [])]": 1, "comprehension -> [('target', 'Name'), ('iter', 'Str'), ('ifs', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Assign']), ('orelse', ['Assign'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'If', 'If', 'If', 'Return']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'For']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'While']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]": 1, "Tuple -> [('elts', ['Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute']), ('ctx', 'Load')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'Assert', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assert', 'Assign', 'Assert', 'Assign', 'Assign', 'Assert', 'Assert', 'Assert', 'Assert', 'Assert', 'If', 'If', 'Assign', 'Assert', 'Assign', 'Assert', 'Assign', 'Assert', 'Assign', 'Assert', 'Assign', 'Assert', 'Assert', 'Assert']), ('decorator_list', [])]": 1, "ExceptHandler -> [('type', 'Name'), ('name', 'Name'), ('body', ['If', 'Expr'])]": 5, "Tuple -> [('elts', ['Num', 'Name', 'Tuple']), ('ctx', 'Load')]": 4, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Name', 'Num'])]": 2, "TryExcept -> [('body', ['For', 'Break']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 1, "arguments -> [('args', []), ('vararg', 'str'), ('kwarg', 'str'), ('defaults', [])]": 52, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Expr', 'Assign', 'Return']), ('decorator_list', ['Name'])]": 1, "Compare -> [('left', 'Num'), ('ops', ['LtE', 'Lt']), ('comparators', ['Name', 'Num'])]": 3, "Assign -> [('targets', ['Subscript', 'Name']), ('value', 'List')]": 2, "Module -> [('body', ['Import', 'ImportFrom', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'While', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'For', 'Assign', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', ['Call'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Str', 'Name', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 9, "If -> [('test', 'Name'), ('body', ['TryExcept', 'Expr', 'Expr']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'Expr', 'Assign', 'For', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "Tuple -> [('elts', ['BoolOp', 'Name']), ('ctx', 'Load')]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'ImportFrom', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'If', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'If', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['FunctionDef', 'Assign', 'Assign', 'Assign', 'While']), ('orelse', ['If'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'Expr', 'If', 'If', 'If', 'If', 'If', 'If']), ('decorator_list', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Str', 'Num', 'Num', 'Name', 'Call', 'Call', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 49, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Import', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "Assert -> [('test', 'Compare'), ('msg', 'BinOp')]": 48, "If -> [('test', 'BinOp'), ('body', ['If']), ('orelse', [])]": 4, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'Return']), ('decorator_list', ['Name'])]": 1, "If -> [('test', 'Name'), ('body', ['ImportFrom', 'FunctionDef', 'FunctionDef', 'Assign', 'Print', 'Assign', 'Print', 'Print', 'Assign', 'Assign', 'Print', 'Print', 'For', 'Expr']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Expr', 'Assign', 'If', 'If', 'If', 'Expr', 'Expr', 'If', 'If', 'If']), ('decorator_list', [])]": 1, "Compare -> [('left', 'Attribute'), ('ops', ['Eq']), ('comparators', ['Num'])]": 100, "BoolOp -> [('op', 'And'), ('values', ['Call', 'Subscript'])]": 2, "TryExcept -> [('body', ['Assign', 'If', 'Raise']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 1, "Slice -> [('lower', 'Call'), ('upper', 'NoneType'), ('step', 'NoneType')]": 50, "List -> [('elts', ['Name', 'Attribute', 'Attribute', 'Attribute']), ('ctx', 'Load')]": 4, "arguments -> [('args', ['Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Num', 'Lambda'])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Attribute', 'Call', 'Name', 'Name', 'Subscript', 'Attribute', 'Call', 'Attribute', 'BinOp', 'Call', 'Call', 'Attribute', 'Attribute', 'Attribute', 'Attribute'])]": 1, "Call -> [('func', 'Name'), ('args', ['Name', 'Name', 'Name', 'BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "Call -> [('func', 'Name'), ('args', []), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Num', 'Name']), ('keywords', ['keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "List -> [('elts', ['Name', 'Str', 'Str', 'Name']), ('ctx', 'Load')]": 2, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef'])]": 1, "ExceptHandler -> [('type', 'Tuple'), ('name', 'Name'), ('body', ['Print', 'Return'])]": 1, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'Assign', 'ClassDef', 'ClassDef'])]": 1, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'Expr', 'Expr', 'Expr']), ('orelse', [])]": 2, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 11, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'ImportFrom', 'Assign', 'Expr', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "TryExcept -> [('body', ['Assign']), ('handlers', ['ExceptHandler']), ('orelse', ['Assign', 'Assign', 'Return'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'While', 'Assign', 'For', 'Expr', 'For', 'AugAssign']), ('decorator_list', [])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Call', 'Call', 'Call'])]": 3, "Dict -> [('keys', ['Attribute', 'Name', 'Attribute', 'Attribute', 'Attribute', 'Name', 'Attribute', 'Name']), ('values', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str'])]": 1, "If -> [('test', 'BoolOp'), ('body', ['Raise']), ('orelse', ['Return'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'For', 'Assign', 'For', 'If', 'If', 'For']), ('decorator_list', [])]": 1, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'TryExcept', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]": 1, "If -> [('test', 'Name'), ('body', ['Return']), ('orelse', ['If', 'Assign', 'Return'])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign']), ('orelse', ['Assign', 'If', 'If', 'Assign'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]": 1, "TryFinally -> [('body', ['Assign', 'Expr', 'Expr', 'Expr']), ('finalbody', ['Expr'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assert', 'If', 'If', 'Return']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'With', 'If', 'Expr', 'Expr', 'Print']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Subscript']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 9, "For -> [('target', 'Name'), ('iter', 'Subscript'), ('body', ['Expr', 'Expr', 'Expr']), ('orelse', [])]": 1, "If -> [('test', 'BoolOp'), ('body', ['Assign', 'For', 'Expr', 'Expr']), ('orelse', [])]": 2, "With -> [('context_expr', 'Call'), ('optional_vars', 'Name'), ('body', ['Expr'])]": 20, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name']), ('vararg', 'str'), ('kwarg', 'str'), ('defaults', ['Str', 'List', 'List'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'TryExcept', 'Assign', 'Assign', 'For', 'Return']), ('decorator_list', [])]": 2, "Assign -> [('targets', ['Name']), ('value', 'BoolOp')]": 364, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Import', 'Import', 'FunctionDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Global', 'If', 'Assign', 'For', 'If', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'Assign', 'If', 'If', 'For', 'Assign', 'Assign', 'If']), ('decorator_list', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Call', 'Call']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 4, "If -> [('test', 'BoolOp'), ('body', ['ImportFrom']), ('orelse', ['Assign'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'For', 'If', 'Expr', 'Assign', 'Expr', 'Assign', 'Return']), ('decorator_list', [])]": 2, "TryExcept -> [('body', ['Assign']), ('handlers', ['ExceptHandler']), ('orelse', ['Assign', 'Assign', 'Assign', 'Assign'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "Dict -> [('keys', ['Str', 'Str']), ('values', ['Subscript', 'Subscript'])]": 5, "If -> [('test', 'Compare'), ('body', ['Expr', 'Return']), ('orelse', ['Expr', 'Return'])]": 1, "Compare -> [('left', 'BinOp'), ('ops', ['Eq']), ('comparators', ['Num'])]": 47, "Call -> [('func', 'Call'), ('args', ['Name', 'Dict']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 10, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 662, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "Module -> [('body', ['Expr', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]": 2, "Call -> [('func', 'Name'), ('args', ['Name', 'Name', 'Attribute', 'Name']), ('keywords', ['keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'Name')]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'Import', 'ClassDef'])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Num', 'Name'])]": 4, "Compare -> [('left', 'Attribute'), ('ops', ['Lt']), ('comparators', ['Tuple'])]": 17, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Return']), ('decorator_list', ['Call', 'Name', 'Call', 'Call'])]": 14, "Print -> [('dest', 'Attribute'), ('values', ['BinOp']), ('nl', 'bool')]": 6, "If -> [('test', 'Call'), ('body', ['Assign', 'Assign', 'Assign']), ('orelse', ['Continue'])]": 1, "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['If', 'If', 'If', 'If', 'TryExcept']), ('orelse', [])]": 2, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Num'])]": 13, "While -> [('test', 'Name'), ('body', ['Assign', 'Assign', 'Assign', 'Print', 'If', 'If', 'If', 'Expr']), ('orelse', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['If', 'Assign']), ('orelse', [])]": 1, "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'FunctionDef', 'If'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'FunctionDef', 'ClassDef', 'ClassDef', 'FunctionDef', 'ClassDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'ClassDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'Assign', 'FunctionDef', 'ClassDef', 'ClassDef'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Assign', 'Return']), ('decorator_list', ['Call'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Expr', 'AugAssign', 'Expr', 'AugAssign']), ('decorator_list', [])]": 1, "List -> [('elts', ['Str', 'Str', 'Str', 'Str', 'Str']), ('ctx', 'Load')]": 51, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'Import', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 3, "For -> [('target', 'Tuple'), ('iter', 'Tuple'), ('body', ['Assign', 'For']), ('orelse', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Raise']), ('decorator_list', ['Call'])]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'TryExcept', 'Import', 'Import', 'Import', 'Import', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'TryExcept']), ('decorator_list', [])]": 1, "comprehension -> [('target', 'Tuple'), ('iter', 'Call'), ('ifs', ['BoolOp'])]": 5, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'Import', 'Import', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'ClassDef', 'ClassDef', 'FunctionDef', 'ClassDef', 'FunctionDef', 'FunctionDef', 'Assign', 'TryExcept', 'For', 'For', 'For', 'Expr', 'Assign', 'For', 'Assign', 'Expr', 'Expr'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'Assign', 'Assign']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'For', 'Assign', 'If', 'If']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['TryExcept', 'Assign', 'If', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'For']), ('decorator_list', ['Name'])]": 1, "Module -> [('body', ['Import', 'Assign', 'Expr', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Print', 'Print', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr'])]": 1, "List -> [('elts', ['Name', 'Str', 'Name']), ('ctx', 'Load')]": 7, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'For', 'If', 'Return']), ('decorator_list', [])]": 1, "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'If', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'If'])]": 2, "BinOp -> [('left', 'Call'), ('op', 'BitAnd'), ('right', 'Name')]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 3, "While -> [('test', 'Name'), ('body', ['Expr', 'If', 'Assign']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Return']), ('decorator_list', ['Call'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Expr', 'Assign', 'If', 'Return']), ('decorator_list', [])]": 1, "While -> [('test', 'Name'), ('body', ['Assign', 'If', 'Assign', 'If', 'Expr', 'AugAssign']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If']), ('decorator_list', ['Call', 'Name', 'Call'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 5, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Str', 'Name', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "Call -> [('func', 'Name'), ('args', ['Subscript', 'Str', 'Lambda']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assert', 'Assign', 'Assign', 'Assert', 'Assert']), ('decorator_list', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Subscript', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 5, "BinOp -> [('left', 'UnaryOp'), ('op', 'Div'), ('right', 'BinOp')]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Subscript', 'Name', 'Name'])]": 1, "If -> [('test', 'Compare'), ('body', ['AugAssign', 'Continue']), ('orelse', ['If'])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str']), ('values', ['Num', 'Str', 'Num', 'Num'])]": 9, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Str'])]": 3, "If -> [('test', 'Attribute'), ('body', ['Expr', 'Expr']), ('orelse', [])]": 9, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'Print', 'For']), ('decorator_list', [])]": 1, "Tuple -> [('elts', ['Str', 'Str', 'Str']), ('ctx', 'Load')]": 304, "If -> [('test', 'Compare'), ('body', ['Expr', 'Expr', 'For', 'Expr']), ('orelse', ['Raise'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'FunctionDef', 'FunctionDef', 'Expr', 'Expr']), ('decorator_list', [])]": 3, "TryExcept -> [('body', ['ImportFrom', 'Assign', 'ImportFrom', 'Assign']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 1, "Tuple -> [('elts', ['List', 'Name']), ('ctx', 'Load')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'TryFinally', 'Return']), ('decorator_list', [])]": 2, "TryExcept -> [('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr']), ('handlers', ['ExceptHandler', 'ExceptHandler', 'ExceptHandler', 'ExceptHandler']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Num', 'Name', 'Num', 'Dict'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'TryExcept']), ('decorator_list', ['Attribute'])]": 1, "ExceptHandler -> [('type', 'Attribute'), ('name', 'Name'), ('body', ['Expr', 'Return'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'If', 'Expr']), ('decorator_list', ['Name'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'If']), ('decorator_list', ['Name', 'Name'])]": 2, "Compare -> [('left', 'Subscript'), ('ops', ['In']), ('comparators', ['Name'])]": 17, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'While', 'Assign', 'For', 'Return']), ('decorator_list', ['Name'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Global', 'Expr', 'If', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'While', 'Expr']), ('decorator_list', [])]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'ClassDef', 'ClassDef', 'Assign', 'Assign', 'ClassDef', 'ClassDef'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "arguments -> [('args', ['Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Attribute'])]": 2, "Assign -> [('targets', ['Attribute']), ('value', 'Attribute')]": 783, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str']), ('values', ['Call', 'Name', 'Name', 'Name'])]": 2, "TryFinally -> [('body', ['Assign', 'For']), ('finalbody', ['Expr', 'Expr'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'Return']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Expr', 'AugAssign']), ('orelse', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Name', 'Name', 'Subscript']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 5, "List -> [('elts', ['Call', 'Str']), ('ctx', 'Load')]": 2, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Return']), ('orelse', ['Pass'])]": 1, "List -> [('elts', ['Dict', 'Dict', 'Dict', 'Dict', 'Dict', 'Dict']), ('ctx', 'Load')]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'Name'), ('body', ['Assign', 'Assign', 'Assign', 'Assign']), ('orelse', ['Assign', 'Assign', 'Assign', 'Assign'])]": 1, "If -> [('test', 'Call'), ('body', ['Assign', 'Expr', 'If']), ('orelse', ['Expr', 'Expr'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 2, "If -> [('test', 'Call'), ('body', ['TryExcept', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign']), ('orelse', [])]": 1, "If -> [('test', 'Compare'), ('body', ['AugAssign', 'Assign', 'Assign', 'Assign', 'Break']), ('orelse', [])]": 2, "ClassDef -> [('name', 'str'), ('bases', []), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 2, "Tuple -> [('elts', ['Attribute', 'Attribute', 'Name']), ('ctx', 'Load')]": 8, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assert', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Expr', 'If', 'FunctionDef', 'Assign', 'If', 'Expr', 'If']), ('decorator_list', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]": 1, "Assign -> [('targets', ['Subscript']), ('value', 'Attribute')]": 273, "If -> [('test', 'Compare'), ('body', ['Expr', 'Expr', 'If', 'Expr', 'Expr', 'Expr']), ('orelse', [])]": 6, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'If', 'If', 'For', 'If', 'For', 'Return']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['BinOp', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "ExceptHandler -> [('type', 'NoneType'), ('name', 'NoneType'), ('body', ['Expr', 'Assign', 'Expr', 'Expr'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ClassDef', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "BinOp -> [('left', 'Call'), ('op', 'BitXor'), ('right', 'Call')]": 3, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Name', 'Dict']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "TryExcept -> [('body', ['Import']), ('handlers', ['ExceptHandler']), ('orelse', ['Assign', 'Expr', 'Assign', 'If'])]": 1, "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Assign']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assert', 'Assign', 'Assert', 'Assign', 'Assign', 'Assign', 'Assert', 'Expr', 'Assign', 'Assign', 'Assign', 'Assert', 'Assign', 'Assert', 'Assign', 'Assign', 'Assert', 'Expr', 'Assert']), ('decorator_list', [])]": 1, "If -> [('test', 'Name'), ('body', ['Assign', 'Assign', 'If']), ('orelse', ['If'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Dict']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'If', 'Return']), ('decorator_list', [])]": 14, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assert', 'Assign', 'Assign', 'Assign', 'Assign', 'Assert', 'Assign', 'Assign', 'Assign', 'Assert', 'Assert', 'Assert', 'Assign', 'Assign']), ('decorator_list', [])]": 1, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'If'])]": 1, "IfExp -> [('test', 'Attribute'), ('body', 'Subscript'), ('orelse', 'Name')]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Global', 'If', 'TryExcept', 'Return']), ('decorator_list', [])]": 1, "BoolOp -> [('op', 'And'), ('values', ['Attribute', 'Compare'])]": 50, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'ClassDef', 'FunctionDef', 'If'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'If', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'If', 'If', 'Assign', 'Assign', 'If', 'Assign', 'If', 'Expr', 'Return']), ('decorator_list', [])]": 1, "Print -> [('dest', 'NoneType'), ('values', ['Str', 'Call', 'Str']), ('nl', 'bool')]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'For', 'Return']), ('decorator_list', [])]": 7, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['AugAssign', 'If', 'For', 'Return']), ('decorator_list', [])]": 1, "TryExcept -> [('body', ['Assign', 'If', 'For', 'Return']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 1, "If -> [('test', 'Name'), ('body', ['TryExcept', 'TryExcept']), ('orelse', [])]": 2, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call'])]": 1, "Tuple -> [('elts', ['Subscript', 'Num', 'Name', 'Name']), ('ctx', 'Load')]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'Assign', 'If', 'Print']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Tuple'), ('body', ['Expr', 'Assign', 'Expr']), ('orelse', [])]": 4, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'ClassDef', 'ClassDef', 'FunctionDef', 'ClassDef', 'Assign'])]": 2, "List -> [('elts', ['Str', 'Subscript']), ('ctx', 'Load')]": 5, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]": 1, "BinOp -> [('left', 'BinOp'), ('op', 'RShift'), ('right', 'Num')]": 3, "If -> [('test', 'Call'), ('body', ['Print']), ('orelse', [])]": 7, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Str', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "Assign -> [('targets', ['Name', 'Name']), ('value', 'Attribute')]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Assign', 'If', 'If', 'Assign']), ('orelse', [])]": 2, "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign', 'Assign', 'Expr']), ('orelse', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Name', 'Str', 'Tuple']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "TryExcept -> [('body', ['Assign', 'Assign', 'If']), ('handlers', ['ExceptHandler', 'ExceptHandler']), ('orelse', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Str', 'Str', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Compare -> [('left', 'Name'), ('ops', ['IsNot']), ('comparators', ['Call'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Return']), ('decorator_list', ['Name', 'Call'])]": 1, "Delete -> [('targets', ['Name'])]": 28, "IfExp -> [('test', 'Compare'), ('body', 'BinOp'), ('orelse', 'Name')]": 1, "TryExcept -> [('body', ['TryExcept', 'Assign']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 2, "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Expr', 'Expr', 'Expr']), ('orelse', ['Raise'])]": 1, "If -> [('test', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Return']), ('orelse', ['Assign', 'If', 'If', 'Assign', 'Return'])]": 1, "Dict -> [('keys', ['BinOp', 'Str', 'Str', 'Str']), ('values', ['Name', 'Name', 'BinOp', 'Name'])]": 2, "If -> [('test', 'Attribute'), ('body', ['For']), ('orelse', ['For'])]": 2, "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'Assign', 'Expr']), ('orelse', [])]": 1, "Tuple -> [('elts', ['Name', 'Name', 'Name', 'Call']), ('ctx', 'Load')]": 6, "With -> [('context_expr', 'Call'), ('optional_vars', 'NoneType'), ('body', ['Expr', 'Assign', 'Expr'])]": 2, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign'])]": 1, "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'Expr', 'Break']), ('orelse', [])]": 1, "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign', 'Assign']), ('orelse', ['Assign', 'Assign', 'Assign'])]": 1, "Dict -> [('keys', ['Str', 'Str']), ('values', ['Str', 'Compare'])]": 6, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'If', 'Expr']), ('decorator_list', [])]": 1, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Expr', 'Expr']), ('orelse', [])]": 13, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Expr', 'Print', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['FunctionDef', 'Assign', 'Expr']), ('decorator_list', [])]": 4, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'If']), ('orelse', ['Assign', 'TryExcept'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'Assign', 'Assign', 'Assign', 'ClassDef', 'ClassDef'])]": 1, "BoolOp -> [('op', 'And'), ('values', ['BoolOp', 'Call'])]": 5, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'If']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'For', 'If', 'Return']), ('decorator_list', [])]": 4, "Call -> [('func', 'Attribute'), ('args', ['List', 'Str']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 7, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'If', 'Expr', 'Assign']), ('orelse', [])]": 1, "While -> [('test', 'Compare'), ('body', ['Assign', 'Assign']), ('orelse', [])]": 3, "GeneratorExp -> [('elt', 'BinOp'), ('generators', ['comprehension'])]": 17, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'Assign', 'Expr', 'Expr']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'If', 'Assign', 'Return']), ('decorator_list', [])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Name', 'Str', 'Name', 'Name', 'Name'])]": 1, "If -> [('test', 'Call'), ('body', ['If', 'Assign']), ('orelse', [])]": 10, "For -> [('target', 'Name'), ('iter', 'Tuple'), ('body', ['For', 'Expr', 'Expr']), ('orelse', [])]": 2, "Call -> [('func', 'Name'), ('args', ['Call']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'Name')]": 2, "Call -> [('func', 'Attribute'), ('args', []), ('keywords', []), ('starargs', 'Subscript'), ('kwargs', 'Name')]": 10, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 2, "If -> [('test', 'BoolOp'), ('body', ['Expr', 'If', 'Assign']), ('orelse', [])]": 3, "Print -> [('dest', 'NoneType'), ('values', ['Name', 'Name', 'Str']), ('nl', 'bool')]": 4, "If -> [('test', 'BoolOp'), ('body', ['Import', 'Assign', 'Expr', 'Assign', 'Assign']), ('orelse', [])]": 1, "Tuple -> [('elts', ['Name', 'Attribute', 'Name', 'Name']), ('ctx', 'Load')]": 1, "ExceptHandler -> [('type', 'Name'), ('name', 'Name'), ('body', ['Print', 'Assign', 'Continue'])]": 2, "ExtSlice -> [('dims', ['Slice', 'Index'])]": 516, "Call -> [('func', 'Attribute'), ('args', ['Call', 'BinOp', 'Num', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'TryExcept', 'If', 'Assign', 'Assign', 'If', 'TryExcept', 'Assign', 'TryExcept', 'Assign', 'If', 'Expr', 'If', 'Return']), ('decorator_list', ['Name', 'Name', 'Call', 'Call'])]": 1, "Tuple -> [('elts', ['Subscript', 'Name', 'Name', 'Name', 'Name']), ('ctx', 'Load')]": 2, "If -> [('test', 'Call'), ('body', ['ImportFrom', 'Assign', 'Expr', 'Expr']), ('orelse', [])]": 1, "Dict -> [('keys', ['Str']), ('values', ['Lambda'])]": 1, "TryExcept -> [('body', ['Assign', 'Expr', 'If']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 1, "Module -> [('body', ['Import', 'ImportFrom', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'Import', 'ClassDef'])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'For', 'For']), ('orelse', [])]": 1, "Tuple -> [('elts', ['Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple']), ('ctx', 'Load')]": 6, "If -> [('test', 'Call'), ('body', ['Assign', 'Assign', 'If']), ('orelse', ['Expr'])]": 1, "Tuple -> [('elts', ['Num', 'List']), ('ctx', 'Load')]": 4, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'If', 'Assign', 'Expr']), ('orelse', [])]": 5, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'ImportFrom', 'Import', 'ClassDef', 'ClassDef', 'ClassDef', 'Assign', 'ClassDef', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'If'])]": 1, "If -> [('test', 'Attribute'), ('body', ['Assign']), ('orelse', ['If'])]": 8, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'Assign', 'Expr', 'Expr', 'Assign', 'While', 'If']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assert', 'Assert', 'Assign', 'Assign', 'Delete', 'If', 'Assign', 'If', 'If', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]": 2, "ClassDef -> [('name', 'str'), ('bases', []), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "If -> [('test', 'Call'), ('body', ['Expr']), ('orelse', ['Assign', 'Expr'])]": 2, "TryExcept -> [('body', ['ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 1, "Slice -> [('lower', 'BinOp'), ('upper', 'NoneType'), ('step', 'NoneType')]": 74, "If -> [('test', 'Compare'), ('body', ['If', 'TryExcept', 'If', 'Expr', 'TryExcept', 'TryExcept', 'Expr', 'Expr']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assert', 'Assert', 'Assign', 'Assert']), ('decorator_list', [])]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'TryExcept', 'Assign', 'Expr', 'Expr', 'Return']), ('decorator_list', [])]": 2, "BoolOp -> [('op', 'And'), ('values', ['Compare', 'Call', 'Call'])]": 2, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign']), ('orelse', [])]": 75, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'With', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "Slice -> [('lower', 'Attribute'), ('upper', 'NoneType'), ('step', 'NoneType')]": 18, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'TryExcept', 'If']), ('decorator_list', [])]": 1, "Tuple -> [('elts', ['Str', 'Call', 'Dict', 'Str']), ('ctx', 'Load')]": 3, "If -> [('test', 'Call'), ('body', ['Expr', 'For']), ('orelse', [])]": 2, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Expr', 'Expr', 'Expr', 'Expr']), ('orelse', [])]": 1, "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'TryExcept', 'TryExcept', 'ClassDef', 'ClassDef', 'ClassDef'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 14, "If -> [('test', 'BoolOp'), ('body', ['For', 'Assign']), ('orelse', [])]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'For', 'Expr', 'For']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'FunctionDef', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 28, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assert', 'FunctionDef', 'Expr']), ('decorator_list', [])]": 1, "If -> [('test', 'Name'), ('body', ['Assign', 'Return']), ('orelse', ['Raise'])]": 1, "comprehension -> [('target', 'Name'), ('iter', 'Name'), ('ifs', ['UnaryOp'])]": 13, "Module -> [('body', ['Import', 'Import', 'TryExcept', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'ImportFrom', 'Import', 'If', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ImportFrom', 'ImportFrom', 'ImportFrom'])]": 1, "IfExp -> [('test', 'UnaryOp'), ('body', 'Name'), ('orelse', 'Name')]": 1, "If -> [('test', 'Compare'), ('body', ['Assert', 'Assign']), ('orelse', [])]": 1, "Raise -> [('type', 'Subscript'), ('inst', 'NoneType'), ('tback', 'NoneType')]": 1, "List -> [('elts', ['Str', 'Str', 'Attribute']), ('ctx', 'Load')]": 3, "ExceptHandler -> [('type', 'Tuple'), ('name', 'NoneType'), ('body', ['Print', 'Expr'])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Num', 'Str', 'Name'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'Assert', 'Assign', 'Assert', 'Expr']), ('decorator_list', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Attribute', 'Attribute', 'Attribute']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Print', 'Expr']), ('decorator_list', [])]": 1, "If -> [('test', 'Attribute'), ('body', ['Assign', 'Expr', 'Expr', 'Expr']), ('orelse', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', []), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 3, "Call -> [('func', 'Name'), ('args', ['Attribute', 'Attribute']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'Name')]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Attribute', 'Attribute', 'Attribute', 'Attribute', 'Dict'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Expr', 'Expr', 'If']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'TryExcept', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assert', 'Return']), ('decorator_list', ['Name'])]": 2, "BinOp -> [('left', 'BinOp'), ('op', 'Div'), ('right', 'Attribute')]": 15, "TryExcept -> [('body', ['TryExcept']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 4, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Assign', 'If', 'If', 'Assign', 'Assign', 'Assign', 'ClassDef', 'ClassDef', 'ClassDef', 'If'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Print', 'Assign', 'Assign']), ('decorator_list', ['Name', 'Attribute'])]": 4, "If -> [('test', 'Compare'), ('body', ['Assign', 'Expr', 'Expr', 'Assign']), ('orelse', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Expr', 'Expr', 'Expr', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'Name'), ('body', ['Expr', 'Expr', 'Assign', 'Expr', 'If', 'If']), ('orelse', ['Expr', 'Expr'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'FunctionDef', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign']), ('orelse', ['Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign'])]": 1, "If -> [('test', 'UnaryOp'), ('body', ['Raise']), ('orelse', ['Return'])]": 3, "Call -> [('func', 'Attribute'), ('args', ['Num', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 65, "Call -> [('func', 'Name'), ('args', ['Call', 'Name', 'Name', 'Name', 'Name', 'Call', 'Call', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['TryExcept', 'Assign', 'Assign', 'Assign', 'Expr', 'For', 'For', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'If', 'Assign', 'If', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'TryExcept', 'If', 'Assign', 'Assign', 'Assign', 'If']), ('decorator_list', [])]": 1, "If -> [('test', 'Name'), ('body', ['Assign', 'If', 'Expr']), ('orelse', ['Assign', 'Expr', 'For'])]": 1, "TryExcept -> [('body', ['Assign', 'Expr']), ('handlers', ['ExceptHandler', 'ExceptHandler']), ('orelse', [])]": 3, "If -> [('test', 'Name'), ('body', ['If', 'If']), ('orelse', ['If', 'If', 'Assign'])]": 1, "List -> [('elts', ['Attribute']), ('ctx', 'Load')]": 125, "If -> [('test', 'Name'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Expr']), ('orelse', [])]": 1, "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['Assign', 'Assign', 'Print'])]": 3, "ExceptHandler -> [('type', 'Attribute'), ('name', 'NoneType'), ('body', ['AugAssign', 'If', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr'])]": 1, "Call -> [('func', 'Name'), ('args', ['Name', 'Name', 'BinOp', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Call', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'If', 'Expr']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'AugAssign', 'AugAssign']), ('orelse', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Expr', 'If', 'Assign', 'Expr']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'ImportFrom', 'If', 'If', 'Expr', 'If', 'Assign', 'Return']), ('decorator_list', [])]": 2, "ExceptHandler -> [('type', 'Name'), ('name', 'Name'), ('body', ['ImportFrom', 'Assign', 'Expr', 'Expr', 'Expr'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'TryExcept', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['Attribute', 'Attribute', 'Attribute'])]": 13, "TryExcept -> [('body', ['Assign', 'TryExcept']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'For', 'Return']), ('decorator_list', [])]": 4, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 18, "Assign -> [('targets', ['Subscript']), ('value', 'Subscript')]": 262, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assert', 'If', 'Import', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'For', 'FunctionDef', 'Assign', 'If', 'Return']), ('decorator_list', [])]": 1, "For -> [('target', 'Tuple'), ('iter', 'Name'), ('body', ['Assign', 'TryExcept', 'If']), ('orelse', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Subscript'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'If', 'If', 'Assign', 'If', 'If', 'Expr']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'If', 'Return']), ('decorator_list', ['Name'])]": 5, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'If', 'Expr']), ('orelse', [])]": 2, "Dict -> [('keys', ['Attribute']), ('values', ['Call'])]": 6, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 3, "Call -> [('func', 'Attribute'), ('args', ['Str', 'Attribute', 'Attribute', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'For', 'If']), ('decorator_list', [])]": 2, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef']), ('decorator_list', [])]": 1, "Tuple -> [('elts', ['Tuple', 'Attribute']), ('ctx', 'Load')]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "If -> [('test', 'BoolOp'), ('body', ['ImportFrom', 'Assign', 'TryExcept', 'Assign', 'Expr']), ('orelse', [])]": 1, "keyword -> [('arg', 'str'), ('value', 'Str')]": 3926, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'TryExcept', 'Assign', 'Assign']), ('decorator_list', [])]": 1, "Call -> [('func', 'Name'), ('args', []), ('keywords', ['keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 164, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'ImportFrom', 'FunctionDef', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'TryExcept']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'TryFinally']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'If', 'If', 'If', 'For', 'If', 'Assign', 'If', 'Assign', 'Return']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['BoolOp']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 4, "Dict -> [('keys', ['Str', 'Str']), ('values', ['BinOp', 'Call'])]": 2, "List -> [('elts', ['Str', 'Subscript', 'Str', 'Call', 'Str', 'Call', 'Str', 'Call']), ('ctx', 'Load')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'TryFinally', 'Return']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Attribute']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'Name')]": 2, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'ClassDef', 'ClassDef', 'If'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "Dict -> [('keys', ['Name']), ('values', ['Num'])]": 2, "comprehension -> [('target', 'Name'), ('iter', 'Subscript'), ('ifs', [])]": 78, "If -> [('test', 'Compare'), ('body', ['Assert']), ('orelse', [])]": 3, "ExceptHandler -> [('type', 'Tuple'), ('name', 'Name'), ('body', ['Expr', 'Expr', 'Expr', 'AugAssign'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'TryExcept', 'If', 'If', 'Expr', 'For', 'Assign', 'Assign', 'Assign', 'If']), ('decorator_list', [])]": 1, "BinOp -> [('left', 'Call'), ('op', 'Add'), ('right', 'IfExp')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'For', 'Expr']), ('decorator_list', [])]": 3, "BoolOp -> [('op', 'And'), ('values', ['Subscript', 'Compare'])]": 7, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Assign']), ('orelse', [])]": 9, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'If', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['FunctionDef', 'Assign', 'FunctionDef']), ('decorator_list', [])]": 1, "TryExcept -> [('body', ['If', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Expr', 'If', 'If', 'Assign', 'Expr', 'If', 'Return']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 1, "If -> [('test', 'UnaryOp'), ('body', ['Return']), ('orelse', ['FunctionDef', 'Return'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'For', 'For']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Assign', 'Assign', 'AugAssign', 'Expr', 'Expr']), ('orelse', [])]": 1, "If -> [('test', 'Call'), ('body', ['Assign', 'For', 'Expr', 'TryExcept', 'Assign', 'For']), ('orelse', [])]": 1, "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['Import', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign'])]": 1, "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['Assign', 'Expr', 'Assign', 'Expr']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'TryExcept', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['For', 'Delete']), ('orelse', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'For', 'If', 'Return']), ('decorator_list', [])]": 1, "Compare -> [('left', 'Name'), ('ops', ['Eq']), ('comparators', ['List'])]": 10, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'If', 'If', 'If']), ('decorator_list', [])]": 1, "If -> [('test', 'BoolOp'), ('body', ['While', 'Expr']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'For', 'If', 'If', 'If', 'If', 'Return']), ('decorator_list', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Num', 'BinOp', 'Tuple']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 5, "If -> [('test', 'Name'), ('body', ['Expr', 'AugAssign', 'AugAssign']), ('orelse', [])]": 1, "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['If', 'Break'])]": 1, "List -> [('elts', ['Num', 'Name']), ('ctx', 'Load')]": 1, "Call -> [('func', 'Name'), ('args', ['Num', 'Name', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "If -> [('test', 'Call'), ('body', ['TryExcept']), ('orelse', ['TryExcept'])]": 2, "Call -> [('func', 'Attribute'), ('args', ['Str', 'Name', 'Name']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'For', 'Return']), ('decorator_list', [])]": 17, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'If', 'If', 'Assign', 'Expr']), ('orelse', [])]": 2, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'For']), ('orelse', [])]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Import', 'If', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Return']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Str', 'Attribute', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 5, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'ClassDef']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Expr', 'Assign', 'Assign', 'Assert', 'Assign', 'Assert', 'Assert', 'Assert', 'If', 'If', 'Assign', 'Assert']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'TryExcept', 'Assign', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "Tuple -> [('elts', ['BinOp', 'BinOp']), ('ctx', 'Load')]": 77, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Name', 'Call', 'Str', 'Str'])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str']), ('values', ['Call', 'BoolOp', 'Str', 'Call'])]": 4, "TryExcept -> [('body', ['For']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 15, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assert', 'Assign', 'Assign', 'Assert']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'For', 'If', 'If', 'Expr']), ('decorator_list', [])]": 1, "GeneratorExp -> [('elt', 'Name'), ('generators', ['comprehension'])]": 19, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assert', 'Assign', 'Assert']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', ['Name'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'If', 'TryExcept', 'Assign', 'If', 'If', 'If', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'Attribute'), ('body', ['Assign', 'Assign', 'Expr', 'Assign', 'Expr']), ('orelse', [])]": 1, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign'])]": 1, "TryExcept -> [('body', ['Assign', 'Assign', 'If', 'If', 'If']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 1, "If -> [('test', 'Call'), ('body', ['For', 'For', 'Break']), ('orelse', [])]": 1, "ExceptHandler -> [('type', 'NoneType'), ('name', 'NoneType'), ('body', ['Print', 'Import', 'Expr'])]": 1, "List -> [('elts', ['Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute']), ('ctx', 'Load')]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Assign', 'TryExcept', 'Expr', 'Print', 'Assign', 'For', 'For']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['For', 'Assign']), ('decorator_list', [])]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Attribute', 'Name', 'Name', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Tuple', 'Call', 'BinOp', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "While -> [('test', 'Name'), ('body', ['Assign', 'While', 'If', 'Assign', 'If']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'If', 'TryExcept', 'Assign', 'For', 'If', 'Return']), ('decorator_list', [])]": 2, "Call -> [('func', 'Name'), ('args', ['Name', 'Num', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 5, "UnaryOp -> [('op', 'USub'), ('operand', 'Attribute')]": 47, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'Assign', 'ClassDef'])]": 1, "ClassDef -> [('name', 'str'), ('bases', []), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 7, "BinOp -> [('left', 'BinOp'), ('op', 'BitAnd'), ('right', 'Call')]": 5, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Name', 'Name']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'Name')]": 1, "Raise -> [('type', 'Call'), ('inst', 'Name'), ('tback', 'Subscript')]": 1, "If -> [('test', 'BoolOp'), ('body', ['For', 'Raise']), ('orelse', [])]": 2, "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef'])]": 1, "For -> [('target', 'Name'), ('iter', 'List'), ('body', ['Assign', 'If']), ('orelse', [])]": 4, "BoolOp -> [('op', 'Or'), ('values', ['Name', 'Compare'])]": 10, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'If', 'If', 'Assign']), ('orelse', [])]": 2, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Return']), ('orelse', [])]": 1, "If -> [('test', 'Name'), ('body', ['Assign', 'If', 'For']), ('orelse', [])]": 1, "If -> [('test', 'Attribute'), ('body', ['Continue']), ('orelse', ['If'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign']), ('decorator_list', ['Name'])]": 2, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef'])]": 1, "Call -> [('func', 'Name'), ('args', ['Str', 'Tuple']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 16, "Call -> [('func', 'Attribute'), ('args', ['Str', 'Call', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 15, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'For', 'For', 'Return']), ('decorator_list', [])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Attribute', 'BoolOp', 'Subscript', 'BoolOp', 'Subscript'])]": 1, "Tuple -> [('elts', ['Call', 'Attribute', 'Attribute', 'Call']), ('ctx', 'Load')]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Name', 'Num', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 3, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'FunctionDef', 'FunctionDef', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'If', 'Expr', 'If', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'For', 'For']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name']), ('keywords', ['keyword']), ('starargs', 'Name'), ('kwargs', 'Name')]": 19, "If -> [('test', 'Call'), ('body', ['Return']), ('orelse', ['Expr'])]": 2, "ClassDef -> [('name', 'str'), ('bases', ['Attribute', 'Attribute']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Expr', 'Assign']), ('orelse', [])]": 1, "If -> [('test', 'Name'), ('body', ['Assign', 'If', 'Assign', 'Assign', 'Assert', 'If']), ('orelse', ['If'])]": 1, "Call -> [('func', 'Name'), ('args', ['Attribute', 'Attribute']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 4, "List -> [('elts', ['Num']), ('ctx', 'Load')]": 184, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'For']), ('decorator_list', [])]": 3, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Str', 'BinOp', 'Name', 'Name', 'Num', 'Str'])]": 1, "If -> [('test', 'Name'), ('body', ['If', 'AugAssign']), ('orelse', [])]": 1, "If -> [('test', 'Call'), ('body', ['If', 'Expr', 'Expr']), ('orelse', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Expr', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]": 1, "Tuple -> [('elts', ['Attribute', 'Attribute', 'Attribute', 'Attribute']), ('ctx', 'Store')]": 3, "Call -> [('func', 'Attribute'), ('args', ['Str', 'List', 'Attribute']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "TryExcept -> [('body', ['Assign']), ('handlers', ['ExceptHandler']), ('orelse', ['Expr'])]": 15, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Expr']), ('orelse', [])]": 1, "If -> [('test', 'Call'), ('body', ['Assign', 'TryExcept']), ('orelse', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'If', 'If', 'If']), ('decorator_list', [])]": 1, "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Delete', 'Return']), ('orelse', ['If'])]": 1, "Subscript -> [('value', 'Attribute'), ('slice', 'ExtSlice'), ('ctx', 'Store')]": 8, "Tuple -> [('elts', ['Num', 'Name', 'Num', 'Num']), ('ctx', 'Load')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr']), ('decorator_list', ['Name'])]": 19, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Expr', 'Return']), ('decorator_list', [])]": 4, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'If', 'Assign', 'Assign', 'If', 'For', 'For', 'For', 'Return']), ('decorator_list', ['Attribute'])]": 1, "Tuple -> [('elts', ['Call', 'Call', 'Call', 'Call', 'Call', 'Call']), ('ctx', 'Load')]": 13, "ClassDef -> [('name', 'str'), ('bases', []), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', ['Name'])]": 2, "Call -> [('func', 'Name'), ('args', ['Attribute', 'Attribute', 'Name', 'Name', 'Attribute', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Expr', 'For', 'Return']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'Assign', 'Import', 'Assign', 'Assign', 'With']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['UnaryOp', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 7, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'If', 'Expr', 'If', 'Expr']), ('decorator_list', [])]": 2, "If -> [('test', 'Name'), ('body', ['Import', 'Assign', 'FunctionDef', 'Delete']), ('orelse', ['FunctionDef', 'Expr'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'If', 'Assign', 'Return']), ('decorator_list', [])]": 2, "Call -> [('func', 'Name'), ('args', ['Str', 'Subscript']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 8, "If -> [('test', 'Name'), ('body', ['Assign', 'Expr']), ('orelse', ['Assign', 'Expr', 'Expr', 'Expr'])]": 1, "If -> [('test', 'Compare'), ('body', ['Delete', 'Continue']), ('orelse', [])]": 1, "If -> [('test', 'Name'), ('body', ['Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'While', 'Assign', 'If', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'ImportFrom', 'Assign', 'FunctionDef', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 3, "Slice -> [('lower', 'BinOp'), ('upper', 'Num'), ('step', 'NoneType')]": 1, "Tuple -> [('elts', ['Call', 'Name', 'Dict']), ('ctx', 'Load')]": 2, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Attribute', 'Name', 'Tuple']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assert', 'Expr']), ('orelse', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('orelse', [])]": 2, "If -> [('test', 'Compare'), ('body', ['Assign', 'For', 'Expr', 'For', 'Return']), ('orelse', ['If'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'For', 'Assign', 'Assign', 'For', 'Expr']), ('decorator_list', [])]": 1, "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign', 'If']), ('orelse', ['Assign'])]": 1, "BinOp -> [('left', 'UnaryOp'), ('op', 'Sub'), ('right', 'Call')]": 1, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'If', 'ClassDef', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'FunctionDef'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 10, "If -> [('test', 'Compare'), ('body', ['Print', 'Print', 'Raise']), ('orelse', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Attribute', 'BoolOp', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['If', 'If', 'If', 'If']), ('orelse', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Subscript', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 160, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Assign', 'If', 'Assign', 'FunctionDef', 'TryExcept', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Dict']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 42, "BinOp -> [('left', 'BinOp'), ('op', 'BitXor'), ('right', 'BinOp')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Subscript'), ('body', ['Assign', 'TryExcept']), ('orelse', [])]": 1, "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['If', 'Assign', 'Assign', 'Return'])]": 1, "If -> [('test', 'BoolOp'), ('body', ['Continue']), ('orelse', ['Assign'])]": 1, "If -> [('test', 'Call'), ('body', ['If']), ('orelse', [])]": 66, "BinOp -> [('left', 'Name'), ('op', 'FloorDiv'), ('right', 'Num')]": 2, "Call -> [('func', 'Name'), ('args', ['Str', 'Name', 'Call']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "If -> [('test', 'Compare'), ('body', ['Print', 'Assign', 'Assign', 'Assign', 'If', 'If', 'If', 'If']), ('orelse', [])]": 2, "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'TryExcept', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'TryExcept', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'FunctionDef', 'ClassDef'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]": 18, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef']), ('decorator_list', [])]": 1, "While -> [('test', 'Name'), ('body', ['Expr', 'Expr']), ('orelse', [])]": 4, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'For', 'Assign', 'Expr', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['FunctionDef', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'If', 'Global', 'Assign', 'Assign', 'Assign', 'Global', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'FunctionDef', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "If -> [('test', 'UnaryOp'), ('body', ['Expr', 'TryFinally']), ('orelse', [])]": 2, "Call -> [('func', 'Attribute'), ('args', ['Subscript', 'Name', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'For', 'Assign', 'If', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "If -> [('test', 'Name'), ('body', ['If']), ('orelse', ['If', 'Raise'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "With -> [('context_expr', 'Call'), ('optional_vars', 'Name'), ('body', ['Expr', 'Assign', 'Expr'])]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['If', 'If', 'Expr', 'Assign']), ('orelse', [])]": 1, "Tuple -> [('elts', ['Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute']), ('ctx', 'Store')]": 2, "If -> [('test', 'UnaryOp'), ('body', ['ImportFrom', 'If', 'Assign']), ('orelse', [])]": 2, "Dict -> [('keys', ['Name', 'Name', 'Name']), ('values', ['Name', 'Name', 'Attribute'])]": 2, "ClassDef -> [('name', 'str'), ('bases', []), ('body', ['FunctionDef', 'FunctionDef', 'Assign', 'Assign']), ('decorator_list', [])]": 1, "TryExcept -> [('body', ['Assign', 'Return']), ('handlers', ['ExceptHandler', 'ExceptHandler', 'ExceptHandler', 'ExceptHandler', 'ExceptHandler', 'ExceptHandler', 'ExceptHandler']), ('orelse', [])]": 1, "For -> [('target', 'Name'), ('iter', 'List'), ('body', ['Assign', 'If', 'Assign', 'Expr', 'If', 'If', 'Assign', 'For']), ('orelse', [])]": 1, "Assert -> [('test', 'UnaryOp'), ('msg', 'Name')]": 9, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'AugAssign', 'TryFinally']), ('decorator_list', [])]": 5, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 2, "If -> [('test', 'Call'), ('body', ['If', 'For']), ('orelse', [])]": 2, "If -> [('test', 'Compare'), ('body', ['Assign', 'Expr', 'AugAssign']), ('orelse', [])]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 48, "Tuple -> [('elts', ['Name', 'Name', 'Tuple']), ('ctx', 'Load')]": 2, "If -> [('test', 'Compare'), ('body', ['Expr', 'Expr', 'Assign', 'Expr']), ('orelse', ['Expr', 'Return'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'TryExcept', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'For', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'For', 'Expr', 'For', 'Expr', 'Expr', 'Expr', 'Expr']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'Return']), ('decorator_list', ['Name'])]": 2, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Expr', 'ImportFrom', 'ImportFrom', 'Expr', 'Import', 'ClassDef', 'Assign', 'Assign', 'For', 'ClassDef', 'Assign', 'TryExcept', 'Expr', 'While'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assert', 'Assert', 'Assign', 'Assign', 'Assign', 'Assert', 'Assign', 'Assert']), ('decorator_list', [])]": 1, "Exec -> [('body', 'Name'), ('globals', 'Attribute'), ('locals', 'Attribute')]": 1, "Compare -> [('left', 'Subscript'), ('ops', ['Lt']), ('comparators', ['Subscript'])]": 4, "BinOp -> [('left', 'List'), ('op', 'Add'), ('right', 'IfExp')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'Assign', 'If', 'Return']), ('decorator_list', [])]": 4, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'TryExcept', 'Assign', 'FunctionDef', 'Assign', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef'])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'If', 'Expr', 'Assign', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Return']), ('orelse', ['Assign', 'If', 'Return'])]": 1, "While -> [('test', 'Name'), ('body', ['Expr', 'Assign', 'If']), ('orelse', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Name', 'Name', 'Subscript', 'Subscript']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'Name')]": 1, "If -> [('test', 'Call'), ('body', ['Expr', 'Expr', 'Expr']), ('orelse', ['If'])]": 2, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "Module -> [('body', ['Import', 'Assign', 'Expr', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'Import', 'Import', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'For', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'For', 'Expr', 'Assign', 'For', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Expr', 'Assign', 'Assign', 'Assign', 'While'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'If', 'Assign', 'For', 'If', 'Expr', 'Expr', 'Expr', 'If', 'Assign', 'Expr', 'Expr', 'AugAssign', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'If', 'Return']), ('decorator_list', [])]": 1, "AugAssign -> [('target', 'Name'), ('op', 'Add'), ('value', 'Tuple')]": 6, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'TryExcept']), ('decorator_list', [])]": 4, "ClassDef -> [('name', 'str'), ('bases', []), ('body', ['Assign', 'Assign']), ('decorator_list', [])]": 35, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'If']), ('orelse', [])]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'Import', 'Import', 'Assign', 'Assign', 'Assign', 'Assign', 'ClassDef', 'ClassDef', 'If'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'FunctionDef', 'Assign', 'Assign', 'TryExcept', 'Assign']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'If', 'Assign', 'Assign', 'Assign', 'For', 'Return']), ('decorator_list', [])]": 1, "Tuple -> [('elts', ['Name', 'List']), ('ctx', 'Load')]": 7, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "If -> [('test', 'Call'), ('body', ['Assign', 'If']), ('orelse', ['Pass', 'Expr'])]": 1, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['For', 'If']), ('orelse', [])]": 2, "If -> [('test', 'Name'), ('body', ['If']), ('orelse', ['Return'])]": 3, "Call -> [('func', 'Name'), ('args', ['Name', 'Name', 'Name', 'Name']), ('keywords', []), ('starargs', 'Name'), ('kwargs', 'Name')]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Expr', 'Import', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'ClassDef', 'Assign', 'FunctionDef', 'FunctionDef', 'ClassDef', 'Import', 'If', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'If', 'FunctionDef', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'If'])]": 1, "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'For', 'Expr', 'Assign']), ('orelse', [])]": 1, "Module -> [('body', ['Import', 'Assign', 'Expr', 'ImportFrom', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'ImportFrom', 'ImportFrom', 'ClassDef'])]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'Assign', 'For', 'For', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'TryFinally', 'Expr', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'UnaryOp'), ('body', ['Expr']), ('orelse', ['Assign', 'Expr'])]": 2, "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'Import', 'Import', 'Import', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'FunctionDef'])]": 1, "BinOp -> [('left', 'Subscript'), ('op', 'Add'), ('right', 'Num')]": 25, "If -> [('test', 'UnaryOp'), ('body', ['Expr', 'Exec']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'If', 'If', 'Assign', 'If', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'If', 'Assign', 'Expr', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "BinOp -> [('left', 'Attribute'), ('op', 'Mult'), ('right', 'Num')]": 62, "Module -> [('body', ['Import', 'Import', 'Import', 'ImportFrom', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ClassDef', 'ClassDef'])]": 1, "Print -> [('dest', 'Attribute'), ('values', ['Tuple']), ('nl', 'bool')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'ImportFrom', 'Assign', 'For', 'Expr', 'Assign', 'Assign', 'For']), ('decorator_list', [])]": 2, "If -> [('test', 'BoolOp'), ('body', ['Pass']), ('orelse', ['Assign', 'Assign', 'If', 'If'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Global', 'Global', 'If', 'Return']), ('decorator_list', [])]": 1, "Compare -> [('left', 'Subscript'), ('ops', ['Lt']), ('comparators', ['Num'])]": 10, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'If', 'Print', 'Assign', 'Assign', 'Assign', 'Assign']), ('orelse', ['If'])]": 2, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Assign', 'For']), ('orelse', [])]": 7, "BinOp -> [('left', 'Num'), ('op', 'Mult'), ('right', 'Str')]": 6, "TryFinally -> [('body', ['For']), ('finalbody', ['Expr', 'Expr'])]": 2, "List -> [('elts', ['Compare']), ('ctx', 'Load')]": 3, "While -> [('test', 'Compare'), ('body', ['If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign']), ('orelse', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'Assign', 'Assign', 'Expr', 'TryExcept', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Assign', 'If', 'Return']), ('decorator_list', ['Attribute'])]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Expr', 'Assign', 'While']), ('orelse', [])]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'If', 'If', 'Expr']), ('decorator_list', [])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'str'), ('kwarg', 'str'), ('defaults', ['Name', 'Name'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'If', 'For', 'Raise']), ('decorator_list', ['Name'])]": 1, "ClassDef -> [('name', 'str'), ('bases', []), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'ClassDef', 'ClassDef', 'FunctionDef', 'ClassDef', 'FunctionDef', 'ClassDef', 'FunctionDef', 'ClassDef', 'FunctionDef', 'ClassDef', 'FunctionDef', 'ClassDef', 'FunctionDef', 'ClassDef', 'FunctionDef', 'ClassDef', 'FunctionDef', 'ClassDef', 'FunctionDef', 'ClassDef', 'FunctionDef', 'ClassDef', 'FunctionDef', 'ClassDef', 'FunctionDef', 'ClassDef', 'FunctionDef', 'ClassDef', 'FunctionDef', 'ClassDef', 'FunctionDef', 'ClassDef', 'FunctionDef', 'ClassDef', 'FunctionDef', 'ClassDef', 'FunctionDef', 'ClassDef', 'FunctionDef']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['List', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 14, "Mult -> <NULL>": 1817, "Call -> [('func', 'Name'), ('args', ['Str', 'Name', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Return']), ('decorator_list', ['Name', 'Call'])]": 2, "While -> [('test', 'BoolOp'), ('body', ['AugAssign', 'If', 'For']), ('orelse', [])]": 1, "If -> [('test', 'UnaryOp'), ('body', ['Print', 'ImportFrom', 'Expr', 'Print', 'Import', 'Expr']), ('orelse', ['Print'])]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'If', 'Assign', 'Assign', 'Assign', 'Print', 'Print', 'If']), ('orelse', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Name', 'Tuple']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Call -> [('func', 'Attribute'), ('args', ['Tuple', 'Tuple', 'Call', 'Call', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Call', 'Call', 'Tuple', 'Call', 'Call', 'Call', 'Call', 'Call', 'Tuple', 'Call', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Call', 'Call', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Call', 'Call', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Call', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Call', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Call', 'Call', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Call', 'Call', 'Call', 'Call', 'Call', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Call', 'Tuple', 'Call', 'Tuple', 'Tuple', 'Call', 'Call', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Call', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Call', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Call', 'Call', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Call', 'Call', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Call', 'Call', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Call', 'Call', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Call', 'Call', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Call', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Call', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Call', 'Tuple', 'Call', 'Call', 'Tuple', 'Tuple', 'Tuple', 'Call', 'Call', 'Call', 'Tuple', 'Call', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Call', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Call', 'Call', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Call', 'Call', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Call', 'Call', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Call', 'Call', 'Call', 'Call', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Call', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Call', 'Tuple', 'Tuple', 'Tuple', 'Call', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "If -> [('test', 'Name'), ('body', ['Assign', 'Assign', 'If']), ('orelse', ['Assign', 'Assign'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'For', 'Assign', 'For']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Attribute']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 39, "Call -> [('func', 'Attribute'), ('args', []), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Call -> [('func', 'Name'), ('args', ['Attribute', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 48, "If -> [('test', 'Name'), ('body', ['If', 'Expr', 'Return']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'TryExcept']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Str', 'Dict']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "If -> [('test', 'Compare'), ('body', ['Expr', 'If', 'Expr']), ('orelse', [])]": 1, "Slice -> [('lower', 'Num'), ('upper', 'UnaryOp'), ('step', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'With']), ('decorator_list', ['Name'])]": 2, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Expr', 'Assign', 'For']), ('orelse', [])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str']), ('values', ['Attribute', 'Attribute', 'Name', 'Name'])]": 1, "Call -> [('func', 'Name'), ('args', ['Subscript']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 858, "For -> [('target', 'Tuple'), ('iter', 'List'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr']), ('orelse', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Expr']), ('orelse', ['Expr', 'Expr'])]": 5, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'AugAssign', 'Assign', 'Expr', 'If', 'Expr']), ('decorator_list', [])]": 1, "If -> [('test', 'Subscript'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'Assign']), ('orelse', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'If', 'Expr', 'For', 'Return']), ('orelse', ['If'])]": 1, "Name -> [('id', 'str'), ('ctx', 'Store')]": 60649, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'TryExcept', 'Return']), ('orelse', ['If', 'Raise'])]": 1, "If -> [('test', 'Call'), ('body', ['If', 'Expr']), ('orelse', [])]": 6, "If -> [('test', 'Call'), ('body', ['Assign', 'Expr']), ('orelse', ['Expr'])]": 1, "BoolOp -> [('op', 'And'), ('values', ['Num', 'Compare'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'TryExcept', 'Expr', 'Assign', 'If', 'If', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'Expr', 'Expr', 'If', 'If', 'If']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'TryExcept', 'If', 'Expr', 'Return']), ('decorator_list', ['Name', 'Name', 'Call'])]": 3, "TryExcept -> [('body', ['With', 'Assign', 'Assign', 'Assign', 'If']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Num', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 9, "Tuple -> [('elts', ['Call', 'Subscript', 'Call']), ('ctx', 'Load')]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]": 3, "Call -> [('func', 'Name'), ('args', ['BinOp', 'BinOp', 'BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['Name', 'Attribute', 'BoolOp'])]": 10, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Str', 'Tuple', 'Name', 'Tuple', 'Dict', 'Num', 'Tuple', 'Num'])]": 9, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['FunctionDef']), ('decorator_list', [])]": 217, "For -> [('target', 'Name'), ('iter', 'Subscript'), ('body', ['If']), ('orelse', ['Assert'])]": 1, "GeneratorExp -> [('elt', 'Compare'), ('generators', ['comprehension'])]": 3, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'ImportFrom', 'Import', 'Assign', 'ImportFrom', 'Import', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef'])]": 1, "If -> [('test', 'Name'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'For']), ('orelse', [])]": 1, "If -> [('test', 'Call'), ('body', ['Expr', 'Delete']), ('orelse', [])]": 2, "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign', 'Assign', 'For', 'If', 'Assign', 'If']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'TryExcept', 'Assign', 'If', 'If', 'If']), ('decorator_list', [])]": 1, "If -> [('test', 'UnaryOp'), ('body', ['TryExcept']), ('orelse', ['Assign'])]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'For']), ('decorator_list', ['Name'])]": 2, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Str', 'Name', 'Num', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name'])]": 1, "If -> [('test', 'Compare'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'If', 'Expr', 'Assign', 'Delete']), ('orelse', ['Assign', 'Expr'])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name', 'Name']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'Assign', 'FunctionDef', 'ClassDef']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'While']), ('decorator_list', [])]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'For', 'For', 'Assign', 'Assign', 'TryExcept']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'Assign', 'Assign', 'TryExcept', 'Assign', 'Assign']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['If', 'If', 'If', 'If', 'If', 'If', 'If']), ('orelse', [])]": 1, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'ClassDef'])]": 1, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'For', 'AugAssign']), ('orelse', [])]": 3, "IfExp -> [('test', 'Name'), ('body', 'ListComp'), ('orelse', 'List')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assert', 'Assert', 'Assign', 'Assert', 'Assert', 'Assert', 'Assert', 'Assert', 'Assert', 'Assert', 'Assert', 'Assert', 'Assign', 'Assign', 'Assign', 'Assert', 'Assert', 'Assert', 'Assign', 'Assign', 'Assign', 'Assert', 'Assert', 'Assert']), ('decorator_list', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Lambda', 'Tuple']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'FunctionDef', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Attribute', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 27, "Call -> [('func', 'Name'), ('args', ['BinOp', 'Num', 'BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "If -> [('test', 'Compare'), ('body', ['Import', 'Assign', 'Assign']), ('orelse', ['Assign'])]": 1, "If -> [('test', 'Name'), ('body', ['Assign', 'Assign', 'Return']), ('orelse', [])]": 2, "Call -> [('func', 'Subscript'), ('args', []), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'Name')]": 1, "If -> [('test', 'BinOp'), ('body', ['Assign']), ('orelse', ['If'])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name', 'Name']), ('body', ['Expr', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Global', 'Assign', 'If', 'If', 'If', 'Expr', 'Assign', 'If', 'Assign', 'If', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'If', 'Expr', 'For', 'For', 'Expr', 'Expr', 'Return']), ('decorator_list', [])]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'ImportFrom', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'If'])]": 1, "TryExcept -> [('body', ['Exec']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 3, "Call -> [('func', 'Name'), ('args', ['Name', 'Name', 'Name']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'Name')]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Assign', 'Assign', 'TryFinally']), ('orelse', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'TryExcept', 'Assign', 'If', 'Return']), ('decorator_list', [])]": 2, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Str', 'Str', 'Name', 'Name', 'Str', 'Name', 'Name', 'Name', 'Name', 'Name', 'Str', 'Name', 'Name'])]": 2, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Str', 'Call', 'Call', 'Call', 'Name'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Print', 'TryExcept', 'If']), ('decorator_list', [])]": 1, "If -> [('test', 'Call'), ('body', ['If', 'Expr']), ('orelse', ['Expr'])]": 4, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]": 1, "If -> [('test', 'Call'), ('body', ['If', 'Expr', 'Assign']), ('orelse', ['AugAssign'])]": 1, "Call -> [('func', 'Name'), ('args', []), ('keywords', []), ('starargs', 'Call'), ('kwargs', 'NoneType')]": 24, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'If', 'Print', 'Assign', 'Return']), ('decorator_list', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Attribute', 'Dict', 'Dict', 'List']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "ExceptHandler -> [('type', 'Attribute'), ('name', 'NoneType'), ('body', ['For'])]": 1, "TryFinally -> [('body', ['Assign', 'If']), ('finalbody', ['Expr'])]": 1, "BinOp -> [('left', 'Subscript'), ('op', 'Pow'), ('right', 'Num')]": 29, "BoolOp -> [('op', 'And'), ('values', ['UnaryOp', 'Name', 'Compare'])]": 2, "If -> [('test', 'Compare'), ('body', ['Assign', 'If']), ('orelse', ['Assign', 'Expr'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['Str', 'Str', 'List'])]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'If', 'Assign', 'Assign', 'For', 'Delete', 'Return']), ('decorator_list', [])]": 2, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "If -> [('test', 'Call'), ('body', ['Assign', 'For']), ('orelse', [])]": 9, "Module -> [('body', ['Import', 'Assign', 'Expr', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'For', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'For', 'Assign', 'For', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Expr', 'Expr'])]": 1, "Call -> [('func', 'Name'), ('args', ['Name', 'Call', 'BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'If', 'If', 'Assign', 'Assign', 'For', 'If']), ('decorator_list', [])]": 1, "BinOp -> [('left', 'List'), ('op', 'Mult'), ('right', 'Name')]": 75, "If -> [('test', 'Compare'), ('body', ['Assign', 'If', 'Assign', 'Assign', 'Assign']), ('orelse', ['Raise'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Str', 'Str', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 87, "Call -> [('func', 'Name'), ('args', ['Tuple', 'BinOp', 'BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str']), ('values', ['Str', 'Str', 'Str', 'Name'])]": 1, "ExceptHandler -> [('type', 'Tuple'), ('name', 'NoneType'), ('body', ['Print'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'TryExcept', 'Assign', 'Assign', 'If', 'If', 'Assign', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'Name'), ('body', ['ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign']), ('orelse', [])]": 2, "Module -> [('body', ['Import', 'ImportFrom', 'Import', 'Import', 'ImportFrom', 'Import', 'Import', 'Import', 'ClassDef'])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name'])]": 3, "While -> [('test', 'BoolOp'), ('body', ['Expr']), ('orelse', [])]": 3, "Tuple -> [('elts', ['Attribute', 'Name', 'Call']), ('ctx', 'Load')]": 3, "If -> [('test', 'UnaryOp'), ('body', ['Assign']), ('orelse', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign'])]": 1, "While -> [('test', 'Name'), ('body', ['Assign', 'TryExcept']), ('orelse', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'Assign', 'Return']), ('decorator_list', [])]": 3, "Print -> [('dest', 'NoneType'), ('values', ['Str', 'Call']), ('nl', 'bool')]": 23, "Exec -> [('body', 'Name'), ('globals', 'Attribute'), ('locals', 'NoneType')]": 1, "If -> [('test', 'Compare'), ('body', ['Import', 'FunctionDef']), ('orelse', ['Assign'])]": 1, "While -> [('test', 'Name'), ('body', ['While', 'Expr']), ('orelse', [])]": 1, "ExceptHandler -> [('type', 'Attribute'), ('name', 'Name'), ('body', ['If', 'Raise'])]": 1, "BoolOp -> [('op', 'And'), ('values', ['Subscript', 'UnaryOp'])]": 8, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('orelse', [])]": 1, "If -> [('test', 'Call'), ('body', ['Assign']), ('orelse', ['Continue'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'If', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Expr', 'Assign', 'For', 'Expr']), ('orelse', ['Assign', 'Expr', 'Expr'])]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Print', 'Assign']), ('orelse', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Expr', 'If', 'For', 'If']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Return']), ('decorator_list', [])]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 6, "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Expr']), ('orelse', [])]": 2, "Compare -> [('left', 'BinOp'), ('ops', ['Gt']), ('comparators', ['Attribute'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Import', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'TryExcept', 'Assign', 'Assign', 'TryExcept', 'Assign', 'Assign', 'Expr', 'Assign', 'Return']), ('decorator_list', [])]": 1, "Return -> [('value', 'BinOp')]": 644, "arguments -> [('args', ['Name', 'Name', 'Name', 'Tuple', 'Tuple', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', [])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str']), ('values', ['List', 'Num', 'Num', 'Name'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 3, "Module -> [('body', ['Expr', 'Import', 'Import', 'Import', 'Import', 'Import', 'Assign', 'Assign', 'Assign', 'ClassDef', 'ClassDef', 'Assign', 'Assign', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'ClassDef', 'FunctionDef', 'ClassDef', 'FunctionDef', 'FunctionDef'])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['BinOp', 'Str', 'Str', 'Name', 'Name'])]": 1, "If -> [('test', 'UnaryOp'), ('body', ['If', 'Assign']), ('orelse', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Pass']), ('decorator_list', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Compare', 'Compare', 'Compare']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 3, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Assign', 'Assign', 'Assign', 'FunctionDef']), ('decorator_list', [])]": 5, "Dict -> [('keys', ['Str', 'Str']), ('values', ['Name', 'Num'])]": 5, "Call -> [('func', 'Name'), ('args', ['Name', 'Name', 'BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Call -> [('func', 'Attribute'), ('args', ['Call', 'Name', 'Name', 'Call', 'IfExp']), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'Assign']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'For', 'Assign']), ('orelse', [])]": 3, "Call -> [('func', 'Attribute'), ('args', ['Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'Dict')]": 1, "ExceptHandler -> [('type', 'Attribute'), ('name', 'Tuple'), ('body', ['Expr', 'Assign', 'Expr'])]": 1, "If -> [('test', 'Name'), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef']), ('orelse', ['FunctionDef', 'FunctionDef', 'FunctionDef'])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign']), ('orelse', ['Assign'])]": 23, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['BinOp', 'Str', 'Str', 'Str', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'For']), ('decorator_list', [])]": 2, "For -> [('target', 'Tuple'), ('iter', 'Attribute'), ('body', ['If']), ('orelse', [])]": 11, "If -> [('test', 'Attribute'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'Expr']), ('orelse', ['Assign', 'Expr'])]": 1, "Tuple -> [('elts', ['Name', 'Attribute']), ('ctx', 'Load')]": 82, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assert', 'ImportFrom', 'Return']), ('decorator_list', [])]": 2, "Call -> [('func', 'Name'), ('args', ['Str', 'Name', 'Call', 'Num', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Str', 'Str', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 51, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'TryExcept', 'Expr', 'Expr']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'If', 'Assign', 'If', 'If', 'Expr', 'Return']), ('decorator_list', [])]": 1, "Module -> [('body', ['ImportFrom', 'Assign', 'Print', 'Assign', 'Assign', 'Print'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'For', 'Return']), ('decorator_list', [])]": 1, "keyword -> [('arg', 'str'), ('value', 'Tuple')]": 490, "BinOp -> [('left', 'ListComp'), ('op', 'Add'), ('right', 'BinOp')]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Name', 'Name', 'Str', 'Name', 'Num', 'Num', 'Name', 'Name', 'Name'])]": 1, "BoolOp -> [('op', 'Or'), ('values', ['Compare', 'BoolOp', 'Compare'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'Assign', 'If', 'If', 'If', 'If', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'UnaryOp'), ('body', ['Assign']), ('orelse', ['Assign', 'Assign'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Return']), ('decorator_list', ['Call', 'Name'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Name', 'Str', 'List']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Call -> [('func', 'Attribute'), ('args', ['Call']), ('keywords', ['keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 35, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'ImportFrom', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Assert', 'Return']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Expr', 'TryExcept']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', ['Name'])]": 1, "Call -> [('func', 'Name'), ('args', ['Num', 'BinOp', 'BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "Call -> [('func', 'Str'), ('args', ['Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Assign', 'FunctionDef', 'Expr', 'If', 'For']), ('orelse', [])]": 1, "While -> [('test', 'Name'), ('body', ['AugAssign', 'Assign', 'If', 'AugAssign']), ('orelse', [])]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'FunctionDef', 'Assign', 'For', 'For', 'If', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'For', 'For'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Call', 'List', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['TryExcept', 'Assign', 'For', 'Return']), ('decorator_list', [])]": 1, "Module -> [('body', ['Import', 'ImportFrom', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef'])]": 1, "If -> [('test', 'Compare'), ('body', ['Expr', 'Expr', 'Expr', 'Return']), ('orelse', ['Expr', 'Return'])]": 1, "If -> [('test', 'Attribute'), ('body', ['Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'For', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'UnaryOp'), ('body', ['If', 'Assign', 'Assign']), ('orelse', ['Assign'])]": 4, "arguments -> [('args', ['Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Str', 'Num'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'If', 'For', 'Return']), ('decorator_list', [])]": 1, "ListComp -> [('elt', 'Tuple'), ('generators', ['comprehension', 'comprehension'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'For', 'Expr']), ('decorator_list', [])]": 10, "Call -> [('func', 'Attribute'), ('args', ['Num', 'Str']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Name', 'Name', 'Str'])]": 1, "List -> [('elts', ['Call', 'Call', 'Name']), ('ctx', 'Load')]": 7, "For -> [('target', 'Name'), ('iter', 'Subscript'), ('body', ['If']), ('orelse', ['If'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'For']), ('decorator_list', [])]": 18, "If -> [('test', 'Attribute'), ('body', ['Print', 'Expr']), ('orelse', ['If'])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['FunctionDef', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]": 1, "Assert -> [('test', 'Str'), ('msg', 'Compare')]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Num', 'Num'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'TryExcept', 'Return']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Tuple'), ('body', ['Assign', 'Assign', 'Assign', 'Assert']), ('orelse', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'For', 'If', 'Assign', 'If', 'Expr']), ('decorator_list', [])]": 1, "Slice -> [('lower', 'NoneType'), ('upper', 'Call'), ('step', 'NoneType')]": 20, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'If', 'If', 'Expr']), ('decorator_list', [])]": 1, "Tuple -> [('elts', ['Call', 'Str', 'Name', 'Str', 'Name']), ('ctx', 'Load')]": 6, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'While', 'Expr', 'Assign', 'Return']), ('decorator_list', [])]": 1, "Module -> [('body', ['Import', 'Expr', 'Expr', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ImportFrom', 'ClassDef', 'FunctionDef', 'ImportFrom', 'FunctionDef'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['BoolOp', 'Str', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "If -> [('test', 'Name'), ('body', ['Assign', 'Assign', 'Assign', 'Assign']), ('orelse', ['Assign', 'Assign', 'If', 'If', 'Assign', 'Assign', 'Assign'])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Name', 'Attribute'])]": 2, "While -> [('test', 'Name'), ('body', ['Assign', 'Assign', 'If', 'Expr', 'Assign']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 2, "TryExcept -> [('body', ['Return']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 152, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'ImportFrom', 'If', 'ClassDef'])]": 1, "For -> [('target', 'Name'), ('iter', 'BoolOp'), ('body', ['Expr', 'Expr']), ('orelse', [])]": 1, "Expr -> [('value', 'Yield')]": 298, "IfExp -> [('test', 'Compare'), ('body', 'BinOp'), ('orelse', 'Str')]": 3, "If -> [('test', 'Compare'), ('body', ['Assign', 'AugAssign']), ('orelse', ['Assign', 'AugAssign'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'If', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'ClassDef', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Return']), ('orelse', ['FunctionDef', 'Return'])]": 1, "If -> [('test', 'Subscript'), ('body', ['Expr']), ('orelse', ['Return'])]": 1, "BinOp -> [('left', 'Name'), ('op', 'BitAnd'), ('right', 'Attribute')]": 28, "If -> [('test', 'Call'), ('body', ['Expr', 'Expr']), ('orelse', ['Expr', 'Expr'])]": 4, "If -> [('test', 'Call'), ('body', ['Expr', 'Expr', 'Assign', 'If', 'Expr', 'Expr']), ('orelse', ['If'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assert']), ('decorator_list', [])]": 6, "Tuple -> [('elts', ['Call', 'BinOp', 'Name', 'Name', 'Name', 'Call']), ('ctx', 'Load')]": 2, "Module -> [('body', ['Expr', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Print', 'TryExcept', 'Return']), ('decorator_list', [])]": 1, "TryExcept -> [('body', ['Assign', 'Assign', 'Assert']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]": 1, "While -> [('test', 'Call'), ('body', ['If', 'Expr', 'Assign']), ('orelse', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Import', 'FunctionDef', 'Assign', 'Assign', 'Expr', 'For', 'Expr']), ('orelse', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Attribute', 'Name', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Compare -> [('left', 'Name'), ('ops', ['Is']), ('comparators', ['Name'])]": 1069, "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Expr']), ('orelse', ['Assign', 'Expr', 'For'])]": 1, "With -> [('context_expr', 'Call'), ('optional_vars', 'Name'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'While', 'If'])]": 1, "If -> [('test', 'UnaryOp'), ('body', ['Expr', 'If', 'Return']), ('orelse', [])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Name', 'Name', 'Call', 'Name'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "If -> [('test', 'BoolOp'), ('body', ['Import', 'If', 'Expr']), ('orelse', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Print', 'Print', 'Print', 'If', 'Print', 'If', 'Print', 'Assign', 'Return']), ('decorator_list', [])]": 1, "List -> [('elts', ['Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num']), ('ctx', 'Load')]": 8, "While -> [('test', 'Name'), ('body', ['Assign', 'For', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'If']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'For', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Expr', 'Assign']), ('orelse', ['AugAssign'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "BinOp -> [('left', 'Attribute'), ('op', 'BitOr'), ('right', 'Call')]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If']), ('decorator_list', ['Attribute'])]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]": 2, "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['If', 'Assign', 'Return'])]": 1, "Print -> [('dest', 'NoneType'), ('values', ['Str', 'Name', 'Str', 'BinOp', 'Name', 'Str', 'Name']), ('nl', 'bool')]": 1, "Slice -> [('lower', 'Subscript'), ('upper', 'Subscript'), ('step', 'NoneType')]": 2, "If -> [('test', 'Compare'), ('body', ['Expr', 'Assign', 'Break']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'If', 'Expr', 'Assign', 'Expr', 'If']), ('decorator_list', [])]": 1, "BoolOp -> [('op', 'And'), ('values', ['Call', 'BoolOp'])]": 5, "Div -> <NULL>": 876, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Expr', 'Return']), ('decorator_list', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef']), ('decorator_list', [])]": 1, "If -> [('test', 'Attribute'), ('body', ['Import', 'Assign']), ('orelse', ['Assign'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assert', 'Assign', 'Assign', 'Assert']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['Assign', 'TryExcept', 'Assign', 'If', 'If', 'Assign', 'Assign', 'AugAssign', 'Assign', 'Assign', 'Expr']), ('orelse', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assert', 'Return']), ('decorator_list', ['Name'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'For', 'If', 'Assign', 'Assign', 'For', 'If', 'Return']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'BinOp'), ('body', ['For']), ('orelse', [])]": 3, "Assign -> [('targets', ['Name']), ('value', 'Num')]": 1342, "Assign -> [('targets', ['Subscript']), ('value', 'Num')]": 228, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'If'])]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Expr', 'Expr', 'Expr']), ('orelse', [])]": 7, "With -> [('context_expr', 'Call'), ('optional_vars', 'NoneType'), ('body', ['Assign', 'If'])]": 1, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'For']), ('orelse', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Subscript'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'For', 'Expr']), ('orelse', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'For', 'Expr', 'ImportFrom', 'Expr', 'For']), ('decorator_list', [])]": 2, "Compare -> [('left', 'Name'), ('ops', ['GtE']), ('comparators', ['BinOp'])]": 6, "Call -> [('func', 'Attribute'), ('args', ['Call', 'Name', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Call -> [('func', 'Name'), ('args', ['Call', 'Attribute', 'Attribute', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "If -> [('test', 'Name'), ('body', ['Print', 'Print', 'Print']), ('orelse', [])]": 2, "BinOp -> [('left', 'Attribute'), ('op', 'Add'), ('right', 'Str')]": 163, "Call -> [('func', 'Attribute'), ('args', ['Str', 'Name', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "If -> [('test', 'Compare'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr']), ('orelse', [])]": 1, "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign', 'Expr', 'Assign']), ('orelse', ['Assign'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assert']), ('orelse', [])]": 1, "If -> [('test', 'UnaryOp'), ('body', ['Expr', 'Return']), ('orelse', ['Expr'])]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ImportFrom'])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', [])]": 4, "If -> [('test', 'Name'), ('body', ['Assign', 'Expr', 'Assign']), ('orelse', ['Assign'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', ['Call', 'Name', 'Name'])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Num', 'Num', 'Num', 'Num'])]": 2, "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('orelse', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assert', 'If']), ('orelse', [])]": 1, "BinOp -> [('left', 'BinOp'), ('op', 'Add'), ('right', 'Str')]": 572, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'If', 'Assign', 'Assign', 'If', 'If', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'FunctionDef', 'FunctionDef', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "Tuple -> [('elts', ['Tuple', 'Name']), ('ctx', 'Load')]": 5, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'TryExcept', 'Expr', 'Assign', 'For']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assert', 'Expr', 'Expr', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'Name'), ('body', ['Assign', 'If']), ('orelse', ['Assign', 'If'])]": 2, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'If']), ('orelse', [])]": 8, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign']), ('decorator_list', [])]": 162, "If -> [('test', 'Compare'), ('body', ['Import', 'Assign', 'Assign', 'Assign', 'Expr']), ('orelse', [])]": 1, "ExceptHandler -> [('type', 'NoneType'), ('name', 'NoneType'), ('body', ['ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom'])]": 1, "If -> [('test', 'BoolOp'), ('body', ['Continue']), ('orelse', [])]": 67, "Call -> [('func', 'Name'), ('args', ['Tuple']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Assign', 'Print']), ('orelse', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'If', 'If']), ('decorator_list', [])]": 2, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Attribute', 'Attribute', 'Str', 'Str', 'Str'])]": 1, "Call -> [('func', 'Name'), ('args', ['Str', 'Name', 'Name', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "Compare -> [('left', 'Num'), ('ops', ['LtE', 'Lt']), ('comparators', ['Name', 'Name'])]": 2, "Call -> [('func', 'Name'), ('args', ['Lambda', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 11, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'AugAssign', 'Assign', 'Assign', 'Assign', 'For']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 139, "If -> [('test', 'Name'), ('body', ['FunctionDef', 'While']), ('orelse', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Str', 'Str', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 9, "Call -> [('func', 'Name'), ('args', ['Num', 'Str', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 13, "If -> [('test', 'BoolOp'), ('body', ['Expr', 'If']), ('orelse', ['Expr', 'Expr', 'If'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'FunctionDef', 'TryFinally']), ('decorator_list', ['Name'])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Assign', 'ClassDef']), ('decorator_list', [])]": 2, "Tuple -> [('elts', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('ctx', 'Load')]": 8, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'TryExcept', 'TryExcept', 'TryExcept']), ('decorator_list', [])]": 1, "If -> [('test', 'UnaryOp'), ('body', ['Expr']), ('orelse', ['If'])]": 9, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Str', 'Num', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 6, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'ClassDef', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Import', 'Assign', 'Assign', 'Assign', 'Expr', 'For', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'With', 'Return']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Expr', 'FunctionDef', 'Assign', 'Assign', 'FunctionDef', 'Expr']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', ['Name'])]": 1, "Call -> [('func', 'Name'), ('args', ['Str', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 28, "Call -> [('func', 'Name'), ('args', ['Num', 'Num', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 65, "List -> [('elts', ['Str', 'Str', 'Str', 'Dict']), ('ctx', 'Load')]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Call', 'Call', 'Attribute', 'Str', 'Str'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'ImportFrom', 'If', 'Assign', 'Assign', 'Assign', 'For', 'While']), ('decorator_list', [])]": 1, "If -> [('test', 'Name'), ('body', ['Assign', 'Expr', 'Assign', 'Return']), ('orelse', ['Return'])]": 1, "Call -> [('func', 'Name'), ('args', ['Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'Name')]": 9, "TryExcept -> [('body', ['Expr']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 343, "Tuple -> [('elts', ['List', 'List']), ('ctx', 'Load')]": 35, "If -> [('test', 'BoolOp'), ('body', ['Pass']), ('orelse', ['Expr'])]": 4, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'If', 'Assign', 'If', 'Return']), ('decorator_list', [])]": 1, "Call -> [('func', 'Name'), ('args', []), ('keywords', []), ('starargs', 'Name'), ('kwargs', 'Name')]": 67, "BoolOp -> [('op', 'And'), ('values', ['Call', 'Str'])]": 6, "Print -> [('dest', 'NoneType'), ('values', ['Str', 'Name', 'Attribute']), ('nl', 'bool')]": 1, "Call -> [('func', 'Name'), ('args', ['Name', 'Name', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 64, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'If', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'While', 'Return']), ('decorator_list', [])]": 1, "Tuple -> [('elts', ['Str', 'Str', 'Num', 'Num']), ('ctx', 'Load')]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'If', 'If', 'If', 'Assign', 'For', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['TryExcept', 'Expr']), ('orelse', [])]": 1, "comprehension -> [('target', 'Name'), ('iter', 'BoolOp'), ('ifs', ['Compare'])]": 2, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'ImportFrom', 'Global', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'If']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assert', 'If', 'If', 'Return']), ('decorator_list', [])]": 2, "Tuple -> [('elts', ['BinOp', 'Subscript', 'Subscript', 'BoolOp']), ('ctx', 'Load')]": 1, "If -> [('test', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Break']), ('orelse', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'Return']), ('decorator_list', ['Call'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]": 2, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'For', 'Assign', 'Expr', 'Assign', 'Return']), ('decorator_list', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Call', 'Call', 'Call']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['FunctionDef', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 2, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['If', 'TryExcept', 'TryExcept', 'AugAssign']), ('orelse', [])]": 1, "If -> [('test', 'BoolOp'), ('body', ['Expr']), ('orelse', ['If'])]": 23, "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['Print', 'Print', 'Print']), ('orelse', [])]": 1, "If -> [('test', 'BoolOp'), ('body', ['If']), ('orelse', ['Return'])]": 2, "Compare -> [('left', 'Name'), ('ops', ['GtE']), ('comparators', ['Call'])]": 20, "TryExcept -> [('body', ['Assign', 'Expr', 'Assign', 'Assign']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 2, "For -> [('target', 'Tuple'), ('iter', 'Name'), ('body', ['Assign', 'Expr', 'Expr']), ('orelse', [])]": 3, "Call -> [('func', 'Attribute'), ('args', ['Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'Name')]": 3, "Call -> [('func', 'Attribute'), ('args', ['Subscript', 'Name', 'Subscript']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'Expr', 'Expr', 'Expr', 'If']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Expr', 'Expr', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Num'])]": 7, "List -> [('elts', ['Subscript', 'BinOp', 'Subscript']), ('ctx', 'Load')]": 2, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 4, "In -> <NULL>": 1931, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Str', 'Str', 'Str', 'Attribute', 'Str', 'Str'])]": 3, "Module -> [('body', ['Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'Import', 'ClassDef', 'FunctionDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'FunctionDef', 'ClassDef', 'ClassDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'ClassDef'])]": 1, "Tuple -> [('elts', ['Attribute', 'Call', 'Call', 'Call', 'Call']), ('ctx', 'Load')]": 2, "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef'])]": 1, "ClassDef -> [('name', 'str'), ('bases', []), ('body', ['FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 51, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Return']), ('orelse', ['Expr'])]": 1, "TryExcept -> [('body', ['Expr']), ('handlers', ['ExceptHandler', 'ExceptHandler']), ('orelse', ['Expr'])]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Assign', 'Assign']), ('orelse', [])]": 6, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'For', 'Assign', 'Assign', 'If', 'If', 'If']), ('decorator_list', [])]": 2, "Call -> [('func', 'Name'), ('args', ['Name', 'Str', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 224, "Tuple -> [('elts', ['Name', 'Attribute']), ('ctx', 'Store')]": 12, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'ClassDef', 'ClassDef', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 4, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Name', 'Name', 'Num'])]": 1, "If -> [('test', 'Name'), ('body', ['Expr', 'Assign']), ('orelse', ['Expr'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'For', 'For', 'Assign']), ('decorator_list', [])]": 3, "If -> [('test', 'Call'), ('body', ['If', 'Assign', 'Assign', 'Assign', 'Assign', 'Return']), ('orelse', ['If'])]": 1, "If -> [('test', 'Attribute'), ('body', ['Return']), ('orelse', ['Return'])]": 24, "Call -> [('func', 'Attribute'), ('args', ['Name']), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 12, "BinOp -> [('left', 'Subscript'), ('op', 'BitAnd'), ('right', 'Name')]": 8, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'FunctionDef', 'ClassDef', 'FunctionDef', 'ClassDef'])]": 1, "If -> [('test', 'UnaryOp'), ('body', ['TryExcept']), ('orelse', [])]": 17, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'Assign', 'Expr', 'If']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'If', 'TryExcept', 'Assign', 'Expr', 'Assign', 'Assign', 'If', 'Expr', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'For', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'While']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'Expr', 'Expr', 'Expr', 'Print', 'Assign', 'Expr', 'Expr', 'Expr', 'Print']), ('decorator_list', [])]": 2, "If -> [('test', 'Call'), ('body', ['Assign', 'Assign', 'If', 'If']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['If', 'If', 'If']), ('orelse', [])]": 1, "List -> [('elts', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('ctx', 'Load')]": 43, "BinOp -> [('left', 'Attribute'), ('op', 'Sub'), ('right', 'Num')]": 35, "Call -> [('func', 'Attribute'), ('args', ['Subscript', 'Subscript']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 78, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "For -> [('target', 'Tuple'), ('iter', 'Attribute'), ('body', ['FunctionDef', 'Expr']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'TryExcept', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'TryExcept', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "List -> [('elts', ['List', 'List', 'List', 'List', 'List']), ('ctx', 'Load')]": 1, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'AugAssign', 'Expr']), ('orelse', [])]": 6, "While -> [('test', 'Call'), ('body', ['Expr']), ('orelse', [])]": 1, "If -> [('test', 'Name'), ('body', ['Assign', 'Assign', 'Assign', 'Return']), ('orelse', [])]": 5, "TryExcept -> [('body', ['If', 'Assign', 'If']), ('handlers', ['ExceptHandler', 'ExceptHandler']), ('orelse', [])]": 1, "While -> [('test', 'Compare'), ('body', ['Print', 'Assign', 'Expr', 'Expr', 'AugAssign']), ('orelse', [])]": 1, "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef'])]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['For', 'AugAssign', 'Expr', 'Expr', 'Expr', 'Print']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Print', 'If', 'If']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 17, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['If', 'Assign', 'Expr', 'AugAssign']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Expr', 'For', 'Return']), ('decorator_list', [])]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['BinOp', 'List', 'Attribute'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'If', 'If', 'Return']), ('decorator_list', [])]": 2, "Call -> [('func', 'Attribute'), ('args', ['Subscript', 'Subscript', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Import', 'Expr']), ('decorator_list', [])]": 1, "TryExcept -> [('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Assign', 'Assign']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 2, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Str', 'Num', 'Num', 'Name'])]": 1, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['If', 'If', 'Assign', 'Assign', 'Assign', 'TryExcept']), ('orelse', [])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Name', 'Name', 'BoolOp', 'Name', 'Name', 'Name', 'Name', 'Name', 'BoolOp', 'Call', 'Name', 'Name', 'Name'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'ClassDef', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'Assign', 'Import', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "If -> [('test', 'Name'), ('body', ['Import', 'Assign', 'Assign']), ('orelse', [])]": 1, "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Return']), ('orelse', ['If'])]": 5, "BinOp -> [('left', 'Call'), ('op', 'Sub'), ('right', 'Name')]": 51, "For -> [('target', 'Tuple'), ('iter', 'Name'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'Assign', 'If', 'If']), ('orelse', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'For', 'Assign', 'For', 'Expr', 'Expr']), ('decorator_list', ['Name'])]": 1, "While -> [('test', 'Name'), ('body', ['Assign', 'Assign', 'Expr']), ('orelse', [])]": 1, "If -> [('test', 'Name'), ('body', ['Assign', 'Assign', 'Expr']), ('orelse', [])]": 13, "If -> [('test', 'Compare'), ('body', ['If', 'Raise']), ('orelse', [])]": 1, "List -> [('elts', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Num', 'Name']), ('ctx', 'Load')]": 1, "ImportFrom -> [('module', 'str'), ('names', ['alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias']), ('level', 'int')]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Name', 'Subscript', 'Name', 'Name', 'Name'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'For', 'Return']), ('decorator_list', ['Name'])]": 3, "If -> [('test', 'BoolOp'), ('body', ['Assign']), ('orelse', ['Assign', 'AugAssign', 'AugAssign'])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Print', 'Assign', 'Print', 'If', 'Assign', 'Print', 'Assign', 'Print']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'Assign', 'Expr']), ('decorator_list', ['Name', 'Name', 'Name'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'ImportFrom', 'Assign', 'For', 'Return']), ('decorator_list', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Attribute'])]": 1, "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['ImportFrom', 'Raise'])]": 2, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'Assign', 'TryExcept', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]": 1, "ExceptHandler -> [('type', 'NoneType'), ('name', 'NoneType'), ('body', ['Expr'])]": 52, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'Assign', 'Assign', 'For', 'Expr', 'Expr', 'Expr', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Print', 'Print', 'Print', 'Print', 'Print', 'Print', 'Print', 'Print', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Print']), ('decorator_list', [])]": 1, "BoolOp -> [('op', 'And'), ('values', ['Attribute', 'Subscript', 'UnaryOp'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Assign', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "If -> [('test', 'Attribute'), ('body', ['Assign', 'Expr', 'Expr', 'For', 'Expr', 'Expr']), ('orelse', [])]": 1, "IfExp -> [('test', 'Subscript'), ('body', 'Call'), ('orelse', 'Name')]": 1, "If -> [('test', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('orelse', [])]": 1, "Tuple -> [('elts', ['BinOp', 'Name', 'Name']), ('ctx', 'Load')]": 5, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'If', 'If', 'Expr', 'Expr', 'Assign', 'For']), ('decorator_list', [])]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'If'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'TryExcept', 'Expr', 'If', 'Assign', 'If', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'If', 'Expr', 'Expr', 'For', 'If', 'Assign', 'Assign', 'Expr', 'Return']), ('decorator_list', [])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['Str', 'Attribute', 'Name'])]": 1, "While -> [('test', 'UnaryOp'), ('body', ['Assign', 'For']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign']), ('orelse', ['Assign', 'Print'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'Assign', 'Expr', 'Return']), ('decorator_list', ['Name'])]": 1, "TryExcept -> [('body', ['Assign', 'Assign', 'Expr', 'Expr']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'If', 'Assign']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Print', 'Assign', 'Assign', 'Assign', 'Print', 'Print', 'Assign', 'Assign', 'Assign', 'Print', 'Print', 'Assign', 'Assign', 'Assign', 'Print', 'Print', 'Assign', 'Assign', 'Assign', 'Print', 'Print', 'Assign', 'Assign', 'Assign', 'Print']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Expr', 'Expr', 'Assign', 'With']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assert']), ('decorator_list', ['Name'])]": 2, "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'TryExcept', 'Expr', 'Assign']), ('orelse', [])]": 1, "Compare -> [('left', 'Call'), ('ops', ['Is']), ('comparators', ['Attribute'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'AugAssign', 'AugAssign', 'Expr']), ('decorator_list', [])]": 1, "If -> [('test', 'BoolOp'), ('body', ['If', 'For', 'AugAssign']), ('orelse', ['AugAssign'])]": 1, "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'FunctionDef', 'FunctionDef', 'If'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'For']), ('decorator_list', [])]": 1, "BinOp -> [('left', 'Name'), ('op', 'Pow'), ('right', 'Name')]": 6, "BinOp -> [('left', 'Name'), ('op', 'Mult'), ('right', 'Call')]": 42, "Tuple -> [('elts', ['Attribute', 'Compare', 'Str']), ('ctx', 'Load')]": 1, "Call -> [('func', 'Name'), ('args', ['UnaryOp', 'Num', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'ClassDef', 'ClassDef', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'Assign', 'For', 'Return']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign']), ('decorator_list', ['Attribute'])]": 7, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'If', 'Assign', 'Assign', 'If', 'Expr']), ('decorator_list', [])]": 1, "IfExp -> [('test', 'Name'), ('body', 'BinOp'), ('orelse', 'Str')]": 4, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Pass']), ('decorator_list', ['Name', 'Call'])]": 41, "Dict -> [('keys', ['Tuple']), ('values', ['Name'])]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'Expr', 'Return']), ('decorator_list', [])]": 14, "BinOp -> [('left', 'Num'), ('op', 'Pow'), ('right', 'UnaryOp')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'If', 'Assign', 'Assign', 'Assign', 'If', 'Expr', 'If']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Num', 'Call', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "If -> [('test', 'Call'), ('body', ['Assign', 'Assign', 'If', 'If', 'Assign', 'If', 'Assign', 'If', 'If', 'Assign', 'If', 'AugAssign', 'TryExcept', 'Assign', 'Expr', 'If', 'Return']), ('orelse', ['If', 'Return'])]": 2, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'ImportFrom', 'Import', 'Import', 'Import', 'Assign', 'ClassDef', 'ClassDef', 'ClassDef', 'Assign', 'ClassDef', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'ClassDef', 'If'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'If', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Attribute', 'Num', 'Num', 'Num', 'Num', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Attribute', 'Attribute']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'TryExcept', 'If', 'If', 'Expr', 'Expr', 'Assign', 'Print', 'If', 'Print']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Expr', 'Assign']), ('orelse', [])]": 2, "Call -> [('func', 'Attribute'), ('args', ['Str', 'Lambda']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 3, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Num', 'Name', 'Num'])]": 1, "If -> [('test', 'Call'), ('body', ['Assign', 'Assign', 'TryExcept', 'If', 'Expr', 'Assign']), ('orelse', ['Assign'])]": 1, "If -> [('test', 'Name'), ('body', ['Raise']), ('orelse', ['Assign'])]": 8, "Call -> [('func', 'Attribute'), ('args', ['Subscript', 'Name', 'Name', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "ExceptHandler -> [('type', 'Name'), ('name', 'Name'), ('body', ['Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'For', 'Expr'])]": 1, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'Import', 'ClassDef', 'ClassDef', 'ClassDef'])]": 1, "TryExcept -> [('body', ['Assign', 'If', 'Assign', 'Assign']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 2, "ExceptHandler -> [('type', 'Name'), ('name', 'Name'), ('body', ['Assign', 'Raise'])]": 5, "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Delete']), ('orelse', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Str']), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 6, "Assign -> [('targets', ['Attribute', 'Attribute']), ('value', 'Attribute')]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'If']), ('orelse', [])]": 1, "If -> [('test', 'UnaryOp'), ('body', ['Expr', 'Assign']), ('orelse', ['If'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'If', 'Assign', 'If', 'For', 'Return']), ('decorator_list', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Name', 'Name', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 26, "ExceptHandler -> [('type', 'NoneType'), ('name', 'NoneType'), ('body', ['Assign', 'Return'])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Str']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'Assign', 'For', 'Expr']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Print', 'Continue']), ('orelse', [])]": 6, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'str'), ('defaults', ['Str', 'Num', 'Str'])]": 1, "Tuple -> [('elts', ['List', 'Num', 'Name', 'Num', 'Num']), ('ctx', 'Load')]": 6, "TryExcept -> [('body', ['Expr']), ('handlers', ['ExceptHandler']), ('orelse', ['Expr', 'TryExcept'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'For', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'For']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'Assign', 'If']), ('decorator_list', [])]": 1, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['If', 'If', 'If', 'Assign', 'If', 'Assign', 'For', 'Expr']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'If', 'While', 'For', 'For', 'Expr', 'Return']), ('decorator_list', [])]": 1, "comprehension -> [('target', 'Name'), ('iter', 'Name'), ('ifs', ['Subscript'])]": 1, "If -> [('test', 'Name'), ('body', ['Assign', 'If', 'Assign']), ('orelse', ['Assign', 'Assign', 'Assign'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'If']), ('decorator_list', [])]": 1, "Tuple -> [('elts', ['Str', 'Num']), ('ctx', 'Load')]": 47, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'Assign', 'TryExcept', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "Compare -> [('left', 'Subscript'), ('ops', ['NotIn']), ('comparators', ['List'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'For', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'If', 'Assign', 'Assign', 'If', 'AugAssign', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['If', 'Assign']), ('orelse', ['Assign'])]": 1, "While -> [('test', 'Compare'), ('body', ['Assign', 'While', 'If', 'AugAssign']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Return']), ('decorator_list', ['Name'])]": 44, "Call -> [('func', 'Call'), ('args', ['BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "BoolOp -> [('op', 'Or'), ('values', ['Call', 'Tuple'])]": 7, "Call -> [('func', 'Attribute'), ('args', ['Str', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'For', 'For', 'Assign', 'Assign']), ('decorator_list', [])]": 1, "BinOp -> [('left', 'Attribute'), ('op', 'BitAnd'), ('right', 'Name')]": 6, "Call -> [('func', 'Name'), ('args', ['Name']), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'Call')]": 2, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Str', 'Num', 'Str', 'Num', 'Str', 'Num', 'Num', 'Name', 'Str', 'Num', 'Name', 'Num'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'TryExcept', 'Assign', 'TryExcept', 'TryExcept']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 2, "If -> [('test', 'UnaryOp'), ('body', ['Print', 'Assign', 'If']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'For', 'For', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'Call'), ('body', ['Assign', 'If', 'If']), ('orelse', [])]": 4, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'For', 'Assign', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['TryExcept', 'For', 'Raise']), ('decorator_list', [])]": 1, "BoolOp -> [('op', 'And'), ('values', ['UnaryOp', 'Name', 'Compare', 'Compare'])]": 2, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Expr', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef']), ('decorator_list', [])]": 1, "ImportFrom -> [('module', 'str'), ('names', ['alias', 'alias', 'alias', 'alias', 'alias']), ('level', 'int')]": 69, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Print', 'For', 'Expr', 'For', 'Assign', 'For', 'Print']), ('decorator_list', [])]": 1, "If -> [('test', 'Subscript'), ('body', ['Assign', 'Assign', 'Return']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'For', 'If', 'For', 'If', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'AugAssign', 'Expr']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Name', 'Str', 'Str', 'Name', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'For', 'AugAssign', 'Return']), ('decorator_list', [])]": 4, "Call -> [('func', 'Name'), ('args', ['Num', 'Str', 'Dict', 'Str', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 4, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'ImportFrom', 'Expr']), ('orelse', [])]": 1, "List -> [('elts', ['BinOp', 'Str', 'Name', 'Str']), ('ctx', 'Load')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['With', 'For']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'If', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]": 2, "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['Num', 'Str', 'Attribute'])]": 1, "Dict -> [('keys', ['Str', 'Name', 'Str', 'Str']), ('values', ['Name', 'Name', 'Name', 'Attribute'])]": 2, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['If', 'Expr', 'Assign', 'If', 'Expr', 'Expr', 'Expr']), ('orelse', [])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Attribute', 'BoolOp', 'Compare', 'Call'])]": 1, "Subscript -> [('value', 'ListComp'), ('slice', 'Slice'), ('ctx', 'Load')]": 4, "Tuple -> [('elts', ['Attribute', 'Attribute', 'Attribute', 'Attribute']), ('ctx', 'Load')]": 33, "List -> [('elts', ['Name', 'Subscript']), ('ctx', 'Load')]": 2, "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'If', 'Return']), ('orelse', ['Return'])]": 1, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Assign', 'Assign']), ('orelse', [])]": 7, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assert', 'If']), ('decorator_list', [])]": 1, "IfExp -> [('test', 'Attribute'), ('body', 'Subscript'), ('orelse', 'Str')]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'Assign', 'FunctionDef', 'FunctionDef', 'If'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'If', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'If', 'Assign', 'Expr', 'Expr', 'Expr', 'If', 'If', 'Return']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['Assign', 'Print', 'If', 'For', 'If', 'Expr', 'Assign', 'Assign', 'For', 'If']), ('orelse', [])]": 1, "If -> [('test', 'UnaryOp'), ('body', ['Print', 'Print', 'Print', 'Return']), ('orelse', [])]": 5, "If -> [('test', 'UnaryOp'), ('body', ['Raise', 'Expr']), ('orelse', [])]": 1, "List -> [('elts', ['BinOp', 'BinOp', 'Str', 'Call']), ('ctx', 'Load')]": 4, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'If', 'Assign', 'If', 'Assign', 'If', 'For', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 22, "For -> [('target', 'Tuple'), ('iter', 'List'), ('body', ['Expr', 'Expr']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'If', 'Expr', 'If', 'Return']), ('decorator_list', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Str', 'Attribute']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'For']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'If', 'If', 'If', 'Expr', 'Assign', 'Assign', 'For', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Expr', 'Expr', 'If', 'Expr']), ('decorator_list', [])]": 1, "TryExcept -> [('body', ['Assign', 'Assign', 'For', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['TryExcept', 'For']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Delete', 'If']), ('decorator_list', [])]": 2, "Compare -> [('left', 'Name'), ('ops', ['In']), ('comparators', ['Tuple'])]": 120, "Print -> [('dest', 'NoneType'), ('values', ['Str', 'Name']), ('nl', 'bool')]": 106, "While -> [('test', 'BoolOp'), ('body', ['Expr', 'Expr', 'Assign']), ('orelse', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Expr', 'Assert']), ('orelse', [])]": 1, "Assign -> [('targets', ['Subscript']), ('value', 'BinOp')]": 195, "Call -> [('func', 'Attribute'), ('args', ['Num', 'Attribute', 'Dict']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "If -> [('test', 'UnaryOp'), ('body', ['Expr', 'If']), ('orelse', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "If -> [('test', 'Compare'), ('body', ['If', 'Assign', 'If']), ('orelse', [])]": 2, "While -> [('test', 'Compare'), ('body', ['AugAssign', 'If', 'Assign', 'If', 'If', 'Assign', 'For', 'If', 'If', 'If', 'Assign', 'Expr', 'AugAssign', 'AugAssign']), ('orelse', [])]": 1, "Compare -> [('left', 'Call'), ('ops', ['NotEq']), ('comparators', ['Name'])]": 25, "If -> [('test', 'Attribute'), ('body', ['Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('orelse', ['Expr', 'Expr'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Num', 'Name', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Compare -> [('left', 'Attribute'), ('ops', ['In']), ('comparators', ['Attribute'])]": 25, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'ClassDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'Assign', 'Assign', 'FunctionDef', 'Assign']), ('decorator_list', [])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Call', 'Name'])]": 1, "If -> [('test', 'Attribute'), ('body', ['If', 'Assign', 'Assign', 'Assign', 'Assign']), ('orelse', ['If', 'Return'])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 2, "If -> [('test', 'Name'), ('body', ['Assign', 'Assign', 'If', 'Assign']), ('orelse', ['If'])]": 1, "Tuple -> [('elts', ['Name', 'Num', 'BinOp', 'Name']), ('ctx', 'Load')]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'BinOp', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "TryFinally -> [('body', ['Expr']), ('finalbody', ['If', 'For'])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'If', 'If']), ('orelse', [])]": 5, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'Raise']), ('orelse', [])]": 1, "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'Assign', 'Expr']), ('orelse', ['Assign'])]": 2, "Tuple -> [('elts', ['Name', 'Str', 'Num', 'Attribute']), ('ctx', 'Load')]": 1, "While -> [('test', 'Num'), ('body', ['Assign', 'Assign', 'For', 'If', 'If', 'Expr']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Expr', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Expr', 'Assign', 'Assign', 'If', 'Assign', 'If', 'Expr', 'Assign', 'If', 'If', 'If', 'Expr']), ('decorator_list', [])]": 1, "If -> [('test', 'Call'), ('body', ['Assign', 'Expr', 'Expr', 'Expr', 'Expr']), ('orelse', ['Expr'])]": 2, "Index -> [('value', 'Num')]": 5595, "While -> [('test', 'Name'), ('body', ['Expr', 'Assign', 'Assign', 'If', 'AugAssign', 'If']), ('orelse', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'ClassDef']), ('decorator_list', [])]": 1, "If -> [('test', 'UnaryOp'), ('body', ['If', 'AugAssign']), ('orelse', [])]": 1, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'If'])]": 1, "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['If', 'Raise'])]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assert', 'Assert', 'Expr', 'Assign', 'Assign', 'Assign', 'Assert', 'Assert']), ('decorator_list', [])]": 1, "ExceptHandler -> [('type', 'Name'), ('name', 'Tuple'), ('body', ['Raise'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Num', 'Name']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "arguments -> [('args', ['Tuple']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', [])]": 4, "TryExcept -> [('body', ['Expr', 'Assign', 'Assign']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 9, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 8, "TryExcept -> [('body', ['Assign', 'Assign', 'Assign', 'TryExcept']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 1, "arguments -> [('args', ['Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Num', 'Name'])]": 1, "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Expr', 'TryExcept']), ('orelse', [])]": 1, "If -> [('test', 'UnaryOp'), ('body', ['Return']), ('orelse', ['If'])]": 9, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'With', 'Assign', 'Assign', 'Assign', 'With', 'Expr', 'Return']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', []), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'Call')]": 1, "TryExcept -> [('body', ['Assign', 'If', 'If', 'If', 'If', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Str', 'Name', 'Name']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 3, "BinOp -> [('left', 'Name'), ('op', 'Mod'), ('right', 'Name')]": 33, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assert', 'Assert', 'If', 'Assert', 'If', 'Assign', 'Assign', 'If']), ('decorator_list', [])]": 2, "If -> [('test', 'Name'), ('body', ['Assign']), ('orelse', ['Import', 'Assign'])]": 2, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Lambda', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'For', 'Assign', 'Assign', 'TryExcept', 'Expr']), ('orelse', ['Expr'])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Expr', 'Print']), ('orelse', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Expr', 'Assign', 'If', 'Expr', 'Expr']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'For', 'Expr', 'Assign']), ('decorator_list', [])]": 2, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str']), ('values', ['Call', 'Call', 'Attribute', 'Attribute'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'TryExcept', 'For', 'If', 'For']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'ImportFrom', 'If', 'For']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Return']), ('decorator_list', [])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Num', 'Num', 'Str', 'Num', 'Str', 'Num', 'Call', 'Call', 'Num', 'Num'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'If', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assert', 'If', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2659, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Name', 'Num', 'Name', 'Name'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Import', 'Assign', 'If']), ('decorator_list', [])]": 1, "While -> [('test', 'Name'), ('body', ['AugAssign', 'Assign', 'If']), ('orelse', [])]": 1, "Call -> [('func', 'Subscript'), ('args', ['Name']), ('keywords', []), ('starargs', 'Name'), ('kwargs', 'Name')]": 3, "For -> [('target', 'Name'), ('iter', 'List'), ('body', ['Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr']), ('orelse', [])]": 1, "Compare -> [('left', 'Subscript'), ('ops', ['In']), ('comparators', ['Str'])]": 5, "If -> [('test', 'Num'), ('body', ['Assign', 'Assign', 'Assign', 'Assign']), ('orelse', [])]": 1, "ExceptHandler -> [('type', 'Name'), ('name', 'Name'), ('body', ['Assign', 'Break'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'Expr', 'With']), ('decorator_list', [])]": 2, "Call -> [('func', 'Attribute'), ('args', ['Tuple']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 638, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Global', 'If']), ('decorator_list', [])]": 2, "Call -> [('func', 'Attribute'), ('args', ['BinOp', 'BinOp', 'BinOp']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'ClassDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'ClassDef', 'FunctionDef', 'ClassDef', 'FunctionDef', 'ClassDef', 'FunctionDef'])]": 1, "If -> [('test', 'Call'), ('body', ['Assign', 'Expr']), ('orelse', ['For'])]": 1, "Call -> [('func', 'Name'), ('args', ['Name', 'Call', 'Name', 'Str', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'Return']), ('orelse', ['If'])]": 1, "With -> [('context_expr', 'Call'), ('optional_vars', 'NoneType'), ('body', ['Assign'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'For', 'Return']), ('decorator_list', ['Name'])]": 2, "BinOp -> [('left', 'Name'), ('op', 'Sub'), ('right', 'Num')]": 544, "With -> [('context_expr', 'Call'), ('optional_vars', 'Name'), ('body', ['Assign', 'If', 'Expr', 'Break'])]": 1, "Raise -> [('type', 'Str'), ('inst', 'Tuple'), ('tback', 'NoneType')]": 1, "Call -> [('func', 'Name'), ('args', ['Str', 'Str', 'Dict']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "comprehension -> [('target', 'Name'), ('iter', 'List'), ('ifs', [])]": 15, "If -> [('test', 'Compare'), ('body', ['If', 'Assign', 'FunctionDef', 'Assign', 'Assign', 'Expr', 'Expr', 'For']), ('orelse', [])]": 1, "If -> [('test', 'Name'), ('body', ['If', 'Raise']), ('orelse', [])]": 2, "Call -> [('func', 'Attribute'), ('args', ['Tuple']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Assign -> [('targets', ['Name']), ('value', 'Call')]": 26855, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Assign', 'If', 'Assign', 'Assign', 'For', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'If', 'Expr', 'Assign', 'TryFinally', 'Expr', 'Expr', 'If', 'TryExcept', 'For']), ('decorator_list', [])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Name', 'Name', 'Name', 'Num'])]": 1, "Call -> [('func', 'Call'), ('args', []), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 26, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', ['Name'])]": 1, "While -> [('test', 'UnaryOp'), ('body', ['Expr', 'Expr', 'Assign', 'If', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'For', 'For', 'Pass']), ('orelse', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Call', 'Tuple']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "List -> [('elts', ['Name', 'Name', 'Call']), ('ctx', 'Load')]": 2, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Name']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 22, "TryExcept -> [('body', ['Assign']), ('handlers', ['ExceptHandler']), ('orelse', ['If'])]": 14, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Name', 'Str', 'Name', 'Name', 'Call'])]": 1, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['AugAssign', 'AugAssign', 'AugAssign']), ('orelse', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['ListComp', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'If', 'Return']), ('decorator_list', [])]": 1, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('orelse', [])]": 1, "Assign -> [('targets', ['Name']), ('value', 'Tuple')]": 588, "If -> [('test', 'Attribute'), ('body', ['Assign']), ('orelse', ['Assign', 'If'])]": 1, "List -> [('elts', ['Call', 'Str', 'Call', 'Str', 'Str']), ('ctx', 'Load')]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'For']), ('orelse', ['For'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['TryExcept', 'Return']), ('decorator_list', [])]": 31, "If -> [('test', 'Compare'), ('body', ['Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Return']), ('orelse', [])]": 2, "Module -> [('body', ['Import', 'ImportFrom', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Print', 'TryExcept', 'Expr'])]": 1, "For -> [('target', 'Name'), ('iter', 'Tuple'), ('body', ['Assign', 'Expr']), ('orelse', [])]": 2, "BinOp -> [('left', 'BinOp'), ('op', 'BitOr'), ('right', 'Call')]": 22, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Expr']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['If']), ('orelse', ['Expr'])]": 2, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Expr', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'Assign', 'ClassDef']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "Tuple -> [('elts', ['Attribute', 'Call', 'Call']), ('ctx', 'Load')]": 3, "Dict -> [('keys', ['Str', 'Str']), ('values', ['Num', 'Str'])]": 14, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'If', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "While -> [('test', 'Name'), ('body', ['If', 'Assign', 'If']), ('orelse', [])]": 1, "If -> [('test', 'Attribute'), ('body', ['If']), ('orelse', ['Assign'])]": 7, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Import', 'Expr', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'For', 'For']), ('decorator_list', [])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Str', 'Name', 'Str'])]": 3, "TryExcept -> [('body', ['Assign', 'Expr', 'Expr']), ('handlers', ['ExceptHandler', 'ExceptHandler', 'ExceptHandler']), ('orelse', [])]": 1, "If -> [('test', 'Compare'), ('body', ['TryExcept', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'TryExcept']), ('orelse', ['Expr', 'Expr'])]": 1, "If -> [('test', 'Name'), ('body', ['Return']), ('orelse', ['If'])]": 3, "TryExcept -> [('body', ['Exec', 'Assign']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 1, "Dict -> [('keys', ['Str']), ('values', ['Subscript'])]": 29, "If -> [('test', 'Name'), ('body', ['Expr', 'For']), ('orelse', ['If'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]": 1, "IfExp -> [('test', 'UnaryOp'), ('body', 'Attribute'), ('orelse', 'Name')]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Return']), ('orelse', ['Assign', 'Assign', 'Expr', 'Assign', 'Return'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Num', 'Num', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 3, "Call -> [('func', 'Attribute'), ('args', ['Attribute']), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 11, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'TryExcept', 'TryExcept', 'If', 'If', 'If', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'Assign', 'Assign', 'For', 'If', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'If']), ('decorator_list', [])]": 5, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['TryExcept', 'Assign', 'TryExcept', 'Expr', 'Expr']), ('decorator_list', [])]": 2, "With -> [('context_expr', 'Call'), ('optional_vars', 'Name'), ('body', ['Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'For', 'For'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Str', 'Str', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 24, "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['Call', 'Dict', 'Dict'])]": 1, "If -> [('test', 'BoolOp'), ('body', ['If']), ('orelse', [])]": 54, "Assign -> [('targets', ['Attribute']), ('value', 'BinOp')]": 297, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'FunctionDef', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 3, "BinOp -> [('left', 'Subscript'), ('op', 'Div'), ('right', 'Call')]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Dict'])]": 3, "With -> [('context_expr', 'Call'), ('optional_vars', 'NoneType'), ('body', ['Assign', 'Expr', 'TryExcept', 'Expr', 'Expr'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Num', 'Call', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "BoolOp -> [('op', 'And'), ('values', ['UnaryOp', 'Subscript'])]": 2, "If -> [('test', 'Compare'), ('body', ['Expr', 'Expr']), ('orelse', ['Assert'])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign']), ('orelse', [])]": 18, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'If']), ('decorator_list', [])]": 1, "If -> [('test', 'Attribute'), ('body', ['Assign', 'For']), ('orelse', ['Assign', 'For'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Expr']), ('decorator_list', ['Attribute'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Assign', 'If', 'Expr', 'For', 'Expr']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Assign', 'Assign', 'Expr']), ('orelse', [])]": 3, "Tuple -> [('elts', ['Str', 'Num', 'Str', 'Str']), ('ctx', 'Load')]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'Expr', 'For', 'Expr', 'Expr', 'Expr', 'For', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'For', 'For', 'Expr']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'If', 'TryExcept', 'Return']), ('decorator_list', [])]": 3, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'For']), ('orelse', [])]": 19, "If -> [('test', 'Call'), ('body', ['Assign', 'Return']), ('orelse', [])]": 6, "If -> [('test', 'Name'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'If']), ('orelse', [])]": 2, "TryExcept -> [('body', ['Assign', 'If']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 47, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr']), ('decorator_list', ['Name'])]": 13, "If -> [('test', 'Compare'), ('body', ['Import', 'Assign', 'Assign', 'Expr', 'Expr']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'For']), ('decorator_list', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Lambda', 'BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 4, "If -> [('test', 'Compare'), ('body', ['Assign', 'ImportFrom']), ('orelse', ['If'])]": 4, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'For', 'Return']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assert', 'Expr']), ('decorator_list', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Num', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 62, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Num', 'Num', 'Name'])]": 2, "Dict -> [('keys', ['Num', 'Num']), ('values', ['BinOp', 'BinOp'])]": 1, "If -> [('test', 'Name'), ('body', ['Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'TryExcept']), ('orelse', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Call', 'Attribute']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 13, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'If', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'Name'), ('body', ['Assign', 'Assign', 'If', 'Assign']), ('orelse', [])]": 1, "Call -> [('func', 'Call'), ('args', ['Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 54, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'ImportFrom', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "BinOp -> [('left', 'BinOp'), ('op', 'Mod'), ('right', 'Attribute')]": 9, "Call -> [('func', 'Attribute'), ('args', ['BinOp', 'BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 30, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'Assign', 'Print', 'Return']), ('decorator_list', [])]": 1, "TryFinally -> [('body', ['For', 'Return']), ('finalbody', ['Assign'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'For', 'While', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'Name'), ('body', ['Continue']), ('orelse', [])]": 5, "Call -> [('func', 'Name'), ('args', ['Lambda']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 27, "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]": 2, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Expr']), ('orelse', [])]": 300, "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign', 'Assign', 'Return']), ('orelse', ['Return'])]": 1, "List -> [('elts', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'BinOp', 'Str']), ('ctx', 'Load')]": 1, "Tuple -> [('elts', ['Name', 'Str']), ('ctx', 'Load')]": 55, "arguments -> [('args', ['Name']), ('vararg', 'NoneType'), ('kwarg', 'str'), ('defaults', [])]": 191, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Name']), ('keywords', []), ('starargs', 'Name'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Return']), ('decorator_list', ['Call'])]": 3, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'Assign', 'If', 'Import', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'Assign', 'Assign', 'Assign', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'Assign', 'If'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Num', 'Num', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['If', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Expr']), ('orelse', [])]": 1, "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Delete', 'Assign', 'Assign', 'TryExcept', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'ClassDef', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]": 1, "Dict -> [('keys', ['Str', 'Str']), ('values', ['Attribute', 'ListComp'])]": 1, "BoolOp -> [('op', 'And'), ('values', ['Attribute', 'Str'])]": 4, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'Expr', 'Return']), ('decorator_list', ['Name'])]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'FunctionDef'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'If', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'If']), ('decorator_list', [])]": 1, "While -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'AugAssign', 'AugAssign']), ('orelse', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Str', 'Attribute', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 7, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', ['Call'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Delete']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Str', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "If -> [('test', 'Attribute'), ('body', ['Assign']), ('orelse', ['Assign'])]": 71, "Call -> [('func', 'Attribute'), ('args', ['Call', 'Call']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 8, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['GeneratorExp', 'Str', 'Dict']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 2, "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Raise']), ('orelse', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'Assign', 'If', 'If', 'If', 'Assign', 'TryExcept', 'If', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Expr', 'Assign']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Num', 'Tuple']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 5, "Call -> [('func', 'Subscript'), ('args', []), ('keywords', []), ('starargs', 'Name'), ('kwargs', 'Name')]": 2, "TryExcept -> [('body', ['Print', 'Assign', 'Print']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'If']), ('decorator_list', ['Attribute'])]": 1, "If -> [('test', 'Compare'), ('body', ['Print']), ('orelse', ['Assign', 'Print', 'Expr'])]": 1, "Compare -> [('left', 'Name'), ('ops', ['In']), ('comparators', ['Str'])]": 2, "If -> [('test', 'Compare'), ('body', ['TryExcept', 'Return']), ('orelse', [])]": 4, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'Expr', 'If']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'For', 'Assign', 'Assign', 'Return']), ('orelse', ['If'])]": 2, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['AugAssign', 'If']), ('orelse', [])]": 6, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'TryExcept', 'TryExcept', 'If', 'Assign', 'If', 'If', 'Assign', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'Name'), ('body', ['Expr', 'Return']), ('orelse', ['Return'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'If', 'If', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 3355, "Assign -> [('targets', ['Name']), ('value', 'IfExp')]": 74, "Call -> [('func', 'Name'), ('args', ['Attribute', 'Str', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 6, "Call -> [('func', 'Attribute'), ('args', ['List', 'BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "If -> [('test', 'Compare'), ('body', ['AugAssign', 'Assign']), ('orelse', ['Assign', 'Assign', 'If'])]": 1, "Call -> [('func', 'Name'), ('args', ['Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 12, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'If', 'Return']), ('decorator_list', ['Name'])]": 1, "TryFinally -> [('body', ['Assign', 'Assign', 'Expr']), ('finalbody', ['Expr', 'Expr'])]": 1, "Tuple -> [('elts', ['Name', 'Str', 'Num', 'Name']), ('ctx', 'Load')]": 12, "Call -> [('func', 'Attribute'), ('args', ['Subscript', 'Call', 'Call', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "If -> [('test', 'Compare'), ('body', ['Expr', 'Expr', 'For', 'Expr']), ('orelse', ['If'])]": 1, "BoolOp -> [('op', 'And'), ('values', ['Name', 'Num'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'Assign', 'Expr', 'Return']), ('decorator_list', ['Name', 'Name'])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'If', 'If', 'If', 'If', 'Assign', 'Assign', 'Assign']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'If', 'If', 'If', 'Return']), ('decorator_list', [])]": 2, "For -> [('target', 'Tuple'), ('iter', 'Name'), ('body', ['Print', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('orelse', [])]": 1, "ExceptHandler -> [('type', 'NoneType'), ('name', 'NoneType'), ('body', ['TryExcept'])]": 9, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'For', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Return']), ('decorator_list', [])]": 1, "Tuple -> [('elts', ['BinOp', 'Str', 'Str']), ('ctx', 'Load')]": 1, "While -> [('test', 'Name'), ('body', ['TryExcept', 'If', 'AugAssign', 'While']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]": 2, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'FunctionDef', 'FunctionDef', 'ClassDef']), ('decorator_list', [])]": 1, "If -> [('test', 'Attribute'), ('body', ['Assign', 'If', 'TryExcept', 'If']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'If', 'Assign', 'If', 'If', 'Assign', 'If', 'Return']), ('decorator_list', [])]": 2, "Call -> [('func', 'Name'), ('args', ['Name', 'Attribute', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 36, "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'Return']), ('orelse', [])]": 7, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'Assign', 'If', 'Assign', 'Expr', 'Expr', 'Return']), ('decorator_list', [])]": 1, "Tuple -> [('elts', ['Tuple', 'Tuple', 'Tuple']), ('ctx', 'Load')]": 29, "Raise -> [('type', 'Name'), ('inst', 'NoneType'), ('tback', 'NoneType')]": 257, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'ImportFrom', 'ImportFrom', 'FunctionDef', 'ClassDef', 'If'])]": 1, "TryExcept -> [('body', ['Assign', 'For', 'Expr', 'If']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 1, "If -> [('test', 'Call'), ('body', ['Assign', 'Assign', 'Expr', 'Assert', 'Expr', 'Assign', 'Expr']), ('orelse', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'Import', 'Import', 'Assign', 'If', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Delete', 'Assign', 'Assign', 'Assign']), ('orelse', ['If'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['AugAssign', 'Return']), ('decorator_list', ['Name'])]": 2, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str'])]": 1, "If -> [('test', 'Compare'), ('body', ['Expr', 'Expr']), ('orelse', ['If'])]": 15, "If -> [('test', 'Attribute'), ('body', ['Expr', 'Assign', 'If']), ('orelse', ['Assign', 'Expr'])]": 1, "With -> [('context_expr', 'Call'), ('optional_vars', 'Name'), ('body', ['Expr', 'Assign'])]": 1, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef'])]": 1, "If -> [('test', 'BoolOp'), ('body', ['Assign', 'For', 'Assign']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'For', 'Return']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 2, "TryExcept -> [('body', ['Assign', 'Expr']), ('handlers', ['ExceptHandler']), ('orelse', ['If'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Assign', 'For', 'Print', 'Print', 'Print', 'Print', 'Return']), ('decorator_list', [])]": 1, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'For', 'Expr']), ('orelse', [])]": 1, "TryExcept -> [('body', ['Assign', 'If', 'Assign', 'For', 'If']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'For', 'If', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'For', 'For']), ('decorator_list', [])]": 1, "Assert -> [('test', 'Name'), ('msg', 'Call')]": 1, "If -> [('test', 'Call'), ('body', ['Assign', 'If', 'Return']), ('orelse', [])]": 8, "ExceptHandler -> [('type', 'Attribute'), ('name', 'Tuple'), ('body', ['Expr'])]": 2, "If -> [('test', 'UnaryOp'), ('body', ['If', 'Assign', 'Assign']), ('orelse', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name', 'Attribute']), ('body', ['Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Name', 'Name'])]": 29, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'TryExcept', 'If', 'If', 'If', 'Assign', 'If', 'Assign', 'Return']), ('decorator_list', ['Attribute'])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign']), ('orelse', ['Pass'])]": 1, "List -> [('elts', []), ('ctx', 'Load')]": 2337, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'For', 'Assign']), ('orelse', [])]": 1, "If -> [('test', 'Attribute'), ('body', ['Assert', 'Assign', 'Expr', 'If']), ('orelse', [])]": 1, "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'Assign', 'For', 'If']), ('orelse', [])]": 2, "If -> [('test', 'Compare'), ('body', ['If', 'Expr']), ('orelse', ['If', 'Expr'])]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'FunctionDef', 'Return']), ('decorator_list', [])]": 7, "Call -> [('func', 'Name'), ('args', ['Name', 'Attribute', 'Name']), ('keywords', ['keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Call -> [('func', 'Attribute'), ('args', ['Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Call', 'Call', 'Call', 'Tuple', 'Call', 'Tuple', 'Call', 'Call', 'Call', 'Tuple', 'Tuple', 'Call', 'Call', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Call', 'Call', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Call', 'Call', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Call', 'Call', 'Call', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Call', 'Call', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Str', 'Num', 'Num', 'Name', 'Name'])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'If', 'Assign', 'Return']), ('orelse', [])]": 1, "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign', 'Assign']), ('orelse', ['Assign', 'Assign', 'Expr', 'Assign', 'Assign'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'If', 'If', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]": 2, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 2, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'ClassDef'])]": 1, "With -> [('context_expr', 'Call'), ('optional_vars', 'Name'), ('body', ['For', 'Expr'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'Assign', 'Assign', 'If']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'TryExcept', 'Return']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'ListComp'), ('body', ['Assign', 'TryExcept', 'Assign', 'Expr']), ('orelse', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Subscript'), ('body', ['Assign', 'Expr', 'For', 'For']), ('orelse', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['If', 'Assign', 'Assign', 'If']), ('orelse', [])]": 1, "TryFinally -> [('body', ['Expr']), ('finalbody', ['Expr'])]": 26, "Tuple -> [('elts', ['Subscript', 'Name', 'Name', 'Name']), ('ctx', 'Load')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'ClassDef', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'If', 'If', 'Assign', 'Assign', 'Assign', 'If', 'If', 'Assign', 'TryExcept', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'Assign', 'If', 'Expr', 'If', 'Assign', 'Assign', 'Expr', 'Expr', 'Return']), ('decorator_list', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Tuple -> [('elts', ['Subscript', 'Subscript', 'Subscript', 'Name']), ('ctx', 'Load')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['FunctionDef', 'Return']), ('decorator_list', ['Name'])]": 1, "Compare -> [('left', 'Num'), ('ops', ['Eq']), ('comparators', ['Num'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'ImportFrom', 'Assign', 'Expr', 'Expr', 'Return']), ('decorator_list', [])]": 1, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ClassDef', 'FunctionDef'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 1, "Compare -> [('left', 'BinOp'), ('ops', ['Lt']), ('comparators', ['BinOp'])]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'With', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['TryExcept']), ('orelse', ['Return'])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'For']), ('orelse', ['Assign', 'Print'])]": 1, "List -> [('elts', ['Name', 'Subscript', 'Subscript']), ('ctx', 'Load')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'TryExcept', 'Expr']), ('decorator_list', [])]": 1, "If -> [('test', 'Attribute'), ('body', ['If', 'Assign', 'Expr', 'Assign', 'Expr']), ('orelse', [])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Attribute', 'Attribute', 'Name', 'Num'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Attribute', 'List']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 3, "Call -> [('func', 'Attribute'), ('args', []), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'Name')]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Str'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Print', 'If', 'Print', 'Expr', 'Return']), ('decorator_list', [])]": 1, "Lambda -> [('args', 'arguments'), ('body', 'ListComp')]": 1, "ListComp -> [('elt', 'Name'), ('generators', ['comprehension'])]": 213, "Tuple -> [('elts', ['Name', 'Attribute', 'Name']), ('ctx', 'Load')]": 8, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'If', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'Assign', 'If', 'If', 'Assign', 'Assign', 'If']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'TryExcept', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'Expr']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'If', 'Assign', 'Assign', 'If', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "Dict -> [('keys', ['Attribute', 'BinOp']), ('values', ['Name', 'Attribute'])]": 2, "Module -> [('body', ['Import', 'Assign', 'Assign', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'Expr', 'If'])]": 1, "AugAssign -> [('target', 'Name'), ('op', 'BitXor'), ('value', 'Name')]": 2, "Call -> [('func', 'Name'), ('args', ['BinOp', 'Name']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "Module -> [('body', ['Import', 'Import', 'Import', 'ImportFrom', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'If', 'Assign', 'Assign', 'Assign', 'ClassDef', 'FunctionDef', 'ClassDef', 'Assign', 'Assign', 'Assign', 'Assign', 'ClassDef', 'Assign', 'ClassDef', 'Assign', 'Assign', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'Assign', 'Assign', 'For', 'FunctionDef'])]": 1, "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef'])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'If']), ('orelse', ['Assign'])]": 24, "If -> [('test', 'Compare'), ('body', ['If', 'Expr', 'If']), ('orelse', ['Expr'])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 2, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Assign', 'Assign', 'ClassDef']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'If', 'If', 'Expr']), ('decorator_list', [])]": 2, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'TryExcept']), ('decorator_list', [])]": 1, "If -> [('test', 'Call'), ('body', ['Assign', 'If']), ('orelse', ['If'])]": 9, "BinOp -> [('left', 'Call'), ('op', 'Div'), ('right', 'BinOp')]": 19, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'ImportFrom', 'Assign', 'For', 'For', 'Return']), ('decorator_list', [])]": 1, "BoolOp -> [('op', 'And'), ('values', ['Attribute', 'Attribute'])]": 41, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'For', 'For']), ('decorator_list', [])]": 2, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "Compare -> [('left', 'Attribute'), ('ops', ['Gt']), ('comparators', ['Attribute'])]": 20, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'For', 'If', 'If']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'ImportFrom', 'Import', 'Assign', 'Assign', 'TryExcept', 'Assign']), ('orelse', [])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['Subscript', 'Subscript', 'Name'])]": 2, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['If', 'Assign', 'Assign']), ('orelse', [])]": 2, "Call -> [('func', 'Name'), ('args', ['Str', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 22, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assert', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'If', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'For', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['If', 'If']), ('orelse', [])]": 11, "Call -> [('func', 'Attribute'), ('args', ['Str', 'Lambda', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 15, "arguments -> [('args', ['Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'str'), ('defaults', ['Str', 'Name'])]": 3, "Tuple -> [('elts', ['Name', 'UnaryOp']), ('ctx', 'Load')]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'If', 'Assign', 'If']), ('decorator_list', [])]": 1, "If -> [('test', 'Call'), ('body', ['Assign', 'Expr', 'Return']), ('orelse', ['Assign', 'Assign', 'Expr', 'Return'])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Call']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'If', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "If -> [('test', 'Attribute'), ('body', ['Assign', 'AugAssign', 'AugAssign']), ('orelse', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Print', 'If', 'Break']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Assign', 'Expr']), ('orelse', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr']), ('orelse', [])]": 2, "List -> [('elts', ['Tuple']), ('ctx', 'Load')]": 209, "Tuple -> [('elts', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('ctx', 'Store')]": 1, "BinOp -> [('left', 'Str'), ('op', 'Mod'), ('right', 'Subscript')]": 108, "If -> [('test', 'Compare'), ('body', ['Import', 'Assign']), ('orelse', [])]": 2, "Tuple -> [('elts', ['Str', 'Str', 'Tuple']), ('ctx', 'Load')]": 1, "Call -> [('func', 'Attribute'), ('args', ['Num', 'Num', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 4, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str']), ('values', ['Call', 'Call', 'Name', 'Attribute'])]": 1, "BoolOp -> [('op', 'And'), ('values', ['Compare', 'UnaryOp', 'UnaryOp'])]": 2, "IfExp -> [('test', 'Compare'), ('body', 'Compare'), ('orelse', 'Name')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Print', 'Expr', 'Assign', 'For', 'Expr', 'Print']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'TryExcept']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]": 11, "Call -> [('func', 'Name'), ('args', ['Tuple', 'Tuple']), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['AugAssign', 'If']), ('orelse', [])]": 3, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Str'])]": 1, "Call -> [('func', 'Name'), ('args', ['Name', 'BinOp', 'BinOp', 'Num', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "With -> [('context_expr', 'Call'), ('optional_vars', 'Name'), ('body', ['Assign'])]": 17, "List -> [('elts', ['Call', 'Call', 'Name', 'Call', 'Call', 'Call', 'Call', 'Name', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Name', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call']), ('ctx', 'Load')]": 1, "For -> [('target', 'Name'), ('iter', 'Str'), ('body', ['For']), ('orelse', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'If', 'For', 'For']), ('decorator_list', [])]": 1, "Tuple -> [('elts', ['Name', 'Name', 'Attribute']), ('ctx', 'Load')]": 16, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 2, "Tuple -> [('elts', ['Name', 'Attribute', 'Attribute', 'Attribute', 'Attribute']), ('ctx', 'Load')]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign']), ('orelse', ['If'])]": 10, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "If -> [('test', 'BoolOp'), ('body', ['Import']), ('orelse', ['Import'])]": 1, "If -> [('test', 'Compare'), ('body', ['Expr']), ('orelse', ['Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr'])]": 1, "Call -> [('func', 'Name'), ('args', ['Attribute', 'Attribute', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 10, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Str', 'Subscript', 'Name', 'Name', 'Call', 'BinOp'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Attribute', 'Num', 'List']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('orelse', [])]": 2, "Call -> [('func', 'Subscript'), ('args', ['Lambda']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "If -> [('test', 'Attribute'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('orelse', ['Assign'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'If', 'If', 'Expr', 'Assign', 'If']), ('decorator_list', [])]": 1, "Attribute -> [('value', 'Str'), ('attr', 'str'), ('ctx', 'Load')]": 958, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "BinOp -> [('left', 'Str'), ('op', 'Mult'), ('right', 'Num')]": 49, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['For']), ('decorator_list', [])]": 165, "While -> [('test', 'Name'), ('body', ['If']), ('orelse', [])]": 4, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Name', 'Name', 'Attribute', 'Attribute', 'Call'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Call', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'If', 'Assign', 'Assign', 'Return']), ('decorator_list', ['Call'])]": 1, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['If', 'Assign', 'Expr', 'AugAssign']), ('orelse', [])]": 6, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'If', 'If']), ('orelse', [])]": 1, "Module -> [('body', ['Import', 'Import', 'Assign', 'If', 'For', 'If', 'ImportFrom', 'Expr', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'FunctionDef', 'ImportFrom', 'Expr', 'FunctionDef', 'FunctionDef', 'Assign', 'If'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'FunctionDef', 'Assign', 'If', 'Return']), ('decorator_list', [])]": 1, "Call -> [('func', 'Call'), ('args', ['Name']), ('keywords', []), ('starargs', 'Name'), ('kwargs', 'Name')]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Expr', 'Expr', 'Delete', 'Delete']), ('decorator_list', [])]": 1, "keyword -> [('arg', 'str'), ('value', 'Num')]": 1817, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "With -> [('context_expr', 'Call'), ('optional_vars', 'NoneType'), ('body', ['Assign', 'Expr'])]": 1, "Call -> [('func', 'Name'), ('args', ['Name', 'Name']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 124, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Import', 'Expr', 'If', 'TryExcept', 'TryExcept', 'TryExcept', 'Assign', 'Expr', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'ImportFrom', 'Assign', 'For', 'If', 'Return']), ('decorator_list', [])]": 2, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Num']), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'If', 'Return']), ('decorator_list', [])]": 1, "Tuple -> [('elts', ['Num', 'Call']), ('ctx', 'Load')]": 46, "TryFinally -> [('body', ['Assign', 'Assign', 'Expr']), ('finalbody', ['Assign', 'Assign'])]": 1, "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['Assign', 'Assign', 'Assign', 'Expr']), ('orelse', [])]": 2, "If -> [('test', 'Compare'), ('body', ['If']), ('orelse', ['Assign', 'Assign', 'If'])]": 1, "Tuple -> [('elts', ['Num', 'Num', 'Num', 'Num', 'Num', 'Num']), ('ctx', 'Load')]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'ImportFrom', 'Import', 'ImportFrom', 'Assign', 'Import', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 10, "TryFinally -> [('body', ['Return']), ('finalbody', ['Expr', 'If', 'Expr', 'Expr'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'If', 'For', 'For']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'With', 'Expr']), ('decorator_list', [])]": 1, "If -> [('test', 'Attribute'), ('body', ['Assign', 'Expr', 'Assign']), ('orelse', ['Assign'])]": 1, "Module -> [('body', ['Import', 'Assign', 'Expr', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'For', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr'])]": 1, "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Assert', 'Assign', 'Expr']), ('orelse', ['Expr'])]": 1, "Tuple -> [('elts', ['Name', 'Name', 'Str']), ('ctx', 'Load')]": 5, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Return', 'For']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'If', 'Expr']), ('decorator_list', [])]": 1, "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'Assign', 'Assign', 'Assign']), ('orelse', [])]": 3, "TryExcept -> [('body', ['Import']), ('handlers', ['ExceptHandler']), ('orelse', ['Assign', 'Assign', 'Assign'])]": 1, "Assert -> [('test', 'Name'), ('msg', 'BinOp')]": 10, "If -> [('test', 'Compare'), ('body', ['Assert', 'Expr', 'For']), ('orelse', ['Raise'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'Assign', 'For', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'Assign', 'If', 'For']), ('decorator_list', [])]": 1, "IfExp -> [('test', 'Attribute'), ('body', 'BinOp'), ('orelse', 'Attribute')]": 1, "BinOp -> [('left', 'Num'), ('op', 'Add'), ('right', 'Name')]": 18, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Assign', 'ClassDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "Dict -> [('keys', ['Str', 'Str']), ('values', ['List', 'Str'])]": 4, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Call', 'Name', 'Subscript']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'Assign', 'FunctionDef']), ('decorator_list', [])]": 12, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'FunctionDef', 'Assign', 'TryFinally']), ('decorator_list', [])]": 1, "Dict -> [('keys', ['Name', 'Name']), ('values', ['List', 'List'])]": 1, "ClassDef -> [('name', 'str'), ('bases', []), ('body', ['FunctionDef', 'FunctionDef']), ('decorator_list', ['Call'])]": 2, "Call -> [('func', 'Name'), ('args', ['Str', 'Str', 'Attribute', 'Str', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Expr', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "If -> [('test', 'Call'), ('body', ['ImportFrom', 'If']), ('orelse', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Print', 'If', 'If', 'If']), ('decorator_list', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Subscript', 'Subscript']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "TryExcept -> [('body', ['Assign', 'Assign', 'If', 'Return']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'For', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'TryExcept']), ('decorator_list', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Name', 'Num', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'Assign', 'If', 'Assign', 'Assign', 'Expr', 'While']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'If', 'If', 'Return']), ('orelse', [])]": 1, "ExceptHandler -> [('type', 'Attribute'), ('name', 'NoneType'), ('body', ['Print'])]": 4, "BoolOp -> [('op', 'And'), ('values', ['Compare', 'Name', 'Call'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['FunctionDef', 'Expr', 'Expr']), ('decorator_list', [])]": 2, "If -> [('test', 'Call'), ('body', ['If', 'If', 'Return']), ('orelse', [])]": 1, "TryFinally -> [('body', ['Assign', 'Assign', 'Expr', 'Assign', 'If', 'Print']), ('finalbody', ['Expr'])]": 1, "Compare -> [('left', 'Subscript'), ('ops', ['Is']), ('comparators', ['Attribute'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "Tuple -> [('elts', ['Name', 'Str', 'Name', 'Dict']), ('ctx', 'Load')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'If', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Return']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Num', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 10, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', ['Call'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Assign']), ('decorator_list', [])]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'Import', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'If'])]": 1, "If -> [('test', 'Compare'), ('body', ['Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Print', 'Assign', 'Print', 'Assign', 'Assign', 'For', 'Expr', 'For', 'Expr', 'Expr', 'Print', 'Assign', 'Assign', 'For', 'Expr', 'Print', 'Assign', 'Assign', 'For', 'Expr', 'Print', 'Assign', 'Assign', 'Assign', 'For', 'Expr', 'Print', 'Assign', 'Assign', 'For', 'Expr', 'Expr', 'Expr']), ('orelse', ['Pass'])]": 1, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'If']), ('orelse', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name', 'Attribute']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'If', 'If', 'Assign', 'Expr', 'Expr', 'Assign', 'If', 'TryExcept', 'Expr', 'Assign', 'If', 'Assign', 'If', 'Expr']), ('decorator_list', ['Name'])]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'If', 'Assign', 'Expr']), ('orelse', [])]": 2, "TryFinally -> [('body', ['Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr']), ('finalbody', ['If'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Num']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 9, "While -> [('test', 'Name'), ('body', ['Expr', 'TryExcept', 'Assign', 'If', 'Expr', 'Assign', 'TryExcept', 'Assign']), ('orelse', [])]": 1, "If -> [('test', 'Call'), ('body', ['If', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr']), ('orelse', ['Assign', 'Expr', 'Assign', 'Assign', 'Return'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'Assign', 'If', 'Return']), ('decorator_list', [])]": 2, "If -> [('test', 'Call'), ('body', ['If']), ('orelse', ['If'])]": 19, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'ClassDef', 'ClassDef', 'If'])]": 1, "Call -> [('func', 'Name'), ('args', ['Name', 'Num', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 3, "Module -> [('body', ['Import', 'ImportFrom', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'FunctionDef', 'Expr', 'Assign', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef'])]": 1, "Dict -> [('keys', ['Str']), ('values', ['ListComp'])]": 14, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Attribute', 'Attribute', 'Call', 'IfExp', 'Subscript'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Expr', 'Return']), ('decorator_list', [])]": 5, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'Assign']), ('orelse', ['Assign'])]": 4, "If -> [('test', 'BoolOp'), ('body', ['For', 'Return']), ('orelse', [])]": 1, "If -> [('test', 'Subscript'), ('body', ['Expr', 'Expr']), ('orelse', [])]": 16, "While -> [('test', 'UnaryOp'), ('body', ['Assign', 'Assign', 'Assign']), ('orelse', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'If', 'Assert', 'If', 'Assign', 'If', 'If', 'If']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', []), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'Dict')]": 33, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'ClassDef', 'If'])]": 1, "Call -> [('func', 'Name'), ('args', ['Attribute', 'BinOp', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "If -> [('test', 'Name'), ('body', ['Expr', 'Assign', 'Assign']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'For', 'Assign', 'Expr', 'Return']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'For', 'If', 'If', 'Assign', 'If', 'Assign', 'For', 'Assign', 'Return']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Attribute', 'BinOp', 'BinOp', 'BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "arguments -> [('args', ['Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Attribute'])]": 1, "If -> [('test', 'Name'), ('body', ['Expr']), ('orelse', ['Assign', 'If'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Import', 'Expr', 'Assign', 'With']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['If']), ('orelse', ['Print'])]": 1, "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['Assign', 'If', 'Assign'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Call', 'Call', 'Call', 'Call', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 2, "If -> [('test', 'Compare'), ('body', ['Import', 'Return']), ('orelse', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', ['Attribute'])]": 1, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'Expr']), ('orelse', [])]": 7, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'For', 'Expr', 'Expr']), ('decorator_list', ['Name', 'Name'])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['List', 'List', 'List', 'List'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'Assign', 'For', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assert']), ('decorator_list', ['Call'])]": 2, "Assign -> [('targets', ['Attribute']), ('value', 'Num')]": 341, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Assign', 'If', 'AugAssign']), ('orelse', [])]": 3, "Call -> [('func', 'Name'), ('args', ['Name', 'Str', 'Dict']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 5, "Compare -> [('left', 'Subscript'), ('ops', ['Lt']), ('comparators', ['Str'])]": 1, "TryExcept -> [('body', ['Assign']), ('handlers', ['ExceptHandler', 'ExceptHandler']), ('orelse', [])]": 17, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Name', 'Name', 'BoolOp'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Print', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'TryExcept', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'For', 'If']), ('decorator_list', [])]": 1, "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'Assign', 'Assign', 'Return']), ('orelse', ['Assign', 'TryExcept', 'If', 'If', 'Assign', 'Expr', 'Expr', 'Expr', 'Return'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['TryExcept', 'Assign', 'Expr', 'Expr', 'Return']), ('decorator_list', ['Name'])]": 2, "Print -> [('dest', 'Name'), ('values', ['Str']), ('nl', 'bool')]": 11, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'str'), ('defaults', ['Name', 'Name', 'Str', 'Name', 'Name'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'Assign', 'For', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 1, "Attribute -> [('value', 'Attribute'), ('attr', 'str'), ('ctx', 'Del')]": 2, "Tuple -> [('elts', ['Subscript', 'Subscript', 'Subscript', 'Subscript', 'Subscript', 'Subscript']), ('ctx', 'Load')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "If -> [('test', 'Attribute'), ('body', ['Expr']), ('orelse', ['Expr'])]": 22, "Module -> [('body', ['Import', 'Import', 'Assign', 'Import', 'Expr', 'Assign', 'Expr', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Expr', 'Expr', 'ImportFrom', 'ImportFrom', 'Expr', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef'])]": 1, "List -> [('elts', ['BinOp', 'Subscript']), ('ctx', 'Load')]": 1, "If -> [('test', 'Attribute'), ('body', ['TryExcept']), ('orelse', ['Assign'])]": 4, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'For']), ('decorator_list', [])]": 2, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Str', 'Str', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num'])]": 7, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Attribute', 'BoolOp', 'BoolOp'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', ['Name'])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Tuple']), ('values', ['Str', 'Str', 'Str', 'Str', 'Str'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'For', 'Expr', 'Expr', 'Assign', 'For', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "If -> [('test', 'Subscript'), ('body', ['Assign', 'Assign', 'Expr', 'Assign']), ('orelse', ['Assign'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Tuple', 'Name', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "For -> [('target', 'Name'), ('iter', 'Subscript'), ('body', ['If', 'If']), ('orelse', [])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Str'])]": 5, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Import', 'Expr', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 2, "Call -> [('func', 'Name'), ('args', ['Num', 'Num', 'UnaryOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "ClassDef -> [('name', 'str'), ('bases', []), ('body', ['ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'ImportFrom', 'ImportFrom', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "Index -> [('value', 'Tuple')]": 300, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]": 2, "If -> [('test', 'Name'), ('body', ['Return']), ('orelse', ['Assign', 'Expr', 'Return'])]": 1, "Compare -> [('left', 'Call'), ('ops', ['Eq']), ('comparators', ['Num'])]": 374, "Module -> [('body', ['Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'Assign'])]": 1, "If -> [('test', 'Call'), ('body', ['Pass']), ('orelse', ['Assign', 'Expr'])]": 1, "Tuple -> [('elts', ['Dict', 'Dict']), ('ctx', 'Load')]": 4, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'TryFinally', 'Return']), ('decorator_list', [])]": 1, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'ClassDef'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'For', 'Expr', 'Assign', 'Expr', 'Expr', 'For', 'For', 'Expr', 'Assign', 'Assign', 'Expr', 'If', 'If', 'Expr', 'For', 'For', 'For', 'Assign', 'Assign', 'While', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['Print']), ('orelse', [])]": 2, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Attribute', 'Subscript', 'Name', 'Call', 'Name', 'Call'])]": 1, "If -> [('test', 'Compare'), ('body', ['Continue']), ('orelse', ['If', 'If', 'If'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Attribute']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'Name')]": 2, "Tuple -> [('elts', ['Str', 'Num', 'BinOp']), ('ctx', 'Load')]": 4, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Expr']), ('orelse', ['Expr'])]": 2, "Global -> [('names', ['str', 'str', 'str', 'str'])]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['If', 'While']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Assign', 'Assign', 'Expr', 'For']), ('decorator_list', [])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Name', 'Call', 'Call', 'Call', 'Name'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Assign', 'Assign', 'For', 'Return']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Tuple', 'Tuple', 'Tuple', 'Num', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Call -> [('func', 'Name'), ('args', ['Name', 'Name', 'Name', 'Attribute', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 4, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'For', 'Expr', 'TryFinally']), ('decorator_list', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Name', 'Name']), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'For', 'Assign', 'If']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'If', 'If', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'If']), ('decorator_list', [])]": 1, "BinOp -> [('left', 'BinOp'), ('op', 'Div'), ('right', 'Call')]": 12, "Tuple -> [('elts', ['Name', 'Attribute', 'List']), ('ctx', 'Load')]": 5, "Index -> [('value', 'Call')]": 174, "If -> [('test', 'Compare'), ('body', ['If']), ('orelse', ['Return'])]": 5, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'ClassDef', 'FunctionDef', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "Raise -> [('type', 'Attribute'), ('inst', 'NoneType'), ('tback', 'NoneType')]": 6, "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['Assign', 'Expr'])]": 2, "Call -> [('func', 'Name'), ('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Call -> [('func', 'Name'), ('args', ['Call']), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'FunctionDef', 'FunctionDef', 'ClassDef'])]": 2, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['TryExcept', 'If']), ('orelse', [])]": 5, "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['FunctionDef'])]": 7, "For -> [('target', 'Name'), ('iter', 'Tuple'), ('body', ['Assign', 'If', 'Assign', 'Assign', 'Assert', 'Assert']), ('orelse', [])]": 1, "While -> [('test', 'UnaryOp'), ('body', ['Expr']), ('orelse', [])]": 3, "If -> [('test', 'Call'), ('body', ['Assign']), ('orelse', ['Assign', 'Assign'])]": 5, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 24, "Return -> [('value', 'Compare')]": 178, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'TryExcept', 'If']), ('orelse', [])]": 1, "List -> [('elts', ['Name', 'Name']), ('ctx', 'Load')]": 157, "Tuple -> [('elts', ['Attribute', 'Call', 'Attribute', 'Call']), ('ctx', 'Load')]": 2, "While -> [('test', 'Call'), ('body', ['Expr', 'Expr', 'AugAssign']), ('orelse', [])]": 1, "If -> [('test', 'Name'), ('body', ['If', 'If', 'Return']), ('orelse', [])]": 1, "If -> [('test', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'Assign']), ('orelse', ['Return'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Subscript']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Assign', 'Expr']), ('decorator_list', ['Name'])]": 1, "AugAssign -> [('target', 'Name'), ('op', 'Mult'), ('value', 'BinOp')]": 3, "Dict -> [('keys', ['Str', 'Str']), ('values', ['List', 'List'])]": 4, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Assign']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Expr', 'Expr', 'Continue']), ('orelse', ['For'])]": 1, "ListComp -> [('elt', 'Num'), ('generators', ['comprehension'])]": 10, "If -> [('test', 'Compare'), ('body', ['Assign', 'Expr', 'Expr', 'If', 'Break']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['TryExcept', 'If']), ('decorator_list', [])]": 4, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'If', 'For', 'Assert']), ('decorator_list', [])]": 2, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Expr', 'Expr', 'Expr']), ('orelse', ['Assign', 'Expr'])]": 1, "Tuple -> [('elts', ['Num', 'Str', 'Str', 'Num', 'Str', 'Num']), ('ctx', 'Load')]": 1, "If -> [('test', 'Call'), ('body', ['Assign', 'Assign', 'For', 'Expr', 'Expr', 'Expr']), ('orelse', ['Assign', 'Expr'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Call', 'Num']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 13, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]": 4, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'FunctionDef', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Str']), ('keywords', ['keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 15, "While -> [('test', 'Name'), ('body', ['TryExcept', 'If']), ('orelse', [])]": 1, "BinOp -> [('left', 'Num'), ('op', 'Sub'), ('right', 'BinOp')]": 13, "BoolOp -> [('op', 'And'), ('values', ['Compare', 'BinOp'])]": 3, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Expr', 'AugAssign', 'If']), ('orelse', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Return']), ('orelse', [])]": 42, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Name', 'Name', 'Name', 'Subscript', 'Subscript', 'Subscript'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign']), ('decorator_list', [])]": 370, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'If', 'Assign', 'If', 'Expr', 'If', 'If', 'Assign', 'If', 'If', 'Assign', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'BoolOp'), ('body', ['ImportFrom', 'Assign', 'Assign']), ('orelse', ['Assign'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'ClassDef', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name']), ('vararg', 'str'), ('kwarg', 'NoneType'), ('defaults', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Tuple'), ('body', ['Assign', 'Assign', 'Assign', 'Assert', 'Assert', 'Assert', 'Assert', 'Assign', 'Expr', 'Assign', 'Assign', 'Assert']), ('orelse', [])]": 1, "TryFinally -> [('body', ['Expr', 'With']), ('finalbody', ['Expr'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'If', 'If', 'For']), ('decorator_list', [])]": 2, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Num', 'Str', 'Name'])]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['TryExcept', 'Expr']), ('orelse', [])]": 2, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'Assign', 'If'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'If', 'Return']), ('decorator_list', [])]": 15, "Module -> [('body', ['Import', 'Import', 'Import', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Num', 'Str', 'Str', 'Str'])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'FunctionDef', 'FunctionDef', 'ClassDef', 'ClassDef']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For']), ('decorator_list', [])]": 2, "If -> [('test', 'Name'), ('body', ['Assign', 'Assign']), ('orelse', ['Assign', 'Assign', 'Assign', 'Assign'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Subscript', 'Subscript']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "If -> [('test', 'BoolOp'), ('body', ['Assign', 'AugAssign']), ('orelse', [])]": 4, "BinOp -> [('left', 'Name'), ('op', 'Div'), ('right', 'Call')]": 37, "Compare -> [('left', 'Subscript'), ('ops', ['In']), ('comparators', ['Tuple'])]": 35, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['BinOp', 'Str', 'Str', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 3, "If -> [('test', 'BoolOp'), ('body', ['For', 'Expr']), ('orelse', [])]": 3, "Module -> [('body', ['Import', 'Expr', 'ImportFrom', 'Import', 'Expr', 'ImportFrom', 'For', 'For'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Call', 'Name', 'List', 'Num', 'Num', 'Tuple', 'Tuple']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Call -> [('func', 'Name'), ('args', ['Name', 'Attribute', 'Name', 'Attribute', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "TryExcept -> [('body', ['While']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 7, "If -> [('test', 'Compare'), ('body', ['Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'If', 'If']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Return']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Subscript'), ('body', ['Assign', 'FunctionDef', 'Assign', 'Expr']), ('orelse', [])]": 1, "If -> [('test', 'BoolOp'), ('body', ['Raise']), ('orelse', ['Raise'])]": 1, "With -> [('context_expr', 'Call'), ('optional_vars', 'NoneType'), ('body', ['With', 'With', 'Expr'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Str', 'Attribute', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'For', 'AugAssign', 'Return']), ('orelse', [])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['Str', 'BinOp', 'Name'])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Expr', 'Expr', 'Expr', 'Return']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'Expr', 'Expr']), ('decorator_list', ['Attribute'])]": 1, "ImportFrom -> [('module', 'str'), ('names', ['alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias']), ('level', 'int')]": 7, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['If', 'Assign', 'If', 'Assign', 'Expr', 'Expr']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'If', 'TryExcept', 'Assign', 'If', 'TryExcept', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['TryExcept', 'Assign', 'Assign', 'For', 'Return']), ('decorator_list', [])]": 2, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['If', 'If', 'Assign', 'Assign', 'Expr']), ('orelse', [])]": 1, "ExceptHandler -> [('type', 'Attribute'), ('name', 'NoneType'), ('body', ['Expr', 'Expr'])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Attribute', 'Call', 'Call', 'Call'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'If']), ('decorator_list', [])]": 2, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Expr', 'Expr', 'Assign', 'If', 'Expr']), ('orelse', [])]": 1, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'Expr', 'ImportFrom', 'Expr', 'ImportFrom', 'Expr', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Expr', 'Expr', 'ImportFrom', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'ImportFrom', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'ImportFrom', 'Expr', 'Expr', 'Expr'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'For', 'For']), ('decorator_list', [])]": 1, "BinOp -> [('left', 'Call'), ('op', 'Add'), ('right', 'Str')]": 152, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('orelse', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Tuple', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 23, "With -> [('context_expr', 'Call'), ('optional_vars', 'NoneType'), ('body', ['If', 'If', 'For'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Attribute', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 4, "Compare -> [('left', 'Name'), ('ops', ['Lt']), ('comparators', ['Tuple'])]": 10, "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'Assign']), ('orelse', ['For', 'If'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'ImportFrom', 'ImportFrom', 'If', 'If']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign']), ('decorator_list', [])]": 1, "If -> [('test', 'Name'), ('body', ['Expr']), ('orelse', ['Assign', 'If', 'Expr'])]": 2, "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign', 'Expr']), ('orelse', [])]": 6, "If -> [('test', 'Compare'), ('body', ['If', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('orelse', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'BinOp', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 4, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assert', 'Assign', 'Assert', 'Assert', 'Assign', 'Assert', 'Assert']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'TryExcept', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'If', 'Assign', 'Assign', 'If', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'Name'), ('body', ['For', 'If']), ('orelse', [])]": 5, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'TryExcept', 'Expr', 'Expr', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'Assign']), ('decorator_list', [])]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'For', 'Expr', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "If -> [('test', 'Name'), ('body', ['Expr', 'Expr']), ('orelse', ['Assign', 'Expr'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'If', 'Assign', 'If', 'Assign', 'TryExcept']), ('decorator_list', [])]": 4, "If -> [('test', 'Name'), ('body', ['Assign', 'For', 'Assign']), ('orelse', [])]": 3, "If -> [('test', 'Compare'), ('body', ['Assign', 'If', 'If', 'Assign']), ('orelse', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Subscript']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 4, "If -> [('test', 'Subscript'), ('body', ['Assign']), ('orelse', ['Assign'])]": 14, "Call -> [('func', 'Attribute'), ('args', ['Call', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "ExceptHandler -> [('type', 'Attribute'), ('name', 'NoneType'), ('body', ['Pass'])]": 43, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Expr', 'If', 'Expr']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'TryExcept']), ('decorator_list', [])]": 2, "TryExcept -> [('body', ['Expr', 'Expr']), ('handlers', ['ExceptHandler', 'ExceptHandler']), ('orelse', [])]": 1, "TryExcept -> [('body', ['Import', 'Assign', 'Assign']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 1, "If -> [('test', 'Compare'), ('body', ['ImportFrom']), ('orelse', [])]": 3, "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'ImportFrom', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef'])]": 1, "ExceptHandler -> [('type', 'Attribute'), ('name', 'NoneType'), ('body', ['Expr', 'Return'])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'ClassDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Print', 'Print', 'Print', 'Assign', 'If', 'Assign', 'If']), ('orelse', [])]": 1, "For -> [('target', 'Name'), ('iter', 'BinOp'), ('body', ['Assign', 'Assign', 'With']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Num', 'Num'])]": 14, "If -> [('test', 'Compare'), ('body', ['Assign']), ('orelse', ['Continue'])]": 2, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Attribute', 'Attribute', 'Attribute', 'Call', 'Call', 'Call', 'Call', 'Attribute'])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'For', 'Print', 'Print']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'Assign', 'Assign', 'If', 'TryExcept', 'Print']), ('decorator_list', [])]": 1, "If -> [('test', 'BinOp'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('orelse', [])]": 1, "arguments -> [('args', ['Name', 'Name']), ('vararg', 'str'), ('kwarg', 'str'), ('defaults', ['Str'])]": 1, "If -> [('test', 'Compare'), ('body', ['Expr']), ('orelse', ['Assign', 'Expr', 'Expr', 'Expr'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Return']), ('decorator_list', [])]": 1, "BinOp -> [('left', 'Num'), ('op', 'Div'), ('right', 'BinOp')]": 35, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'TryExcept']), ('orelse', [])]": 2, "Print -> [('dest', 'Attribute'), ('values', ['Name']), ('nl', 'bool')]": 1, "Expr -> [('value', 'Call')]": 31943, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assert', 'Assert', 'Assign', 'Assign', 'Assert', 'Assign', 'Assign', 'Assert']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'If', 'Expr']), ('orelse', [])]": 8, "If -> [('test', 'Compare'), ('body', ['Expr', 'Expr', 'Expr']), ('orelse', [])]": 15, "Assign -> [('targets', ['Name', 'Name', 'Name']), ('value', 'Name')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'If', 'Expr']), ('decorator_list', ['Name'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['FunctionDef', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr']), ('orelse', [])]": 1, "If -> [('test', 'BoolOp'), ('body', ['Assign', 'For', 'Return']), ('orelse', ['Raise'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Str', 'Name', 'Str']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 3, "If -> [('test', 'Compare'), ('body', ['Assign', 'For', 'Expr']), ('orelse', [])]": 3, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['FunctionDef', 'Assign', 'FunctionDef']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name']), ('keywords', []), ('starargs', 'Call'), ('kwargs', 'NoneType')]": 1, "Print -> [('dest', 'NoneType'), ('values', ['Name', 'Str', 'Subscript', 'Str', 'Subscript', 'Str', 'Name', 'Call']), ('nl', 'bool')]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Name', 'Str', 'Str', 'Name', 'UnaryOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'For', 'Expr', 'For']), ('decorator_list', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Lambda', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 7, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Return']), ('decorator_list', [])]": 1, "Compare -> [('left', 'Subscript'), ('ops', ['GtE']), ('comparators', ['Tuple'])]": 2, "Tuple -> [('elts', ['Name', 'Call', 'Call']), ('ctx', 'Load')]": 13, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Subscript', 'Subscript', 'Subscript']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Call -> [('func', 'Attribute'), ('args', ['Call']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 153, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'ClassDef', 'TryExcept']), ('decorator_list', [])]": 2, "If -> [('test', 'Compare'), ('body', ['Expr', 'Assign']), ('orelse', [])]": 48, "Call -> [('func', 'Name'), ('args', ['Call', 'Str', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'Assign']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]": 2, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'If', 'Expr', 'Expr', 'Expr', 'Expr']), ('orelse', [])]": 1, "If -> [('test', 'BoolOp'), ('body', ['Assign']), ('orelse', ['Assign', 'If'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'For', 'Expr', 'For']), ('decorator_list', [])]": 1, "TryExcept -> [('body', ['Expr', 'Assign', 'Assign', 'For', 'Assign', 'Return']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign']), ('orelse', ['Expr', 'Assign'])]": 1, "If -> [('test', 'Compare'), ('body', ['Return']), ('orelse', ['Pass'])]": 2, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['If', 'Assign', 'For']), ('orelse', [])]": 4, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Delete', 'Delete']), ('orelse', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef']), ('decorator_list', [])]": 1, "If -> [('test', 'Subscript'), ('body', ['Expr']), ('orelse', ['If'])]": 2, "If -> [('test', 'Compare'), ('body', ['For', 'Return']), ('orelse', ['Expr', 'Return'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'If', 'TryExcept', 'If', 'Assign', 'Expr', 'Expr', 'Expr', 'Print', 'If']), ('decorator_list', [])]": 1, "If -> [('test', 'UnaryOp'), ('body', ['If', 'For']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'For']), ('decorator_list', ['Name'])]": 1, "TryFinally -> [('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr']), ('finalbody', ['Assign'])]": 2, "If -> [('test', 'Compare'), ('body', ['Assert', 'Assert']), ('orelse', ['If'])]": 1, "If -> [('test', 'Attribute'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Return']), ('orelse', ['Expr', 'Expr'])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign']), ('orelse', ['AugAssign', 'AugAssign'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'For', 'Assign', 'If', 'For', 'If', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr']), ('decorator_list', ['Name', 'Name', 'Name'])]": 2, "If -> [('test', 'UnaryOp'), ('body', ['TryExcept', 'For']), ('orelse', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Lambda']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "If -> [('test', 'Call'), ('body', ['Raise']), ('orelse', ['Raise'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'TryFinally']), ('decorator_list', [])]": 1, "If -> [('test', 'Name'), ('body', ['Assign', 'Assign', 'For', 'Expr', 'AugAssign', 'Expr']), ('orelse', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Expr', 'If']), ('decorator_list', [])]": 5, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'ImportFrom', 'Assign', 'If', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'ImportFrom', 'ImportFrom', 'For', 'Assign', 'Return']), ('decorator_list', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Call', 'Call', 'Num', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'For']), ('orelse', ['If'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Num', 'Str']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 8, "If -> [('test', 'Call'), ('body', ['Pass']), ('orelse', ['Expr'])]": 2, "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Print', 'Return']), ('orelse', ['Return'])]": 1, "Dict -> [('keys', ['BinOp']), ('values', ['Tuple'])]": 4, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Num', 'Num', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 3, "If -> [('test', 'Call'), ('body', ['Expr']), ('orelse', ['If', 'If'])]": 1, "BoolOp -> [('op', 'And'), ('values', ['UnaryOp', 'Compare', 'Compare', 'Compare'])]": 2, "Call -> [('func', 'Attribute'), ('args', ['Str', 'Str', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 4, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Global', 'Assign', 'Assign', 'Print', 'If', 'Expr']), ('decorator_list', [])]": 1, "TryExcept -> [('body', ['Assign', 'Expr', 'Assign', 'Expr']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 2, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'Import', 'ClassDef', 'If'])]": 1, "If -> [('test', 'Attribute'), ('body', ['Print', 'For', 'Print', 'Print', 'For']), ('orelse', ['If'])]": 1, "Module -> [('body', ['Import', 'ImportFrom', 'Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'TryExcept', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'ClassDef', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'ClassDef'])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'If']), ('orelse', ['Assign'])]": 5, "Assign -> [('targets', ['Attribute']), ('value', 'Tuple')]": 38, "ExceptHandler -> [('type', 'Name'), ('name', 'Name'), ('body', ['Print', 'Assign', 'Return'])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['Call', 'Name', 'Name'])]": 2, "If -> [('test', 'UnaryOp'), ('body', ['Expr', 'Expr']), ('orelse', ['Expr'])]": 3, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Num']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Tuple -> [('elts', ['Tuple', 'Dict']), ('ctx', 'Load')]": 12, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign']), ('decorator_list', [])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Attribute', 'Attribute', 'Num', 'Num', 'Num', 'Num', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', [])]": 1, "Module -> [('body', ['Import', 'Expr', 'ImportFrom', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'FunctionDef', 'If'])]": 1, "ExceptHandler -> [('type', 'NoneType'), ('name', 'NoneType'), ('body', ['Continue'])]": 6, "Compare -> [('left', 'Call'), ('ops', ['LtE']), ('comparators', ['BinOp'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['FunctionDef', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'For']), ('decorator_list', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Name', 'Name', 'Tuple']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'Assign', 'Assign', 'If']), ('decorator_list', ['Name'])]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Expr', 'Assign', 'Assign', 'If', 'If']), ('orelse', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'While']), ('orelse', [])]": 1, "Tuple -> [('elts', ['Call', 'Attribute']), ('ctx', 'Load')]": 23, "Call -> [('func', 'Name'), ('args', ['Call', 'Subscript', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "BinOp -> [('left', 'Name'), ('op', 'Mult'), ('right', 'Name')]": 192, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call'])]": 2, "Tuple -> [('elts', ['Attribute', 'Str', 'Num', 'Num']), ('ctx', 'Load')]": 6, "While -> [('test', 'Name'), ('body', ['Assign', 'Expr']), ('orelse', [])]": 2, "Lambda -> [('args', 'arguments'), ('body', 'Attribute')]": 27, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['If', 'Assign', 'If', 'Assign', 'Assign', 'Expr']), ('orelse', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Expr', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Name', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 6, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 3, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Expr', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Call', 'Call', 'Call', 'Num', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 5, "If -> [('test', 'Compare'), ('body', ['Expr', 'Expr']), ('orelse', ['Expr'])]": 10, "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['Assign', 'For', 'Return'])]": 1, "If -> [('test', 'BoolOp'), ('body', ['Assign', 'For', 'Assign', 'For', 'If', 'If', 'Return']), ('orelse', [])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['List', 'List', 'List', 'Num'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assert', 'Assign']), ('decorator_list', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 3, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name'])]": 1, "If -> [('test', 'Compare'), ('body', ['For']), ('orelse', ['If'])]": 13, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'TryExcept', 'Expr', 'Expr', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'Name'), ('body', ['Expr', 'Assign', 'Expr']), ('orelse', [])]": 2, "If -> [('test', 'Compare'), ('body', ['Assign']), ('orelse', ['Assign', 'TryExcept', 'Assign', 'Assign'])]": 1, "If -> [('test', 'Name'), ('body', ['Assign', 'For', 'Assign', 'For', 'If', 'Return']), ('orelse', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Name']), ('keywords', ['keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Tuple -> [('elts', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('ctx', 'Store')]": 2, "Assert -> [('test', 'BoolOp'), ('msg', 'NoneType')]": 10, "If -> [('test', 'Call'), ('body', ['Assign', 'If', 'Expr']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'TryExcept', 'For', 'Return']), ('decorator_list', [])]": 1, "Call -> [('func', 'Call'), ('args', ['Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 21, "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign', 'For', 'Assign', 'For', 'Return']), ('orelse', [])]": 1, "If -> [('test', 'Call'), ('body', ['Pass']), ('orelse', ['Assign'])]": 2, "List -> [('elts', ['Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'BinOp', 'BinOp', 'Name', 'BinOp', 'BinOp', 'BinOp', 'Name', 'BinOp', 'Num']), ('ctx', 'Load')]": 1, "TryExcept -> [('body', ['Assign', 'Assign', 'If', 'Return']), ('handlers', ['ExceptHandler', 'ExceptHandler', 'ExceptHandler', 'ExceptHandler', 'ExceptHandler', 'ExceptHandler']), ('orelse', [])]": 1, "If -> [('test', 'Attribute'), ('body', ['Assign']), ('orelse', ['Raise'])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Name', 'Num', 'Name', 'Name', 'Name'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'TryExcept', 'Assign', 'TryExcept', 'Assign', 'TryExcept']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'If', 'Assign', 'For', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Name', 'Name']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "If -> [('test', 'Name'), ('body', ['Assert', 'Expr', 'Assign']), ('orelse', [])]": 1, "Compare -> [('left', 'Attribute'), ('ops', ['GtE']), ('comparators', ['Attribute'])]": 9, "ExceptHandler -> [('type', 'Attribute'), ('name', 'Name'), ('body', ['Pass'])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Print', 'Return']), ('orelse', ['Return'])]": 1, "If -> [('test', 'Name'), ('body', ['Assign']), ('orelse', ['Assign', 'Assign'])]": 9, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'str'), ('defaults', [])]": 11, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'FunctionDef', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'TryExcept', 'Expr']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assert', 'Assign', 'Assign', 'Assign', 'Assign', 'Assert', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'Assign', 'If', 'Assign', 'If', 'If', 'If', 'If', 'Assign', 'Assign', 'If', 'If', 'Assign', 'If', 'Assign', 'If']), ('decorator_list', ['Name'])]": 2, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'If']), ('orelse', [])]": 1, "If -> [('test', 'Compare'), ('body', ['For', 'For', 'For', 'For']), ('orelse', [])]": 2, "Tuple -> [('elts', ['Call', 'Name', 'Name', 'Name', 'Call']), ('ctx', 'Load')]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Expr', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'If'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'If', 'Assign', 'Expr', 'Return']), ('decorator_list', [])]": 1, "List -> [('elts', ['Str', 'Call', 'Str']), ('ctx', 'Load')]": 6, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'For', 'Expr']), ('decorator_list', [])]": 1, "If -> [('test', 'UnaryOp'), ('body', ['Expr', 'Expr', 'If']), ('orelse', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'For', 'Return']), ('decorator_list', [])]": 4, "If -> [('test', 'Compare'), ('body', ['If', 'Assign', 'If', 'Return']), ('orelse', ['If'])]": 2, "Call -> [('func', 'Name'), ('args', ['BinOp']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 11, "ClassDef -> [('name', 'str'), ('bases', []), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 7, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Name', 'Num'])]": 4, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['TryExcept', 'Assign', 'Return']), ('orelse', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'If', 'If', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'For', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Return']), ('decorator_list', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Str', 'Str', 'ListComp']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Subscript', 'Subscript', 'Subscript', 'Subscript']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Call', 'Call', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "For -> [('target', 'Name'), ('iter', 'Tuple'), ('body', ['Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'For']), ('orelse', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'If', 'If', 'If', 'Return']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'UnaryOp', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 4, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['If', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'For', 'If', 'Expr', 'Expr']), ('orelse', [])]": 1, "With -> [('context_expr', 'Name'), ('optional_vars', 'Name'), ('body', ['TryExcept', 'Assign', 'If', 'Expr'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Assign', 'ClassDef', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['For', 'Expr', 'For', 'For', 'Assert']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Call', 'Name', 'Name', 'Call', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['If', 'Assign', 'Expr', 'Assert', 'TryExcept']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'If', 'Return']), ('decorator_list', ['Call', 'Name', 'Call'])]": 1, "Tuple -> [('elts', ['Str', 'Str', 'BinOp', 'BinOp', 'Num']), ('ctx', 'Load')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'FunctionDef', 'If', 'Return']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Return']), ('decorator_list', [])]": 2, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'Expr', 'If', 'Assign', 'For']), ('orelse', [])]": 2, "If -> [('test', 'BoolOp'), ('body', ['Assign', 'For', 'Assign', 'Assert', 'Assign', 'Expr', 'Assign', 'Assign', 'For', 'Expr', 'Expr']), ('orelse', [])]": 1, "If -> [('test', 'Name'), ('body', ['Assign']), ('orelse', [])]": 277, "Call -> [('func', 'Attribute'), ('args', ['Name', 'List', 'Num', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'Assign', 'Assign', 'If', 'If', 'Assign', 'Return']), ('decorator_list', [])]": 1, "While -> [('test', 'BoolOp'), ('body', ['Assign', 'If', 'For', 'Assign', 'AugAssign']), ('orelse', [])]": 2, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Str', 'Name', 'Name', 'Name'])]": 3, "If -> [('test', 'Compare'), ('body', ['Assign', 'For']), ('orelse', ['Print'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Assign', 'Return']), ('decorator_list', [])]": 8, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'Assign', 'If', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'If', 'If']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'ImportFrom', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['If', 'Expr', 'Continue']), ('orelse', [])]": 1, "If -> [('test', 'Name'), ('body', ['If']), ('orelse', ['Assign', 'Expr'])]": 5, "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['Assign', 'For', 'Assign', 'Assign']), ('orelse', [])]": 1, "BoolOp -> [('op', 'Or'), ('values', ['Call', 'Num'])]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'If', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'For', 'Expr']), ('orelse', ['Import', 'Assign', 'For', 'Expr'])]": 1, "Call -> [('func', 'Subscript'), ('args', ['BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Str', 'Call', 'Name', 'Call', 'Name']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['TryExcept', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "Tuple -> [('elts', ['Str', 'Num', 'Subscript']), ('ctx', 'Load')]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'If', 'Assign', 'Assign', 'If', 'If', 'If', 'Return']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Call']), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'Name'), ('kwargs', 'Name')]": 1, "If -> [('test', 'BoolOp'), ('body', ['Assign']), ('orelse', ['Assign', 'If', 'Assign'])]": 2, "If -> [('test', 'Call'), ('body', ['Assign', 'If', 'If', 'Assign']), ('orelse', [])]": 1, "If -> [('test', 'Call'), ('body', ['AugAssign', 'Expr', 'Expr']), ('orelse', [])]": 2, "Call -> [('func', 'Name'), ('args', ['Name', 'BinOp']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'FunctionDef', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign', 'For']), ('orelse', ['Expr', 'Expr'])]": 2, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'ClassDef']), ('decorator_list', [])]": 1, "AugAssign -> [('target', 'Attribute'), ('op', 'Sub'), ('value', 'Num')]": 44, "If -> [('test', 'Compare'), ('body', ['Expr', 'Print', 'AugAssign']), ('orelse', [])]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'Assign', 'ClassDef', 'Assign', 'ClassDef', 'ClassDef'])]": 1, "BinOp -> [('left', 'Subscript'), ('op', 'Mod'), ('right', 'Call')]": 7, "Call -> [('func', 'Name'), ('args', ['BoolOp']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 4, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'ImportFrom', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'If', 'If', 'Expr']), ('decorator_list', [])]": 2, "If -> [('test', 'Name'), ('body', ['For']), ('orelse', ['If', 'Return'])]": 1, "With -> [('context_expr', 'Call'), ('optional_vars', 'NoneType'), ('body', ['Assign', 'Assign', 'For', 'Expr'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'If', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'AugAssign', 'AugAssign', 'Expr', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Str', 'Call', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 5, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'If', 'Assign', 'Assign', 'Return']), ('decorator_list', ['Call'])]": 1, "Compare -> [('left', 'Name'), ('ops', ['Eq']), ('comparators', ['Str'])]": 1062, "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['Assign', 'Expr', 'Continue'])]": 1, "Compare -> [('left', 'Call'), ('ops', ['Lt']), ('comparators', ['Num'])]": 83, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'Assign', 'Assign', 'FunctionDef', 'Assign']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'If', 'Assign', 'If', 'Assign', 'Assign']), ('orelse', ['Assign', 'If', 'Assign', 'If', 'Assign', 'Assign'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'TryFinally']), ('decorator_list', [])]": 1, "Module -> [('body', ['Import', 'ImportFrom', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'For', 'For', 'Expr']), ('decorator_list', [])]": 1, "Dict -> [('keys', ['Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num']), ('values', ['Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num'])]": 1, "ExceptHandler -> [('type', 'Attribute'), ('name', 'NoneType'), ('body', ['Return'])]": 41, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', ['Call'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'If', 'Assign', 'If', 'Expr', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Expr', 'For', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'If', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'BoolOp'), ('body', ['Expr', 'Expr', 'Break']), ('orelse', [])]": 1, "Compare -> [('left', 'Name'), ('ops', ['LtE']), ('comparators', ['Num'])]": 38, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'str'), ('defaults', ['Str', 'Name', 'Name', 'Str', 'Name', 'Str', 'Str'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'If', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'If', 'If']), ('orelse', [])]": 1, "Tuple -> [('elts', ['Name', 'Str', 'Name']), ('ctx', 'Load')]": 13, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name'])]": 27, "comprehension -> [('target', 'Name'), ('iter', 'Name'), ('ifs', ['Attribute'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Global', 'If', 'Assign', 'Assign', 'Print', 'Expr', 'Return']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['If', 'Assign', 'If', 'If']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Assign', 'Expr', 'If', 'For', 'Assign', 'Assign', 'If', 'Assign', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'For', 'Expr']), ('decorator_list', [])]": 2, "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['Name', 'Name', 'Dict'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'For', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'If', 'Assign', 'If', 'Assign', 'If']), ('decorator_list', ['Call'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Num']), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 6, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'If', 'Expr', 'For']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'With', 'Assign', 'If', 'Expr', 'If', 'If', 'If']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Str', 'Name', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 13, "If -> [('test', 'Attribute'), ('body', ['Assign', 'Assign', 'Expr', 'Assign']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr']), ('decorator_list', ['Attribute'])]": 10, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Call', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Tuple', 'Str', 'Attribute', 'Name', 'Name', 'Name'])]": 2, "Call -> [('func', 'Name'), ('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Subscript']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "BoolOp -> [('op', 'And'), ('values', ['Attribute', 'Name', 'Compare'])]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('orelse', [])]": 3, "If -> [('test', 'Compare'), ('body', ['Return']), ('orelse', ['Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'While', 'Return'])]": 1, "If -> [('test', 'Name'), ('body', ['Assign', 'If', 'If', 'TryExcept', 'If', 'Assign', 'TryExcept', 'TryExcept']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Return', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Expr', 'Assign', 'If', 'If', 'Assign', 'For', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'Name'), ('body', ['Assign', 'AugAssign']), ('orelse', [])]": 5, "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'Import', 'Expr', 'Import', 'Assign', 'Assign', 'Print', 'Assign']), ('orelse', [])]": 1, "Tuple -> [('elts', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('ctx', 'Load')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'For', 'Assign', 'Expr', 'Return']), ('decorator_list', [])]": 1, "List -> [('elts', ['Call', 'Name', 'Name', 'Name']), ('ctx', 'Load')]": 1, "Compare -> [('left', 'Name'), ('ops', ['Gt']), ('comparators', ['Attribute'])]": 17, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['AugAssign', 'For']), ('orelse', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('orelse', [])]": 1, "Assign -> [('targets', ['Subscript', 'Subscript']), ('value', 'Call')]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'TryExcept', 'If', 'Assign']), ('orelse', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', []), ('body', ['ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "If -> [('test', 'Name'), ('body', ['Pass']), ('orelse', ['Expr', 'If', 'Expr', 'Expr'])]": 2, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]": 1, "If -> [('test', 'Attribute'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'For']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign']), ('decorator_list', [])]": 108, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'If', 'TryExcept', 'Return']), ('decorator_list', [])]": 3, "BoolOp -> [('op', 'And'), ('values', ['Name', 'Name', 'Compare'])]": 3, "If -> [('test', 'Call'), ('body', ['If', 'If']), ('orelse', ['Assert', 'Continue'])]": 1, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'If', 'TryExcept', 'Assign', 'If', 'If', 'AugAssign', 'If']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Assert']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Print', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['If', 'AugAssign']), ('orelse', [])]": 2, "Compare -> [('left', 'Name'), ('ops', ['Eq']), ('comparators', ['Call'])]": 36, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'If', 'Expr']), ('decorator_list', [])]": 3, "Tuple -> [('elts', ['Name', 'Name']), ('ctx', 'Store')]": 2222, "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['Name', 'Name', 'Call'])]": 11, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign']), ('decorator_list', ['Name'])]": 5, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'AugAssign', 'AugAssign', 'Assign', 'Assign', 'Assign', 'For', 'AugAssign', 'If', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'If', 'While', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'ListComp'), ('body', ['Print', 'Assign', 'Assign', 'Print', 'For']), ('orelse', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'TryExcept', 'For', 'Expr']), ('orelse', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Call', 'Call', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 54, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'While', 'Expr', 'Return']), ('decorator_list', [])]": 3, "If -> [('test', 'Call'), ('body', ['Expr', 'Expr']), ('orelse', [])]": 18, "TryFinally -> [('body', ['Assign', 'Assign', 'Assign']), ('finalbody', ['Expr'])]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Delete', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Return']), ('decorator_list', [])]": 1, "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['Assign', 'Assign', 'Expr', 'AugAssign', 'Assign'])]": 1, "If -> [('test', 'Compare'), ('body', ['Print', 'Return']), ('orelse', [])]": 30, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'Import', 'Assign', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef'])]": 2, "Call -> [('func', 'Name'), ('args', ['BoolOp', 'Name']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 6, "Call -> [('func', 'Attribute'), ('args', []), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 11, "Call -> [('func', 'Name'), ('args', ['Name', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 187, "ExceptHandler -> [('type', 'NoneType'), ('name', 'NoneType'), ('body', ['Expr', 'Expr', 'Raise'])]": 2, "BinOp -> [('left', 'Name'), ('op', 'Sub'), ('right', 'Subscript')]": 24, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'TryExcept', 'Expr', 'Assign', 'TryExcept', 'If', 'Expr']), ('decorator_list', [])]": 1, "List -> [('elts', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('ctx', 'Load')]": 2, "BoolOp -> [('op', 'Or'), ('values', ['UnaryOp', 'BoolOp'])]": 5, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', ['Call'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Compare', 'Compare']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 5, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'For', 'For', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "Tuple -> [('elts', ['Name', 'Str', 'Num']), ('ctx', 'Load')]": 36, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Attribute', 'Name', 'Num', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "If -> [('test', 'UnaryOp'), ('body', ['Assert']), ('orelse', [])]": 34, "Dict -> [('keys', ['Str', 'Str']), ('values', ['Num', 'List'])]": 1, "Assign -> [('targets', ['Attribute']), ('value', 'BoolOp')]": 69, "ClassDef -> [('name', 'str'), ('bases', ['Attribute', 'Name']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'For', 'Expr', 'Expr', 'Expr', 'Assign', 'If']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'For', 'Expr', 'Expr']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'If', 'Expr', 'Assign', 'For', 'If']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 2, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'If', 'Assign', 'If', 'Return']), ('decorator_list', [])]": 2, "Call -> [('func', 'Attribute'), ('args', []), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'Name')]": 170, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'FunctionDef', 'Return']), ('decorator_list', [])]": 4, "BoolOp -> [('op', 'And'), ('values', ['Subscript', 'Call'])]": 2, "Call -> [('func', 'Attribute'), ('args', ['Call', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 169, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'If', 'If', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Name', 'Str', 'Str'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'For', 'Expr', 'Return']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'For', 'If']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'TryExcept']), ('decorator_list', [])]": 1, "List -> [('elts', ['Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple']), ('ctx', 'Load')]": 5, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Assign', 'Expr', 'Expr', 'Import', 'ImportFrom', 'Import', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'Import', 'ClassDef', 'Import', 'If'])]": 1, "If -> [('test', 'Name'), ('body', ['Print', 'Print', 'Expr', 'Print']), ('orelse', [])]": 2, "While -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'If']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Assign', 'Expr']), ('decorator_list', ['Name'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Str', 'BinOp', 'BinOp', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "For -> [('target', 'Name'), ('iter', 'Tuple'), ('body', ['TryExcept', 'Assign', 'For']), ('orelse', [])]": 2, "ImportFrom -> [('module', 'str'), ('names', ['alias', 'alias']), ('level', 'int')]": 830, "Call -> [('func', 'Attribute'), ('args', ['Tuple', 'Name']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 3, "Call -> [('func', 'Name'), ('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 9, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'Assign', 'If', 'If', 'Assign']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['BinOp', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 57, "Call -> [('func', 'Name'), ('args', ['Name', 'Attribute', 'Attribute', 'Attribute', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Compare -> [('left', 'Name'), ('ops', ['Eq']), ('comparators', ['Name'])]": 444, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['If', 'If', 'Assign', 'Assign', 'Assign', 'If']), ('orelse', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Attribute', 'Attribute', 'Attribute', 'Attribute', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "Compare -> [('left', 'Name'), ('ops', ['Gt']), ('comparators', ['Subscript'])]": 2, "Assign -> [('targets', ['Tuple']), ('value', 'Subscript')]": 60, "Tuple -> [('elts', ['Attribute', 'Attribute', 'Name']), ('ctx', 'Store')]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'Assign', 'Expr', 'Expr', 'TryExcept', 'Assign', 'Assign', 'Expr', 'For', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'BoolOp'), ('body', ['If', 'Assign']), ('orelse', ['If'])]": 2, "TryFinally -> [('body', ['Expr', 'Expr', 'If', 'Assign', 'Expr', 'Assign', 'Assert', 'Assign', 'Assign', 'If']), ('finalbody', ['Expr'])]": 1, "Call -> [('func', 'Name'), ('args', ['Name', 'Name']), ('keywords', ['keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 9, "If -> [('test', 'Compare'), ('body', ['ImportFrom', 'Assign', 'Expr']), ('orelse', [])]": 2, "List -> [('elts', ['Attribute', 'Str', 'Str', 'Str', 'Str', 'Name']), ('ctx', 'Load')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'For', 'For', 'Expr']), ('decorator_list', [])]": 2, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Expr', 'Assign', 'ClassDef', 'If'])]": 1, "If -> [('test', 'Attribute'), ('body', ['Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr']), ('orelse', [])]": 1, "If -> [('test', 'Compare'), ('body', ['If', 'If', 'Assign', 'If', 'If']), ('orelse', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Str', 'Name', 'Call', 'Call', 'Call', 'Call', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "If -> [('test', 'Compare'), ('body', ['Expr', 'Expr', 'ImportFrom', 'Expr', 'Expr', 'Expr']), ('orelse', [])]": 1, "Print -> [('dest', 'NoneType'), ('values', ['Str', 'Name', 'Name', 'Str', 'Name', 'Name', 'Str']), ('nl', 'bool')]": 1, "If -> [('test', 'Attribute'), ('body', ['Expr', 'If', 'Break']), ('orelse', [])]": 3, "Call -> [('func', 'Attribute'), ('args', ['Call', 'Name', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 4, "If -> [('test', 'Call'), ('body', ['Assign', 'If', 'Assign', 'If', 'If', 'If']), ('orelse', ['Assign', 'Assign'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 2, "List -> [('elts', ['Attribute', 'Call', 'Str']), ('ctx', 'Load')]": 4, "Call -> [('func', 'Name'), ('args', ['Call', 'Call', 'Call', 'Call']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'If']), ('decorator_list', [])]": 2, "keyword -> [('arg', 'str'), ('value', 'GeneratorExp')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'Import', 'ImportFrom', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['For', 'For', 'Return']), ('decorator_list', [])]": 3, "If -> [('test', 'Call'), ('body', ['Assign', 'For', 'If', 'Return']), ('orelse', [])]": 1, "ExceptHandler -> [('type', 'Name'), ('name', 'Name'), ('body', ['Assign', 'Assign', 'Assign'])]": 2, "Assign -> [('targets', ['Name']), ('value', 'Str')]": 2210, "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]": 1, "List -> [('elts', ['Str', 'Attribute', 'Attribute']), ('ctx', 'Load')]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Str', 'Str', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num'])]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'For', 'Assert', 'Expr']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 44, "Yield -> [('value', 'ListComp')]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef'])]": 1, "If -> [('test', 'BoolOp'), ('body', ['Assign', 'If']), ('orelse', ['If'])]": 2, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['If', 'If', 'Assign', 'TryExcept', 'TryExcept']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Import', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "Dict -> [('keys', ['Str']), ('values', ['Call'])]": 188, "Assert -> [('test', 'UnaryOp'), ('msg', 'Call')]": 3, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'ImportFrom', 'ImportFrom', 'ClassDef', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Str', 'BinOp']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'For']), ('decorator_list', [])]": 7, "Tuple -> [('elts', ['Str', 'BinOp']), ('ctx', 'Load')]": 7, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'If', 'Assign', 'If', 'If', 'Expr', 'If', 'Return']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Assign']), ('decorator_list', [])]": 1, "Tuple -> [('elts', ['IfExp', 'Name', 'Call']), ('ctx', 'Load')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Expr', 'Assign', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'FunctionDef', 'Expr']), ('decorator_list', [])]": 4, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Tuple', 'Name', 'Num', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'If', 'Assign', 'Assign', 'Print', 'Print']), ('orelse', [])]": 4, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "TryExcept -> [('body', ['Assign', 'Assign', 'Expr', 'Return']), ('handlers', ['ExceptHandler', 'ExceptHandler']), ('orelse', [])]": 1, "TryExcept -> [('body', ['Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'For']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 12, "TryExcept -> [('body', ['Assign', 'Assign', 'TryExcept']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'If', 'Assign', 'Assign']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'If', 'If']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['AugAssign', 'If', 'Assign', 'TryExcept', 'Expr']), ('orelse', [])]": 1, "ExceptHandler -> [('type', 'Name'), ('name', 'Name'), ('body', ['TryExcept', 'Raise'])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Num', 'Num', 'Name'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'TryExcept', 'TryExcept', 'If', 'Assign', 'Assign', 'If', 'Assign', 'For', 'Assign', 'If']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Break']), ('orelse', ['Assign'])]": 2, "If -> [('test', 'Compare'), ('body', ['Expr', 'Assign']), ('orelse', ['Assign', 'Expr', 'Assign'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Str', 'Name', 'Name', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "Module -> [('body', ['Import', 'Import', 'Import', 'Assign', 'Assign', 'Import', 'Assign', 'ClassDef', 'ClassDef', 'If'])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Call', 'Call', 'Name', 'Subscript', 'Name'])]": 1, "If -> [('test', 'Call'), ('body', ['Assign', 'Expr', 'Expr', 'Expr']), ('orelse', ['Assign'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'For', 'Expr']), ('decorator_list', ['Name'])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('orelse', ['If'])]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Delete', 'Expr', 'Assign', 'Assign', 'Expr', 'Delete', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Name', 'BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 10, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Expr', 'Assign', 'Assign', 'If', 'Expr']), ('orelse', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Num', 'BinOp', 'Num', 'Name']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Global', 'Assign', 'Assign', 'If', 'Assign', 'If', 'If', 'If', 'If', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Expr', 'TryFinally']), ('orelse', [])]": 1, "Compare -> [('left', 'Name'), ('ops', ['GtE']), ('comparators', ['Tuple'])]": 7, "Assign -> [('targets', ['Name', 'Subscript']), ('value', 'Call')]": 12, "Call -> [('func', 'Name'), ('args', ['Subscript', 'Subscript', 'Subscript', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'TryExcept', 'Assign', 'AugAssign', 'Assign']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "Module -> [('body', ['Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef'])]": 1, "If -> [('test', 'Compare'), ('body', ['Expr', 'If']), ('orelse', ['Expr'])]": 1, "Tuple -> [('elts', ['Name', 'Num', 'Num']), ('ctx', 'Load')]": 9, "If -> [('test', 'BoolOp'), ('body', ['Expr', 'Expr', 'Expr', 'Expr']), ('orelse', [])]": 2, "Module -> [('body', ['Import', 'ImportFrom', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'ClassDef'])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name'])]": 1, "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Return']), ('orelse', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'TryExcept', 'Assign', 'Assign', 'Assign', 'For', 'For', 'Expr', 'Expr'])]": 1, "Call -> [('func', 'Name'), ('args', ['Attribute', 'Name', 'Name']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "If -> [('test', 'Name'), ('body', ['Assign', 'Expr', 'Assign', 'Assign']), ('orelse', ['Expr'])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name']), ('vararg', 'str'), ('kwarg', 'str'), ('defaults', ['List'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'Print', 'Assign', 'Return']), ('decorator_list', [])]": 1, "For -> [('target', 'Tuple'), ('iter', 'BinOp'), ('body', ['If']), ('orelse', [])]": 1, "Tuple -> [('elts', ['Call']), ('ctx', 'Load')]": 59, "Tuple -> [('elts', ['Str', 'BinOp', 'Str']), ('ctx', 'Load')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'If', 'If', 'If', 'Assign', 'Return']), ('decorator_list', ['Attribute'])]": 1, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Assign', 'Print', 'Expr', 'Expr']), ('orelse', [])]": 1, "List -> [('elts', ['Tuple', 'Tuple', 'Tuple', 'Tuple']), ('ctx', 'Load')]": 22, "If -> [('test', 'Call'), ('body', ['Assign', 'If']), ('orelse', ['Assert'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'TryExcept', 'Assign', 'If', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 1, "If -> [('test', 'BoolOp'), ('body', ['If', 'For']), ('orelse', ['Assign'])]": 1, "Tuple -> [('elts', ['Name', 'Subscript']), ('ctx', 'Store')]": 5, "If -> [('test', 'Compare'), ('body', ['Assign', 'If', 'If', 'Assign', 'Assign', 'Break']), ('orelse', [])]": 1, "If -> [('test', 'Call'), ('body', ['Assign', 'Assign', 'Print', 'Expr']), ('orelse', ['If'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'If', 'Assign', 'If', 'If', 'Expr', 'Return']), ('decorator_list', [])]": 1, "Tuple -> [('elts', ['Name', 'Attribute', 'BinOp']), ('ctx', 'Load')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Return']), ('decorator_list', ['Call'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'If', 'If', 'Assign', 'If', 'For', 'Raise']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'ListComp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'FunctionDef'])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Name', 'Str', 'Name'])]": 3, "Module -> [('body', ['Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'ClassDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'FunctionDef', 'ClassDef', 'FunctionDef', 'FunctionDef', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr'])]": 1, "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Expr', 'Return']), ('orelse', ['Return'])]": 6, "Call -> [('func', 'Attribute'), ('args', ['List', 'Attribute']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "TryExcept -> [('body', ['While', 'Assign', 'Expr']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Expr', 'Pass']), ('orelse', [])]": 3, "Compare -> [('left', 'Attribute'), ('ops', ['IsNot']), ('comparators', ['Str'])]": 1, "ListComp -> [('elt', 'BinOp'), ('generators', ['comprehension'])]": 134, "BinOp -> [('left', 'Tuple'), ('op', 'Add'), ('right', 'Call')]": 6, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'ClassDef', 'ClassDef', 'FunctionDef', 'FunctionDef'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'For', 'Assign', 'If', 'If', 'Expr', 'Assign', 'Assign', 'Expr', 'For', 'Assign', 'If', 'Expr', 'If']), ('decorator_list', [])]": 1, "List -> [('elts', ['BinOp', 'BinOp']), ('ctx', 'Load')]": 15, "Dict -> [('keys', ['Str', 'Attribute']), ('values', ['Name', 'Name'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Global', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Print', 'Assign', 'If', 'For', 'Assign', 'For', 'Print', 'Expr']), ('decorator_list', [])]": 1, "If -> [('test', 'Call'), ('body', ['Expr', 'Expr']), ('orelse', ['If'])]": 3, "If -> [('test', 'Compare'), ('body', ['Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('orelse', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['Assign', 'AugAssign']), ('orelse', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Attribute', 'Name']), ('body', ['Expr', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign']), ('decorator_list', [])]": 1, "ExceptHandler -> [('type', 'Name'), ('name', 'Name'), ('body', ['Assign', 'Return'])]": 8, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "Compare -> [('left', 'Call'), ('ops', ['IsNot']), ('comparators', ['Call'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'Assign', 'Import', 'Assign', 'Return']), ('decorator_list', [])]": 1, "Dict -> [('keys', ['Str', 'Str']), ('values', ['Attribute', 'Str'])]": 10, "Call -> [('func', 'Attribute'), ('args', ['Str', 'Attribute', 'Name']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 3, "Slice -> [('lower', 'NoneType'), ('upper', 'Name'), ('step', 'NoneType')]": 97, "If -> [('test', 'Compare'), ('body', ['Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Return']), ('orelse', ['If'])]": 1, "arguments -> [('args', ['Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'str'), ('defaults', ['Name', 'Name'])]": 3, "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Name']), ('keywords', []), ('starargs', 'Name'), ('kwargs', 'Name')]": 2, "Assign -> [('targets', ['Attribute']), ('value', 'ListComp')]": 49, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Num', 'Str', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Str', 'Num', 'Num', 'Name', 'Name'])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Str'])]": 20, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Expr', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 2, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Name', 'Call', 'Call'])]": 6, "Assign -> [('targets', ['Attribute', 'Attribute']), ('value', 'Name')]": 10, "If -> [('test', 'Compare'), ('body', ['Raise']), ('orelse', ['Raise'])]": 3, "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'TryExcept', 'TryExcept', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'FunctionDef', 'Expr'])]": 1, "Call -> [('func', 'Name'), ('args', ['UnaryOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 7, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 2, "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Expr', 'Assign', 'Expr']), ('orelse', [])]": 6, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'If', 'If', 'If']), ('orelse', ['Raise'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Return']), ('decorator_list', [])]": 1, "BoolOp -> [('op', 'Or'), ('values', ['Call', 'Call', 'Name'])]": 2, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Name', 'Name', 'BinOp', 'Call', 'Call', 'Name', 'Name', 'Name', 'BinOp'])]": 2, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'ClassDef']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "Call -> [('func', 'Name'), ('args', ['Num', 'BinOp', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "If -> [('test', 'Call'), ('body', ['Assign']), ('orelse', ['Assign', 'Expr', 'Assign'])]": 1, "Lambda -> [('args', 'arguments'), ('body', 'Compare')]": 19, "ListComp -> [('elt', 'Str'), ('generators', ['comprehension'])]": 3, "If -> [('test', 'Call'), ('body', ['If', 'Return']), ('orelse', [])]": 7, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Name', 'Subscript', 'Subscript', 'Name', 'Name', 'Name'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'If', 'Return']), ('decorator_list', [])]": 3, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Attribute']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 7, "ClassDef -> [('name', 'str'), ('bases', ['Attribute', 'Attribute']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 1, "While -> [('test', 'Name'), ('body', ['Assign', 'If', 'Assert', 'Assign', 'Assert', 'For']), ('orelse', [])]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Name', 'Attribute', 'Name', 'BinOp', 'Name'])]": 1, "Assign -> [('targets', ['Name', 'Name']), ('value', 'Call')]": 6, "If -> [('test', 'Compare'), ('body', ['Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr']), ('orelse', [])]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'Assign', 'Return']), ('decorator_list', ['Name'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['For', 'Expr', 'Return']), ('decorator_list', [])]": 1, "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'AugAssign', 'AugAssign']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('decorator_list', ['Name'])]": 1, "TryExcept -> [('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr']), ('handlers', ['ExceptHandler', 'ExceptHandler', 'ExceptHandler', 'ExceptHandler', 'ExceptHandler']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Num', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 11, "Call -> [('func', 'Attribute'), ('args', ['Str', 'Call', 'Name', 'Name']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Tuple -> [('elts', ['Num', 'Dict']), ('ctx', 'Load')]": 42, "BitXor -> <NULL>": 13, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str'])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'FunctionDef', 'FunctionDef', 'Assign', 'Assign', 'If', 'Assign', 'If', 'Return']), ('decorator_list', ['Attribute', 'Call'])]": 1, "Assign -> [('targets', ['Name', 'Name']), ('value', 'Num')]": 8, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assert', 'Assert', 'Assert']), ('decorator_list', [])]": 3, "Module -> [('body', ['Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 2, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]": 3, "If -> [('test', 'BoolOp'), ('body', ['Assign']), ('orelse', ['Return'])]": 3, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "If -> [('test', 'Compare'), ('body', ['Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Return']), ('decorator_list', [])]": 4, "Call -> [('func', 'Name'), ('args', ['Subscript', 'Subscript', 'Subscript', 'Subscript']), ('keywords', []), ('starargs', 'Name'), ('kwargs', 'Name')]": 1, "If -> [('test', 'Attribute'), ('body', ['Assign', 'Expr']), ('orelse', ['Expr'])]": 2, "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['Expr', 'Raise'])]": 10, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'FunctionDef', 'If', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign']), ('decorator_list', [])]": 2, "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'FunctionDef', 'FunctionDef'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1011, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Expr', 'Assign']), ('decorator_list', [])]": 3, "If -> [('test', 'Compare'), ('body', ['If', 'Assign', 'For', 'Assign']), ('orelse', ['If'])]": 1, "Tuple -> [('elts', ['Name', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('ctx', 'Load')]": 1, "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Str', 'Subscript', 'Subscript', 'Subscript', 'Subscript'])]": 1, "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Expr', 'Expr']), ('orelse', ['Assign', 'Expr'])]": 1, "Tuple -> [('elts', ['BoolOp', 'Call', 'Call', 'Call', 'Name']), ('ctx', 'Load')]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'FunctionDef', 'Assign']), ('decorator_list', [])]": 1, "If -> [('test', 'Attribute'), ('body', ['Raise']), ('orelse', ['Raise'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assert', 'Assert', 'Assign', 'Assert', 'Expr', 'Assert', 'Assign', 'Expr', 'Assert', 'Expr', 'Expr', 'Expr', 'Expr', 'Assert', 'Expr', 'Assert']), ('decorator_list', [])]": 1, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['If', 'Assign', 'Assign', 'If']), ('orelse', [])]": 2, "Compare -> [('left', 'Name'), ('ops', ['Lt']), ('comparators', ['Attribute'])]": 12, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name']), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'Name')]": 1, "List -> [('elts', ['Num', 'Num', 'Num', 'Num', 'Num', 'BinOp', 'BinOp', 'Name', 'BinOp', 'BinOp', 'BinOp', 'Name', 'BinOp', 'Num']), ('ctx', 'Load')]": 2, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Name', 'Name', 'Name', 'Name'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "If -> [('test', 'BoolOp'), ('body', ['AugAssign', 'Assign', 'Assign', 'TryExcept']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'If', 'If']), ('decorator_list', [])]": 1, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Global', 'For', 'If']), ('decorator_list', [])]": 1, "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'Assign', 'ClassDef'])]": 1, "Call -> [('func', 'Name'), ('args', ['Name', 'Lambda']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 6, "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign', 'Assign', 'Assign']), ('orelse', ['Assign'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Assign', 'For', 'Return']), ('decorator_list', [])]": 2, "If -> [('test', 'Compare'), ('body', ['If']), ('orelse', ['Assign', 'Return'])]": 1, "For -> [('target', 'Tuple'), ('iter', 'List'), ('body', ['Assign', 'Expr', 'Assign', 'Expr']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Assign', 'If', 'If', 'TryExcept', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 1, "TryExcept -> [('body', ['Assign', 'If', 'Return']), ('handlers', ['ExceptHandler', 'ExceptHandler']), ('orelse', [])]": 1, "TryFinally -> [('body', ['TryExcept', 'Assign', 'If']), ('finalbody', ['Expr', 'Expr'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'TryFinally']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assert', 'Expr', 'For', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'If', 'Expr']), ('decorator_list', [])]": 1, "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'If'])]": 1, "If -> [('test', 'Attribute'), ('body', ['If', 'Assign', 'If', 'Assign', 'If', 'If']), ('orelse', ['If'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'If', 'Assign', 'Assign', 'If', 'Expr']), ('decorator_list', [])]": 1, "Slice -> [('lower', 'UnaryOp'), ('upper', 'BinOp'), ('step', 'NoneType')]": 2, "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Return']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Num'])]": 2, "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'For', 'If']), ('orelse', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['FunctionDef', 'If']), ('decorator_list', [])]": 4, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str'])]": 1, "Compare -> [('left', 'BinOp'), ('ops', ['Lt']), ('comparators', ['Call'])]": 7, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'str'), ('defaults', ['Name', 'Num', 'Name', 'Str', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name'])]": 1, "Module -> [('body', ['ImportFrom', 'Expr', 'Expr', 'Expr'])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'If', 'ImportFrom', 'If', 'If', 'If']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assert', 'Assert', 'Assert', 'Assign', 'Assign', 'Assign', 'Expr', 'Assert', 'Assign', 'Assign', 'Assign', 'Assign', 'Assert', 'Assert', 'Assign', 'Assign', 'Assign', 'Assert', 'Assert', 'Assert', 'Assert', 'Assert']), ('decorator_list', [])]": 1, "arguments -> [('args', ['Name']), ('vararg', 'str'), ('kwarg', 'str'), ('defaults', [])]": 316, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'For', 'For']), ('decorator_list', ['Name'])]": 2, "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['If', 'Assign', 'Assign', 'If', 'Assign', 'Expr']), ('orelse', [])]": 1, "TryExcept -> [('body', ['Global', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('handlers', ['ExceptHandler', 'ExceptHandler', 'ExceptHandler', 'ExceptHandler']), ('orelse', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'TryExcept', 'If', 'For', 'If', 'If', 'Expr', 'Return']), ('decorator_list', ['Name', 'Name', 'Call', 'Call'])]": 1, "Tuple -> [('elts', ['Name', 'Name', 'BinOp']), ('ctx', 'Load')]": 2, "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef']), ('decorator_list', [])]": 9, "TryExcept -> [('body', ['Expr', 'Assign']), ('handlers', ['ExceptHandler']), ('orelse', [])]": 23, "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If']), ('orelse', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Expr', 'TryExcept']), ('decorator_list', [])]": 2, "If -> [('test', 'Compare'), ('body', ['Expr']), ('orelse', ['If', 'Expr'])]": 1, "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Attribute', 'Name', 'Num', 'Name'])]": 1, "If -> [('test', 'UnaryOp'), ('body', ['Raise']), ('orelse', ['Raise'])]": 1, "For -> [('target', 'Name'), ('iter', 'Subscript'), ('body', ['Assign', 'If']), ('orelse', [])]": 4, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 2, "If -> [('test', 'Call'), ('body', ['Delete', 'Assign']), ('orelse', [])]": 1, "If -> [('test', 'UnaryOp'), ('body', ['Expr', 'Assign', 'Expr', 'If']), ('orelse', [])]": 1, "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'If', 'If', 'If', 'If', 'If', 'If']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]": 2, "Tuple -> [('elts', ['BinOp', 'BinOp', 'BinOp']), ('ctx', 'Load')]": 8, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Expr', 'Expr', 'Expr', 'Assign', 'Return']), ('decorator_list', [])]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]": 11, "Compare -> [('left', 'Call'), ('ops', ['NotEq']), ('comparators', ['Call'])]": 45, "Call -> [('func', 'Attribute'), ('args', ['List', 'List', 'List', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "Call -> [('func', 'Name'), ('args', ['Name', 'Num', 'Num', 'BinOp', 'Name']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'If', 'Expr', 'Assign', 'Assign', 'If', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'For', 'Assign', 'Assign', 'For', 'Assign', 'Assign', 'For', 'For']), ('decorator_list', [])]": 1, "With -> [('context_expr', 'Call'), ('optional_vars', 'Name'), ('body', ['Assign', 'Return'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'FunctionDef', 'Expr', 'Assign', 'Expr', 'Delete', 'Expr', 'Expr', 'Expr', 'ClassDef', 'Assign', 'Assign', 'Expr', 'Delete', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Delete', 'Expr', 'Expr']), ('decorator_list', [])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'While', 'Return']), ('decorator_list', [])]": 5, "If -> [('test', 'Compare'), ('body', ['Import', 'If', 'Expr']), ('orelse', ['Raise'])]": 1, "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['For', 'Assign'])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Num', 'Name', 'Num', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'If', 'If', 'Assign']), ('decorator_list', [])]": 1, "If -> [('test', 'Name'), ('body', ['Expr', 'Expr']), ('orelse', ['Expr', 'Expr'])]": 1, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'TryExcept', 'Return']), ('decorator_list', [])]": 4, "If -> [('test', 'Name'), ('body', ['Assign', 'Assert']), ('orelse', [])]": 2, "TryFinally -> [('body', ['Pass']), ('finalbody', ['Expr'])]": 1, "If -> [('test', 'Call'), ('body', ['Assign', 'Expr', 'Assign', 'Expr', 'For', 'For']), ('orelse', ['For'])]": 1, "If -> [('test', 'Compare'), ('body', ['Assign', 'Expr', 'For', 'Assign', 'Assign', 'Assign', 'Assign']), ('orelse', ['Assign', 'Assign'])]": 1, "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr'])]": 1, "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'TryExcept', 'Break']), ('orelse', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Attribute', 'Num', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 2, "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'TryExcept', 'Assign', 'Assign', 'Assign', 'If', 'Assign']), ('decorator_list', [])]": 1, "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'BinOp', 'BinOp', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]": 1}