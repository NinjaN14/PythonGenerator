{"Index": ["Index -> [('value', 'Attribute')]", "Index -> [('value', 'Num')]"], "Sub": ["Sub -> <NULL>"], "For": ["For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['Expr', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['If', 'Expr']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Expr', 'Expr']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['If', 'Expr', 'If']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Expr', 'Expr']), ('orelse', [])]"], "UnaryOp": ["UnaryOp -> [('op', 'Not'), ('operand', 'Attribute')]"], "Param": ["Param -> <NULL>"], "Add": ["Add -> <NULL>"], "NotIn": ["NotIn -> <NULL>"], "Call": ["Call -> [('func', 'Name'), ('args', ['BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', []), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name', 'BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Lambda', 'Attribute', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['GeneratorExp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Subscript', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Attribute', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Str', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Lambda', 'Name', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Attribute', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Subscript']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', []), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]"], "comprehension": ["comprehension -> [('target', 'Name'), ('iter', 'Attribute'), ('ifs', [])]"], "Import": ["Import -> [('names', ['alias'])]"], "Subscript": ["Subscript -> [('value', 'Attribute'), ('slice', 'Index'), ('ctx', 'Load')]"], "TryExcept": ["TryExcept -> [('body', ['Expr']), ('handlers', ['ExceptHandler']), ('orelse', ['For'])]"], "Store": ["Store -> <NULL>"], "ExceptHandler": ["ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['Pass'])]"], "Return": ["Return -> [('value', 'NoneType')]"], "Tuple": ["Tuple -> [('elts', ['Name', 'Name']), ('ctx', 'Store')]", "Tuple -> [('elts', ['Name']), ('ctx', 'Store')]", "Tuple -> [('elts', ['Call']), ('ctx', 'Load')]"], "Assert": ["Assert -> [('test', 'Name'), ('msg', 'Str')]", "Assert -> [('test', 'Attribute'), ('msg', 'NoneType')]"], "arguments": ["arguments -> [('args', ['Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Attribute'])]", "arguments -> [('args', ['Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Str'])]", "arguments -> [('args', ['Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', [])]", "arguments -> [('args', ['Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', [])]", "arguments -> [('args', []), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', [])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', [])]"], "GeneratorExp": ["GeneratorExp -> [('elt', 'Attribute'), ('generators', ['comprehension'])]"], "Not": ["Not -> <NULL>"], "Mult": ["Mult -> <NULL>"], "Mod": ["Mod -> <NULL>"], "And": ["And -> <NULL>"], "BoolOp": ["BoolOp -> [('op', 'And'), ('values', ['Attribute', 'Compare'])]", "BoolOp -> [('op', 'And'), ('values', ['Compare', 'Call'])]", "BoolOp -> [('op', 'And'), ('values', ['Attribute', 'Compare', 'Call'])]", "BoolOp -> [('op', 'And'), ('values', ['Call', 'Call'])]"], "Name": ["Name -> [('id', 'str'), ('ctx', 'Store')]", "Name -> [('id', 'str'), ('ctx', 'Load')]", "Name -> [('id', 'str'), ('ctx', 'Param')]"], "BinOp": ["BinOp -> [('left', 'Str'), ('op', 'Add'), ('right', 'Call')]", "BinOp -> [('left', 'Attribute'), ('op', 'Add'), ('right', 'Num')]", "BinOp -> [('left', 'BinOp'), ('op', 'Add'), ('right', 'Name')]", "BinOp -> [('left', 'Str'), ('op', 'Add'), ('right', 'BinOp')]", "BinOp -> [('left', 'Str'), ('op', 'Mult'), ('right', 'Attribute')]", "BinOp -> [('left', 'Str'), ('op', 'Add'), ('right', 'Attribute')]", "BinOp -> [('left', 'BinOp'), ('op', 'Add'), ('right', 'Str')]", "BinOp -> [('left', 'Str'), ('op', 'Add'), ('right', 'Subscript')]", "BinOp -> [('left', 'Str'), ('op', 'Mod'), ('right', 'Subscript')]", "BinOp -> [('left', 'BinOp'), ('op', 'Add'), ('right', 'Attribute')]", "BinOp -> [('left', 'List'), ('op', 'Mult'), ('right', 'BinOp')]", "BinOp -> [('left', 'Call'), ('op', 'Sub'), ('right', 'Call')]"], "Expr": ["Expr -> [('value', 'Str')]", "Expr -> [('value', 'Call')]", "Expr -> [('value', 'Tuple')]"], "AugAssign": ["AugAssign -> [('target', 'Attribute'), ('op', 'Add'), ('value', 'Num')]", "AugAssign -> [('target', 'Attribute'), ('op', 'Sub'), ('value', 'Num')]"], "List": ["List -> [('elts', []), ('ctx', 'Load')]", "List -> [('elts', ['Name']), ('ctx', 'Load')]"], "ClassDef": ["ClassDef -> [('name', 'str'), ('bases', []), ('body', ['Expr', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'Assign', 'FunctionDef', 'Assign', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]"], "While": ["While -> [('test', 'BoolOp'), ('body', ['Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('orelse', [])]"], "Str": ["Str -> [('s', 'str')]"], "Assign": ["Assign -> [('targets', ['Name']), ('value', 'BinOp')]", "Assign -> [('targets', ['Attribute']), ('value', 'Name')]", "Assign -> [('targets', ['Attribute']), ('value', 'List')]", "Assign -> [('targets', ['Attribute']), ('value', 'Num')]", "Assign -> [('targets', ['Name']), ('value', 'Call')]", "Assign -> [('targets', ['Name']), ('value', 'Name')]", "Assign -> [('targets', ['Name']), ('value', 'Subscript')]", "Assign -> [('targets', ['Tuple']), ('value', 'Name')]", "Assign -> [('targets', ['Tuple']), ('value', 'Attribute')]", "Assign -> [('targets', ['Name']), ('value', 'Dict')]"], "FunctionDef": ["FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'AugAssign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'AugAssign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Expr', 'Expr', 'If', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'For', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'If', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'For', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'If', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'If', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'Expr', 'For', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'If', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'For', 'Expr', 'If', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'For', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'While', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'If', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Expr', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'For', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'Expr', 'For', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'Expr', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assert', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'FunctionDef', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'If', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Assign', 'For', 'For', 'If', 'If', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Expr', 'If', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'For', 'If', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'TryExcept']), ('decorator_list', [])]"], "Lambda": ["Lambda -> [('args', 'arguments'), ('body', 'Call')]"], "Load": ["Load -> <NULL>"], "Compare": ["Compare -> [('left', 'Attribute'), ('ops', ['Eq']), ('comparators', ['Str'])]", "Compare -> [('left', 'Call'), ('ops', ['Eq']), ('comparators', ['Num'])]", "Compare -> [('left', 'Str'), ('ops', ['NotIn']), ('comparators', ['Attribute'])]"], "Attribute": ["Attribute -> [('value', 'Attribute'), ('attr', 'str'), ('ctx', 'Load')]", "Attribute -> [('value', 'Name'), ('attr', 'str'), ('ctx', 'Load')]", "Attribute -> [('value', 'Name'), ('attr', 'str'), ('ctx', 'Store')]", "Attribute -> [('value', 'Call'), ('attr', 'str'), ('ctx', 'Load')]"], "Module": ["Module -> [('body', ['Expr', 'Import', 'Import', 'ClassDef'])]"], "alias": ["alias -> [('name', 'str'), ('asname', 'NoneType')]"], "Num": ["Num -> [('n', 'int')]"], "Pass": ["Pass -> <NULL>"], "Dict": ["Dict -> [('keys', ['Str', 'Str', 'Str', 'Str']), ('values', ['Str', 'Str', 'Str', 'Str'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str'])]", "Dict -> [('keys', ['Attribute', 'Attribute']), ('values', ['Str', 'Str'])]"], "Eq": ["Eq -> <NULL>"], "If": ["If -> [('test', 'Call'), ('body', ['For', 'Return']), ('orelse', [])]", "If -> [('test', 'BoolOp'), ('body', ['Expr']), ('orelse', [])]", "If -> [('test', 'Attribute'), ('body', ['Expr']), ('orelse', [])]", "If -> [('test', 'Attribute'), ('body', ['Expr', 'Expr']), ('orelse', [])]", "If -> [('test', 'Attribute'), ('body', ['Expr', 'Expr', 'Assign']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['Expr']), ('orelse', ['Assign'])]", "If -> [('test', 'UnaryOp'), ('body', ['Expr']), ('orelse', [])]", "If -> [('test', 'Attribute'), ('body', ['Expr', 'Expr', 'Expr', 'Expr']), ('orelse', [])]", "If -> [('test', 'BoolOp'), ('body', ['Expr']), ('orelse', ['Expr', 'Expr', 'Expr', 'Expr'])]", "If -> [('test', 'Attribute'), ('body', ['Expr', 'For', 'Expr']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Expr']), ('orelse', ['If'])]", "If -> [('test', 'Call'), ('body', ['Expr']), ('orelse', ['If'])]", "If -> [('test', 'Call'), ('body', ['Expr']), ('orelse', ['Assert'])]", "If -> [('test', 'Call'), ('body', ['Expr']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Expr', 'Expr']), ('orelse', ['Expr'])]", "If -> [('test', 'BoolOp'), ('body', ['Expr', 'Expr', 'Expr']), ('orelse', ['Expr'])]", "If -> [('test', 'Attribute'), ('body', ['If', 'Expr', 'Expr']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['Assign']), ('orelse', ['Expr'])]", "If -> [('test', 'Name'), ('body', ['Expr', 'Expr']), ('orelse', [])]", "If -> [('test', 'Attribute'), ('body', ['If', 'Expr']), ('orelse', [])]"]}