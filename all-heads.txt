{"Index": ["Index -> [('value', 'Str')]", "Index -> [('value', 'Num')]", "Index -> [('value', 'Name')]", "Index -> [('value', 'BinOp')]", "Index -> [('value', 'Attribute')]", "Index -> [('value', 'Tuple')]", "Index -> [('value', 'UnaryOp')]", "Index -> [('value', 'Call')]", "Index -> [('value', 'Subscript')]", "Index -> [('value', 'Compare')]", "Index -> [('value', 'List')]", "Index -> [('value', 'BoolOp')]"], "Slice": ["Slice -> [('lower', 'NoneType'), ('upper', 'Name'), ('step', 'NoneType')]", "Slice -> [('lower', 'NoneType'), ('upper', 'NoneType'), ('step', 'NoneType')]", "Slice -> [('lower', 'NoneType'), ('upper', 'NoneType'), ('step', 'Num')]", "Slice -> [('lower', 'NoneType'), ('upper', 'Num'), ('step', 'NoneType')]", "Slice -> [('lower', 'Num'), ('upper', 'NoneType'), ('step', 'NoneType')]", "Slice -> [('lower', 'BinOp'), ('upper', 'NoneType'), ('step', 'NoneType')]", "Slice -> [('lower', 'NoneType'), ('upper', 'BinOp'), ('step', 'NoneType')]", "Slice -> [('lower', 'Call'), ('upper', 'NoneType'), ('step', 'NoneType')]", "Slice -> [('lower', 'Name'), ('upper', 'Name'), ('step', 'NoneType')]", "Slice -> [('lower', 'Name'), ('upper', 'NoneType'), ('step', 'NoneType')]", "Slice -> [('lower', 'Num'), ('upper', 'Num'), ('step', 'NoneType')]", "Slice -> [('lower', 'Call'), ('upper', 'Call'), ('step', 'NoneType')]", "Slice -> [('lower', 'BinOp'), ('upper', 'Name'), ('step', 'NoneType')]", "Slice -> [('lower', 'BinOp'), ('upper', 'BinOp'), ('step', 'NoneType')]", "Slice -> [('lower', 'NoneType'), ('upper', 'Subscript'), ('step', 'NoneType')]", "Slice -> [('lower', 'Num'), ('upper', 'BinOp'), ('step', 'NoneType')]", "Slice -> [('lower', 'Num'), ('upper', 'Name'), ('step', 'NoneType')]", "Slice -> [('lower', 'Num'), ('upper', 'Call'), ('step', 'NoneType')]", "Slice -> [('lower', 'UnaryOp'), ('upper', 'BinOp'), ('step', 'NoneType')]", "Slice -> [('lower', 'NoneType'), ('upper', 'Attribute'), ('step', 'NoneType')]", "Slice -> [('lower', 'NoneType'), ('upper', 'Call'), ('step', 'NoneType')]", "Slice -> [('lower', 'Name'), ('upper', 'BinOp'), ('step', 'NoneType')]", "Slice -> [('lower', 'Num'), ('upper', 'UnaryOp'), ('step', 'NoneType')]", "Slice -> [('lower', 'Attribute'), ('upper', 'NoneType'), ('step', 'NoneType')]", "Slice -> [('lower', 'BinOp'), ('upper', 'Subscript'), ('step', 'NoneType')]", "Slice -> [('lower', 'NoneType'), ('upper', 'NoneType'), ('step', 'Name')]", "Slice -> [('lower', 'Subscript'), ('upper', 'Subscript'), ('step', 'NoneType')]", "Slice -> [('lower', 'Num'), ('upper', 'Attribute'), ('step', 'NoneType')]", "Slice -> [('lower', 'UnaryOp'), ('upper', 'NoneType'), ('step', 'NoneType')]", "Slice -> [('lower', 'NoneType'), ('upper', 'UnaryOp'), ('step', 'NoneType')]", "Slice -> [('lower', 'BinOp'), ('upper', 'Call'), ('step', 'NoneType')]", "Slice -> [('lower', 'Attribute'), ('upper', 'Name'), ('step', 'NoneType')]", "Slice -> [('lower', 'Num'), ('upper', 'NoneType'), ('step', 'Num')]", "Slice -> [('lower', 'Call'), ('upper', 'UnaryOp'), ('step', 'NoneType')]", "Slice -> [('lower', 'Subscript'), ('upper', 'NoneType'), ('step', 'NoneType')]", "Slice -> [('lower', 'BinOp'), ('upper', 'Num'), ('step', 'NoneType')]"], "Raise": ["Raise -> [('type', 'Call'), ('inst', 'NoneType'), ('tback', 'NoneType')]", "Raise -> [('type', 'NoneType'), ('inst', 'NoneType'), ('tback', 'NoneType')]", "Raise -> [('type', 'Name'), ('inst', 'Call'), ('tback', 'NoneType')]", "Raise -> [('type', 'Name'), ('inst', 'NoneType'), ('tback', 'NoneType')]", "Raise -> [('type', 'Name'), ('inst', 'BinOp'), ('tback', 'NoneType')]", "Raise -> [('type', 'Name'), ('inst', 'Str'), ('tback', 'NoneType')]", "Raise -> [('type', 'Name'), ('inst', 'Name'), ('tback', 'NoneType')]", "Raise -> [('type', 'Attribute'), ('inst', 'NoneType'), ('tback', 'NoneType')]", "Raise -> [('type', 'Attribute'), ('inst', 'Name'), ('tback', 'NoneType')]", "Raise -> [('type', 'Attribute'), ('inst', 'BinOp'), ('tback', 'NoneType')]", "Raise -> [('type', 'Subscript'), ('inst', 'Name'), ('tback', 'Subscript')]", "Raise -> [('type', 'Attribute'), ('inst', 'Tuple'), ('tback', 'NoneType')]", "Raise -> [('type', 'Str'), ('inst', 'Tuple'), ('tback', 'NoneType')]", "Raise -> [('type', 'Subscript'), ('inst', 'NoneType'), ('tback', 'NoneType')]", "Raise -> [('type', 'Str'), ('inst', 'NoneType'), ('tback', 'NoneType')]", "Raise -> [('type', 'Call'), ('inst', 'Name'), ('tback', 'Subscript')]"], "For": ["For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['If']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['If']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Assign', 'If']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'Assign']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['For']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['If']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['For', 'Pass']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Expr', 'Expr', 'If']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Expr', 'Pass']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Pass']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['If', 'TryExcept', 'TryExcept', 'AugAssign']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Subscript'), ('body', ['Assign', 'If', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['TryExcept']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Subscript'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'TryExcept']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Expr', 'Assign', 'If', 'Expr', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'For', 'Assign', 'For', 'If', 'For']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['If', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'Expr', 'If', 'If']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['If', 'If']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['If', 'If']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['If', 'If', 'If', 'Assign', 'Assign', 'Assign', 'If']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['Assign', 'If']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['If', 'If', 'If', 'If', 'TryExcept']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['For']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Tuple'), ('body', ['TryExcept']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'If', 'For']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Expr', 'Expr']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Assign', 'Expr', 'Expr', 'If']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Tuple'), ('body', ['Assign']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Tuple'), ('body', ['Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Tuple'), ('body', ['Expr', 'Expr', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['AugAssign']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'AugAssign', 'Delete', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'If', 'If']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['If', 'TryExcept', 'TryExcept', 'If', 'Assign', 'AugAssign']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Assign', 'Expr', 'Print']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['For']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['TryExcept']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['If']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'If', 'If', 'Assign', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Subscript'), ('body', ['Expr', 'Expr', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['Assign', 'For', 'If']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['Expr', 'Expr', 'If']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Expr', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Expr', 'If']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['Expr', 'Expr', 'If', 'If', 'If']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Expr', 'AugAssign', 'If']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['If', 'Assign', 'Expr', 'Expr', 'Expr', 'If', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'If', 'If', 'Assign', 'Expr', 'If', 'If']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Expr', 'Expr']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Expr', 'Assign', 'If', 'Assign', 'Assign', 'If', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'For']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Assign']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'List'), ('body', ['TryExcept']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['If', 'Assign', 'Assign', 'If']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['If', 'Assign', 'If', 'If']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['If', 'If']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['If', 'Assign', 'If']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Subscript'), ('body', ['Assign', 'TryExcept', 'Expr', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Subscript'), ('body', ['If']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['If', 'If', 'If', 'If']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['If', 'If', 'If', 'If', 'Assign', 'Assign', 'If', 'Assign', 'If', 'If', 'If', 'Assign', 'Assign']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'If', 'Assign', 'If', 'If', 'Assign', 'Assign', 'Assign']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'If', 'If', 'If', 'Expr']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['If', 'If', 'If', 'If', 'TryExcept', 'If']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['If', 'If', 'If', 'Assign', 'If', 'Assign', 'For', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Subscript'), ('body', ['Expr', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Expr', 'TryExcept']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'List'), ('body', ['Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'List'), ('body', ['Expr', 'Expr', 'Expr']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'List'), ('body', ['Assign', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['If', 'Expr']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['For']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Tuple'), ('body', ['Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['If', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['If', 'Assign', 'For', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assert']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['AugAssign', 'If']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['AugAssign', 'If']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['If', 'Expr', 'AugAssign']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['If', 'For']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'If']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['TryExcept']), ('orelse', ['Return'])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['TryExcept', 'If', 'Expr']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['If', 'Assign']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['If', 'Expr', 'Assign']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Subscript'), ('body', ['Assign', 'If']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Name'), ('body', ['If']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['If', 'Expr', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Tuple'), ('body', ['If']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Name'), ('body', ['Assign', 'Expr', 'Expr', 'If', 'AugAssign', 'Expr', 'Expr']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['TryExcept']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['If', 'For']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['Assign']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['Expr', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['With']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'ListComp'), ('body', ['Expr', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['Assign', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'If', 'Assign']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Subscript'), ('body', ['If', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Subscript'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'If', 'If', 'Assign', 'If', 'If', 'Expr']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Assign', 'TryExcept', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Assign']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'If']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'Assign']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'If', 'Expr', 'Expr', 'Expr', 'Expr']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Assign', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['If', 'If', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'If']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['If', 'Assign', 'TryExcept', 'Assign', 'Assign', 'Assign', 'Assign']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Print', 'Print', 'Print', 'Assign', 'If', 'Assign', 'If']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['For', 'For', 'AugAssign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Assign', 'Assign', 'For', 'If', 'If']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Name'), ('body', ['For']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Assign']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'If', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Print', 'Assign', 'For', 'For', 'Assign', 'Expr', 'Assign', 'For', 'If', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Print', 'Assign']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['If', 'TryExcept', 'TryExcept', 'If', 'If', 'If', 'If', 'Expr', 'Assign', 'Assign', 'Expr']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Print']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['If', 'Assign', 'Assign']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'While', 'Assign']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'While', 'FunctionDef', 'Expr', 'If', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'For', 'Expr', 'Assign']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['If', 'If', 'If', 'If', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'If', 'Assign', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['If', 'Assert']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Tuple'), ('body', ['Assign', 'Assign', 'If']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Tuple'), ('body', ['Assign', 'If']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['AugAssign']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'List'), ('body', ['For']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'List'), ('body', ['Assign', 'For', 'Assign', 'For']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Tuple'), ('body', ['Assign', 'Assign', 'Expr', 'Expr', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'List'), ('body', ['Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'List'), ('body', ['Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'For', 'Assign']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Expr', 'Expr', 'Expr']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'Expr', 'Expr', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'List'), ('body', ['Expr', 'Expr', 'For']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Expr', 'Expr']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'List'), ('body', ['Assign', 'Expr', 'Assign', 'For']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'If', 'Expr', 'Assign', 'Expr', 'Expr', 'If']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['Assign', 'Expr', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'List'), ('body', ['Assign', 'Expr', 'For', 'For']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Name'), ('body', ['Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Expr', 'Expr', 'Expr', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'List'), ('body', ['Assign', 'Expr', 'Assign', 'Assign', 'If', 'For']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Pass']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Expr', 'FunctionDef', 'Assign', 'Assign', 'FunctionDef', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'List'), ('body', ['Expr', 'For']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'List'), ('body', ['If', 'Expr']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Name'), ('body', ['Expr', 'Expr', 'Expr', 'Expr']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Name'), ('body', ['Print', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Expr', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'List'), ('body', ['For', 'FunctionDef', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'List'), ('body', ['For', 'Expr']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'List'), ('body', ['Expr', 'Expr']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Tuple'), ('body', ['Assign', 'Expr', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'List'), ('body', ['Expr', 'Assign', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['Assign', 'Expr', 'For']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'If']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Tuple'), ('body', ['For']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'List'), ('body', ['Assign', 'Assign', 'For', 'Assign', 'Expr', 'Assign', 'For']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'List'), ('body', ['Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'For']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'Expr', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'For']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'List'), ('body', ['Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'List'), ('body', ['Assign', 'Assign', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'For', 'Expr', 'Assign', 'Expr', 'If']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Name'), ('body', ['Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'BinOp'), ('body', ['Assign', 'For', 'Assign', 'Print']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'List'), ('body', ['Assign', 'Assign', 'For']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'For', 'Print']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Expr', 'Expr', 'Delete', 'Assign', 'Expr', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'For', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'While', 'FunctionDef', 'Assign', 'Assign', 'FunctionDef', 'For', 'For', 'For', 'For', 'Expr', 'Assign', 'For', 'Assign', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Subscript'), ('body', ['Assign', 'Expr', 'For', 'For']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Name'), ('body', ['Print', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'Assign']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Subscript'), ('body', ['Assign', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'List'), ('body', ['Expr', 'Expr', 'Expr', 'For']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Subscript'), ('body', ['Assign', 'Assign', 'Expr', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'List'), ('body', ['Assign', 'Print']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'List'), ('body', ['Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'List'), ('body', ['Expr', 'Expr', 'Assign', 'For']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'List'), ('body', ['Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['Print', 'Print', 'Print']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Tuple'), ('body', ['Expr', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Subscript'), ('body', ['Expr', 'If']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'If', 'If', 'If']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'Expr', 'Expr']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['For', 'For']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Print', 'If']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['If', 'If', 'If']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Attribute'), ('body', ['Assign', 'Assign', 'Assign']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Attribute'), ('body', ['Assign', 'If']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Attribute'), ('body', ['Assign', 'For']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['If', 'Assign', 'If']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'If', 'If', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['TryExcept']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['If', 'Assign']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['If', 'Assign', 'TryExcept', 'If', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Expr', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'If', 'Expr', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Assign', 'Assign', 'TryFinally']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Expr', 'Expr', 'Assign']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assert']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['AugAssign']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['Expr', 'If']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Tuple'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'Assign', 'If']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['If']), ('orelse', ['Raise'])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assert', 'For']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'BinOp'), ('body', ['Assign']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'BinOp'), ('body', ['If', 'Assign', 'If']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'BinOp'), ('body', ['Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['If', 'Assign', 'If', 'If']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Name'), ('body', ['If', 'If']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Name'), ('body', ['Expr', 'If']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Attribute'), ('body', ['Expr']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Assign', 'If', 'Assign', 'Assign', 'Assign', 'If']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'Assign', 'AugAssign']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['If', 'Assign', 'If', 'Assign', 'TryExcept']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Attribute'), ('body', ['Assign', 'Assign', 'Expr']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Attribute'), ('body', ['FunctionDef', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['Assign', 'For']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Expr', 'For']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'While', 'While', 'Assign', 'If']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Name'), ('body', ['Assign', 'If', 'For']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'If']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'If', 'If', 'Assign']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['If', 'Expr', 'Assign', 'Assign', 'Assign']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Assign', 'Assign']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'If', 'Assign', 'Expr']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'Expr']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Expr', 'Assign', 'Assign', 'Assign']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Expr', 'Assign', 'Assign']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'Assign', 'If']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'If', 'Assign', 'Assign']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Expr', 'Assign', 'Assign', 'If', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'If']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['If', 'Assign', 'If']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Name'), ('body', ['AugAssign']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Assign', 'If', 'If', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['If']), ('orelse', ['Expr', 'Assign', 'Expr', 'Expr'])]", "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Expr', 'Assign', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'If', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'For', 'For']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'If', 'TryExcept', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'BinOp'), ('body', ['If', 'If']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Subscript'), ('body', ['Assign', 'Assign', 'If']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['If', 'If', 'Assign', 'If', 'If', 'If']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Name'), ('body', ['If', 'If', 'If', 'Assign']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Assert', 'Assign']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Assign', 'If', 'Expr']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Name'), ('body', ['Print', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'For']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'TryExcept', 'For']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['If', 'Assign', 'If', 'Assign', 'Expr', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'If', 'If', 'If', 'Assign', 'Assign', 'Expr']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['If', 'AugAssign', 'While']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['If', 'While']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Subscript'), ('body', ['Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'GeneratorExp'), ('body', ['If', 'Expr']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'For', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Subscript'), ('body', ['Assign', 'Assign', 'If', 'If']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'If', 'Assign', 'If']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Str'), ('body', ['If']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'For', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['If', 'For', 'AugAssign']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Pass']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'Assign', 'Assign']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'For']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'For']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Expr', 'Assign', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Subscript'), ('body', ['Assign']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['If', 'Assign', 'For', 'Assign', 'If', 'Expr']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['If', 'Assign', 'Assign', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Assert', 'Print']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Print']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Print']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Print']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Assign', 'Assign', 'For']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'For', 'Assign', 'For', 'Print']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['If', 'If']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'For', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Assign', 'For', 'Expr']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['AugAssign']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Assign', 'AugAssign', 'AugAssign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Expr']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Assign', 'AugAssign', 'AugAssign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Expr']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Assign', 'AugAssign', 'Assign', 'Assign', 'Assign', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['If', 'For']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Assign', 'For']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['AugAssign', 'For']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Name'), ('body', ['Assign', 'Print', 'AugAssign', 'Expr', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'For', 'Assign', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'TryExcept', 'TryExcept', 'Assign', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'AugAssign']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Expr', 'If']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Return']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Delete', 'Delete']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Name'), ('body', ['Assign', 'Expr', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['TryExcept', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['With']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'AugAssign']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['For', 'Assign', 'For']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Assign', 'If', 'AugAssign']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['Assign', 'For', 'Assign', 'If', 'Assign', 'Assign']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['Assign', 'If', 'If', 'Assign', 'Expr']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Attribute'), ('body', ['If']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['Assign', 'Assign', 'If']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['If']), ('orelse', ['Assign'])]", "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['Assign', 'Expr', 'Expr', 'Expr', 'If']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['Assign', 'If', 'Assign', 'Expr', 'If', 'Expr', 'If']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Subscript'), ('body', ['If']), ('orelse', ['If'])]", "For -> [('target', 'Name'), ('iter', 'Subscript'), ('body', ['If']), ('orelse', ['Expr'])]", "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Assign', 'AugAssign']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['Assign', 'Assign', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'If', 'Assign']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Name'), ('body', ['For', 'For']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['If', 'Assign', 'If', 'If', 'Assign', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Expr', 'If']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'GeneratorExp'), ('body', ['Assign', 'If', 'If', 'If', 'If', 'Expr']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Subscript'), ('body', ['Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Tuple'), ('body', ['Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'For']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'If', 'If', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Expr', 'Assign', 'Assign', 'Expr']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['If', 'If', 'Assign', 'Assign', 'Assign', 'TryExcept']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Tuple'), ('body', ['Assign', 'If']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'If', 'Assign', 'If', 'Assign', 'If', 'If']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['If', 'Print']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'AugAssign']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['If']), ('orelse', ['Expr'])]", "For -> [('target', 'Tuple'), ('iter', 'Name'), ('body', ['Assign']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['If', 'Assign', 'For']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Name'), ('body', ['Assign', 'If', 'Assign', 'Expr', 'If']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Name'), ('body', ['TryExcept']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Name'), ('body', ['Expr', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Print', 'Assign', 'For', 'Print']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'For', 'If', 'Assign', 'Assign', 'TryExcept']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'Expr', 'Expr', 'If', 'Assign']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'BinOp'), ('body', ['For']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Assign', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['TryExcept', 'If']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['Assign', 'Assign', 'AugAssign']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'AugAssign']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Expr', 'Expr', 'Expr', 'Expr']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Assign', 'Expr', 'If', 'Expr', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Expr', 'Expr', 'Expr']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Assign', 'If']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['If', 'If', 'Expr', 'Assign']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['If', 'Delete']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'If']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['If', 'Expr', 'Assign', 'If']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Tuple'), ('body', ['Assign', 'TryFinally']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'If', 'Print']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['If', 'If', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'If', 'Assign', 'If', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Expr', 'Assign', 'Assign']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['If', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'If']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['Assign', 'Assign']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'List'), ('body', ['If']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'If', 'Assign', 'TryExcept']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Delete', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['TryExcept', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['If', 'Assign', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'For', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'List'), ('body', ['Assign']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'Expr']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['If', 'If', 'For']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'If', 'Assign', 'Expr']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'Assign', 'If']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'GeneratorExp'), ('body', ['Assign']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['If', 'Assign', 'Assign', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Delete']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Name'), ('body', ['Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Name'), ('body', ['Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'For']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'List'), ('body', ['Expr', 'Expr']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['If', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Subscript'), ('body', ['TryExcept', 'Expr']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Attribute'), ('body', ['Expr', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'BinOp'), ('body', ['If']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Print', 'Assign', 'Expr', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Expr', 'Print']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['If', 'Assign', 'Assign', 'If', 'AugAssign']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'For', 'Assign']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['If', 'Assign', 'Assign', 'If', 'Assign', 'If']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Assign', 'Assign', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'If', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Expr', 'Assign', 'If', 'Expr', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'List'), ('body', ['Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'Assert', 'Assign', 'Assert', 'Assert']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['Assign', 'If', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['TryExcept', 'If', 'Assign', 'Expr']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'BinOp'), ('body', ['If']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Assign', 'Assign']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['If', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'If', 'If', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['If', 'Assign', 'If']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Assign', 'For', 'If']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Subscript'), ('body', ['Assign', 'If', 'If', 'If']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['Expr', 'For', 'If']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['Assign', 'For', 'Assign', 'Assign']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Subscript'), ('body', ['AugAssign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Subscript'), ('body', ['AugAssign', 'Assign', 'With', 'While']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['With', 'While']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['For', 'If']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'TryExcept']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'If']), ('orelse', ['Raise'])]", "For -> [('target', 'Tuple'), ('iter', 'Tuple'), ('body', ['Assign']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'ListComp'), ('body', ['Print', 'Assign', 'Assign', 'Print', 'For']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['Print', 'For']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['Print', 'If']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['Print']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'If', 'With']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Assign', 'For']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'For']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'If', 'Assign', 'If', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Expr', 'TryExcept']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Expr', 'For', 'Expr']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Name'), ('body', ['Assign', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Tuple'), ('body', ['Assign', 'Assign', 'Assign', 'For']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['AugAssign', 'If', 'For']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['If', 'Assign', 'If', 'Assign', 'If', 'If']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Print', 'If', 'Assign', 'For', 'If', 'Print', 'Expr', 'Print', 'Assign', 'Assign', 'If', 'Print', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'If', 'Expr', 'Assign']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'TryExcept', 'If']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Subscript'), ('body', ['Assign', 'Assign', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Expr', 'Assign']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['If', 'Assign', 'Assign', 'For']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['If', 'If', 'Assign', 'If']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'List'), ('body', ['Assign', 'Expr', 'For']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['TryExcept', 'If', 'Assign', 'Return']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['AugAssign', 'If']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Expr', 'For']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Subscript'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Subscript'), ('body', ['Assign', 'Assign', 'Expr', 'Expr', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'For', 'For']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['If', 'If', 'If', 'If', 'If', 'If', 'If']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['AugAssign', 'AugAssign']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['AugAssign', 'AugAssign', 'AugAssign']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Global', 'Assign', 'If']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'For', 'Assign', 'Assign', 'Assign', 'Print', 'Assign', 'Expr', 'If', 'If']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Expr', 'Assign', 'Assign']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['AugAssign', 'Expr', 'If']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['If', 'Assign', 'Expr', 'Expr']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['If', 'Assign', 'Assign', 'If', 'Assign', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['Assign', 'Assign', 'Assign', 'AugAssign', 'AugAssign', 'Expr']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'If']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Expr', 'Assign', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Expr', 'If']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Assign', 'Assign', 'For', 'Assign', 'Assign', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'ListComp'), ('body', ['If', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'If', 'TryExcept']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'List'), ('body', ['If', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'For']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'If', 'TryExcept']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Assign', 'Print', 'Assign']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['Assign', 'For', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Print', 'Assign', 'TryExcept']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'List'), ('body', ['Assign', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Expr', 'Assign', 'While']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Name'), ('body', ['If', 'If', 'If']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['If']), ('orelse', ['Print'])]", "For -> [('target', 'Tuple'), ('iter', 'Attribute'), ('body', ['Assign']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Assign', 'Expr', 'Expr', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['If', 'If', 'Assign', 'If', 'Assign', 'TryExcept']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['If', 'Assign', 'Expr', 'AugAssign']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Assign', 'If', 'Assign', 'Expr', 'AugAssign']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Name'), ('body', ['If', 'If', 'Assign', 'Expr', 'AugAssign', 'Delete']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['If', 'Assign', 'If', 'Assign', 'Expr', 'AugAssign']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['If', 'Assign', 'If', 'Assign', 'Expr', 'AugAssign', 'Expr', 'For', 'Expr', 'For']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['Assign', 'Expr', 'AugAssign']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['Assign', 'If', 'If', 'If']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Expr', 'If', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Delete']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['TryExcept', 'Assign', 'Return']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['ClassDef', 'Assign', 'AugAssign', 'Expr', 'Assign', 'Expr', 'Expr']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Assign', 'Expr', 'Expr']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'List'), ('body', ['ClassDef', 'Assign', 'Assign', 'Expr', 'Expr']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'List'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'TryFinally', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'List'), ('body', ['TryFinally']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'List'), ('body', ['Assign', 'TryExcept', 'Expr']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'List'), ('body', ['Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Tuple'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Tuple'), ('body', ['Assign', 'Assign', 'Expr', 'Assign', 'If', 'Expr', 'TryExcept', 'Expr', 'TryExcept', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['If']), ('orelse', ['Expr'])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'TryExcept', 'Expr', 'TryExcept', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['AugAssign', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Print']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['If', 'Assign', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'If', 'If', 'If', 'Expr', 'Expr', 'Expr', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'If', 'If', 'Assign', 'Expr']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Attribute'), ('body', ['If', 'If']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Tuple'), ('body', ['Assign', 'TryExcept']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Subscript'), ('body', ['For', 'For', 'Expr', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'List'), ('body', ['Assign', 'If']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'List'), ('body', ['Assign', 'Assign', 'For']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Expr', 'Assign']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['If']), ('orelse', ['Assign', 'Expr', 'Expr', 'Expr'])]", "For -> [('target', 'Name'), ('iter', 'BinOp'), ('body', ['If']), ('orelse', ['Expr', 'Return'])]", "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['Expr', 'If', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['Expr', 'AugAssign']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['Expr', 'If', 'For']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Subscript'), ('body', ['Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Subscript'), ('body', ['Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'For']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Subscript'), ('body', ['Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'If', 'Expr']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Assign', 'Expr', 'Assign', 'For']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Expr', 'Assign']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['If', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Expr']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['If', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'If']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['If', 'Assign', 'Assign', 'Assign', 'For', 'AugAssign', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'If', 'If']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Print', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'For', 'Expr', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['Assign', 'While', 'If', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Assign', 'If', 'Expr']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Subscript'), ('body', ['Assign']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'For', 'If']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Subscript'), ('body', ['If', 'Assign', 'Assign', 'If']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['If', 'Expr']), ('orelse', ['Raise'])]", "For -> [('target', 'Tuple'), ('iter', 'Attribute'), ('body', ['Assign', 'Assign', 'If']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'BoolOp'), ('body', ['If']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Name'), ('body', ['Assign', 'If']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['If', 'If', 'If', 'Assign', 'Expr', 'Expr']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Assign', 'If', 'Assign', 'Assign', 'Assign', 'Expr']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Assign', 'If', 'For']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Assign', 'If', 'Assign', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'List'), ('body', ['TryExcept']), ('orelse', ['Assign', 'TryExcept'])]", "For -> [('target', 'Name'), ('iter', 'Subscript'), ('body', ['Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'If', 'Assign', 'If']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Print', 'Assign', 'Expr', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['If', 'If', 'If', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'TryExcept', 'Assign', 'Assign', 'AugAssign']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Expr', 'Expr', 'Expr', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'For', 'If', 'Expr', 'Assign', 'If', 'Assign', 'Assign', 'Expr', 'Assign', 'For', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Expr', 'Assign']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['TryExcept', 'Assign', 'Assign', 'For', 'Assign', 'Print', 'Print', 'Print', 'For', 'Print']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'For', 'For', 'Expr']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'If', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['TryExcept', 'Assign', 'Assign', 'If']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['TryExcept', 'Assign', 'Assign', 'If', 'If', 'Assign', 'Assign', 'If', 'Assign', 'For', 'If']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'For', 'If', 'Expr', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'If']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'TryExcept']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Subscript'), ('body', ['AugAssign']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'If', 'Expr', 'AugAssign']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'List'), ('body', ['Expr', 'Assign', 'If']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'List'), ('body', ['Expr', 'Assign', 'Assign', 'If']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['If', 'Expr', 'Assign', 'Assign', 'For', 'Assign']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Expr', 'Expr', 'Expr', 'If']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['If', 'Expr', 'If', 'If', 'If', 'Expr', 'If', 'If', 'If', 'For', 'If']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['If', 'Expr', 'Assign', 'If', 'Expr', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['If', 'Expr', 'Assign', 'If', 'Expr', 'Expr', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'If', 'Assign', 'Assign', 'Print', 'Print']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Assign', 'Expr', 'Assign']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'For', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Expr', 'Assign', 'Assign', 'For', 'AugAssign']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'For', 'AugAssign']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'ListComp'), ('body', ['For']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['TryExcept', 'Assign', 'If', 'If', 'If']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Assign', 'Print', 'Print', 'Print', 'If']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['If', 'If', 'Expr']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['If', 'Assign', 'Assign', 'If', 'Expr', 'For']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Assign', 'If', 'Assign', 'Assign', 'If', 'Expr']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['If', 'Assign', 'If', 'If', 'If', 'Expr']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Assign', 'If', 'TryExcept']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['AugAssign', 'If', 'If', 'If', 'Assign', 'If', 'Assign']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['If', 'Assign', 'If', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['Assign', 'If', 'If']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['If', 'AugAssign']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'AugAssign']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Print', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'If', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Assign', 'If', 'If']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'ListComp'), ('body', ['TryExcept']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['If', 'If', 'If']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Subscript'), ('body', ['Assign', 'Assign', 'Expr', 'For']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'If', 'Assign']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['If', 'Break']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['Assign', 'TryExcept', 'Assign', 'If', 'If', 'Assign', 'Assign', 'AugAssign', 'Assign', 'Assign', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['Assign', 'TryExcept', 'If', 'If']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['Assign', 'Assign', 'For']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['Assign', 'If', 'If', 'Assign', 'If']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['Assign', 'If', 'Assign', 'If', 'Expr', 'Assign']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['If', 'AugAssign', 'Assign', 'Assign', 'If']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Assign', 'For', 'Assign']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['Assign', 'If', 'If', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['Assign', 'Delete', 'Assign', 'For', 'Expr']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Subscript'), ('body', ['Assign', 'If', 'AugAssign']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Subscript'), ('body', ['Assign', 'If']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Tuple'), ('body', ['Assign', 'Assign', 'If', 'If', 'If']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Tuple'), ('body', ['Assign', 'If', 'If', 'If', 'If', 'Return']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['AugAssign', 'Assign', 'If', 'AugAssign']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'AugAssign']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'For', 'If']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['For', 'For']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['If', 'If', 'If']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Name'), ('body', ['Assign', 'Assign', 'Assign', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'If']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Expr']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['If', 'AugAssign', 'For', 'AugAssign']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['If', 'AugAssign']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['If', 'Assert', 'Print', 'Print', 'Assign', 'If', 'If', 'Print', 'Print', 'For', 'Expr', 'Assign', 'Assign', 'Print', 'Assign', 'Assign', 'Expr', 'Assign']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assert', 'Print', 'Assign', 'Assign', 'Expr', 'If']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'For', 'Expr']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'If']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['If', 'For', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'If', 'Assign', 'If', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'If']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Assign', 'If', 'Expr', 'Assign', 'For', 'Print', 'Expr', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'For', 'Assign', 'If', 'Expr', 'Assign', 'For', 'Print', 'Expr', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['Delete']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['If', 'TryExcept']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['TryExcept', 'If']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'If', 'If']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['If', 'Assign', 'Expr', 'AugAssign']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Subscript'), ('body', ['If', 'Assign', 'If']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'AugAssign', 'Assign', 'AugAssign']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['Assert', 'If']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Assign', 'Assert', 'Assign', 'If']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['Assert']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'For', 'Expr', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'Expr', 'If', 'If']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Assign', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'If', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'TryExcept', 'If']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['If', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Expr']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['FunctionDef', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'For']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Assign', 'If', 'Assign', 'If', 'Assign', 'Assign', 'Expr']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'If', 'Expr', 'If', 'Expr', 'Expr', 'Assign', 'For']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Expr', 'AugAssign']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['If', 'Assign', 'Assign', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Expr', 'Expr', 'If', 'If']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['If', 'If', 'If', 'Assign', 'TryExcept']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['If', 'TryExcept']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['If', 'Expr', 'Expr']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'While']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Assign', 'AugAssign', 'Assign', 'Assign', 'If', 'Expr', 'Expr']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Name'), ('body', ['Assign', 'Assign']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['If', 'Assign', 'If', 'Assign', 'Assign', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['AugAssign', 'AugAssign', 'Assign', 'If']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['AugAssign', 'AugAssign']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Assign', 'AugAssign', 'AugAssign', 'Assign', 'If', 'Assign', 'AugAssign', 'Assign', 'If']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Name'), ('body', ['Assign', 'If', 'Assign', 'Assign', 'Assign', 'Expr']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Name'), ('body', ['Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Assign', 'For', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'AugAssign', 'AugAssign']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'AugAssign', 'AugAssign']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Assert', 'If']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Expr', 'AugAssign']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Subscript'), ('body', ['Assign', 'Expr', 'Expr', 'Expr', 'Expr']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Assign', 'Expr', 'Expr', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Expr', 'Expr', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'AugAssign', 'If', 'If']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['Assign', 'Assign', 'Assign']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Name'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'If', 'If', 'If']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Assign', 'If', 'Expr', 'Assign', 'Assign', 'Expr']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Name'), ('body', ['If', 'Assign', 'Assign', 'Assign', 'Expr', 'If']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Assign', 'If', 'Expr', 'Expr']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Tuple'), ('body', ['If']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['If', 'Assign', 'If', 'Assign', 'Assign', 'If', 'For', 'If']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Print', 'If']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Expr']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'If']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'For', 'Assign', 'Expr', 'For', 'Expr', 'Expr', 'For']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Expr', 'Expr', 'Assign']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'For', 'Expr', 'Assign']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['If', 'Assert', 'Expr']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Name'), ('body', ['Expr', 'Assign']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Assign', 'For', 'Assign', 'Assert', 'For', 'Expr', 'Expr', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Assert', 'Assign', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['For', 'For', 'Expr', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['If', 'Assign', 'For', 'If']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['If', 'If', 'If']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'BoolOp'), ('body', ['Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'If', 'If']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'BoolOp'), ('body', ['Expr', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'If', 'If', 'If', 'If', 'For']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['If', 'Assign', 'For']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'Assign', 'TryExcept']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['If', 'Expr', 'Expr', 'Expr', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'For', 'If']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'If', 'Expr']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'If', 'Expr', 'Assign']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Name'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'For', 'TryExcept']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'List'), ('body', ['Assign']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'If', 'Assign']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Print', 'Assign', 'Assign', 'Assign', 'If', 'If', 'If', 'Assign', 'Expr']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Name'), ('body', ['If', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'If', 'If', 'Expr', 'Assign']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Name'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'List'), ('body', ['Assign', 'Assign', 'If']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'If', 'If']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Print', 'AugAssign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Expr', 'Assign', 'Print', 'Print']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'For', 'Assign', 'If', 'If']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['AugAssign', 'Assign', 'Assign', 'If', 'Expr', 'Assign']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Subscript'), ('body', ['If', 'If']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'If', 'If', 'If', 'Assign', 'For']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['If', 'Assign', 'Expr', 'Assert', 'TryExcept']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['If', 'Print', 'If', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'Assign', 'If', 'If']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'If', 'If', 'Assign', 'If']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Expr', 'If', 'Expr', 'If', 'Assign']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Subscript'), ('body', ['Assign', 'If', 'Assign', 'Assign', 'If']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Assign']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['If', 'AugAssign']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['TryExcept', 'For']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['If', 'Assign', 'If', 'If']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['Assign', 'Assign', 'Assign', 'If']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Assign', 'If', 'If', 'If', 'If', 'If', 'If', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['TryExcept', 'Assign', 'If']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'For']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Expr', 'If', 'Assign', 'TryExcept', 'Assign', 'Expr', 'Expr', 'AugAssign']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['If', 'If', 'Assign', 'If', 'If']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'If', 'If', 'If']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'For']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'FunctionDef', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'ListComp'), ('body', ['Delete']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['If', 'Assign', 'Assign', 'If']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['While']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'If', 'Assign', 'For', 'Expr']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Attribute'), ('body', ['If', 'If', 'If', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Assign', 'Assign', 'For', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['If', 'Assign', 'Expr', 'If']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['TryExcept', 'TryExcept']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['If', 'If', 'Assign', 'Assign', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'If', 'Assert', 'Expr', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['If', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'For', 'If', 'Expr', 'Expr']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Attribute'), ('body', ['If', 'For']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'For', 'Expr', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assert', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'ListComp'), ('body', ['Assign', 'If']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'If', 'TryExcept', 'Assign']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['If', 'Assign', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Print']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'If', 'Assign', 'If', 'Assign', 'If', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Print']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Subscript'), ('body', ['Assign', 'For']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Tuple'), ('body', ['Assign', 'For', 'For']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['TryExcept', 'Assign', 'Assign', 'If']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['If', 'Assign']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'If', 'If', 'Assign']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Attribute'), ('body', ['Assign', 'For', 'If', 'If']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['TryExcept', 'If']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'BinOp'), ('body', ['TryExcept']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Expr', 'Assign', 'If']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Expr', 'If']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['Assign', 'Assign', 'Assign', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['Assign', 'Assign', 'Expr', 'Expr', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Tuple'), ('body', ['Expr', 'Assign', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'If', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'For']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Expr', 'Expr', 'Expr', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'If', 'If', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'If']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'For', 'Expr', 'Expr', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'If']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'If', 'Expr', 'Expr', 'Expr', 'For', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'Expr', 'If', 'Assign', 'For']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['Assign', 'Assign', 'Expr', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'AugAssign', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'AugAssign', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'For']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'Expr', 'For']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['Assign', 'Expr', 'Assign', 'Assign', 'For', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'For', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'For', 'Assign']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'List'), ('body', ['Expr', 'If', 'If']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Tuple'), ('body', ['Expr', 'If']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Expr', 'Expr', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Assign', 'Expr', 'TryExcept']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Tuple'), ('body', ['Assign', 'Assign', 'Assign', 'Assert', 'Assert', 'Assert', 'Assert', 'Assign', 'Expr', 'Assign', 'Assign', 'Assert']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Subscript'), ('body', ['Assign', 'Assign', 'Assign', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Tuple'), ('body', ['Assign', 'Assign', 'Assign', 'Assert', 'Assert', 'Assert', 'Assert', 'Assert']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Print', 'If']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'List'), ('body', ['For']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Expr', 'Expr', 'Expr', 'Expr']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Assign', 'If', 'Assign', 'If']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Assign', 'If', 'If', 'If', 'Return']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['Assign', 'If', 'If', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'AugAssign']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Tuple'), ('body', ['Assign', 'If', 'If', 'If', 'Return']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'If', 'If']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Attribute'), ('body', ['Assign', 'If']), ('orelse', ['Raise'])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['If', 'Expr', 'Assign']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Expr', 'AugAssign']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['For', 'Break']), ('orelse', ['Raise'])]", "For -> [('target', 'Name'), ('iter', 'Tuple'), ('body', ['If']), ('orelse', ['Continue'])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Assign', 'Assign', 'While']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Expr', 'For', 'Expr', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'ListComp'), ('body', ['If', 'If']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'If', 'Assign', 'For', 'If', 'Expr', 'If', 'For']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Expr', 'Expr', 'If']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['If', 'Expr', 'If']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['If']), ('orelse', ['Expr'])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'If', 'If', 'If', 'If', 'If']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Name'), ('body', ['Assign', 'For', 'If', 'Assign', 'If', 'If']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Assign', 'If', 'If', 'Assign']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Name'), ('body', ['Assign', 'Assign', 'If', 'If', 'Assign', 'Assign', 'If', 'If']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['If', 'Assign', 'If', 'TryExcept']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Subscript'), ('body', ['Assert']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assert', 'If']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assert', 'Assert', 'Assert', 'Assert']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Subscript'), ('body', ['Expr', 'Expr', 'For', 'For', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['TryExcept', 'Assign', 'TryExcept', 'TryExcept', 'TryExcept', 'If', 'If', 'If', 'If']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Name'), ('body', ['Assign', 'If', 'For', 'If']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Subscript'), ('body', ['Delete', 'Assign']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Subscript'), ('body', ['Assign', 'FunctionDef', 'Assign', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'For', 'Expr', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'For', 'If']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Assign', 'For', 'Assign', 'Expr', 'Assign', 'For', 'AugAssign']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'For', 'AugAssign']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['AugAssign', 'If', 'If']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Assign', 'For', 'Expr']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Assign', 'If', 'Assign']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'If']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Assign', 'If', 'If', 'If', 'If', 'If', 'Assign']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['If', 'Print', 'Expr', 'Assign', 'If']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'If', 'Assign', 'Assign', 'Assign', 'Print', 'Print', 'If']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Expr', 'Assign']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Print', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Print', 'Print', 'Assign', 'Print', 'Assign', 'Print']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['If', 'If', 'If', 'If', 'Assign', 'Assign', 'Expr', 'If', 'If', 'Assign', 'Expr']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Assert', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Expr', 'TryExcept', 'For']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['If', 'If', 'Assign', 'Assign', 'Assign', 'If']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Name'), ('body', ['If', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'For', 'For']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'If', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Assign', 'Assign', 'AugAssign', 'If']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Print', 'AugAssign']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Assign', 'Print']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Assign', 'Assign', 'Print']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Tuple'), ('body', ['Assign', 'If']), ('orelse', ['Raise'])]", "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['If']), ('orelse', ['Assign', 'For'])]", "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['If']), ('orelse', ['AugAssign'])]", "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['If']), ('orelse', ['For'])]", "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['If']), ('orelse', ['AugAssign', 'Assign'])]", "For -> [('target', 'Tuple'), ('iter', 'Name'), ('body', ['Assign', 'TryExcept', 'If']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['For', 'For', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'ListComp'), ('body', ['Assign', 'Expr', 'Expr', 'Expr']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['If', 'For', 'For']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'If']), ('orelse', ['Expr', 'Return'])]", "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['Assign', 'For', 'If', 'Expr']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'List'), ('body', ['If']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Expr', 'If', 'If', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Tuple'), ('body', ['If', 'If']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['TryExcept', 'If', 'Assign', 'Expr', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['If', 'TryExcept', 'Expr']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Tuple'), ('body', ['Assign', 'For']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['For', 'If', 'For', 'For', 'If']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['If']), ('orelse', ['Assign', 'Expr'])]", "For -> [('target', 'Name'), ('iter', 'ListComp'), ('body', ['Expr']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['AugAssign', 'Assign', 'If', 'If', 'If']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Assign', 'For', 'Assign', 'For', 'Assign', 'If', 'Assign', 'Assign', 'If', 'If', 'Expr', 'If', 'If']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['If', 'If', 'Assign']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Assign', 'If', 'Expr', 'If']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['AugAssign', 'AugAssign', 'AugAssign', 'AugAssign']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'TryExcept', 'For', 'TryExcept']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['If']), ('orelse', ['Return'])]", "For -> [('target', 'Tuple'), ('iter', 'Name'), ('body', ['If', 'Assign']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'While', 'Assign']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Attribute'), ('body', ['Assign', 'Assign', 'If', 'If', 'Assign', 'If', 'If', 'Assign', 'Assign', 'TryExcept', 'Assign', 'Assign', 'AugAssign', 'Assign', 'For', 'Assign', 'AugAssign']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Subscript'), ('body', ['Assign', 'TryExcept']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Name'), ('body', ['Assign', 'If', 'Expr', 'If']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Assign', 'TryExcept', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Name'), ('body', ['Assign', 'Assign', 'AugAssign']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Print', 'Assign', 'AugAssign', 'For', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Print', 'Assign', 'Assign']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['If', 'Assign', 'Assign', 'If', 'If', 'For']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Assign', 'If', 'If', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Assign', 'Assign', 'If']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['For', 'If']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Expr', 'Expr', 'Assign', 'If', 'Expr']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Expr', 'Assert']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Subscript'), ('body', ['Assign', 'Assign', 'Delete', 'If']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Tuple'), ('body', ['TryExcept', 'Assign', 'For']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['If', 'If', 'For']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['If', 'If', 'Assign', 'If', 'Assign', 'Assign', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['If', 'If', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Subscript'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'For', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Print']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'If', 'Print', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Print', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Assign', 'Print', 'Expr', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'For', 'Assign', 'For']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'If', 'If', 'Assign', 'Assign', 'For', 'If']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Expr', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'For', 'If']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Expr', 'If', 'If', 'If']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'If', 'If', 'Assign', 'Assign', 'If', 'Expr']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'If', 'Assign', 'Assign', 'Assign', 'Print']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'TryExcept']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['For', 'Print']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'If', 'If', 'If', 'If', 'Expr']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Subscript'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Subscript'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['If', 'Assign', 'Assign', 'For', 'Expr', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['TryExcept', 'TryExcept', 'TryExcept', 'TryExcept', 'If', 'If', 'If', 'If', 'If']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Expr', 'For', 'For', 'Assign', 'For']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['If', 'Expr', 'If', 'Assign', 'If', 'Assign', 'If']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['Assign', 'Print', 'If', 'For', 'If', 'Expr', 'Assign', 'Assign', 'For', 'If']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Expr', 'Assign', 'If', 'If', 'If']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Print', 'Assign', 'Expr', 'Assign']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'While']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Assign', 'Expr', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Tuple'), ('body', ['Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'For']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Tuple'), ('body', ['Assign', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Expr', 'Expr', 'For']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Tuple'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'List'), ('body', ['Assign', 'Expr', 'Expr', 'Assign', 'If']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Tuple'), ('body', ['Assign', 'Assign', 'Expr', 'Assign', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Str'), ('body', ['For']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Tuple'), ('body', ['Assign', 'TryExcept', 'Expr']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'List'), ('body', ['Assign', 'Expr', 'Assign', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'While', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Tuple'), ('body', ['For', 'Expr', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'BinOp'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'For', 'For', 'Assign', 'Expr', 'If', 'For']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Str'), ('body', ['Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['For', 'Assign', 'Assign', 'For']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Pass']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Assign', 'While']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['If', 'If', 'If', 'If']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['For', 'If', 'Expr']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['For', 'If']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['For', 'AugAssign', 'Expr', 'Expr', 'Expr', 'Print']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Print', 'Print', 'Assign', 'Print', 'Print', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Print']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'If']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Print', 'For', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Print', 'Expr', 'Assign', 'Expr', 'Expr', 'If']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Expr', 'Assign', 'Print', 'Assign', 'Print', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'If']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Expr', 'AugAssign']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['AugAssign', 'AugAssign']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['TryExcept', 'TryExcept']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Subscript'), ('body', ['For']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['If', 'Assign', 'For', 'If', 'Assign']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Expr', 'Assign', 'Assign', 'If', 'If']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'BinOp'), ('body', ['Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'If']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'If', 'If', 'If', 'If', 'Assign', 'If', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'BinOp'), ('body', ['Assign', 'If']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Assign', 'AugAssign']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Subscript'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Tuple'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'With']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'AugAssign']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Attribute'), ('body', ['Assign', 'TryExcept']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Name'), ('body', ['Expr', 'Assign', 'If', 'Assign']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'Assign']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'If', 'TryExcept', 'Assign', 'If', 'If', 'AugAssign', 'If']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['If']), ('orelse', ['Expr', 'Expr'])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Assign', 'If', 'Assign', 'If', 'For']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['If', 'If', 'If', 'Expr', 'Assign']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Subscript'), ('body', ['Assign', 'Expr', 'Expr', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'For', 'TryExcept']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['If', 'Assign', 'If', 'Assign', 'If']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Name'), ('body', ['Assign', 'If', 'If']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Name'), ('body', ['Print']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assert', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'GeneratorExp'), ('body', ['If', 'Assign', 'Assign']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Assign', 'If', 'If', 'AugAssign', 'If', 'Assign', 'If', 'Assign', 'If', 'If', 'If', 'If', 'For']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Assign', 'Expr', 'If', 'Assign', 'If', 'Assign', 'Expr', 'Assign', 'If']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Expr', 'If', 'Expr', 'Expr', 'Assign', 'If']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'If', 'Assign', 'Assign', 'While', 'For', 'For']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Name'), ('body', ['Assign', 'For']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'If', 'Assign', 'Assign', 'If', 'Assign', 'If', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['If', 'Assign']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['Assign', 'AugAssign']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['ImportFrom', 'If']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'TryExcept']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'Expr', 'If', 'Expr', 'If', 'Expr', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Expr', 'Assign', 'For']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['If', 'If', 'If', 'If']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'ListComp'), ('body', ['Assign', 'TryExcept', 'Assign', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'For']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Subscript'), ('body', ['Assign', 'While']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Tuple'), ('body', ['Print', 'For']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Expr', 'Assign', 'Assign', 'If']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'BinOp'), ('body', ['If', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'For']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['TryExcept', 'If']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Subscript'), ('body', ['If', 'Assign']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'If']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['Assign', 'For', 'If', 'For']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'For', 'If', 'For']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Subscript'), ('body', ['If', 'Expr', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Expr', 'If', 'Expr', 'AugAssign']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['TryExcept', 'If', 'If', 'Assign', 'For', 'If']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['Assign', 'TryExcept', 'If']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Expr', 'Expr', 'Assign', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['TryExcept', 'Expr']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Name'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'Assign', 'If', 'If']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'Print', 'Print', 'Assign', 'Print', 'Assign', 'Assign', 'Assign']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'List'), ('body', ['Assign', 'Assign', 'Assign', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'List'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'List'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'List'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'List'), ('body', ['Assign', 'Assign', 'Expr', 'Expr', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'List'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'For']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'Expr', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'List'), ('body', ['Assign', 'Assign']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['If', 'Assign', 'If', 'Assign', 'Assign', 'Return']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['If', 'Expr', 'Assign', 'If', 'Assign', 'Assign', 'Expr', 'If', 'If', 'Assign']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'For', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'For', 'Expr', 'For', 'Expr', 'Expr', 'Expr', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['For', 'Assign', 'Assign', 'If', 'Assign', 'Expr', 'Expr', 'For']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Subscript'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'AugAssign', 'AugAssign']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'BinOp'), ('body', ['Assign', 'Assign', 'With']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Print', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Print']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['If']), ('orelse', ['Raise', 'Expr', 'Expr'])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'For', 'If', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Expr', 'If', 'Assign', 'Assign', 'Assign']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Assign', 'For', 'If']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'If', 'If']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Assign', 'TryExcept']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'Assign']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['If', 'Assign', 'Assign', 'Expr', 'Assign', 'If', 'If', 'If']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['If', 'If', 'Assign', 'TryExcept', 'TryExcept']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['If', 'Expr', 'Assign']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Expr', 'If', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Expr', 'Expr', 'Assign', 'If', 'Expr']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['If', 'Assign', 'Assign', 'Assign', 'If', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'If', 'Assign', 'If', 'Expr', 'Expr', 'Expr', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['If', 'Assign', 'For', 'If']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['If', 'If', 'For']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Assign', 'Assign', 'TryExcept']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'If', 'If', 'Assign', 'If']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Subscript'), ('body', ['If', 'AugAssign']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['Assign', 'Assign', 'For', 'If']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Tuple'), ('body', ['For']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Tuple'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'For', 'For']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Assert', 'Assign', 'Assign', 'Assign', 'If', 'If']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'For', 'Assign', 'If', 'Expr']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['If', 'If', 'Expr', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['If', 'If', 'For', 'For']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['If', 'Assign', 'If', 'Assign', 'Expr', 'TryExcept', 'Assign', 'Assign', 'If', 'If', 'AugAssign', 'If']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Tuple'), ('body', ['Assign', 'Assign', 'Expr', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Tuple'), ('body', ['Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Expr', 'Assign', 'Assign']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Expr', 'Assign', 'With']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Name'), ('body', ['Assign', 'If', 'Expr', 'Assign', 'If']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Expr', 'Expr', 'Expr', 'If', 'Assign']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Expr', 'Expr', 'Expr', 'Expr', 'If', 'Assign']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'If']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['Assign', 'Assign', 'If', 'If']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['For', 'Expr']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Attribute'), ('body', ['TryExcept']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['If', 'If', 'If', 'If']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Subscript'), ('body', ['If']), ('orelse', ['Assert'])]", "For -> [('target', 'Name'), ('iter', 'Tuple'), ('body', ['Assign', 'If', 'Assign', 'Assign', 'Assert', 'Assert', 'Assert']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Tuple'), ('body', ['Assign', 'Assign', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Tuple'), ('body', ['Assign', 'If', 'Assign', 'Assign', 'Assert', 'Assert']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Tuple'), ('body', ['Assign', 'Assign', 'Assign', 'Assert']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'Expr', 'Expr', 'Assert']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'AugAssign', 'AugAssign']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'BinOp'), ('body', ['Assign', 'For', 'Assign', 'If', 'Assign']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Expr', 'TryExcept']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'If', 'Assign', 'For']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Expr', 'Expr', 'If', 'If', 'If']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['Assign', 'Assign', 'While', 'Expr', 'Expr']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Expr', 'TryExcept', 'If', 'Assign']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Attribute'), ('body', ['Assign', 'Expr', 'Assign', 'Expr']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Expr', 'Expr', 'Assign']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'For', 'If']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Assign', 'If', 'Expr', 'If']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Assign', 'Assign', 'AugAssign', 'Expr', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['If', 'If', 'Assign', 'TryExcept', 'If', 'Assign', 'FunctionDef', 'If']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Assign', 'FunctionDef', 'Expr', 'If', 'For']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Name'), ('body', ['Assign', 'If', 'AugAssign']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Name'), ('body', ['If', 'Assign', 'If']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['Assert', 'Assign', 'If']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'BinOp'), ('body', ['Delete']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['If', 'Assign', 'For']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'List'), ('body', ['Assign', 'If', 'For']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'List'), ('body', ['Assign', 'If', 'Assign', 'Expr', 'If', 'If', 'Assign', 'For']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['For', 'For', 'For']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Subscript'), ('body', ['Assign', 'If', 'If', 'Assert', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['If']), ('orelse', ['Return'])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Print', 'If']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['If', 'If', 'Expr', 'Assign', 'If']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Name'), ('body', ['If', 'Assign', 'If', 'Assign', 'Expr', 'If', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['Assign', 'Assign', 'Expr', 'Expr', 'For', 'Assign', 'For']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'Call'), ('body', ['If', 'Expr', 'Assign', 'Assign', 'Assign', 'For', 'Expr', 'Assign', 'Assign', 'For']), ('orelse', [])]", "For -> [('target', 'Tuple'), ('iter', 'Call'), ('body', ['If', 'If', 'If', 'Assign', 'If', 'AugAssign', 'For', 'Expr']), ('orelse', [])]", "For -> [('target', 'Name'), ('iter', 'List'), ('body', ['Assign', 'Assign', 'Assign']), ('orelse', [])]"], "UnaryOp": ["UnaryOp -> [('op', 'Not'), ('operand', 'Call')]", "UnaryOp -> [('op', 'Not'), ('operand', 'Name')]", "UnaryOp -> [('op', 'USub'), ('operand', 'BinOp')]", "UnaryOp -> [('op', 'USub'), ('operand', 'Call')]", "UnaryOp -> [('op', 'Not'), ('operand', 'Attribute')]", "UnaryOp -> [('op', 'Not'), ('operand', 'Compare')]", "UnaryOp -> [('op', 'Not'), ('operand', 'BoolOp')]", "UnaryOp -> [('op', 'Not'), ('operand', 'Subscript')]", "UnaryOp -> [('op', 'USub'), ('operand', 'Name')]", "UnaryOp -> [('op', 'Invert'), ('operand', 'Call')]", "UnaryOp -> [('op', 'USub'), ('operand', 'Attribute')]", "UnaryOp -> [('op', 'USub'), ('operand', 'Subscript')]", "UnaryOp -> [('op', 'Invert'), ('operand', 'Attribute')]", "UnaryOp -> [('op', 'UAdd'), ('operand', 'Num')]", "UnaryOp -> [('op', 'Invert'), ('operand', 'Name')]", "UnaryOp -> [('op', 'Not'), ('operand', 'BinOp')]"], "Exec": ["Exec -> [('body', 'Attribute'), ('globals', 'Attribute'), ('locals', 'Attribute')]", "Exec -> [('body', 'Str'), ('globals', 'NoneType'), ('locals', 'NoneType')]", "Exec -> [('body', 'BinOp'), ('globals', 'Name'), ('locals', 'NoneType')]", "Exec -> [('body', 'Subscript'), ('globals', 'NoneType'), ('locals', 'NoneType')]", "Exec -> [('body', 'Name'), ('globals', 'NoneType'), ('locals', 'NoneType')]", "Exec -> [('body', 'Tuple'), ('globals', 'NoneType'), ('locals', 'NoneType')]", "Exec -> [('body', 'Name'), ('globals', 'Attribute'), ('locals', 'Attribute')]", "Exec -> [('body', 'BinOp'), ('globals', 'NoneType'), ('locals', 'NoneType')]", "Exec -> [('body', 'Name'), ('globals', 'Attribute'), ('locals', 'NoneType')]"], "Invert": ["Invert -> <NULL>"], "DictComp": ["DictComp -> [('key', 'Name'), ('value', 'Name'), ('generators', ['comprehension'])]"], "Param": ["Param -> <NULL>"], "Pass": ["Pass -> <NULL>"], "BitXor": ["BitXor -> <NULL>"], "Add": ["Add -> <NULL>"], "NotIn": ["NotIn -> <NULL>"], "Dict": ["Dict -> [('keys', ['Str']), ('values', ['Name'])]", "Dict -> [('keys', ['Str']), ('values', ['Call'])]", "Dict -> [('keys', ['Str']), ('values', ['Num'])]", "Dict -> [('keys', ['Str', 'Str']), ('values', ['Num', 'Call'])]", "Dict -> [('keys', ['Str']), ('values', ['Str'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Num', 'Num', 'Str', 'Num', 'Str', 'Num', 'Call', 'Call', 'Num', 'Num'])]", "Dict -> [('keys', ['Str', 'Str']), ('values', ['Num', 'Str'])]", "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['Call', 'Num', 'Num'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str']), ('values', ['Num', 'Call', 'Num', 'Call'])]", "Dict -> [('keys', ['Str', 'Str']), ('values', ['Num', 'Num'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Num', 'Num', 'Str', 'Str', 'Num', 'Num', 'Call', 'Call', 'Num', 'Num'])]", "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['Num', 'Str', 'Num'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Name', 'Num', 'Name', 'Name'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Str', 'Num', 'Name', 'Num', 'Name', 'Num', 'Name'])]", "Dict -> [('keys', ['Str', 'Str']), ('values', ['Str', 'Str'])]", "Dict -> [('keys', []), ('values', [])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Num', 'Num', 'Num', 'Subscript', 'Subscript', 'Call', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Name', 'Str', 'Name', 'BinOp', 'Name', 'Num'])]", "Dict -> [('keys', ['Str', 'Str']), ('values', ['Str', 'Name'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Name', 'Name', 'Name'])]", "Dict -> [('keys', ['Name']), ('values', ['Name'])]", "Dict -> [('keys', ['Str']), ('values', ['Subscript'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str']), ('values', ['Str', 'Str', 'Name', 'Attribute'])]", "Dict -> [('keys', ['Str', 'Str']), ('values', ['Name', 'Call'])]", "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['Str', 'Str', 'Str'])]", "Dict -> [('keys', ['Str', 'Str']), ('values', ['Attribute', 'Attribute'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Str', 'Str', 'Str', 'Str', 'Str'])]", "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['BinOp', 'BinOp', 'BinOp'])]", "Dict -> [('keys', ['Call']), ('values', ['Str'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Call', 'Call'])]", "Dict -> [('keys', ['Str', 'Str']), ('values', ['Name', 'Name'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str']), ('values', ['Attribute', 'Attribute', 'Name', 'Str'])]", "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['Attribute', 'Attribute', 'Attribute'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Subscript', 'Subscript', 'Subscript', 'Name', 'Name', 'Name'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Name', 'Subscript', 'Subscript', 'Name', 'Name', 'Name'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name'])]", "Dict -> [('keys', ['Str', 'Str']), ('values', ['Str', 'Call'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Name', 'Call', 'Name', 'Name', 'Call'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Attribute']), ('values', ['Name', 'Call', 'Call', 'Name', 'BoolOp', 'Name', 'Attribute', 'Name', 'Name', 'Attribute'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Attribute', 'Call', 'Dict', 'Call', 'BoolOp', 'Attribute', 'Attribute', 'Attribute', 'Call'])]", "Dict -> [('keys', ['Str', 'Str']), ('values', ['Attribute', 'BoolOp'])]", "Dict -> [('keys', ['Str']), ('values', ['Attribute'])]", "Dict -> [('keys', ['Call']), ('values', ['List'])]", "Dict -> [('keys', ['Str', 'Str']), ('values', ['Call', 'Name'])]", "Dict -> [('keys', ['Str', 'Str']), ('values', ['Num', 'Name'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Dict', 'Attribute', 'Attribute', 'Attribute', 'Attribute'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Num', 'Num', 'Num', 'Num', 'Num', 'Num'])]", "Dict -> [('keys', ['Str', 'Str']), ('values', ['Call', 'Call'])]", "Dict -> [('keys', ['Str']), ('values', ['Dict'])]", "Dict -> [('keys', ['Str']), ('values', ['Tuple'])]", "Dict -> [('keys', ['Str', 'Str']), ('values', ['Name', 'Str'])]", "Dict -> [('keys', ['Name']), ('values', ['Str'])]", "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['Num', 'Str', 'Str'])]", "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['Str', 'Num', 'Str'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Str', 'Str', 'Str', 'Call', 'Str', 'Str'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Str', 'Str', 'Str', 'Str', 'BinOp'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Str', 'Str', 'Str', 'Call', 'BinOp'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Str', 'Str', 'Str', 'Call', 'Str', 'Call', 'Str', 'Str'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Str', 'Str', 'Str', 'Call', 'Str', 'Call', 'Str', 'Call', 'Str', 'Str', 'Str'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Str', 'Str', 'Str', 'Call', 'Str', 'List', 'Str', 'Str', 'Str'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Str', 'Str', 'Str', 'Name', 'Str', 'Str', 'Str', 'Str', 'Str'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Str', 'Str', 'Str', 'Call', 'Str', 'Str', 'Str'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Str', 'Str', 'Str', 'Call', 'Str', 'Str', 'Str', 'Str', 'Str'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Str', 'Str', 'Str', 'Call', 'Str'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str']), ('values', ['Str', 'Str', 'Str', 'Str'])]", "Dict -> [('keys', ['Str']), ('values', ['List'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Str', 'Str', 'Str', 'Attribute', 'Str', 'Str'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Str', 'Str', 'Str', 'Call', 'Call', 'Str'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Str', 'Str', 'Str', 'Call', 'Call', 'Call', 'Str'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Num', 'Num', 'Str', 'Str', 'Str'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Num', 'Num', 'Str', 'Str', 'Str', 'Str', 'Str'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Str', 'Str', 'Str', 'Str', 'Call', 'Call', 'Str', 'Call', 'Call'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Attribute', 'Name', 'Attribute', 'Attribute', 'Attribute', 'Attribute'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Attribute', 'Name', 'Name', 'Attribute', 'Call', 'Attribute', 'BinOp', 'Call', 'Call', 'Attribute', 'Attribute', 'Attribute', 'Attribute'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Subscript', 'Subscript', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Attribute'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Name', 'Name', 'BinOp', 'Call', 'Call', 'Name', 'Name', 'Name', 'BinOp'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Attribute', 'Subscript', 'Name', 'Call', 'Name', 'Call'])]", "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['Name', 'Name', 'Call'])]", "Dict -> [('keys', ['Str', 'Name', 'Str', 'Str']), ('values', ['Name', 'Name', 'Name', 'Attribute'])]", "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['Name', 'Attribute', 'Call'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Call', 'Name', 'Name', 'Name', 'Name'])]", "Dict -> [('keys', ['Call']), ('values', ['Call'])]", "Dict -> [('keys', ['Name']), ('values', ['Call'])]", "Dict -> [('keys', ['Num', 'Num', 'Num']), ('values', ['Tuple', 'Tuple', 'Tuple'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num'])]", "Dict -> [('keys', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('values', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Name', 'Call', 'Name', 'Call', 'Call', 'Call', 'Name', 'Call'])]", "Dict -> [('keys', ['Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute']), ('values', ['Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num'])]", "Dict -> [('keys', ['Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute']), ('values', ['Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num'])]", "Dict -> [('keys', ['Num', 'Num']), ('values', ['Num', 'Num'])]", "Dict -> [('keys', ['Num', 'Num']), ('values', ['BinOp', 'BinOp'])]", "Dict -> [('keys', ['Num', 'Num', 'Num', 'Num']), ('values', ['Attribute', 'Attribute', 'Attribute', 'Attribute'])]", "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['BoolOp', 'BinOp', 'BinOp'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Call', 'Name', 'Name'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str']), ('values', ['Attribute', 'Name', 'Name', 'Name'])]", "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['BinOp', 'Call', 'Name'])]", "Dict -> [('keys', ['Str']), ('values', ['BinOp'])]", "Dict -> [('keys', ['Str', 'Str']), ('values', ['Name', 'Attribute'])]", "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['Attribute', 'BinOp', 'Attribute'])]", "Dict -> [('keys', ['Str', 'Str']), ('values', ['Attribute', 'BinOp'])]", "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['Name', 'BinOp', 'Attribute'])]", "Dict -> [('keys', ['Num', 'Num', 'Num']), ('values', ['Str', 'Str', 'Str'])]", "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['Name', 'Str', 'Str'])]", "Dict -> [('keys', ['Str', 'Str']), ('values', ['Call', 'List'])]", "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['Dict', 'Dict', 'Dict'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str']), ('values', ['Attribute', 'Attribute', 'Attribute', 'Attribute'])]", "Dict -> [('keys', ['Str', 'Str']), ('values', ['BinOp', 'Attribute'])]", "Dict -> [('keys', ['BinOp']), ('values', ['Call'])]", "Dict -> [('keys', ['BinOp']), ('values', ['Name'])]", "Dict -> [('keys', ['BinOp', 'BinOp']), ('values', ['Name', 'Name'])]", "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['Name', 'Call', 'Call'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Call', 'Call', 'Call', 'Call'])]", "Dict -> [('keys', ['Attribute']), ('values', ['Name'])]", "Dict -> [('keys', ['Str', 'Str']), ('values', ['List', 'List'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str']), ('values', ['List', 'Call', 'Name', 'Dict'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str']), ('values', ['List', 'List', 'List', 'List'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Str', 'Str', 'Str', 'Str', 'Str', 'List', 'Str', 'Str', 'Name', 'Name', 'Str', 'Str', 'BinOp', 'Name'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Dict', 'List', 'List'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'BinOp', 'List', 'List', 'Num'])]", "Dict -> [('keys', ['Str', 'Str']), ('values', ['Name', 'Subscript'])]", "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['Name', 'Name', 'Compare'])]", "Dict -> [('keys', ['Str', 'Str']), ('values', ['Attribute', 'Name'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str']), ('values', ['Call', 'BinOp', 'Name', 'Name'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Subscript', 'Call', 'BinOp'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Name', 'Call', 'Name'])]", "Dict -> [('keys', ['Str']), ('values', ['ListComp'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Tuple'])]", "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['Call', 'Call', 'Call'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str']), ('values', ['Tuple', 'Tuple', 'Tuple', 'Tuple'])]", "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['Subscript', 'Subscript', 'Subscript'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Attribute', 'List', 'Dict', 'Attribute', 'Attribute', 'Attribute', 'ListComp'])]", "Dict -> [('keys', ['Str', 'Str']), ('values', ['Subscript', 'Name'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Str', 'Str', 'List', 'Str', 'Str', 'Str'])]", "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['Num', 'Name', 'Name'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Name', 'Call', 'Str', 'Str'])]", "Dict -> [('keys', ['Str', 'Str']), ('values', ['Name', 'BinOp'])]", "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['Call', 'Call', 'Name'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str']), ('values', ['Call', 'BinOp', 'Name', 'List'])]", "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['Call', 'Name', 'Attribute'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str']), ('values', ['Call', 'Call', 'Name', 'Attribute'])]", "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['Call', 'BinOp', 'Name'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str']), ('values', ['Call', 'Str', 'Name', 'List'])]", "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['BinOp', 'List', 'Attribute'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Attribute', 'Attribute', 'Attribute', 'Str', 'Str', 'Attribute', 'Name'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str']), ('values', ['Str', 'Name', 'Name', 'Dict'])]", "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['Attribute', 'BinOp', 'Str'])]", "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['Name', 'BinOp', 'Str'])]", "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['Call', 'Dict', 'Dict'])]", "Dict -> [('keys', ['Str', 'Str']), ('values', ['Name', 'Dict'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Call', 'Call', 'Call'])]", "Dict -> [('keys', ['Str', 'Str']), ('values', ['Subscript', 'Subscript'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Name', 'Call', 'Call'])]", "Dict -> [('keys', ['Tuple']), ('values', ['Name'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str']), ('values', ['Call', 'Call', 'Call', 'Call'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str']), ('values', ['Attribute', 'Attribute', 'Name', 'Name'])]", "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['Name', 'Name', 'Name'])]", "Dict -> [('keys', ['Str', 'Str']), ('values', ['Call', 'ListComp'])]", "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['Attribute', 'Attribute', 'Name'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Call', 'Call', 'Call', 'Attribute', 'Call', 'Call', 'Call'])]", "Dict -> [('keys', ['Str', 'Str']), ('values', ['List', 'Name'])]", "Dict -> [('keys', ['Str', 'Str']), ('values', ['Call', 'Attribute'])]", "Dict -> [('keys', ['Str', 'Name']), ('values', ['Name', 'Name'])]", "Dict -> [('keys', ['Str', 'Str', 'BinOp']), ('values', ['Name', 'Name', 'Name'])]", "Dict -> [('keys', ['Str', 'BinOp', 'Str', 'Str', 'Str']), ('values', ['Name', 'Name', 'Name', 'Name', 'Name'])]", "Dict -> [('keys', ['BinOp', 'Str']), ('values', ['Name', 'Name'])]", "Dict -> [('keys', ['BinOp']), ('values', ['Tuple'])]", "Dict -> [('keys', ['BinOp', 'Str', 'Str', 'Str']), ('values', ['Name', 'Name', 'BinOp', 'Name'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str']), ('values', ['Attribute', 'BinOp', 'Dict', 'Attribute'])]", "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['Call', 'Str', 'Attribute'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Attribute', 'Attribute', 'Attribute', 'Call', 'Dict', 'Attribute', 'Dict'])]", "Dict -> [('keys', ['Str', 'Str']), ('values', ['Call', 'Str'])]", "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['Attribute', 'BinOp', 'Call'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Attribute', 'Attribute', 'Call', 'Call', 'Attribute', 'Dict', 'Attribute'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Dict'])]", "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['Attribute', 'Name', 'Attribute'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str']), ('values', ['Attribute', 'Call', 'Call', 'Dict'])]", "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['Name', 'Call', 'Attribute'])]", "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['Name', 'Call', 'Name'])]", "Dict -> [('keys', ['Str', 'Str']), ('values', ['Name', 'List'])]", "Dict -> [('keys', ['Str', 'Str']), ('values', ['Dict', 'Dict'])]", "Dict -> [('keys', ['Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute']), ('values', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Call', 'Call', 'Call', 'Call', 'Call'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['BoolOp', 'Attribute', 'Attribute', 'Attribute', 'Call'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str']), ('values', ['Num', 'Num', 'Num', 'Num'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Subscript', 'Name', 'Name', 'Subscript', 'Subscript', 'Name'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Subscript', 'Name', 'Name', 'Subscript', 'Subscript', 'BinOp'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Name', 'BoolOp', 'Name'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Name', 'Tuple', 'Attribute', 'Name', 'Call', 'Attribute', 'Attribute', 'Attribute', 'Call', 'Call', 'Call', 'Call', 'Call'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Tuple', 'Call', 'Call', 'Call', 'Call', 'Call'])]", "Dict -> [('keys', ['Str', 'Str']), ('values', ['Attribute', 'Call'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Name', 'Name', 'List'])]", "Dict -> [('keys', ['Name', 'Name', 'Name', 'Name']), ('values', ['Name', 'Name', 'Name', 'Name'])]", "Dict -> [('keys', ['Attribute', 'Attribute']), ('values', ['List', 'List'])]", "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['UnaryOp', 'Call', 'Attribute'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str']), ('values', ['Attribute', 'UnaryOp', 'Call', 'Attribute'])]", "Dict -> [('keys', ['Str', 'Str']), ('values', ['Name', 'BoolOp'])]", "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['Name', 'BoolOp', 'Name'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Attribute', 'BoolOp', 'Call', 'Compare'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Attribute', 'BoolOp', 'Compare', 'Call'])]", "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['Name', 'Attribute', 'Attribute'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Call', 'Call', 'Name', 'Call', 'Call'])]", "Dict -> [('keys', ['Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute']), ('values', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Attribute', 'Name', 'Name', 'Name', 'Name'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Attribute', 'Name', 'Call', 'Name', 'Name'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Attribute', 'Attribute', 'Call', 'IfExp', 'Subscript'])]", "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['BinOp', 'Str', 'Str'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Call', 'Name', 'Attribute', 'Attribute', 'Attribute', 'Name', 'Call'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['BinOp', 'Num', 'Num', 'Num', 'Num'])]", "Dict -> [('keys', ['Name', 'Name', 'Name']), ('values', ['Tuple', 'Tuple', 'Tuple'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Attribute', 'Call', 'Call', 'Str', 'Attribute', 'Name', 'Attribute', 'Attribute', 'Name', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Subscript', 'Attribute', 'Str'])]", "Dict -> [('keys', ['Str', 'Str']), ('values', ['Tuple', 'Tuple'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Call', 'Call', 'Str', 'Call', 'Call', 'Call', 'Call', 'Str', 'Str', 'Str'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Name', 'Attribute', 'Attribute', 'Call'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Attribute', 'Name', 'Attribute', 'Attribute', 'Attribute', 'Call', 'Call'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str']), ('values', ['Call', 'Call', 'Call', 'BinOp'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Call', 'Name', 'Name', 'Name', 'Name'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call'])]", "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['Name', 'Num', 'Num'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Name', 'Num', 'Num', 'BinOp'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Name', 'Num', 'Num', 'Name'])]", "Dict -> [('keys', ['Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num']), ('values', ['Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num'])]", "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['Name', 'Str', 'Call'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Str', 'Str', 'Str', 'Str', 'Name'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'BinOp', 'Tuple', 'Tuple', 'Str', 'Str', 'Str'])]", "Dict -> [('keys', ['Str', 'Str']), ('values', ['Name', 'Num'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Attribute', 'Str', 'Str'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Num', 'Str', 'Str'])]", "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['Attribute', 'Attribute', 'Call'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Str', 'Str', 'Str', 'Str', 'Attribute'])]", "Dict -> [('keys', ['Subscript']), ('values', ['Subscript'])]", "Dict -> [('keys', ['Name']), ('values', ['Subscript'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Attribute', 'Attribute', 'Attribute', 'Call', 'Call', 'Call', 'Call', 'Attribute'])]", "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['BinOp', 'Name', 'Name'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Name', 'Attribute', 'Attribute', 'Name', 'Attribute'])]", "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['Str', 'Name', 'Name'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute'])]", "Dict -> [('keys', ['Str', 'Str']), ('values', ['BinOp', 'Name'])]", "Dict -> [('keys', ['Str', 'Str']), ('values', ['Str', 'Compare'])]", "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['Attribute', 'Attribute', 'Str'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Subscript', 'Name', 'Name'])]", "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['Call', 'Attribute', 'Name'])]", "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['Call', 'Name', 'Call'])]", "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['Call', 'Name', 'Name'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Name', 'List', 'Name'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Subscript', 'Subscript', 'Subscript', 'Str', 'Str', 'IfExp'])]", "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['Str', 'Attribute', 'Name'])]", "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['Str', 'Call', 'Name'])]", "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['Name', 'Num', 'Str'])]", "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['Str', 'Str', 'Call'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Str', 'Subscript', 'Name', 'Name', 'Call', 'BinOp'])]", "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['Str', 'Str', 'Name'])]", "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['Str', 'BinOp', 'Name'])]", "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['Str', 'Name', 'Str'])]", "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['Str', 'Name', 'BinOp'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Dict', 'Dict', 'Dict', 'Dict', 'Dict', 'Dict', 'Dict', 'Dict', 'Dict', 'Dict', 'Dict', 'Dict', 'Dict', 'Dict', 'Dict'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Dict', 'Dict', 'Dict', 'Dict', 'Dict', 'Dict', 'Dict', 'Dict', 'Dict'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str']), ('values', ['Num', 'Str', 'Num', 'Num'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['List', 'List', 'List', 'List', 'List', 'List', 'List', 'List', 'List', 'List', 'List', 'List', 'List', 'List', 'List', 'List'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['BinOp', 'Name', 'Call', 'Call', 'Name', 'Name'])]", "Dict -> [('keys', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('values', ['Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute'])]", "Dict -> [('keys', ['Attribute', 'Name', 'Attribute', 'Attribute', 'Attribute', 'Name', 'Attribute', 'Name']), ('values', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Dict', 'Dict', 'Dict', 'Dict', 'Dict', 'Dict', 'Dict', 'Dict', 'Dict', 'Dict'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str'])]", "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['Str', 'Call', 'Num'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Name']), ('values', ['Str', 'Str', 'Str', 'Str'])]", "Dict -> [('keys', ['Str', 'Str']), ('values', ['Str', 'Num'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Str', 'Subscript', 'Subscript', 'Subscript', 'Subscript'])]", "Dict -> [('keys', ['Str', 'Str']), ('values', ['Str', 'Subscript'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Str', 'Num', 'Num', 'Num', 'Str', 'List'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Str', 'Str', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Attribute', 'BoolOp', 'Name'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Name', 'Attribute', 'Name', 'BinOp', 'Name'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Attribute', 'BoolOp', 'Name', 'Name'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Attribute', 'BoolOp', 'Name', 'Compare'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Attribute', 'BoolOp', 'Name', 'Compare', 'Call', 'Name'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Attribute', 'BoolOp', 'Name', 'Call', 'Name'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Subscript', 'Subscript', 'Subscript', 'Subscript', 'Call', 'Name'])]", "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['Name', 'Attribute', 'BoolOp'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Name', 'BoolOp', 'Name', 'Name', 'Num'])]", "Dict -> [('keys', ['Name', 'Name']), ('values', ['Name', 'Name'])]", "Dict -> [('keys', ['Name', 'Name', 'Name']), ('values', ['Str', 'Str', 'Str'])]", "Dict -> [('keys', ['Name', 'Name']), ('values', ['Str', 'Str'])]", "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['Name', 'Dict', 'List'])]", "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['Name', 'Dict', 'ListComp'])]", "Dict -> [('keys', ['Name', 'Name', 'Name']), ('values', ['Name', 'Name', 'Attribute'])]", "Dict -> [('keys', ['Name', 'Name']), ('values', ['Name', 'Attribute'])]", "Dict -> [('keys', ['Str', 'Str']), ('values', ['Name', 'ListComp'])]", "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['Name', 'Compare', 'Name'])]", "Dict -> [('keys', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('values', ['Num', 'Num', 'Num', 'Num', 'Num', 'Num'])]", "Dict -> [('keys', ['Name']), ('values', ['Num'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Subscript', 'Subscript', 'Subscript', 'Subscript', 'Subscript', 'Subscript', 'Subscript', 'Subscript'])]", "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['Attribute', 'Name', 'Name'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Attribute', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Subscript', 'Subscript', 'Subscript', 'Subscript', 'Subscript', 'Subscript', 'Subscript'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'BoolOp', 'Name', 'BoolOp', 'Name', 'Name'])]", "Dict -> [('keys', ['Name', 'Name', 'Name']), ('values', ['Call', 'Call', 'Call'])]", "Dict -> [('keys', ['Str', 'Str']), ('values', ['List', 'Num'])]", "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['List', 'Num', 'Name'])]", "Dict -> [('keys', ['Attribute']), ('values', ['List'])]", "Dict -> [('keys', ['Name', 'Name', 'Attribute', 'Attribute']), ('values', ['Attribute', 'Attribute', 'Attribute', 'Attribute'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Attribute', 'Call', 'Name', 'Name', 'Subscript', 'Attribute', 'Call', 'Attribute', 'BinOp', 'Call', 'Call', 'Attribute', 'Attribute', 'Attribute', 'Attribute'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Attribute', 'Subscript', 'Name', 'Call', 'Name', 'Call'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str']), ('values', ['Call', 'Call', 'Call', 'Attribute'])]", "Dict -> [('keys', ['Str', 'Str', 'Attribute']), ('values', ['Name', 'Name', 'Name'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str']), ('values', ['Call', 'Call', 'Attribute', 'Call'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str']), ('values', ['Str', 'Str', 'Str', 'Num'])]", "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['Str', 'Str', 'Num'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str']), ('values', ['Str', 'Str', 'Call', 'Call'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str']), ('values', ['Str', 'Str', 'Num', 'Call'])]", "Dict -> [('keys', ['Attribute']), ('values', ['Call'])]", "Dict -> [('keys', ['Str', 'Str']), ('values', ['Tuple', 'Str'])]", "Dict -> [('keys', ['Attribute', 'Str']), ('values', ['Name', 'Call'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Dict', 'Dict', 'Dict', 'Dict', 'Dict', 'Dict'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Dict', 'Dict', 'Dict', 'Dict', 'Dict'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str']), ('values', ['Dict', 'Dict', 'Dict', 'Dict'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Subscript', 'Subscript', 'Subscript', 'Subscript', 'Subscript'])]", "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['Subscript', 'Subscript', 'Call'])]", "Dict -> [('keys', ['Str', 'Attribute']), ('values', ['Attribute', 'Name'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Dict', 'Dict', 'Dict', 'Dict', 'Dict', 'Dict', 'Dict'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'BoolOp', 'Call', 'Call'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Dict', 'Dict', 'Dict', 'Dict', 'Dict', 'Dict', 'Dict', 'Dict'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Dict', 'Dict', 'Dict', 'Dict', 'Dict', 'Dict', 'Dict', 'Dict', 'Dict', 'Dict', 'Dict'])]", "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['Attribute', 'Call', 'Call'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Attribute', 'Attribute', 'Attribute', 'Attribute', 'Dict'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Dict', 'Dict', 'Dict', 'Dict', 'Dict', 'Dict', 'Dict', 'Dict', 'Dict', 'Dict', 'Dict', 'Dict'])]", "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['Name', 'Str', 'Name'])]", "Dict -> [('keys', ['Str', 'Attribute']), ('values', ['Name', 'Name'])]", "Dict -> [('keys', ['Attribute']), ('values', ['Dict'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str']), ('values', ['Call', 'Name', 'Name', 'Name'])]", "Dict -> [('keys', ['Str', 'Str']), ('values', ['List', 'Str'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Dict', 'Dict', 'Dict', 'Dict', 'Dict', 'Dict', 'Dict', 'Dict', 'Dict', 'Dict', 'Dict', 'Dict', 'Dict'])]", "Dict -> [('keys', ['Attribute']), ('values', ['Attribute'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str']), ('values', ['Str', 'Call', 'Call', 'Call'])]", "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['Name', 'ListComp', 'Attribute'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Str', 'Name', 'Call', 'Name', 'Name'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Num', 'Num', 'Str', 'Name', 'Str', 'Name', 'Name', 'Name'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Call', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Tuple', 'Str', 'Attribute', 'Name', 'Name', 'Name'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Str', 'Call', 'BoolOp', 'Str', 'Call'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Call', 'Name', 'Call', 'Subscript', 'Str', 'Call'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str']), ('values', ['Call', 'BoolOp', 'Str', 'Call'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Str', 'Attribute', 'BoolOp', 'Name'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Attribute', 'BoolOp', 'Subscript', 'BoolOp', 'Subscript'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Attribute', 'BoolOp', 'Attribute', 'BoolOp', 'BoolOp', 'BoolOp', 'BoolOp', 'Name'])]", "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['Num', 'Str', 'Attribute'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Name', 'Name', 'Name', 'Name'])]", "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['Call', 'Str', 'Name'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Call', 'Call', 'Call', 'Call', 'Call', 'Attribute', 'Attribute', 'Name', 'Name'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Name', 'Call', 'Name', 'Name', 'Name', 'Call', 'Name', 'Name', 'Name', 'Compare', 'Call', 'Name'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str']), ('values', ['Call', 'Call', 'Attribute', 'Attribute'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Attribute', 'Attribute', 'Name', 'Name', 'Call', 'Attribute', 'Name', 'Name', 'Attribute', 'Attribute'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str']), ('values', ['Attribute', 'Attribute', 'Attribute', 'Str'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Name', 'Subscript', 'Name', 'Name', 'Name'])]", "Dict -> [('keys', ['Attribute', 'Attribute', 'Attribute']), ('values', ['Num', 'Num', 'Num'])]", "Dict -> [('keys', ['Attribute', 'Attribute', 'Attribute']), ('values', ['Name', 'Name', 'Name'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Str', 'Str', 'Str', 'Call', 'List', 'Str', 'Str', 'Str', 'Dict'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str']), ('values', ['Str', 'Str', 'Call', 'Str'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Str', 'Str', 'Str', 'Str', 'Call', 'Str', 'Str', 'Str', 'Dict'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Str', 'Str', 'Call', 'Str', 'Str', 'Dict'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Str', 'Str', 'Str', 'Str', 'Call', 'Str', 'Str', 'Dict'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Str', 'Str', 'Str', 'Str', 'Str', 'Call', 'Str', 'Str'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Str', 'Str', 'Str', 'List', 'Str', 'Str', 'Str', 'Str', 'Str', 'Dict'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str'])]", "Dict -> [('keys', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('values', ['Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple'])]", "Dict -> [('keys', ['Name', 'Str', 'Str']), ('values', ['Name', 'Attribute', 'Name'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Name', 'Attribute', 'Attribute', 'Attribute'])]", "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['Tuple', 'Tuple', 'Str'])]", "Dict -> [('keys', ['Tuple']), ('values', ['Tuple'])]", "Dict -> [('keys', ['Tuple']), ('values', ['Str'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Str', 'Str', 'Str', 'Str', 'Attribute', 'Str'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Call', 'Call', 'Attribute', 'Str', 'Str'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Call', 'Name', 'Name', 'Call', 'Name', 'Attribute'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Attribute', 'Str', 'Str', 'Str', 'Str'])]", "Dict -> [('keys', ['Str', 'Str']), ('values', ['BinOp', 'BinOp'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Attribute', 'Call', 'Attribute', 'Attribute', 'Dict', 'Call', 'BoolOp', 'Attribute', 'Attribute', 'Attribute', 'Call'])]", "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['Subscript', 'Subscript', 'Name'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Attribute', 'Call', 'Dict', 'Call', 'BoolOp', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Call'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Attribute', 'Name', 'Name', 'Name', 'Attribute', 'UnaryOp', 'Name'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Name', 'Name', 'Name', 'Call', 'Call'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'BoolOp', 'Call'])]", "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['Name', 'Name', 'BoolOp'])]", "Dict -> [('keys', ['Str', 'Str']), ('values', ['Str', 'Attribute'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Name', 'Name', 'Call', 'Name'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str']), ('values', ['Dict', 'Str', 'Str', 'Str'])]", "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['Num', 'Num', 'Num'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str']), ('values', ['Subscript', 'Str', 'Subscript', 'Subscript'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Subscript', 'Name', 'Name', 'Name', 'Name'])]", "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['List', 'List', 'List'])]", "Dict -> [('keys', ['Name']), ('values', ['BinOp'])]", "Dict -> [('keys', ['Name', 'Str', 'Str']), ('values', ['Name', 'Subscript', 'Subscript'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str']), ('values', ['Str', 'Str', 'Str', 'Name'])]", "Dict -> [('keys', ['Str', 'Str']), ('values', ['BinOp', 'Str'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Name', 'Attribute', 'BoolOp', 'Call', 'Attribute'])]", "Dict -> [('keys', ['Name', 'Name', 'Name', 'Name']), ('values', ['Str', 'Str', 'Str', 'Str'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Str', 'Str', 'Call', 'Call'])]", "Dict -> [('keys', ['Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call']), ('values', ['Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple'])]", "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['Str', 'Str', 'List'])]", "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['Call', 'Name', 'Str'])]", "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['Name', 'Name', 'Str'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Name', 'Str', 'Name'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str']), ('values', ['BinOp', 'BinOp', 'BinOp', 'BinOp'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Call', 'Call', 'Subscript', 'Call', 'Name', 'Subscript', 'Name', 'Name'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Call', 'Call', 'Name', 'Subscript', 'Name'])]", "Dict -> [('keys', ['Str', 'Str']), ('values', ['Attribute', 'Subscript'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str']), ('values', ['Attribute', 'ListComp', 'Attribute', 'Call'])]", "Dict -> [('keys', ['Str', 'Str']), ('values', ['Attribute', 'ListComp'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Name', 'Str', 'Name', 'Name', 'Call'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Call'])]", "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['ListComp', 'Name', 'Name'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Name', 'Name', 'Call'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Subscript'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['BinOp', 'Str', 'Str', 'Name', 'Name'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Name', 'BinOp', 'Str', 'Str'])]", "Dict -> [('keys', ['Attribute', 'BinOp']), ('values', ['Name', 'Attribute'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Attribute', 'Name', 'Name'])]", "Dict -> [('keys', ['Str', 'Str']), ('values', ['Attribute', 'Str'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Attribute', 'Attribute', 'Name'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Attribute', 'Attribute', 'Name', 'Num'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Attribute', 'Num', 'Attribute', 'Name'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str']), ('values', ['Attribute', 'Attribute', 'Str', 'Dict'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Attribute', 'Attribute', 'Str'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str']), ('values', ['Attribute', 'Attribute', 'Str', 'Call'])]", "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['Str', 'Attribute', 'Str'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Attribute', 'Name', 'Name', 'Name'])]", "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['Str', 'Num', 'Num'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str']), ('values', ['Str', 'Num', 'Num', 'Str'])]", "Dict -> [('keys', ['Subscript', 'Str', 'Str']), ('values', ['List', 'Str', 'Str'])]", "Dict -> [('keys', ['Subscript']), ('values', ['Str'])]", "Dict -> [('keys', ['Name']), ('values', ['Dict'])]", "Dict -> [('keys', ['Str', 'Str']), ('values', ['Dict', 'Name'])]", "Dict -> [('keys', ['Subscript']), ('values', ['Dict'])]", "Dict -> [('keys', ['Str', 'Subscript']), ('values', ['Attribute', 'Dict'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str']), ('values', ['Attribute', 'Str', 'Str', 'Str'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Str', 'Str', 'Str', 'List', 'List', 'Name', 'Dict'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str']), ('values', ['Str', 'Str', 'Str', 'List'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str']), ('values', ['Call', 'Subscript', 'Subscript', 'Subscript'])]", "Dict -> [('keys', ['Name', 'Name', 'Name']), ('values', ['Call', 'BinOp', 'Call'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Num', 'List', 'Attribute', 'Str', 'Name', 'Name'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str']), ('values', ['List', 'Num', 'Num', 'Name'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Str', 'Str', 'List', 'Name', 'Num', 'Num'])]", "Dict -> [('keys', ['Str', 'Str']), ('values', ['Num', 'List'])]", "Dict -> [('keys', ['Subscript']), ('values', ['Call'])]", "Dict -> [('keys', ['Subscript']), ('values', ['Name'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Call', 'Call', 'Name', 'Name', 'Call'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Call', 'Call', 'BinOp', 'Name', 'Name', 'Name', 'Call', 'BinOp'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str']), ('values', ['Attribute', 'ListComp', 'Attribute', 'Attribute'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Subscript', 'Attribute', 'Subscript', 'Subscript', 'Subscript', 'Subscript', 'Subscript', 'Subscript'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Name', 'Name', 'Attribute'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Attribute', 'Name', 'Name'])]", "Dict -> [('keys', ['Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute']), ('values', ['Str', 'Str', 'Str', 'Str', 'Str'])]", "Dict -> [('keys', ['Str', 'Str']), ('values', ['Subscript', 'Num'])]", "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['Call', 'ListComp', 'Attribute'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Call', 'Name', 'Call', 'BoolOp', 'Str', 'Call'])]", "Dict -> [('keys', ['Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute']), ('values', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Name', 'Name', 'BoolOp'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Str', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Name', 'Name', 'Name', 'Subscript', 'Subscript', 'Subscript'])]", "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['Str', 'Call', 'Str'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Call', 'Call', 'Call', 'Call', 'Call', 'Call'])]", "Dict -> [('keys', ['Name']), ('values', ['Tuple'])]", "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['Call', 'Str', 'Str'])]", "Dict -> [('keys', ['Name', 'Name']), ('values', ['List', 'List'])]", "Dict -> [('keys', ['Str', 'Str']), ('values', ['ListComp', 'Name'])]", "Dict -> [('keys', ['Attribute', 'Attribute', 'Attribute', 'Attribute', 'Num']), ('values', ['Str', 'Str', 'Str', 'Str', 'Str'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Str', 'Num', 'Str', 'Str', 'List', 'Name', 'Str', 'List', 'List', 'Str', 'Str'])]", "Dict -> [('keys', ['Num']), ('values', ['List'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple'])]", "Dict -> [('keys', ['Str', 'Str']), ('values', ['Str', 'BinOp'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple']), ('values', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Tuple']), ('values', ['Str', 'Str', 'Str', 'Str', 'Str'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Tuple']), ('values', ['Str', 'Str', 'Str', 'Str'])]", "Dict -> [('keys', ['Str', 'Str', 'Tuple']), ('values', ['Str', 'Str', 'Str'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Attribute', 'Attribute', 'Name', 'Name'])]", "Dict -> [('keys', ['Str', 'Str']), ('values', ['Str', 'Dict'])]", "Dict -> [('keys', ['Str', 'Str']), ('values', ['List', 'Subscript'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Name']), ('values', ['Call', 'Attribute', 'Call', 'Call'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Attribute', 'BoolOp', 'BoolOp'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str']), ('values', ['Call', 'Name', 'Dict', 'Str'])]", "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['List', 'Str', 'Name'])]", "Dict -> [('keys', ['Str', 'Str']), ('values', ['Call', 'BinOp'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str']), ('values', ['List', 'Name', 'Num', 'Num'])]", "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['Subscript', 'Call', 'Subscript'])]", "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['Name', 'BinOp', 'Call'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str']), ('values', ['Attribute', 'Name', 'Name', 'Call'])]", "Dict -> [('keys', ['Call', 'Call', 'Call', 'Call']), ('values', ['Tuple', 'Tuple', 'Tuple', 'Tuple'])]", "Dict -> [('keys', ['Num', 'Num', 'Num']), ('values', ['Call', 'Call', 'Call'])]", "Dict -> [('keys', ['Str', 'Str']), ('values', ['Num', 'BinOp'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str']), ('values', ['Attribute', 'Name', 'Name', 'Attribute'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Str', 'Str', 'Str', 'Str', 'Name', 'Str', 'Str'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Str', 'Str', 'Str', 'Str', 'Name', 'Str'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Tuple', 'Name', 'Str', 'Tuple', 'Str', 'Tuple', 'Dict', 'Num'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Tuple', 'Name', 'Num', 'Tuple', 'Name', 'Tuple', 'Dict', 'Num'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Tuple', 'Name', 'Name', 'Tuple', 'Name', 'Tuple', 'Dict', 'Num'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Tuple', 'Name', 'Name', 'Tuple', 'Str', 'Tuple', 'Dict', 'Num'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Num', 'Name', 'Tuple', 'Dict', 'Num', 'Tuple', 'Name', 'Tuple'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Num', 'Name', 'Tuple', 'Dict', 'Tuple', 'Num', 'Name', 'Tuple'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Name', 'Tuple', 'Dict', 'Num', 'Tuple', 'Name', 'Tuple'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Tuple', 'Name', 'Tuple', 'Dict', 'Name', 'Tuple', 'Num'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Str', 'Tuple', 'Name', 'Tuple', 'Dict', 'Num', 'Tuple', 'Num'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Tuple', 'Name', 'Tuple', 'Dict', 'Num', 'Tuple', 'Num'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Attribute', 'Call', 'Call', 'Call'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Attribute', 'Name', 'Attribute', 'Name'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Name', 'Attribute', 'Dict', 'Str'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Attribute', 'Attribute', 'Dict', 'Str'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Attribute', 'Name', 'Name', 'Str'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Str', 'Name', 'Str', 'Str', 'Name'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Name', 'Str', 'Name', 'Name', 'Name'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str']), ('values', ['Str', 'Num', 'Str', 'Dict'])]", "Dict -> [('keys', ['Num']), ('values', ['Num'])]", "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['Num', 'Num', 'Dict'])]", "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['Str', 'Str', 'Dict'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str']), ('values', ['Attribute', 'List', 'Num', 'Str'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Str', 'Call', 'Call', 'Call', 'Name', 'Name'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Str', 'Call', 'Call', 'Call', 'Name'])]", "Dict -> [('keys', ['Str', 'Str']), ('values', ['Name', 'Lambda'])]", "Dict -> [('keys', ['Str', 'Str']), ('values', ['Subscript', 'Call'])]", "Dict -> [('keys', ['Str']), ('values', ['Lambda'])]", "Dict -> [('keys', ['Attribute', 'Attribute', 'Attribute', 'Name', 'Name']), ('values', ['Str', 'Str', 'Str', 'Str', 'Str'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Num', 'Num', 'Num', 'Num', 'Num'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Str', 'Str', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Str', 'Str', 'Num', 'Num', 'Num', 'List'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Name', 'Call', 'Call', 'Call', 'Name'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Call', 'Attribute', 'Call'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Dict', 'Attribute', 'Call'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Dict', 'Attribute', 'Name'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Name', 'Attribute', 'Name'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Attribute', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'BoolOp', 'Name', 'Name'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Name', 'Name', 'BoolOp', 'Name', 'Name', 'Name', 'Name', 'Name', 'BoolOp', 'Call', 'Name', 'Name', 'Name'])]", "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['List', 'Call', 'Call'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Attribute', 'Attribute', 'Call'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Name', 'Name', 'Attribute', 'Attribute', 'Call'])]", "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['Name', 'Name', 'Attribute'])]", "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['Name', 'Str', 'Attribute'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Str', 'Str', 'Name', 'Num', 'Str', 'Str', 'Str', 'Num', 'Num', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Num', 'Str', 'Num'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Attribute', 'BoolOp', 'Call', 'Name'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Attribute', 'Name', 'BinOp', 'Name'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Attribute', 'BoolOp', 'Name', 'Compare', 'Call'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Attribute', 'BoolOp', 'Call'])]", "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['Name', 'Str', 'Dict'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Name', 'List', 'Dict'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Name', 'Str', 'Dict'])]", "Dict -> [('keys', ['Str', 'Str']), ('values', ['BinOp', 'Call'])]", "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['BinOp', 'Attribute', 'Attribute'])]", "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['Str', 'Str', 'Tuple'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Attribute', 'Attribute', 'Name', 'Call'])]", "Dict -> [('keys', ['Name', 'Name', 'Str', 'Str']), ('values', ['Str', 'Str', 'Str', 'Str'])]", "Dict -> [('keys', ['Str', 'Name', 'Str', 'Str', 'Str', 'Name']), ('values', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name'])]", "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['Name', 'Str', 'List'])]", "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['Str', 'Name', 'List'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Name', 'Name', 'List', 'Str', 'Name', 'Name', 'Str', 'Str', 'List', 'List', 'Str', 'Str', 'Str'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Str', 'Str', 'Dict', 'Str', 'Str', 'Num', 'Str'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['List', 'Str', 'Name', 'Name', 'Str', 'Str', 'List', 'Str', 'Str'])]", "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['Str', 'Name', 'Dict'])]", "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['Dict', 'Str', 'Name'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str']), ('values', ['Str', 'List', 'List', 'List'])]", "Dict -> [('keys', ['Str', 'Str']), ('values', ['Str', 'List'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Attribute', 'Attribute', 'Str', 'Str', 'Str'])]", "Dict -> [('keys', ['Str', 'Str']), ('values', ['Dict', 'List'])]", "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['Attribute', 'Str', 'Str'])]", "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['Str', 'List', 'Str'])]", "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['Str', 'List', 'Name'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str']), ('values', ['Str', 'List', 'Str', 'Str'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('values', ['Subscript', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str'])]", "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['Name', 'Name', 'Dict'])]", "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['Name', 'Attribute', 'Name'])]", "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['Str', 'Attribute', 'List'])]", "Dict -> [('keys', ['Str', 'Str', 'Str']), ('values', ['Attribute', 'Attribute', 'List'])]", "Dict -> [('keys', ['Str', 'Str']), ('values', ['Attribute', 'List'])]", "Dict -> [('keys', ['Str', 'Str']), ('values', ['Str', 'Tuple'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str']), ('values', ['Str', 'Tuple', 'Num', 'Num'])]", "Dict -> [('keys', ['Str', 'Str', 'Str', 'Str']), ('values', ['BinOp', 'BinOp', 'Name', 'Name'])]"], "comprehension": ["comprehension -> [('target', 'Name'), ('iter', 'Name'), ('ifs', [])]", "comprehension -> [('target', 'Name'), ('iter', 'Attribute'), ('ifs', [])]", "comprehension -> [('target', 'Name'), ('iter', 'Call'), ('ifs', ['Call'])]", "comprehension -> [('target', 'Name'), ('iter', 'Call'), ('ifs', [])]", "comprehension -> [('target', 'Name'), ('iter', 'Subscript'), ('ifs', [])]", "comprehension -> [('target', 'Name'), ('iter', 'Name'), ('ifs', ['Compare'])]", "comprehension -> [('target', 'Name'), ('iter', 'Name'), ('ifs', ['Call'])]", "comprehension -> [('target', 'Name'), ('iter', 'Call'), ('ifs', ['Name'])]", "comprehension -> [('target', 'Tuple'), ('iter', 'Call'), ('ifs', [])]", "comprehension -> [('target', 'Name'), ('iter', 'Call'), ('ifs', ['Compare'])]", "comprehension -> [('target', 'Tuple'), ('iter', 'Call'), ('ifs', ['BoolOp'])]", "comprehension -> [('target', 'Name'), ('iter', 'Tuple'), ('ifs', [])]", "comprehension -> [('target', 'Tuple'), ('iter', 'Subscript'), ('ifs', [])]", "comprehension -> [('target', 'Name'), ('iter', 'Name'), ('ifs', ['Subscript'])]", "comprehension -> [('target', 'Name'), ('iter', 'Tuple'), ('ifs', ['Name'])]", "comprehension -> [('target', 'Tuple'), ('iter', 'Name'), ('ifs', [])]", "comprehension -> [('target', 'Name'), ('iter', 'Name'), ('ifs', ['UnaryOp'])]", "comprehension -> [('target', 'Tuple'), ('iter', 'Call'), ('ifs', ['UnaryOp'])]", "comprehension -> [('target', 'Name'), ('iter', 'Call'), ('ifs', ['BoolOp'])]", "comprehension -> [('target', 'Tuple'), ('iter', 'Name'), ('ifs', ['Compare'])]", "comprehension -> [('target', 'Tuple'), ('iter', 'Call'), ('ifs', ['Name'])]", "comprehension -> [('target', 'Name'), ('iter', 'List'), ('ifs', [])]", "comprehension -> [('target', 'Name'), ('iter', 'Str'), ('ifs', [])]", "comprehension -> [('target', 'Name'), ('iter', 'Call'), ('ifs', ['UnaryOp'])]", "comprehension -> [('target', 'Tuple'), ('iter', 'Call'), ('ifs', ['Call'])]", "comprehension -> [('target', 'Tuple'), ('iter', 'Attribute'), ('ifs', [])]", "comprehension -> [('target', 'Name'), ('iter', 'Name'), ('ifs', ['BoolOp'])]", "comprehension -> [('target', 'Tuple'), ('iter', 'Call'), ('ifs', ['Compare'])]", "comprehension -> [('target', 'Tuple'), ('iter', 'Attribute'), ('ifs', ['Compare'])]", "comprehension -> [('target', 'Name'), ('iter', 'Subscript'), ('ifs', ['Subscript'])]", "comprehension -> [('target', 'Tuple'), ('iter', 'BoolOp'), ('ifs', [])]", "comprehension -> [('target', 'Name'), ('iter', 'Attribute'), ('ifs', ['Compare'])]", "comprehension -> [('target', 'Name'), ('iter', 'Name'), ('ifs', ['Name'])]", "comprehension -> [('target', 'Tuple'), ('iter', 'Name'), ('ifs', ['Call'])]", "comprehension -> [('target', 'Name'), ('iter', 'Subscript'), ('ifs', ['Compare'])]", "comprehension -> [('target', 'Name'), ('iter', 'Attribute'), ('ifs', ['BoolOp'])]", "comprehension -> [('target', 'Name'), ('iter', 'Attribute'), ('ifs', ['Attribute'])]", "comprehension -> [('target', 'Name'), ('iter', 'BinOp'), ('ifs', [])]", "comprehension -> [('target', 'Name'), ('iter', 'Attribute'), ('ifs', ['Call'])]", "comprehension -> [('target', 'Name'), ('iter', 'ListComp'), ('ifs', [])]", "comprehension -> [('target', 'Name'), ('iter', 'Name'), ('ifs', ['Attribute'])]", "comprehension -> [('target', 'Name'), ('iter', 'Call'), ('ifs', ['Attribute'])]", "comprehension -> [('target', 'Name'), ('iter', 'List'), ('ifs', ['Name'])]", "comprehension -> [('target', 'Name'), ('iter', 'GeneratorExp'), ('ifs', ['Call'])]", "comprehension -> [('target', 'Tuple'), ('iter', 'GeneratorExp'), ('ifs', [])]", "comprehension -> [('target', 'Name'), ('iter', 'Attribute'), ('ifs', ['UnaryOp'])]", "comprehension -> [('target', 'Name'), ('iter', 'BoolOp'), ('ifs', ['Call'])]", "comprehension -> [('target', 'Name'), ('iter', 'BoolOp'), ('ifs', ['Compare'])]"], "IsNot": ["IsNot -> <NULL>"], "FloorDiv": ["FloorDiv -> <NULL>"], "Print": ["Print -> [('dest', 'NoneType'), ('values', ['Str', 'Name']), ('nl', 'bool')]", "Print -> [('dest', 'NoneType'), ('values', ['Str']), ('nl', 'bool')]", "Print -> [('dest', 'NoneType'), ('values', ['Str', 'Attribute']), ('nl', 'bool')]", "Print -> [('dest', 'NoneType'), ('values', ['Str', 'Call']), ('nl', 'bool')]", "Print -> [('dest', 'NoneType'), ('values', ['Attribute']), ('nl', 'bool')]", "Print -> [('dest', 'NoneType'), ('values', ['Name']), ('nl', 'bool')]", "Print -> [('dest', 'NoneType'), ('values', ['Call']), ('nl', 'bool')]", "Print -> [('dest', 'NoneType'), ('values', ['BinOp']), ('nl', 'bool')]", "Print -> [('dest', 'NoneType'), ('values', ['Str', 'Name', 'Name']), ('nl', 'bool')]", "Print -> [('dest', 'NoneType'), ('values', ['Str', 'Name', 'Str']), ('nl', 'bool')]", "Print -> [('dest', 'NoneType'), ('values', ['BinOp', 'Str', 'Subscript']), ('nl', 'bool')]", "Print -> [('dest', 'NoneType'), ('values', []), ('nl', 'bool')]", "Print -> [('dest', 'NoneType'), ('values', ['Str', 'Name', 'Str', 'Name', 'Str', 'Subscript']), ('nl', 'bool')]", "Print -> [('dest', 'NoneType'), ('values', ['Str', 'BinOp']), ('nl', 'bool')]", "Print -> [('dest', 'NoneType'), ('values', ['Compare']), ('nl', 'bool')]", "Print -> [('dest', 'NoneType'), ('values', ['Call', 'Str']), ('nl', 'bool')]", "Print -> [('dest', 'NoneType'), ('values', ['Name', 'Name', 'Name', 'Name']), ('nl', 'bool')]", "Print -> [('dest', 'NoneType'), ('values', ['Name', 'Name']), ('nl', 'bool')]", "Print -> [('dest', 'NoneType'), ('values', ['Subscript', 'BinOp']), ('nl', 'bool')]", "Print -> [('dest', 'NoneType'), ('values', ['Name', 'Str', 'BinOp']), ('nl', 'bool')]", "Print -> [('dest', 'NoneType'), ('values', ['BinOp', 'Str']), ('nl', 'bool')]", "Print -> [('dest', 'NoneType'), ('values', ['Str', 'Call', 'Call']), ('nl', 'bool')]", "Print -> [('dest', 'NoneType'), ('values', ['Name', 'Str', 'Name']), ('nl', 'bool')]", "Print -> [('dest', 'NoneType'), ('values', ['Tuple']), ('nl', 'bool')]", "Print -> [('dest', 'Attribute'), ('values', ['Tuple']), ('nl', 'bool')]", "Print -> [('dest', 'Attribute'), ('values', ['Str']), ('nl', 'bool')]", "Print -> [('dest', 'Attribute'), ('values', ['BinOp']), ('nl', 'bool')]", "Print -> [('dest', 'NoneType'), ('values', ['Subscript']), ('nl', 'bool')]", "Print -> [('dest', 'NoneType'), ('values', ['Str', 'Name', 'Str', 'Call', 'Str', 'Subscript', 'Str']), ('nl', 'bool')]", "Print -> [('dest', 'NoneType'), ('values', ['ListComp']), ('nl', 'bool')]", "Print -> [('dest', 'NoneType'), ('values', ['Str', 'Subscript']), ('nl', 'bool')]", "Print -> [('dest', 'NoneType'), ('values', ['Name', 'Name', 'BinOp']), ('nl', 'bool')]", "Print -> [('dest', 'NoneType'), ('values', ['Str', 'Name', 'Str', 'Name']), ('nl', 'bool')]", "Print -> [('dest', 'NoneType'), ('values', ['Attribute', 'Str', 'Name']), ('nl', 'bool')]", "Print -> [('dest', 'Name'), ('values', ['Name']), ('nl', 'bool')]", "Print -> [('dest', 'NoneType'), ('values', ['Attribute', 'Str', 'Attribute']), ('nl', 'bool')]", "Print -> [('dest', 'NoneType'), ('values', ['Str', 'Attribute', 'Attribute']), ('nl', 'bool')]", "Print -> [('dest', 'NoneType'), ('values', ['Name', 'Str']), ('nl', 'bool')]", "Print -> [('dest', 'NoneType'), ('values', ['Str', 'Call', 'Str', 'BinOp']), ('nl', 'bool')]", "Print -> [('dest', 'NoneType'), ('values', ['Name', 'Str', 'Subscript', 'Str', 'Subscript', 'Str', 'Name', 'Call']), ('nl', 'bool')]", "Print -> [('dest', 'NoneType'), ('values', ['Call', 'Attribute']), ('nl', 'bool')]", "Print -> [('dest', 'NoneType'), ('values', ['Str', 'Name', 'Name', 'Name']), ('nl', 'bool')]", "Print -> [('dest', 'NoneType'), ('values', ['Str', 'Name', 'Str', 'BinOp', 'Name', 'Str', 'Name']), ('nl', 'bool')]", "Print -> [('dest', 'NoneType'), ('values', ['Attribute', 'Attribute', 'Attribute', 'Attribute']), ('nl', 'bool')]", "Print -> [('dest', 'NoneType'), ('values', ['Subscript', 'Str']), ('nl', 'bool')]", "Print -> [('dest', 'NoneType'), ('values', ['Name', 'Name', 'Name']), ('nl', 'bool')]", "Print -> [('dest', 'NoneType'), ('values', ['Str', 'Call', 'Str']), ('nl', 'bool')]", "Print -> [('dest', 'Attribute'), ('values', ['Call']), ('nl', 'bool')]", "Print -> [('dest', 'Call'), ('values', []), ('nl', 'bool')]", "Print -> [('dest', 'NoneType'), ('values', ['Subscript', 'Str', 'Subscript']), ('nl', 'bool')]", "Print -> [('dest', 'NoneType'), ('values', ['Str', 'Name', 'Attribute']), ('nl', 'bool')]", "Print -> [('dest', 'Name'), ('values', ['Str']), ('nl', 'bool')]", "Print -> [('dest', 'Attribute'), ('values', ['Name']), ('nl', 'bool')]", "Print -> [('dest', 'Attribute'), ('values', []), ('nl', 'bool')]", "Print -> [('dest', 'Name'), ('values', ['Call']), ('nl', 'bool')]", "Print -> [('dest', 'Name'), ('values', ['BinOp']), ('nl', 'bool')]", "Print -> [('dest', 'Name'), ('values', []), ('nl', 'bool')]", "Print -> [('dest', 'NoneType'), ('values', ['Str', 'Repr']), ('nl', 'bool')]", "Print -> [('dest', 'NoneType'), ('values', ['Name', 'Subscript', 'Subscript', 'Subscript', 'Subscript']), ('nl', 'bool')]", "Print -> [('dest', 'NoneType'), ('values', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('nl', 'bool')]", "Print -> [('dest', 'NoneType'), ('values', ['Str', 'Name', 'Str', 'Call']), ('nl', 'bool')]", "Print -> [('dest', 'NoneType'), ('values', ['Name', 'Name', 'Str']), ('nl', 'bool')]", "Print -> [('dest', 'NoneType'), ('values', ['BinOp', 'Name']), ('nl', 'bool')]", "Print -> [('dest', 'NoneType'), ('values', ['Name', 'Call']), ('nl', 'bool')]", "Print -> [('dest', 'NoneType'), ('values', ['Str', 'Str', 'Str', 'Str']), ('nl', 'bool')]", "Print -> [('dest', 'NoneType'), ('values', ['Subscript', 'Subscript']), ('nl', 'bool')]", "Print -> [('dest', 'NoneType'), ('values', ['Str', 'Name', 'Subscript', 'Str', 'Name']), ('nl', 'bool')]", "Print -> [('dest', 'NoneType'), ('values', ['Str', 'Name', 'Name', 'Str', 'Name', 'Name', 'Str']), ('nl', 'bool')]"], "Import": ["Import -> [('names', ['alias'])]", "Import -> [('names', ['alias', 'alias', 'alias', 'alias'])]", "Import -> [('names', ['alias', 'alias', 'alias'])]", "Import -> [('names', ['alias', 'alias'])]", "Import -> [('names', ['alias', 'alias', 'alias', 'alias', 'alias', 'alias'])]", "Import -> [('names', ['alias', 'alias', 'alias', 'alias', 'alias'])]", "Import -> [('names', ['alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias'])]", "Import -> [('names', ['alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias'])]"], "Subscript": ["Subscript -> [('value', 'Name'), ('slice', 'Index'), ('ctx', 'Load')]", "Subscript -> [('value', 'Name'), ('slice', 'Index'), ('ctx', 'Del')]", "Subscript -> [('value', 'Call'), ('slice', 'Index'), ('ctx', 'Load')]", "Subscript -> [('value', 'Subscript'), ('slice', 'Index'), ('ctx', 'Load')]", "Subscript -> [('value', 'Attribute'), ('slice', 'Index'), ('ctx', 'Store')]", "Subscript -> [('value', 'Attribute'), ('slice', 'Index'), ('ctx', 'Load')]", "Subscript -> [('value', 'Attribute'), ('slice', 'ExtSlice'), ('ctx', 'Load')]", "Subscript -> [('value', 'Name'), ('slice', 'ExtSlice'), ('ctx', 'Load')]", "Subscript -> [('value', 'Name'), ('slice', 'ExtSlice'), ('ctx', 'Store')]", "Subscript -> [('value', 'Call'), ('slice', 'Slice'), ('ctx', 'Load')]", "Subscript -> [('value', 'Name'), ('slice', 'Index'), ('ctx', 'Store')]", "Subscript -> [('value', 'Name'), ('slice', 'Slice'), ('ctx', 'Load')]", "Subscript -> [('value', 'Subscript'), ('slice', 'Index'), ('ctx', 'Store')]", "Subscript -> [('value', 'Attribute'), ('slice', 'Slice'), ('ctx', 'Load')]", "Subscript -> [('value', 'Subscript'), ('slice', 'Slice'), ('ctx', 'Load')]", "Subscript -> [('value', 'Attribute'), ('slice', 'Index'), ('ctx', 'Del')]", "Subscript -> [('value', 'Name'), ('slice', 'Slice'), ('ctx', 'Store')]", "Subscript -> [('value', 'Dict'), ('slice', 'Index'), ('ctx', 'Load')]", "Subscript -> [('value', 'List'), ('slice', 'Index'), ('ctx', 'Load')]", "Subscript -> [('value', 'List'), ('slice', 'Slice'), ('ctx', 'Load')]", "Subscript -> [('value', 'Tuple'), ('slice', 'Index'), ('ctx', 'Load')]", "Subscript -> [('value', 'Attribute'), ('slice', 'ExtSlice'), ('ctx', 'Store')]", "Subscript -> [('value', 'Subscript'), ('slice', 'Index'), ('ctx', 'Del')]", "Subscript -> [('value', 'Attribute'), ('slice', 'Slice'), ('ctx', 'Store')]", "Subscript -> [('value', 'ListComp'), ('slice', 'Index'), ('ctx', 'Load')]", "Subscript -> [('value', 'Str'), ('slice', 'Slice'), ('ctx', 'Load')]", "Subscript -> [('value', 'ListComp'), ('slice', 'Slice'), ('ctx', 'Load')]", "Subscript -> [('value', 'Subscript'), ('slice', 'ExtSlice'), ('ctx', 'Load')]", "Subscript -> [('value', 'BinOp'), ('slice', 'Slice'), ('ctx', 'Load')]", "Subscript -> [('value', 'Attribute'), ('slice', 'Slice'), ('ctx', 'Del')]", "Subscript -> [('value', 'Name'), ('slice', 'Slice'), ('ctx', 'Del')]", "Subscript -> [('value', 'Call'), ('slice', 'ExtSlice'), ('ctx', 'Load')]"], "BitOr": ["BitOr -> <NULL>"], "TryExcept": ["TryExcept -> [('body', ['If']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Assign']), ('handlers', ['ExceptHandler']), ('orelse', ['Assign', 'Assign', 'If', 'If', 'Expr'])]", "TryExcept -> [('body', ['Return']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Assign', 'Return']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Assign']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Assign', 'For', 'Assign', 'Return']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Expr']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['ImportFrom', 'ImportFrom']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Assign', 'If', 'Assign', 'If', 'Assign', 'Assign', 'Expr']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Assign', 'Assign', 'Assign', 'If']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Expr', 'Assign', 'Expr', 'Expr']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'For', 'Return']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Assign', 'If']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['ImportFrom']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Import']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Assign']), ('handlers', ['ExceptHandler']), ('orelse', ['If', 'If'])]", "TryExcept -> [('body', ['Assign']), ('handlers', ['ExceptHandler']), ('orelse', ['Expr'])]", "TryExcept -> [('body', ['Assign', 'Expr']), ('handlers', ['ExceptHandler']), ('orelse', ['Expr'])]", "TryExcept -> [('body', ['Assign', 'Assign', 'Assign', 'For']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Assign']), ('handlers', ['ExceptHandler', 'ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['For']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Assign', 'Expr', 'For']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Assign', 'Assign', 'If', 'Return']), ('handlers', ['ExceptHandler', 'ExceptHandler', 'ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Delete']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Return']), ('handlers', ['ExceptHandler', 'ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Expr', 'Return']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Assign', 'Assign', 'Assign', 'Expr']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Assign', 'Assign', 'Assign', 'If', 'Return']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Assign', 'Expr', 'Assign', 'Assign', 'Expr']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Assign', 'Expr', 'Assign']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Assign', 'Assign']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Assign', 'For']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['If', 'Assign', 'Assign', 'Expr', 'Assign', 'If', 'Expr']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['If', 'If']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Assign', 'Assign', 'Assign', 'TryExcept', 'Assign', 'If', 'Assign', 'Assign', 'If', 'Assign', 'If', 'Assign', 'If', 'TryExcept', 'Assign', 'Assign', 'Assign', 'TryFinally', 'If']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Expr', 'Break']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Expr', 'Expr']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Assign', 'If', 'Assign']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Assign', 'TryFinally']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Assign']), ('handlers', ['ExceptHandler']), ('orelse', ['If'])]", "TryExcept -> [('body', ['TryExcept']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Assign', 'If', 'Assign', 'For', 'If']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Assign', 'Expr']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['If', 'Assign', 'If']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['If', 'Assign', 'Assign']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Assign', 'Assign', 'Print', 'For', 'Print', 'Assign', 'Print', 'Print', 'Assign']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Expr']), ('handlers', ['ExceptHandler']), ('orelse', ['If'])]", "TryExcept -> [('body', ['Assign', 'Assign', 'Return']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Assign', 'Assign', 'If', 'If', 'If']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Assign', 'Return']), ('handlers', ['ExceptHandler', 'ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'If', 'Assign', 'If', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'If', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'If', 'For', 'Return']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Return']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Assign', 'Expr', 'Assign', 'If']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Expr', 'Raise']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Print', 'Assign', 'Print']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Expr', 'Assign']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Assign']), ('handlers', ['ExceptHandler']), ('orelse', ['Assign'])]", "TryExcept -> [('body', ['Assign', 'Assign', 'Expr']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['If', 'Expr']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['ImportFrom', 'Expr', 'ImportFrom']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Expr', 'Assign', 'Assign', 'Assign', 'For', 'Return']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Expr', 'Assign', 'Return']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Assign', 'Assign', 'Expr', 'Return']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['If', 'Return']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Assign', 'If', 'Assign', 'For', 'If', 'If']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['ImportFrom', 'Assign', 'Assign']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['ImportFrom', 'Expr']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['If', 'Assign', 'If']), ('handlers', ['ExceptHandler', 'ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Expr', 'Print', 'For']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Expr', 'Expr', 'Break']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Assign', 'Assign', 'Assign', 'If', 'If', 'AugAssign', 'Expr', 'For', 'Expr']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['ImportFrom', 'Import', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Return']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Expr', 'Assign', 'Return']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Assign', 'Assign', 'Expr', 'Assign', 'For', 'Expr', 'Expr']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Assign', 'Assign', 'Expr', 'For', 'Expr', 'Expr']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Assign', 'Assign', 'Assign']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Expr']), ('handlers', ['ExceptHandler']), ('orelse', ['If', 'Raise'])]", "TryExcept -> [('body', ['Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Expr', 'Expr', 'Expr']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Assign', 'Assign', 'Assign', 'With', 'Assign', 'Expr']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'With', 'Assign', 'Expr']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['AugAssign', 'Assign']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Assign']), ('handlers', ['ExceptHandler']), ('orelse', ['Assign', 'Assign', 'Assign', 'Assign'])]", "TryExcept -> [('body', ['If', 'If', 'Assign', 'Assign']), ('handlers', ['ExceptHandler', 'ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Expr']), ('handlers', ['ExceptHandler', 'ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Expr', 'Break']), ('handlers', ['ExceptHandler', 'ExceptHandler', 'ExceptHandler', 'ExceptHandler', 'ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Assign']), ('handlers', ['ExceptHandler']), ('orelse', ['If', 'Raise'])]", "TryExcept -> [('body', ['Expr']), ('handlers', ['ExceptHandler']), ('orelse', ['Expr'])]", "TryExcept -> [('body', ['Expr']), ('handlers', ['ExceptHandler']), ('orelse', ['Raise'])]", "TryExcept -> [('body', ['If']), ('handlers', ['ExceptHandler', 'ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Assign', 'Print', 'Assign', 'If', 'Assign', 'Expr', 'Expr']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Assign', 'Expr']), ('handlers', ['ExceptHandler']), ('orelse', ['If'])]", "TryExcept -> [('body', ['Import']), ('handlers', ['ExceptHandler']), ('orelse', ['Import'])]", "TryExcept -> [('body', ['TryExcept']), ('handlers', ['ExceptHandler', 'ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['ImportFrom', 'Assign']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['ImportFrom', 'AugAssign']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['ImportFrom', 'ClassDef']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Assign', 'Expr']), ('handlers', ['ExceptHandler', 'ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Assign', 'Assign']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['If', 'If', 'Print', 'For', 'Print', 'If']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['If', 'For']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Assign', 'Assign', 'Assign', 'TryExcept']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Return']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Assign', 'Assign']), ('handlers', ['ExceptHandler']), ('orelse', ['Expr'])]", "TryExcept -> [('body', ['Expr', 'Expr', 'Expr', 'Return']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Expr', 'Assign', 'Expr']), ('handlers', ['ExceptHandler', 'ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['TryExcept', 'Assign']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['ImportFrom']), ('handlers', ['ExceptHandler']), ('orelse', ['Assign'])]", "TryExcept -> [('body', ['ImportFrom']), ('handlers', ['ExceptHandler']), ('orelse', ['Expr'])]", "TryExcept -> [('body', ['Import', 'Assign']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'For', 'Assign', 'Assign', 'For', 'Expr', 'Expr']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['If', 'Assign', 'Expr', 'Expr', 'Expr']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Expr', 'Assign', 'Expr']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['With']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['TryFinally']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Assign']), ('handlers', ['ExceptHandler']), ('orelse', ['Assign', 'Assign', 'Return'])]", "TryExcept -> [('body', ['Assign', 'AugAssign', 'Expr']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['If', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Expr', 'If', 'If', 'Assign', 'Expr', 'If', 'Return']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Expr']), ('handlers', ['ExceptHandler']), ('orelse', ['Assign', 'Assign', 'Assign'])]", "TryExcept -> [('body', ['Assign', 'If', 'Raise']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Assign', 'Assign', 'If', 'Assign']), ('handlers', ['ExceptHandler', 'ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Assign', 'Expr', 'Expr']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Import']), ('handlers', ['ExceptHandler']), ('orelse', ['Assign', 'Expr', 'Assign', 'If'])]", "TryExcept -> [('body', ['Expr', 'If', 'Assign', 'Expr', 'Assign', 'Expr', 'If']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Expr', 'Expr', 'Assign', 'Expr', 'Expr']), ('handlers', ['ExceptHandler']), ('orelse', ['Expr'])]", "TryExcept -> [('body', ['Assign', 'Assign', 'Expr', 'Assign']), ('handlers', ['ExceptHandler', 'ExceptHandler', 'ExceptHandler', 'ExceptHandler', 'ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign']), ('handlers', ['ExceptHandler', 'ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr']), ('handlers', ['ExceptHandler', 'ExceptHandler', 'ExceptHandler', 'ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr']), ('handlers', ['ExceptHandler', 'ExceptHandler', 'ExceptHandler', 'ExceptHandler', 'ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'For', 'Expr', 'Expr']), ('handlers', ['ExceptHandler', 'ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Print', 'Assign', 'If', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Assign', 'If', 'If', 'If', 'If', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Assign', 'Assign', 'Assign', 'Assign']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['With', 'Assign', 'Assign', 'Assign', 'If']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['If', 'Expr', 'For']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Global', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('handlers', ['ExceptHandler', 'ExceptHandler', 'ExceptHandler', 'ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Expr', 'Assign', 'If', 'Assign', 'For', 'Expr']), ('handlers', ['ExceptHandler', 'ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['For', 'Expr']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Expr', 'Assign', 'Assign']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['If', 'If', 'If', 'Return']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Assign']), ('handlers', ['ExceptHandler']), ('orelse', ['Assign', 'Expr'])]", "TryExcept -> [('body', ['Assign', 'If', 'Assign', 'If', 'Assign', 'If', 'Return']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['If']), ('handlers', ['ExceptHandler']), ('orelse', ['Break'])]", "TryExcept -> [('body', ['Assign']), ('handlers', ['ExceptHandler']), ('orelse', ['Return'])]", "TryExcept -> [('body', ['If', 'TryFinally', 'If']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Expr', 'Print']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Assign', 'AugAssign', 'If', 'AugAssign', 'Expr', 'AugAssign']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Expr', 'AugAssign']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['If', 'Raise']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Expr']), ('handlers', ['ExceptHandler']), ('orelse', ['Expr', 'Expr'])]", "TryExcept -> [('body', ['While']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Print', 'Expr']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Expr', 'For']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Assign', 'Print', 'If']), ('handlers', ['ExceptHandler']), ('orelse', ['Expr'])]", "TryExcept -> [('body', ['Assign', 'Assign', 'For', 'Expr', 'Return']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Expr']), ('handlers', ['ExceptHandler']), ('orelse', ['If', 'For', 'If'])]", "TryExcept -> [('body', ['Assign', 'Raise']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Assign', 'If', 'Expr']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Import', 'ImportFrom', 'ImportFrom']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Import', 'ImportFrom']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Expr']), ('handlers', ['ExceptHandler']), ('orelse', ['Assign'])]", "TryExcept -> [('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'TryExcept', 'Expr', 'If']), ('handlers', ['ExceptHandler', 'ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Import', 'Expr']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Assign', 'Assign', 'For']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['If', 'If', 'Print', 'For', 'If', 'If', 'Print']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['If', 'If', 'Print', 'For', 'Print', 'If', 'If']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['If', 'Assign', 'Print', 'For', 'Print', 'If', 'Expr']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Expr', 'Assign', 'Assign', 'For', 'Assign', 'Return']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('handlers', ['ExceptHandler', 'ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'AugAssign']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Assign', 'Assign', 'TryExcept']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Assign', 'Expr', 'Print']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Assign', 'Expr', 'Return']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Expr']), ('handlers', ['ExceptHandler']), ('orelse', ['Expr', 'Expr', 'Assign'])]", "TryExcept -> [('body', ['With', 'Print']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Assign']), ('handlers', ['ExceptHandler']), ('orelse', ['Assign', 'If'])]", "TryExcept -> [('body', ['Expr', 'If']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'If']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'If', 'Return']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'If', 'Return']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Assign', 'Assign', 'AugAssign', 'Assign', 'Expr', 'Assign', 'Assign', 'If', 'Return']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Expr', 'Return']), ('handlers', ['ExceptHandler', 'ExceptHandler', 'ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Import', 'Import', 'Import', 'Import']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Assign', 'Expr', 'Assign', 'Expr']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Assign', 'Assign', 'For', 'Return']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Assign', 'Assign', 'If', 'Expr', 'Assign', 'Assign', 'If', 'Expr', 'Assign', 'Assign', 'If', 'Expr', 'If', 'Assign', 'Expr', 'Expr', 'For']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['If', 'Assign', 'Return']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Exec']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Exec', 'Return']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Expr', 'Assign']), ('handlers', ['ExceptHandler']), ('orelse', ['Expr', 'TryExcept', 'Continue'])]", "TryExcept -> [('body', ['Assign', 'Assign', 'Assign', 'For', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Assign', 'Assign']), ('handlers', ['ExceptHandler', 'ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Assign', 'Assign', 'Assign']), ('handlers', ['ExceptHandler', 'ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Assign', 'Assign', 'If', 'Assign', 'Assign']), ('handlers', ['ExceptHandler', 'ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Assign', 'Assign', 'If']), ('handlers', ['ExceptHandler', 'ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('handlers', ['ExceptHandler', 'ExceptHandler', 'ExceptHandler', 'ExceptHandler', 'ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Assign', 'Assign', 'If', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Expr']), ('handlers', ['ExceptHandler', 'ExceptHandler', 'ExceptHandler', 'ExceptHandler', 'ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Assign', 'Expr', 'Assign', 'Assign']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Import', 'Assign', 'Assign']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['For', 'For', 'For', 'For']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['For', 'For', 'For']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Assign', 'Expr', 'Assign', 'Assign', 'If']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Assign']), ('handlers', ['ExceptHandler', 'ExceptHandler', 'ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Assign', 'While']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['For', 'Assign', 'Return']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Assign', 'Assign', 'If']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Expr', 'If', 'Return']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Assign']), ('handlers', ['ExceptHandler', 'ExceptHandler', 'ExceptHandler', 'ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Assign', 'If', 'Assign', 'Assign', 'Return']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Expr', 'Return']), ('handlers', ['ExceptHandler', 'ExceptHandler', 'ExceptHandler', 'ExceptHandler', 'ExceptHandler', 'ExceptHandler', 'ExceptHandler', 'ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Return']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Expr', 'Expr', 'Assign']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Assign', 'Return']), ('handlers', ['ExceptHandler', 'ExceptHandler', 'ExceptHandler', 'ExceptHandler', 'ExceptHandler', 'ExceptHandler', 'ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Assign', 'If', 'Assign', 'Assign']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['AugAssign']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Assign', 'Expr', 'Expr', 'Expr']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Print', 'Expr', 'Assign', 'Assign', 'Expr', 'Print', 'Expr', 'Expr', 'Print', 'Expr', 'Assign', 'Print', 'Expr']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Assign', 'If', 'Return']), ('handlers', ['ExceptHandler', 'ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Assign', 'Assign', 'If', 'If', 'Assign']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Assign', 'Assign', 'If', 'TryExcept', 'Assign']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Assign', 'Print']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['TryFinally']), ('handlers', ['ExceptHandler', 'ExceptHandler', 'ExceptHandler']), ('orelse', ['Assign', 'If'])]", "TryExcept -> [('body', ['Assign', 'Assign', 'For', 'Expr', 'Expr']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['ImportFrom']), ('handlers', ['ExceptHandler']), ('orelse', ['Assign', 'ClassDef'])]", "TryExcept -> [('body', ['Assign']), ('handlers', ['ExceptHandler']), ('orelse', ['Assign', 'Assign'])]", "TryExcept -> [('body', ['Expr', 'Assign', 'Assign', 'For', 'Assign', 'Assign', 'Return']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['If', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Import', 'Assign', 'Expr', 'Expr', 'If', 'If', 'Return']), ('handlers', ['ExceptHandler', 'ExceptHandler', 'ExceptHandler', 'ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Import', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'TryExcept', 'If', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Return']), ('handlers', ['ExceptHandler', 'ExceptHandler', 'ExceptHandler', 'ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Assign', 'Expr', 'Assign', 'If', 'If', 'Return']), ('handlers', ['ExceptHandler', 'ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Return']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['For', 'Assign', 'Print']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Assign', 'For', 'AugAssign', 'AugAssign', 'Assign']), ('handlers', ['ExceptHandler', 'ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Assign', 'Expr', 'Assign', 'Expr', 'Expr']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Print']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Assign', 'Expr', 'Expr', 'Expr', 'Print', 'Break']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('handlers', ['ExceptHandler', 'ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Assign', 'If', 'If', 'If', 'For', 'TryExcept']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Expr', 'Expr']), ('handlers', ['ExceptHandler', 'ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Assign', 'Expr', 'Assign', 'For', 'Return']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Import', 'Import', 'Import', 'Assign']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Import']), ('handlers', ['ExceptHandler']), ('orelse', ['If', 'If'])]", "TryExcept -> [('body', ['Assign', 'Assign', 'If', 'Expr']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Assign', 'TryFinally']), ('handlers', ['ExceptHandler', 'ExceptHandler', 'ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['ImportFrom', 'Assign', 'Expr']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Import']), ('handlers', ['ExceptHandler']), ('orelse', ['Import', 'Expr', 'Expr'])]", "TryExcept -> [('body', ['Assign', 'AugAssign']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'If']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['ImportFrom', 'ImportFrom', 'FunctionDef']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['ImportFrom', 'Import', 'Assign']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Assign', 'Assign', 'Expr', 'Assign']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['ImportFrom', 'Assign', 'ImportFrom', 'Assign']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Import', 'Expr', 'If']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Assign', 'Break']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Expr', 'Assign', 'Assign', 'Assign']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Assign', 'Expr', 'If']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Assign', 'Expr', 'Expr']), ('handlers', ['ExceptHandler', 'ExceptHandler', 'ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Assign', 'If', 'If']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Assign', 'Delete']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Assign']), ('handlers', ['ExceptHandler']), ('orelse', ['TryExcept'])]", "TryExcept -> [('body', ['For', 'If', 'Assign', 'If', 'Expr', 'Expr', 'Expr', 'Expr']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Assign', 'Assign']), ('handlers', ['ExceptHandler']), ('orelse', ['If'])]", "TryExcept -> [('body', ['Assign', 'For', 'If', 'If', 'If']), ('handlers', ['ExceptHandler', 'ExceptHandler', 'ExceptHandler', 'ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['For', 'Assign']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Assign', 'For', 'Expr', 'If']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Assign', 'FunctionDef', 'Expr']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Assign', 'Assign', 'Expr', 'Return']), ('handlers', ['ExceptHandler', 'ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Assert', 'Assert', 'Assert', 'Assert']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Return']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Expr', 'If', 'Expr']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Expr']), ('handlers', ['ExceptHandler']), ('orelse', ['Return'])]", "TryExcept -> [('body', ['Assign', 'Assign', 'Expr', 'Expr']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Assign', 'Assign', 'If', 'Return']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'For']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Assign', 'If', 'Return']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Assign', 'Assign', 'Assign', 'Assign', 'If', 'If', 'If', 'Print', 'Expr']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['If', 'Expr', 'Expr']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Assign', 'For', 'If', 'If', 'If', 'If']), ('handlers', ['ExceptHandler', 'ExceptHandler', 'ExceptHandler', 'ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Expr', 'Expr', 'Expr', 'Expr']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['TryExcept', 'Assign', 'Assign', 'Expr', 'If', 'Assign', 'Assign', 'Assign', 'Expr']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Raise']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Expr', 'If']), ('handlers', ['ExceptHandler', 'ExceptHandler', 'ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['If', 'Import', 'Assign', 'Expr']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Import']), ('handlers', ['ExceptHandler']), ('orelse', ['Assign', 'Expr'])]", "TryExcept -> [('body', ['Import']), ('handlers', ['ExceptHandler']), ('orelse', ['Assign', 'Assign', 'Assign'])]", "TryExcept -> [('body', ['Expr']), ('handlers', ['ExceptHandler', 'ExceptHandler']), ('orelse', ['Raise'])]", "TryExcept -> [('body', ['Expr']), ('handlers', ['ExceptHandler', 'ExceptHandler']), ('orelse', ['Expr'])]", "TryExcept -> [('body', ['Expr']), ('handlers', ['ExceptHandler']), ('orelse', ['Assign', 'For'])]", "TryExcept -> [('body', ['Expr', 'Assign', 'Assign', 'Assign', 'If', 'Expr', 'For', 'Expr', 'Expr']), ('handlers', ['ExceptHandler', 'ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['For', 'Expr', 'Assign', 'Expr']), ('handlers', ['ExceptHandler', 'ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Assign', 'Expr', 'Assign', 'For']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Print', 'For', 'Print', 'Assign', 'Expr']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Print', 'If', 'If', 'Assign', 'Expr', 'Assign', 'Assign', 'While', 'Print']), ('handlers', ['ExceptHandler', 'ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Print', 'If', 'If', 'Assign', 'Expr', 'Assign', 'Assign', 'For', 'Print']), ('handlers', ['ExceptHandler', 'ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Print', 'Assign', 'If']), ('handlers', ['ExceptHandler']), ('orelse', ['Expr'])]", "TryExcept -> [('body', ['Assign', 'If', 'For', 'Return']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['If', 'Expr', 'If', 'Return']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Assign', 'Expr']), ('handlers', ['ExceptHandler', 'ExceptHandler', 'ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Expr', 'Expr', 'TryExcept']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Assign', 'Assign', 'Assign', 'Expr', 'For', 'If']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Assign', 'AugAssign', 'Assign', 'Expr']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Assign']), ('handlers', ['ExceptHandler']), ('orelse', ['Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr'])]", "TryExcept -> [('body', ['Assign', 'Assign']), ('handlers', ['ExceptHandler']), ('orelse', ['Assign'])]", "TryExcept -> [('body', ['Assign', 'Assign', 'Assign']), ('handlers', ['ExceptHandler', 'ExceptHandler', 'ExceptHandler', 'ExceptHandler', 'ExceptHandler', 'ExceptHandler', 'ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Assign', 'Assign', 'If', 'Return']), ('handlers', ['ExceptHandler', 'ExceptHandler', 'ExceptHandler', 'ExceptHandler', 'ExceptHandler', 'ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Assign', 'Return']), ('handlers', ['ExceptHandler', 'ExceptHandler', 'ExceptHandler', 'ExceptHandler', 'ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Assign', 'Return']), ('handlers', ['ExceptHandler', 'ExceptHandler', 'ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Assign', 'If', 'Assign', 'If', 'If', 'If', 'Return']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Assign', 'For', 'Assign', 'Assign']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Import', 'Print']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['If', 'If', 'If']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Expr']), ('handlers', ['ExceptHandler']), ('orelse', ['AugAssign'])]", "TryExcept -> [('body', ['ImportFrom', 'Return']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Return']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Assign', 'Assign', 'Assert']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Assign', 'If', 'If', 'If', 'Assign', 'If']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['If', 'If', 'Expr']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Expr']), ('handlers', ['ExceptHandler']), ('orelse', ['Expr', 'TryExcept'])]", "TryExcept -> [('body', ['Assign']), ('handlers', ['ExceptHandler']), ('orelse', ['Expr', 'For'])]", "TryExcept -> [('body', ['With']), ('handlers', ['ExceptHandler']), ('orelse', ['If'])]", "TryExcept -> [('body', ['For', 'Break']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Assign', 'If', 'Assign', 'Expr']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Exec', 'Assign']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Expr']), ('handlers', ['ExceptHandler', 'ExceptHandler', 'ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['If', 'If', 'Return']), ('handlers', ['ExceptHandler', 'ExceptHandler', 'ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Assign', 'Expr', 'For', 'Assign', 'Expr', 'If', 'Expr', 'Expr']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Expr', 'Assign', 'If', 'Expr']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Expr', 'Assign', 'If', 'Assign']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Assign', 'Expr', 'Expr', 'Assign', 'Return']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['While', 'Assign', 'Expr']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Expr', 'Assign']), ('handlers', ['ExceptHandler']), ('orelse', ['Expr', 'TryExcept', 'Return'])]", "TryExcept -> [('body', ['Expr', 'Assert']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Assign', 'Assign', 'For', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign']), ('handlers', ['ExceptHandler', 'ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('handlers', ['ExceptHandler', 'ExceptHandler', 'ExceptHandler', 'ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('handlers', ['ExceptHandler', 'ExceptHandler', 'ExceptHandler', 'ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Assign', 'Assign', 'For', 'Expr']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['If', 'Expr', 'Assign']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['ImportFrom']), ('handlers', ['ExceptHandler']), ('orelse', ['Return'])]", "TryExcept -> [('body', ['Assign', 'TryExcept']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Assign', 'Assign']), ('handlers', ['ExceptHandler']), ('orelse', ['Expr', 'Expr'])]", "TryExcept -> [('body', ['Assign', 'If', 'Assign', 'Assign', 'Assign']), ('handlers', ['ExceptHandler']), ('orelse', [])]", "TryExcept -> [('body', ['Assign', 'If', 'Assign', 'Return']), ('handlers', ['ExceptHandler']), ('orelse', [])]"], "Store": ["Store -> <NULL>"], "Sub": ["Sub -> <NULL>"], "Break": ["Break -> <NULL>"], "Return": ["Return -> [('value', 'Name')]", "Return -> [('value', 'Call')]", "Return -> [('value', 'List')]", "Return -> [('value', 'BinOp')]", "Return -> [('value', 'NoneType')]", "Return -> [('value', 'Tuple')]", "Return -> [('value', 'BoolOp')]", "Return -> [('value', 'Subscript')]", "Return -> [('value', 'Attribute')]", "Return -> [('value', 'Compare')]", "Return -> [('value', 'Num')]", "Return -> [('value', 'Str')]", "Return -> [('value', 'Dict')]", "Return -> [('value', 'ListComp')]", "Return -> [('value', 'UnaryOp')]", "Return -> [('value', 'IfExp')]", "Return -> [('value', 'Lambda')]", "Return -> [('value', 'Repr')]", "Return -> [('value', 'GeneratorExp')]"], "USub": ["USub -> <NULL>"], "Assert": ["Assert -> [('test', 'Compare'), ('msg', 'Str')]", "Assert -> [('test', 'Call'), ('msg', 'Str')]", "Assert -> [('test', 'Compare'), ('msg', 'NoneType')]", "Assert -> [('test', 'Call'), ('msg', 'NoneType')]", "Assert -> [('test', 'Name'), ('msg', 'NoneType')]", "Assert -> [('test', 'Compare'), ('msg', 'BinOp')]", "Assert -> [('test', 'UnaryOp'), ('msg', 'Str')]", "Assert -> [('test', 'BoolOp'), ('msg', 'NoneType')]", "Assert -> [('test', 'Call'), ('msg', 'Name')]", "Assert -> [('test', 'UnaryOp'), ('msg', 'NoneType')]", "Assert -> [('test', 'Num'), ('msg', 'BinOp')]", "Assert -> [('test', 'Name'), ('msg', 'BinOp')]", "Assert -> [('test', 'Num'), ('msg', 'Str')]", "Assert -> [('test', 'Compare'), ('msg', 'Name')]", "Assert -> [('test', 'UnaryOp'), ('msg', 'Name')]", "Assert -> [('test', 'Name'), ('msg', 'Str')]", "Assert -> [('test', 'Call'), ('msg', 'BinOp')]", "Assert -> [('test', 'Attribute'), ('msg', 'Str')]", "Assert -> [('test', 'Name'), ('msg', 'Name')]", "Assert -> [('test', 'Compare'), ('msg', 'Call')]", "Assert -> [('test', 'Attribute'), ('msg', 'NoneType')]", "Assert -> [('test', 'Name'), ('msg', 'Call')]", "Assert -> [('test', 'Compare'), ('msg', 'Subscript')]", "Assert -> [('test', 'BoolOp'), ('msg', 'Str')]", "Assert -> [('test', 'Call'), ('msg', 'Call')]", "Assert -> [('test', 'UnaryOp'), ('msg', 'Call')]", "Assert -> [('test', 'Compare'), ('msg', 'Attribute')]", "Assert -> [('test', 'Call'), ('msg', 'Attribute')]", "Assert -> [('test', 'BoolOp'), ('msg', 'Call')]", "Assert -> [('test', 'Compare'), ('msg', 'ListComp')]", "Assert -> [('test', 'Compare'), ('msg', 'Tuple')]", "Assert -> [('test', 'UnaryOp'), ('msg', 'BinOp')]", "Assert -> [('test', 'BoolOp'), ('msg', 'BinOp')]", "Assert -> [('test', 'Subscript'), ('msg', 'NoneType')]", "Assert -> [('test', 'Str'), ('msg', 'Compare')]"], "Tuple": ["Tuple -> [('elts', ['Name', 'Name']), ('ctx', 'Store')]", "Tuple -> [('elts', ['Str', 'Num', 'Str', 'Str']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Str', 'Call', 'Str', 'Str']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Attribute', 'Attribute', 'Attribute', 'Attribute']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Str', 'Num']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Attribute', 'Attribute']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Attribute', 'Name']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Attribute', 'BinOp']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Name']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Name', 'Attribute']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Name', 'Name', 'Name']), ('ctx', 'Store')]", "Tuple -> [('elts', ['Name', 'Name']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Name', 'Name', 'BinOp']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Name', 'BinOp']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Num', 'Num']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Num', 'Num', 'Num']), ('ctx', 'Load')]", "Tuple -> [('elts', ['BinOp', 'BinOp']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Name', 'Name', 'Name']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Attribute']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Call', 'Call']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Attribute', 'Subscript']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Attribute', 'Attribute', 'Call', 'Attribute']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Name', 'Name', 'Num']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Attribute', 'Name', 'Attribute']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Str', 'Tuple']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Str', 'Str']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Tuple', 'Tuple', 'Tuple']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Name', 'Num']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Name', 'Str']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Name', 'Tuple']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Call', 'Call', 'Call']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Num', 'Str', 'Name']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Call', 'Attribute', 'Attribute', 'Attribute']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Name', 'Attribute', 'Attribute', 'Name', 'Name']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Subscript', 'Name']), ('ctx', 'Load')]", "Tuple -> [('elts', ['BinOp', 'Name']), ('ctx', 'Load')]", "Tuple -> [('elts', []), ('ctx', 'Load')]", "Tuple -> [('elts', ['Str', 'Name', 'Name', 'Name', 'Name']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Name', 'Call']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Str', 'Subscript']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Str']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Str', 'Attribute']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Call', 'Name']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Call', 'List']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Str', 'Str', 'Str']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Str', 'Str', 'Str', 'Str']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Attribute', 'Str', 'Name', 'Str']), ('ctx', 'Load')]", "Tuple -> [('elts', ['BoolOp', 'Attribute']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Attribute', 'Call']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Attribute', 'Attribute', 'Call', 'Call']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Str', 'Str', 'Str', 'Name']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Tuple', 'Name']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Attribute', 'Attribute', 'Attribute']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Call']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Name']), ('ctx', 'Store')]", "Tuple -> [('elts', ['Num', 'Num', 'Num', 'Num']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Num', 'Str']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Name', 'Str', 'Num']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Tuple', 'Call', 'Call']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Tuple', 'Tuple', 'Call']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Num', 'Name']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Tuple', 'Tuple']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Tuple', 'Tuple', 'Tuple', 'Tuple']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Subscript', 'Subscript', 'Subscript']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Name', 'Call', 'Call']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Call', 'Call', 'Name']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Name', 'Str', 'Name']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Name', 'Str', 'Str']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Name', 'Str', 'Tuple']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Name', 'Name', 'Str']), ('ctx', 'Load')]", "Tuple -> [('elts', ['BinOp', 'Call']), ('ctx', 'Load')]", "Tuple -> [('elts', ['BinOp', 'BinOp', 'BinOp']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Name', 'Tuple']), ('ctx', 'Store')]", "Tuple -> [('elts', ['Name', 'List', 'Name', 'List']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Name', 'Name', 'Name', 'Name']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Name', 'Name', 'Name', 'Name']), ('ctx', 'Store')]", "Tuple -> [('elts', ['Subscript', 'Subscript', 'Subscript', 'Subscript']), ('ctx', 'Load')]", "Tuple -> [('elts', ['BinOp', 'Num']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Attribute', 'Attribute', 'Name']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Call', 'Attribute']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Call', 'Subscript']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Attribute', 'Attribute', 'Call']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Attribute', 'Attribute']), ('ctx', 'Store')]", "Tuple -> [('elts', ['List', 'List']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Num', 'Call']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Name', 'Name', 'Name', 'Name', 'Name']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute']), ('ctx', 'Store')]", "Tuple -> [('elts', ['Dict', 'Dict', 'Dict', 'Dict', 'Dict']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Call', 'Call', 'Call', 'Call']), ('ctx', 'Load')]", "Tuple -> [('elts', ['BoolOp', 'Call', 'Attribute']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Num', 'Num', 'Num', 'Num', 'Num', 'Name']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Num', 'Str', 'Str', 'Num', 'Str', 'Num']), ('ctx', 'Load')]", "Tuple -> [('elts', ['List', 'Num', 'Name', 'Num', 'Num']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Name', 'Name', 'Name', 'Name', 'Name']), ('ctx', 'Store')]", "Tuple -> [('elts', ['Name', 'Subscript']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Num', 'Num', 'BinOp']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Name', 'Name', 'List']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('ctx', 'Store')]", "Tuple -> [('elts', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('ctx', 'Store')]", "Tuple -> [('elts', ['BinOp', 'Num', 'Num']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Name', 'Name', 'Num', 'Name']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Num']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Tuple', 'Tuple', 'Name']), ('ctx', 'Store')]", "Tuple -> [('elts', ['Tuple', 'Name', 'Name']), ('ctx', 'Store')]", "Tuple -> [('elts', ['Name', 'Name', 'Num', 'Num']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Num', 'Num', 'Call', 'Call']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Attribute', 'Num', 'Num']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Num', 'Num', 'Num', 'BinOp']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Num', 'Num', 'Attribute']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Num', 'Num', 'Num', 'Num', 'Num']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Attribute', 'Num']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Num', 'Num', 'Name', 'Name']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Attribute', 'Str']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Tuple', 'Name']), ('ctx', 'Store')]", "Tuple -> [('elts', ['Name', 'Num', 'Num', 'Num']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Call', 'BinOp']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Num', 'Name', 'Num', 'Num']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Name', 'BinOp', 'BinOp', 'BinOp']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Tuple', 'Tuple']), ('ctx', 'Store')]", "Tuple -> [('elts', ['Num', 'BinOp']), ('ctx', 'Load')]", "Tuple -> [('elts', ['BinOp', 'Subscript']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Subscript', 'Subscript']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Subscript', 'Call']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Str', 'Name']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Attribute', 'Name', 'Name', 'Name']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Tuple']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Str', 'Call']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Str', 'List']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Name', 'Name', 'Attribute']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Name', 'Attribute', 'Attribute']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Str', 'Str', 'Num']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Str', 'BinOp']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Call', 'Str']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Attribute', 'Name', 'Name']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Name', 'Name', 'Tuple']), ('ctx', 'Store')]", "Tuple -> [('elts', ['Attribute', 'List']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Subscript', 'Num']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Compare']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Attribute', 'Attribute', 'Attribute']), ('ctx', 'Store')]", "Tuple -> [('elts', ['Name', 'Name', 'Name', 'Name', 'Name', 'Call']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Name', 'Name', 'Subscript']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Name', 'Name', 'Lambda']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Name', 'ListComp']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Attribute', 'UnaryOp']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Attribute', 'Attribute', 'UnaryOp']), ('ctx', 'Load')]", "Tuple -> [('elts', ['IfExp', 'Subscript']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Tuple', 'Tuple', 'Tuple']), ('ctx', 'Store')]", "Tuple -> [('elts', ['Subscript', 'Name', 'Call']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Call', 'Name', 'Name']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Attribute', 'Attribute', 'Name']), ('ctx', 'Store')]", "Tuple -> [('elts', ['Name', 'Name', 'Dict']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Subscript', 'Subscript', 'Name']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Subscript', 'Subscript']), ('ctx', 'Store')]", "Tuple -> [('elts', ['Attribute', 'Attribute', 'Attribute', 'Call']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Str', 'Name', 'Name']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Attribute', 'Attribute', 'Attribute', 'Attribute']), ('ctx', 'Store')]", "Tuple -> [('elts', ['Name', 'Call', 'Name', 'Name']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Call', 'Name', 'Subscript']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Subscript', 'Name', 'Subscript']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Attribute', 'Name', 'Subscript']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Name', 'Lambda', 'Subscript']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Name', 'Attribute', 'Name']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Name', 'Name', 'Subscript', 'Name']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Name', 'Attribute', 'Attribute', 'Name']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Name', 'Name', 'Name', 'Call', 'Attribute', 'Attribute', 'Attribute', 'Name', 'Name']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Name', 'Name', 'Name', 'Call', 'Name']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Str', 'Num', 'Subscript']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Str', 'Subscript', 'Subscript']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Str', 'Name', 'Str']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Str', 'Str', 'Str', 'Str', 'Str']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Str', 'BinOp', 'Str', 'Str']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Name', 'BinOp', 'Str']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Call', 'Name', 'Call']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Subscript', 'Name', 'Subscript', 'Name']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Name', 'BoolOp']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Str', 'Str', 'List']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Str', 'Str', 'Subscript']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Str', 'Str', 'Name']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Num', 'List']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Num', 'Str', 'Str']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Str', 'BoolOp', 'Name', 'Name', 'Name']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Name', 'Name', 'Name', 'Name', 'Call']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Call', 'Call', 'BoolOp']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Name', 'Name', 'Call']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Call', 'Subscript', 'Call']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Name', 'Call', 'Name']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Name', 'Call', 'Attribute']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Call', 'Attribute', 'Attribute']), ('ctx', 'Load')]", "Tuple -> [('elts', ['BinOp', 'Str']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Name', 'Num', 'Num']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Name', 'Attribute']), ('ctx', 'Store')]", "Tuple -> [('elts', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Name', 'Name', 'Name', 'Attribute']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Subscript', 'BinOp', 'Subscript']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Name', 'Str', 'Str', 'Str']), ('ctx', 'Load')]", "Tuple -> [('elts', ['BinOp']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Name', 'Call', 'Call', 'Call']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Attribute', 'Name']), ('ctx', 'Store')]", "Tuple -> [('elts', ['Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Str', 'Str', 'Tuple']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Num', 'Num', 'Num', 'Num', 'Num', 'Num']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Call', 'Num']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Attribute', 'Name', 'Attribute', 'Attribute', 'IfExp', 'Call', 'IfExp', 'IfExp', 'IfExp', 'Attribute', 'Attribute']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Name', 'Attribute', 'Call']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Name', 'Attribute', 'List']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Name', 'Name', 'Name', 'Call']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Num', 'BinOp', 'Num']), ('ctx', 'Load')]", "Tuple -> [('elts', ['List', 'List', 'List']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Name', 'Subscript', 'Attribute']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Str', 'Str', 'Call']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Call', 'Name', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Tuple', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call']), ('ctx', 'Load')]", "Tuple -> [('elts', ['BinOp', 'Name', 'Call', 'Subscript']), ('ctx', 'Load')]", "Tuple -> [('elts', ['BinOp', 'Name', 'Name']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Attribute', 'Str', 'BinOp', 'Str', 'Str', 'Str', 'Str', 'Str', 'BinOp', 'Name']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Subscript', 'Attribute']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Subscript', 'BinOp', 'BinOp', 'Subscript']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Attribute', 'Name', 'Str']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Attribute', 'Subscript', 'Attribute', 'Attribute', 'Name', 'Name']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Str', 'Num', 'Num', 'Num', 'Num']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Attribute', 'Name', 'Call']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Attribute']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Name', 'List']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Attribute', 'Name', 'Lambda']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Attribute', 'Call', 'Call', 'Call', 'Call']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Attribute', 'BoolOp']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Attribute', 'Call', 'Call', 'Call', 'Name', 'Subscript']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Subscript', 'Name', 'Name', 'Name', 'Name', 'Name', 'Subscript', 'Subscript', 'Name', 'Name', 'Name', 'Name', 'Subscript']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Subscript', 'Name', 'Subscript', 'Subscript', 'Subscript', 'Name', 'Name', 'Subscript', 'Name']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Subscript', 'Subscript', 'Subscript', 'Name']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Name', 'Str', 'Attribute']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Subscript']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Subscript', 'Str']), ('ctx', 'Load')]", "Tuple -> [('elts', ['List', 'Num']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Subscript', 'Str', 'Tuple', 'Dict']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Subscript', 'Str', 'Tuple']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Name', 'Call', 'Num', 'Str', 'Dict']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('ctx', 'Store')]", "Tuple -> [('elts', ['Str', 'Str', 'Attribute', 'Str', 'List', 'Str', 'Str']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Str', 'Str', 'Num', 'Str', 'List', 'Str', 'Name']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Str', 'Str', 'Attribute', 'Str', 'List', 'Str', 'Name']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Attribute', 'Compare', 'Str']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Name', 'Name', 'Num', 'Str', 'Dict']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Str', 'Str', 'Str', 'Str', 'Str', 'Num', 'Attribute']), ('ctx', 'Load')]", "Tuple -> [('elts', ['BinOp', 'Str', 'Str']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Dict', 'Dict']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Num', 'Num', 'Str']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Tuple', 'Dict']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Call', 'Name', 'Dict']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Str', 'Name', 'Dict']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Name', 'Attribute', 'Attribute', 'Attribute']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Call', 'Attribute', 'Name', 'Name']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Name', 'Str', 'List', 'Tuple', 'Dict']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Subscript', 'Compare']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Subscript', 'List']), ('ctx', 'Load')]", "Tuple -> [('elts', ['List', 'List', 'List', 'List', 'List']), ('ctx', 'Load')]", "Tuple -> [('elts', ['BinOp', 'BinOp', 'Name', 'Name', 'Name']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Attribute']), ('ctx', 'Store')]", "Tuple -> [('elts', ['Str', 'Call', 'Dict']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Str', 'BinOp', 'Str']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('ctx', 'Store')]", "Tuple -> [('elts', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Str', 'Str', 'Dict', 'Str']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Str', 'Str', 'Dict']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Str', 'Call', 'Dict', 'Str']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Name', 'Str', 'Dict']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Num', 'Name', 'Attribute', 'Attribute']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Num', 'Name', 'Attribute', 'Name', 'Name']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Subscript', 'BinOp']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Num', 'Attribute']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Attribute', 'Name', 'Name', 'Attribute', 'Attribute', 'Attribute', 'Name', 'Name']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Name', 'Subscript', 'Subscript']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Attribute', 'Call', 'Call']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Call', 'Num', 'Call', 'Name']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Num', 'Call', 'Name', 'Call']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Name', 'IfExp']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Subscript', 'Name']), ('ctx', 'Store')]", "Tuple -> [('elts', ['Subscript', 'Attribute', 'Subscript']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Call', 'BoolOp', 'BinOp']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Attribute', 'Subscript', 'Name']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Name', 'Name', 'Name', 'BoolOp', 'Call', 'Name']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Attribute', 'Attribute', 'Call', 'Call', 'Call']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Name', 'Dict']), ('ctx', 'Load')]", "Tuple -> [('elts', ['BinOp', 'BinOp', 'Name']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Call', 'ListComp']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Call', 'Name', 'Name', 'Name', 'Call']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Str', 'Attribute', 'Name']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Str', 'Name', 'Call']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Call', 'Attribute', 'Call']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Call', 'Name', 'Attribute', 'Name', 'Attribute', 'Name']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Call', 'Name', 'Attribute', 'Name']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Name', 'Attribute', 'Call', 'Call']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Subscript', 'Name', 'Name']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Str', 'List', 'Dict']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Num', 'Dict']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Num', 'Name', 'Dict']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Name', 'Subscript', 'Dict']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Num', 'Dict', 'Dict']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Attribute', 'Name', 'Name', 'Name', 'Attribute']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Subscript', 'Call', 'Call', 'Subscript']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Call', 'Dict']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Subscript', 'Subscript', 'Name', 'Name']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Attribute', 'Tuple']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Name', 'Attribute', 'Call', 'Name']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Attribute', 'Attribute', 'Call', 'Attribute', 'Call']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Call', 'Call', 'Attribute', 'Call']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Attribute', 'Str', 'Call']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Attribute', 'Call', 'Name']), ('ctx', 'Load')]", "Tuple -> [('elts', ['BinOp', 'List']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Name', 'Attribute', 'BinOp']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Subscript', 'Name', 'Name', 'BinOp', 'Subscript']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Name', 'Str', 'Str', 'Dict']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Name', 'Str', 'Name', 'Dict']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Num', 'Name', 'Name']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Num', 'Lambda']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Name', 'Name', 'Call', 'Call']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Attribute', 'Str', 'Num']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Attribute', 'Str', 'Num', 'Num']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Attribute', 'Str', 'Num', 'Attribute']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Name', 'Str', 'Num', 'Name']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Name', 'Str', 'Num', 'Subscript']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Name', 'Str', 'Num', 'Attribute']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Name', 'Str', 'Num', 'Num']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Call', 'Call', 'BinOp', 'BinOp', 'BinOp', 'BinOp', 'BinOp', 'BinOp', 'BinOp', 'BinOp', 'BinOp', 'BinOp', 'BinOp', 'BinOp']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Call', 'Tuple']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Str', 'Str', 'Name', 'Num']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Call', 'IfExp']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Name', 'UnaryOp']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Attribute', 'Name', 'Call', 'Attribute']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Attribute', 'Call', 'Call', 'Attribute']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Attribute', 'Call', 'Attribute']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Attribute', 'Name', 'Attribute', 'Name']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Call', 'Name', 'Call', 'Call', 'Name', 'Attribute']), ('ctx', 'Load')]", "Tuple -> [('elts', ['BinOp', 'Name', 'Attribute']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Call', 'Name', 'Attribute', 'Attribute', 'Attribute']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Call', 'Attribute', 'Attribute', 'Call']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Attribute', 'Name', 'Name', 'Name', 'BoolOp']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Name', 'Name', 'List', 'Name']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Name', 'Name', 'Name', 'Str']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Subscript', 'Num', 'Name', 'Name']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Subscript', 'BinOp', 'Name', 'Name']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('ctx', 'Store')]", "Tuple -> [('elts', ['Call', 'BinOp', 'Name', 'Name', 'Name', 'Call']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Name', 'Name', 'Tuple']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Name', 'Tuple', 'Tuple']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Name', 'Call', 'Tuple']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Name', 'Subscript', 'Tuple']), ('ctx', 'Load')]", "Tuple -> [('elts', ['BinOp', 'Subscript', 'Subscript', 'BoolOp']), ('ctx', 'Load')]", "Tuple -> [('elts', ['BinOp', 'Subscript', 'Subscript']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Name', 'BinOp', 'Name']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Name', 'Subscript', 'Subscript', 'Subscript', 'Subscript', 'Subscript', 'Subscript', 'Subscript', 'Subscript']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Name', 'Subscript', 'Name', 'Name', 'Name', 'Name']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Name', 'Subscript', 'Call']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Name', 'Call', 'Subscript']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Call', 'Name', 'Tuple']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Attribute', 'Attribute', 'Compare']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Str', 'Attribute', 'Call', 'Attribute', 'Attribute', 'Attribute', 'BinOp', 'Attribute', 'Str', 'Num', 'Num']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Call', 'Call', 'Call', 'Call', 'Call', 'Call']), ('ctx', 'Load')]", "Tuple -> [('elts', ['BinOp', 'Tuple']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Str', 'Tuple', 'Num']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Str', 'Tuple', 'Name']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Name', 'Subscript', 'Name', 'Num']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Name', 'Name', 'Name', 'Num']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Name', 'Str', 'Name', 'Num']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Str', 'Str', 'Name', 'Str']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Name', 'Str', 'Tuple', 'Num']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Name', 'Subscript', 'Name', 'Name']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Call', 'Call', 'Call', 'Call', 'Call']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Num', 'Num', 'Name']), ('ctx', 'Load')]", "Tuple -> [('elts', ['BinOp', 'Attribute']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Name', 'Name', 'Name', 'Name', 'Attribute']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Name', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Name', 'BoolOp', 'BoolOp', 'Attribute', 'BoolOp']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Str', 'Str', 'Num', 'Num']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Str', 'Num', 'Str']), ('ctx', 'Load')]", "Tuple -> [('elts', ['BoolOp', 'Subscript']), ('ctx', 'Load')]", "Tuple -> [('elts', ['BoolOp', 'Name']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Str', 'Tuple', 'Dict']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Name', 'Call', 'Name', 'Call']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Name', 'Tuple', 'Name']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Name', 'Name', 'BoolOp']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Name', 'Str', 'Name', 'Attribute']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Num', 'Subscript']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Name', 'Name', 'Name', 'Str', 'Str']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('ctx', 'Store')]", "Tuple -> [('elts', ['Attribute', 'BoolOp', 'Attribute']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Attribute', 'Attribute', 'Attribute', 'Name']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Call', 'BoolOp']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Attribute', 'Call', 'Attribute', 'Attribute', 'Attribute', 'Attribute']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Attribute', 'BinOp', 'Attribute']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Str', 'Dict', 'Attribute']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Str', 'Dict', 'BinOp']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Str', 'Dict', 'Str']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Subscript', 'Name', 'Name', 'Name']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Attribute', 'Str', 'BinOp', 'Num']), ('ctx', 'Load')]", "Tuple -> [('elts', ['IfExp', 'Name', 'Call']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call']), ('ctx', 'Load')]", "Tuple -> [('elts', ['BoolOp', 'Call', 'Name']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Str', 'UnaryOp']), ('ctx', 'Load')]", "Tuple -> [('elts', ['IfExp', 'Name', 'Name']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Attribute', 'Num', 'Str', 'Num']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Call', 'Name', 'Call', 'Attribute']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Name', 'Subscript', 'Subscript', 'Subscript', 'Subscript']), ('ctx', 'Load')]", "Tuple -> [('elts', ['List', 'Dict']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Call', 'Call', 'Call', 'Name']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Attribute', 'Call', 'Name', 'Name']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Name', 'BinOp', 'Call', 'Name', 'Name']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Name', 'BinOp', 'BinOp']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Call', 'Subscript', 'Name']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Attribute', 'Call', 'Attribute', 'Call']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Call', 'Name', 'Name', 'BinOp', 'Name']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Name', 'Name', 'Name', 'Str', 'Str', 'BinOp']), ('ctx', 'Load')]", "Tuple -> [('elts', ['BinOp', 'Attribute', 'BinOp', 'Call', 'Call']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Subscript', 'Subscript', 'Subscript', 'Subscript', 'Subscript', 'Subscript']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Call']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Subscript', 'Name', 'Name', 'Name', 'Name']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Tuple', 'Call']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('ctx', 'Store')]", "Tuple -> [('elts', ['Str', 'Str', 'Str', 'Str', 'Num']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Str', 'Str', 'BinOp', 'BinOp', 'Num']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Str', 'Num', 'Str', 'Str', 'Num']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Str', 'BinOp', 'Str', 'Str', 'Num']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Str', 'Name', 'Str', 'Str', 'Num']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Str', 'List', 'Str', 'Str', 'Num']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Str', 'Tuple', 'Str', 'Str', 'Num']), ('ctx', 'Load')]", "Tuple -> [('elts', ['BinOp', 'BoolOp']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Str', 'Num', 'BinOp']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Str', 'BinOp', 'BinOp']), ('ctx', 'Load')]", "Tuple -> [('elts', ['UnaryOp', 'Name']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Str', 'BinOp', 'Name']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Str', 'BinOp', 'BinOp', 'BinOp']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Tuple', 'List', 'List', 'Str', 'Num']), ('ctx', 'Load')]", "Tuple -> [('elts', ['List', 'Str', 'Num', 'Num', 'BinOp', 'BinOp']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Name', 'Str', 'BinOp']), ('ctx', 'Load')]", "Tuple -> [('elts', ['BinOp', 'Name', 'Call']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Name', 'BoolOp', 'Name']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Str', 'Str', 'Attribute']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Num', 'Subscript', 'Name']), ('ctx', 'Load')]", "Tuple -> [('elts', ['BoolOp', 'Call']), ('ctx', 'Load')]", "Tuple -> [('elts', ['List', 'Name']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Name', 'Num', 'BinOp', 'Name']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Num', 'Name', 'Name', 'BinOp']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Str', 'Dict']), ('ctx', 'Load')]", "Tuple -> [('elts', ['BoolOp', 'BoolOp']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Name', 'BinOp', 'Tuple']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Name', 'Name', 'Subscript', 'Attribute']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Name', 'Subscript']), ('ctx', 'Store')]", "Tuple -> [('elts', ['Name', 'Attribute', 'Attribute', 'Attribute', 'Attribute']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Str', 'Num', 'Num']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Call', 'Str', 'Name', 'Str', 'Name']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Call', 'Str', 'Name', 'Call', 'Name']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Subscript', 'Name', 'Str']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Name', 'Name', 'Attribute', 'Attribute', 'Attribute']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Name', 'List', 'Name']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Name', 'Name', 'BinOp', 'Name', 'Name']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Name', 'Name', 'Attribute', 'Call']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Attribute', 'Attribute', 'Name', 'Attribute']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Name', 'Attribute', 'Str']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Subscript', 'Subscript', 'Attribute']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Num', 'Name', 'Tuple']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Num', 'Name', 'Tuple', 'Dict', 'Tuple']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Num', 'Name', 'Tuple', 'Dict', 'Tuple', 'Str']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Num', 'Name', 'Tuple', 'Dict', 'Tuple', 'Str', 'Num']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Name', 'Name', 'Tuple', 'Dict', 'Tuple']), ('ctx', 'Load')]", "Tuple -> [('elts', ['BinOp', 'BinOp', 'BinOp', 'BinOp']), ('ctx', 'Load')]", "Tuple -> [('elts', ['BinOp', 'BinOp', 'Num']), ('ctx', 'Load')]", "Tuple -> [('elts', ['UnaryOp', 'Subscript']), ('ctx', 'Load')]", "Tuple -> [('elts', ['BoolOp', 'Subscript', 'Call']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Str', 'Str', 'Name', 'Name']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Name', 'Call', 'Call', 'Call', 'Call']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('ctx', 'Store')]", "Tuple -> [('elts', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Tuple', 'Subscript']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Attribute', 'Call', 'Call', 'Name', 'Call']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Call', 'Str', 'Attribute', 'Call']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Call', 'Str', 'Str', 'Call']), ('ctx', 'Load')]", "Tuple -> [('elts', ['BinOp', 'Name', 'Name', 'Name', 'Name', 'Attribute']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Name', 'Attribute', 'Name', 'Name']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Call', 'Name', 'Call', 'Name']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Attribute', 'Name', 'Name', 'Name', 'Attribute', 'Call', 'Attribute']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Attribute', 'BinOp', 'Str']), ('ctx', 'Load')]", "Tuple -> [('elts', ['BoolOp', 'Call', 'Call', 'Call', 'Name']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Attribute', 'Attribute', 'Name', 'Name']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Dict', 'Dict', 'Dict', 'Dict']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Str', 'Name', 'Str', 'Str']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Name', 'Str', 'Str', 'BinOp']), ('ctx', 'Load')]", "Tuple -> [('elts', ['BoolOp', 'Subscript', 'BoolOp']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Subscript', 'Subscript', 'Subscript', 'Subscript', 'Subscript', 'Call', 'Subscript', 'Subscript', 'Subscript']), ('ctx', 'Load')]", "Tuple -> [('elts', ['Tuple', 'Attribute']), ('ctx', 'Load')]"], "Repr": ["Repr -> [('value', 'Attribute')]", "Repr -> [('value', 'Name')]", "Repr -> [('value', 'BinOp')]"], "Lt": ["Lt -> <NULL>"], "Or": ["Or -> <NULL>"], "ExceptHandler": ["ExceptHandler -> [('type', 'Name'), ('name', 'Name'), ('body', ['Print'])]", "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['Print', 'Expr'])]", "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['Assign', 'Return'])]", "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['Return'])]", "ExceptHandler -> [('type', 'Attribute'), ('name', 'Name'), ('body', ['Assign'])]", "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['Assign', 'If', 'Assign'])]", "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['If', 'Raise'])]", "ExceptHandler -> [('type', 'Name'), ('name', 'Name'), ('body', ['Assign'])]", "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['ImportFrom', 'ImportFrom'])]", "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['Pass'])]", "ExceptHandler -> [('type', 'Name'), ('name', 'Name'), ('body', ['Expr', 'Expr', 'Assign', 'If'])]", "ExceptHandler -> [('type', 'Name'), ('name', 'Name'), ('body', ['Expr', 'Raise'])]", "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['ImportFrom'])]", "ExceptHandler -> [('type', 'Tuple'), ('name', 'NoneType'), ('body', ['Expr'])]", "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['TryExcept'])]", "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['Expr'])]", "ExceptHandler -> [('type', 'Attribute'), ('name', 'NoneType'), ('body', ['Expr'])]", "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['If'])]", "ExceptHandler -> [('type', 'NoneType'), ('name', 'NoneType'), ('body', ['Expr'])]", "ExceptHandler -> [('type', 'Attribute'), ('name', 'NoneType'), ('body', ['Return'])]", "ExceptHandler -> [('type', 'Attribute'), ('name', 'Name'), ('body', ['Return'])]", "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['Assign'])]", "ExceptHandler -> [('type', 'Name'), ('name', 'Name'), ('body', ['Raise'])]", "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['If', 'Assign', 'Assign', 'Return'])]", "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['If', 'Assign', 'Return'])]", "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['Assign', 'Assign', 'Expr'])]", "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['Continue'])]", "ExceptHandler -> [('type', 'Name'), ('name', 'Name'), ('body', ['Expr'])]", "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['Expr', 'Raise'])]", "ExceptHandler -> [('type', 'NoneType'), ('name', 'NoneType'), ('body', ['Raise'])]", "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['FunctionDef'])]", "ExceptHandler -> [('type', 'Tuple'), ('name', 'Name'), ('body', ['Return'])]", "ExceptHandler -> [('type', 'Name'), ('name', 'Name'), ('body', ['Return'])]", "ExceptHandler -> [('type', 'Name'), ('name', 'Name'), ('body', ['If', 'If', 'Return'])]", "ExceptHandler -> [('type', 'NoneType'), ('name', 'NoneType'), ('body', ['Assign'])]", "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['Raise'])]", "ExceptHandler -> [('type', 'Tuple'), ('name', 'NoneType'), ('body', ['Assign', 'Assign', 'If'])]", "ExceptHandler -> [('type', 'Tuple'), ('name', 'NoneType'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Expr'])]", "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['Assign', 'Expr', 'Assign'])]", "ExceptHandler -> [('type', 'Attribute'), ('name', 'NoneType'), ('body', ['Assign'])]", "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['Break'])]", "ExceptHandler -> [('type', 'Name'), ('name', 'Name'), ('body', ['Expr', 'Continue'])]", "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['Import', 'Assign'])]", "ExceptHandler -> [('type', 'Attribute'), ('name', 'Name'), ('body', ['Expr', 'Raise'])]", "ExceptHandler -> [('type', 'Tuple'), ('name', 'NoneType'), ('body', ['Assign'])]", "ExceptHandler -> [('type', 'Tuple'), ('name', 'NoneType'), ('body', ['Pass'])]", "ExceptHandler -> [('type', 'NoneType'), ('name', 'NoneType'), ('body', ['Pass'])]", "ExceptHandler -> [('type', 'NoneType'), ('name', 'NoneType'), ('body', ['Return'])]", "ExceptHandler -> [('type', 'NoneType'), ('name', 'NoneType'), ('body', ['Expr', 'Expr'])]", "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['Expr', 'Return'])]", "ExceptHandler -> [('type', 'Attribute'), ('name', 'Name'), ('body', ['Raise'])]", "ExceptHandler -> [('type', 'Attribute'), ('name', 'NoneType'), ('body', ['Raise'])]", "ExceptHandler -> [('type', 'Name'), ('name', 'Tuple'), ('body', ['Raise'])]", "ExceptHandler -> [('type', 'NoneType'), ('name', 'NoneType'), ('body', ['Expr', 'Raise'])]", "ExceptHandler -> [('type', 'Name'), ('name', 'Name'), ('body', ['AugAssign', 'Raise'])]", "ExceptHandler -> [('type', 'Name'), ('name', 'Name'), ('body', ['Print', 'Assign', 'Continue'])]", "ExceptHandler -> [('type', 'Name'), ('name', 'Name'), ('body', ['Print', 'Expr', 'Continue'])]", "ExceptHandler -> [('type', 'Name'), ('name', 'Name'), ('body', ['If'])]", "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['For', 'Assign'])]", "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['Import'])]", "ExceptHandler -> [('type', 'Attribute'), ('name', 'NoneType'), ('body', ['Assign', 'Assign', 'Expr', 'Return'])]", "ExceptHandler -> [('type', 'Attribute'), ('name', 'NoneType'), ('body', ['Expr', 'If'])]", "ExceptHandler -> [('type', 'Tuple'), ('name', 'NoneType'), ('body', ['Raise'])]", "ExceptHandler -> [('type', 'NoneType'), ('name', 'NoneType'), ('body', ['Print'])]", "ExceptHandler -> [('type', 'Attribute'), ('name', 'NoneType'), ('body', ['Pass'])]", "ExceptHandler -> [('type', 'Attribute'), ('name', 'NoneType'), ('body', ['Break'])]", "ExceptHandler -> [('type', 'Attribute'), ('name', 'Tuple'), ('body', ['Expr'])]", "ExceptHandler -> [('type', 'Attribute'), ('name', 'NoneType'), ('body', ['If'])]", "ExceptHandler -> [('type', 'Str'), ('name', 'NoneType'), ('body', ['Expr'])]", "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['Print'])]", "ExceptHandler -> [('type', 'Attribute'), ('name', 'Name'), ('body', ['If', 'Print'])]", "ExceptHandler -> [('type', 'Tuple'), ('name', 'Name'), ('body', ['Expr', 'Return'])]", "ExceptHandler -> [('type', 'NoneType'), ('name', 'NoneType'), ('body', ['Print', 'Import', 'Expr'])]", "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['Print', 'Return'])]", "ExceptHandler -> [('type', 'Tuple'), ('name', 'Name'), ('body', ['Raise'])]", "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['Assign', 'Assign', 'Assign'])]", "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['Assign', 'Assign'])]", "ExceptHandler -> [('type', 'NoneType'), ('name', 'NoneType'), ('body', ['Import'])]", "ExceptHandler -> [('type', 'Name'), ('name', 'Name'), ('body', ['ImportFrom', 'Assign', 'Expr', 'Expr', 'Expr'])]", "ExceptHandler -> [('type', 'NoneType'), ('name', 'NoneType'), ('body', ['Assign', 'Expr'])]", "ExceptHandler -> [('type', 'Attribute'), ('name', 'Name'), ('body', ['Print', 'Print', 'Expr'])]", "ExceptHandler -> [('type', 'Name'), ('name', 'Name'), ('body', ['Print', 'Expr'])]", "ExceptHandler -> [('type', 'NoneType'), ('name', 'NoneType'), ('body', ['Print', 'Expr'])]", "ExceptHandler -> [('type', 'Tuple'), ('name', 'Name'), ('body', ['Expr', 'Expr'])]", "ExceptHandler -> [('type', 'Name'), ('name', 'Name'), ('body', ['Expr', 'Expr'])]", "ExceptHandler -> [('type', 'NoneType'), ('name', 'NoneType'), ('body', ['Expr', 'Expr', 'Raise'])]", "ExceptHandler -> [('type', 'NoneType'), ('name', 'NoneType'), ('body', ['If'])]", "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['Print', 'Raise'])]", "ExceptHandler -> [('type', 'Tuple'), ('name', 'Name'), ('body', ['Pass'])]", "ExceptHandler -> [('type', 'Name'), ('name', 'Name'), ('body', ['Assign', 'Return'])]", "ExceptHandler -> [('type', 'Name'), ('name', 'Name'), ('body', ['If', 'Raise'])]", "ExceptHandler -> [('type', 'Name'), ('name', 'Name'), ('body', ['TryExcept', 'Raise'])]", "ExceptHandler -> [('type', 'Name'), ('name', 'Name'), ('body', ['Expr', 'Return'])]", "ExceptHandler -> [('type', 'Name'), ('name', 'Name'), ('body', ['Import', 'ImportFrom', 'TryExcept'])]", "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['Import', 'Expr', 'Return'])]", "ExceptHandler -> [('type', 'Name'), ('name', 'Name'), ('body', ['Assign', 'If'])]", "ExceptHandler -> [('type', 'Tuple'), ('name', 'Name'), ('body', ['Expr'])]", "ExceptHandler -> [('type', 'Attribute'), ('name', 'Name'), ('body', ['Expr'])]", "ExceptHandler -> [('type', 'Name'), ('name', 'Name'), ('body', ['Expr', 'Assign'])]", "ExceptHandler -> [('type', 'Name'), ('name', 'Name'), ('body', ['If', 'Assign'])]", "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['Expr', 'Expr'])]", "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['ClassDef'])]", "ExceptHandler -> [('type', 'Name'), ('name', 'Name'), ('body', ['Assign', 'TryExcept', 'Expr', 'Expr'])]", "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['If', 'Expr'])]", "ExceptHandler -> [('type', 'Name'), ('name', 'Name'), ('body', ['Expr', 'Expr', 'Return'])]", "ExceptHandler -> [('type', 'Attribute'), ('name', 'NoneType'), ('body', ['Continue'])]", "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['Assign', 'Raise'])]", "ExceptHandler -> [('type', 'Attribute'), ('name', 'NoneType'), ('body', ['Assign', 'If', 'Assign'])]", "ExceptHandler -> [('type', 'Attribute'), ('name', 'NoneType'), ('body', ['Assign', 'Expr', 'Raise'])]", "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['Assign', 'Expr', 'Raise'])]", "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['Exec', 'Assign'])]", "ExceptHandler -> [('type', 'NoneType'), ('name', 'NoneType'), ('body', ['Assign', 'Assign', 'Assign'])]", "ExceptHandler -> [('type', 'Attribute'), ('name', 'NoneType'), ('body', ['Assign', 'Assign', 'Assign'])]", "ExceptHandler -> [('type', 'NoneType'), ('name', 'NoneType'), ('body', ['Assign', 'Assign'])]", "ExceptHandler -> [('type', 'NoneType'), ('name', 'NoneType'), ('body', ['Expr', 'Return'])]", "ExceptHandler -> [('type', 'Name'), ('name', 'Name'), ('body', ['Print', 'Return'])]", "ExceptHandler -> [('type', 'Name'), ('name', 'Name'), ('body', ['Print', 'Assign', 'Return'])]", "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['Import', 'Expr'])]", "ExceptHandler -> [('type', 'Name'), ('name', 'Name'), ('body', ['Assign', 'Break'])]", "ExceptHandler -> [('type', 'Name'), ('name', 'Name'), ('body', ['Assign', 'Assign', 'Assign'])]", "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['Assign', 'TryExcept', 'If'])]", "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['Expr', 'Expr', 'Expr'])]", "ExceptHandler -> [('type', 'Attribute'), ('name', 'Name'), ('body', ['If'])]", "ExceptHandler -> [('type', 'Name'), ('name', 'Name'), ('body', ['Assign', 'Raise'])]", "ExceptHandler -> [('type', 'Name'), ('name', 'Name'), ('body', ['Print', 'Pass'])]", "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['Assign', 'Expr', 'Return'])]", "ExceptHandler -> [('type', 'Name'), ('name', 'Name'), ('body', ['Assign', 'Assign', 'Return'])]", "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['Delete', 'Assign', 'If'])]", "ExceptHandler -> [('type', 'Attribute'), ('name', 'Name'), ('body', ['Expr', 'Assign'])]", "ExceptHandler -> [('type', 'Attribute'), ('name', 'Name'), ('body', ['Pass'])]", "ExceptHandler -> [('type', 'Name'), ('name', 'Name'), ('body', ['Assign', 'Expr', 'Expr', 'Expr', 'Expr'])]", "ExceptHandler -> [('type', 'Name'), ('name', 'Name'), ('body', ['Assign', 'Expr', 'Expr', 'Expr'])]", "ExceptHandler -> [('type', 'Attribute'), ('name', 'NoneType'), ('body', ['If', 'If', 'Return'])]", "ExceptHandler -> [('type', 'NoneType'), ('name', 'NoneType'), ('body', ['Expr', 'Assign', 'Expr', 'Expr'])]", "ExceptHandler -> [('type', 'NoneType'), ('name', 'NoneType'), ('body', ['ImportFrom', 'Assign'])]", "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['Assign', 'Assign', 'Print'])]", "ExceptHandler -> [('type', 'NoneType'), ('name', 'NoneType'), ('body', ['Assign', 'Assign', 'Print'])]", "ExceptHandler -> [('type', 'NoneType'), ('name', 'NoneType'), ('body', ['Assign', 'Assign', 'Assign', 'AugAssign'])]", "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['ImportFrom', 'Raise'])]", "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['TryExcept', 'Assign'])]", "ExceptHandler -> [('type', 'Name'), ('name', 'Name'), ('body', ['Print', 'Print', 'Print', 'Print', 'Print', 'Expr'])]", "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['Return', 'FunctionDef'])]", "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['Print', 'Assign'])]", "ExceptHandler -> [('type', 'Name'), ('name', 'Name'), ('body', ['Print', 'Assign'])]", "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['Import', 'Import'])]", "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['Expr', 'Assign'])]", "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['Expr', 'Expr', 'Return'])]", "ExceptHandler -> [('type', 'NoneType'), ('name', 'NoneType'), ('body', ['Assign', 'Expr', 'Return'])]", "ExceptHandler -> [('type', 'Attribute'), ('name', 'Name'), ('body', ['Print'])]", "ExceptHandler -> [('type', 'Tuple'), ('name', 'NoneType'), ('body', ['Assign', 'Assign'])]", "ExceptHandler -> [('type', 'NoneType'), ('name', 'NoneType'), ('body', ['TryExcept'])]", "ExceptHandler -> [('type', 'Attribute'), ('name', 'Name'), ('body', ['Expr', 'Expr'])]", "ExceptHandler -> [('type', 'Attribute'), ('name', 'NoneType'), ('body', ['Assign', 'Print'])]", "ExceptHandler -> [('type', 'Attribute'), ('name', 'NoneType'), ('body', ['Print'])]", "ExceptHandler -> [('type', 'NoneType'), ('name', 'NoneType'), ('body', ['Expr', 'Expr', 'Print', 'Break'])]", "ExceptHandler -> [('type', 'Name'), ('name', 'Name'), ('body', ['Print', 'Print', 'Continue'])]", "ExceptHandler -> [('type', 'Attribute'), ('name', 'NoneType'), ('body', ['Assign', 'Expr'])]", "ExceptHandler -> [('type', 'NoneType'), ('name', 'NoneType'), ('body', ['Expr', 'Expr', 'Expr', 'Return'])]", "ExceptHandler -> [('type', 'Name'), ('name', 'Name'), ('body', ['Pass'])]", "ExceptHandler -> [('type', 'Attribute'), ('name', 'Name'), ('body', ['Assign', 'If', 'Raise'])]", "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['ImportFrom', 'Assign'])]", "ExceptHandler -> [('type', 'Tuple'), ('name', 'Name'), ('body', ['Expr', 'Expr', 'Expr', 'AugAssign'])]", "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['Assign', 'Assign', 'If', 'Raise'])]", "ExceptHandler -> [('type', 'NoneType'), ('name', 'NoneType'), ('body', ['TryFinally'])]", "ExceptHandler -> [('type', 'NoneType'), ('name', 'NoneType'), ('body', ['Print', 'Raise'])]", "ExceptHandler -> [('type', 'Name'), ('name', 'Name'), ('body', ['Print', 'Raise'])]", "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['If', 'Break'])]", "ExceptHandler -> [('type', 'Name'), ('name', 'Name'), ('body', ['Print', 'Continue'])]", "ExceptHandler -> [('type', 'NoneType'), ('name', 'NoneType'), ('body', ['Raise', 'Pass'])]", "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['If', 'Continue'])]", "ExceptHandler -> [('type', 'Name'), ('name', 'Name'), ('body', ['Assign', 'Assign', 'Expr', 'Assign'])]", "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['If', 'Assign'])]", "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['If', 'Return'])]", "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['ClassDef', 'Assign'])]", "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['Assign', 'Assign', 'Expr', 'AugAssign', 'Assign'])]", "ExceptHandler -> [('type', 'Name'), ('name', 'Name'), ('body', ['Expr', 'TryExcept', 'Continue'])]", "ExceptHandler -> [('type', 'Name'), ('name', 'Name'), ('body', ['Expr', 'Assign', 'Assign', 'Assign'])]", "ExceptHandler -> [('type', 'NoneType'), ('name', 'NoneType'), ('body', ['ClassDef'])]", "ExceptHandler -> [('type', 'Attribute'), ('name', 'NoneType'), ('body', ['Assign', 'Assign'])]", "ExceptHandler -> [('type', 'Attribute'), ('name', 'NoneType'), ('body', ['TryExcept'])]", "ExceptHandler -> [('type', 'Attribute'), ('name', 'NoneType'), ('body', ['For'])]", "ExceptHandler -> [('type', 'NoneType'), ('name', 'NoneType'), ('body', ['Import', 'Assign'])]", "ExceptHandler -> [('type', 'NoneType'), ('name', 'NoneType'), ('body', ['Import', 'Print'])]", "ExceptHandler -> [('type', 'NoneType'), ('name', 'NoneType'), ('body', ['ImportFrom'])]", "ExceptHandler -> [('type', 'NoneType'), ('name', 'NoneType'), ('body', ['ImportFrom', 'Expr', 'Assign'])]", "ExceptHandler -> [('type', 'NoneType'), ('name', 'NoneType'), ('body', ['Assign', 'TryFinally'])]", "ExceptHandler -> [('type', 'Name'), ('name', 'Name'), ('body', ['Expr', 'Print'])]", "ExceptHandler -> [('type', 'NoneType'), ('name', 'NoneType'), ('body', ['Expr', 'Continue'])]", "ExceptHandler -> [('type', 'Name'), ('name', 'Name'), ('body', ['Assign', 'Expr', 'Raise'])]", "ExceptHandler -> [('type', 'Attribute'), ('name', 'NoneType'), ('body', ['Expr', 'Expr'])]", "ExceptHandler -> [('type', 'Tuple'), ('name', 'NoneType'), ('body', ['Print'])]", "ExceptHandler -> [('type', 'Attribute'), ('name', 'Tuple'), ('body', ['Print'])]", "ExceptHandler -> [('type', 'Attribute'), ('name', 'Tuple'), ('body', ['Import', 'If', 'Return'])]", "ExceptHandler -> [('type', 'Attribute'), ('name', 'Tuple'), ('body', ['Import', 'If', 'Break'])]", "ExceptHandler -> [('type', 'Tuple'), ('name', 'NoneType'), ('body', ['Expr', 'Return'])]", "ExceptHandler -> [('type', 'Attribute'), ('name', 'Name'), ('body', ['If', 'Raise'])]", "ExceptHandler -> [('type', 'Name'), ('name', 'Name'), ('body', ['If', 'Expr', 'Expr', 'Return'])]", "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['Assign', 'If'])]", "ExceptHandler -> [('type', 'Attribute'), ('name', 'NoneType'), ('body', ['Expr', 'Continue'])]", "ExceptHandler -> [('type', 'Attribute'), ('name', 'NoneType'), ('body', ['Expr', 'Return'])]", "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['Import', 'Expr', 'If', 'If', 'Return'])]", "ExceptHandler -> [('type', 'Attribute'), ('name', 'Name'), ('body', ['Print', 'Raise'])]", "ExceptHandler -> [('type', 'Name'), ('name', 'Name'), ('body', ['Assign', 'Expr', 'Expr'])]", "ExceptHandler -> [('type', 'NoneType'), ('name', 'NoneType'), ('body', ['Print', 'Print'])]", "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['Expr', 'Assign', 'Expr', 'Break'])]", "ExceptHandler -> [('type', 'Name'), ('name', 'Name'), ('body', ['Import', 'Expr', 'Break'])]", "ExceptHandler -> [('type', 'NoneType'), ('name', 'NoneType'), ('body', ['ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom'])]", "ExceptHandler -> [('type', 'Attribute'), ('name', 'Name'), ('body', ['Assign', 'Expr', 'Raise'])]", "ExceptHandler -> [('type', 'Name'), ('name', 'Name'), ('body', ['Expr', 'Expr', 'Expr'])]", "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['Import', 'ClassDef', 'ClassDef'])]", "ExceptHandler -> [('type', 'NoneType'), ('name', 'NoneType'), ('body', ['Print', 'Print', 'Print', 'Print', 'Raise'])]", "ExceptHandler -> [('type', 'Tuple'), ('name', 'NoneType'), ('body', ['Assign', 'Expr', 'Continue'])]", "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['Import', 'Assign', 'Assign', 'Expr', 'Expr'])]", "ExceptHandler -> [('type', 'NoneType'), ('name', 'NoneType'), ('body', ['Break'])]", "ExceptHandler -> [('type', 'Attribute'), ('name', 'NoneType'), ('body', ['AugAssign', 'If', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr'])]", "ExceptHandler -> [('type', 'NoneType'), ('name', 'NoneType'), ('body', ['If', 'Return'])]", "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['TryExcept', 'Return'])]", "ExceptHandler -> [('type', 'NoneType'), ('name', 'NoneType'), ('body', ['Continue'])]", "ExceptHandler -> [('type', 'Tuple'), ('name', 'Name'), ('body', ['If'])]", "ExceptHandler -> [('type', 'Tuple'), ('name', 'Name'), ('body', ['Expr', 'Assign'])]", "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['Import', 'Assign', 'TryExcept', 'If', 'Expr'])]", "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['For', 'Assign', 'For', 'If', 'Assign', 'For', 'If', 'Assign', 'Assign', 'For', 'Assign', 'ImportFrom'])]", "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['Assign', 'Expr', 'Assign', 'If'])]", "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['Assign', 'For', 'Return'])]", "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['Return', 'Assign'])]", "ExceptHandler -> [('type', 'NoneType'), ('name', 'NoneType'), ('body', ['Print', 'Expr', 'While'])]", "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['If', 'TryExcept'])]", "ExceptHandler -> [('type', 'Tuple'), ('name', 'NoneType'), ('body', ['TryExcept'])]", "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['If', 'Pass'])]", "ExceptHandler -> [('type', 'Tuple'), ('name', 'NoneType'), ('body', ['Assign', 'Expr', 'Return'])]", "ExceptHandler -> [('type', 'NoneType'), ('name', 'NoneType'), ('body', ['Import', 'Assign', 'Print', 'Expr', 'Expr', 'Assign'])]", "ExceptHandler -> [('type', 'Name'), ('name', 'Name'), ('body', ['Assert'])]", "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['Assign', 'Assign', 'Assign', 'Return'])]", "ExceptHandler -> [('type', 'Name'), ('name', 'Name'), ('body', ['Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'For', 'Expr'])]", "ExceptHandler -> [('type', 'Name'), ('name', 'Name'), ('body', ['For', 'If'])]", "ExceptHandler -> [('type', 'Attribute'), ('name', 'Name'), ('body', ['Expr', 'If'])]", "ExceptHandler -> [('type', 'Attribute'), ('name', 'NoneType'), ('body', ['Expr', 'Assign'])]", "ExceptHandler -> [('type', 'Attribute'), ('name', 'Name'), ('body', ['If', 'Expr', 'Return'])]", "ExceptHandler -> [('type', 'Tuple'), ('name', 'Name'), ('body', ['If', 'Expr'])]", "ExceptHandler -> [('type', 'Tuple'), ('name', 'Name'), ('body', ['If', 'If'])]", "ExceptHandler -> [('type', 'Tuple'), ('name', 'Name'), ('body', ['If', 'Expr', 'Assign'])]", "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['Assign', 'Expr', 'Expr', 'Expr'])]", "ExceptHandler -> [('type', 'Attribute'), ('name', 'NoneType'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr'])]", "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['Expr', 'Expr', 'Raise'])]", "ExceptHandler -> [('type', 'Tuple'), ('name', 'NoneType'), ('body', ['Expr', 'Assign', 'Return'])]", "ExceptHandler -> [('type', 'NoneType'), ('name', 'NoneType'), ('body', ['Print', 'Return'])]", "ExceptHandler -> [('type', 'Tuple'), ('name', 'Name'), ('body', ['Print', 'Return'])]", "ExceptHandler -> [('type', 'Name'), ('name', 'Name'), ('body', ['Assign', 'Expr'])]", "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['Assign', 'If', 'Continue'])]", "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['Assign', 'Expr', 'Continue'])]", "ExceptHandler -> [('type', 'NoneType'), ('name', 'NoneType'), ('body', ['If', 'Raise'])]", "ExceptHandler -> [('type', 'Name'), ('name', 'Tuple'), ('body', ['Assign', 'If'])]", "ExceptHandler -> [('type', 'Name'), ('name', 'Tuple'), ('body', ['If'])]", "ExceptHandler -> [('type', 'Tuple'), ('name', 'NoneType'), ('body', ['Return'])]", "ExceptHandler -> [('type', 'Name'), ('name', 'Name'), ('body', ['If', 'Expr'])]", "ExceptHandler -> [('type', 'Attribute'), ('name', 'NoneType'), ('body', ['AugAssign', 'Raise'])]", "ExceptHandler -> [('type', 'Attribute'), ('name', 'Name'), ('body', ['Print', 'Return'])]", "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr'])]", "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr'])]", "ExceptHandler -> [('type', 'Name'), ('name', 'Name'), ('body', ['Assign', 'Assign'])]", "ExceptHandler -> [('type', 'Name'), ('name', 'Name'), ('body', ['Print', 'Print', 'Raise'])]", "ExceptHandler -> [('type', 'Name'), ('name', 'Name'), ('body', ['Expr', 'If', 'If'])]", "ExceptHandler -> [('type', 'Tuple'), ('name', 'Name'), ('body', ['Assign', 'Raise'])]", "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['Assign', 'Expr', 'If', 'Expr'])]", "ExceptHandler -> [('type', 'Attribute'), ('name', 'NoneType'), ('body', ['Expr', 'Assign', 'Raise'])]", "ExceptHandler -> [('type', 'Name'), ('name', 'Name'), ('body', ['Expr', 'Assign', 'Raise'])]", "ExceptHandler -> [('type', 'Tuple'), ('name', 'NoneType'), ('body', ['If', 'Return'])]", "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['Import', 'Expr', 'Raise'])]", "ExceptHandler -> [('type', 'Attribute'), ('name', 'NoneType'), ('body', ['Assign', 'Assign', 'If', 'Expr', 'Import', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'For'])]", "ExceptHandler -> [('type', 'Tuple'), ('name', 'NoneType'), ('body', ['If'])]", "ExceptHandler -> [('type', 'Name'), ('name', 'Name'), ('body', ['Print', 'Assign', 'Expr'])]", "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['Import', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign'])]", "ExceptHandler -> [('type', 'Tuple'), ('name', 'Name'), ('body', ['Expr', 'Expr', 'Expr'])]", "ExceptHandler -> [('type', 'Attribute'), ('name', 'NoneType'), ('body', ['Expr', 'Assign', 'Expr'])]", "ExceptHandler -> [('type', 'Attribute'), ('name', 'NoneType'), ('body', ['Expr', 'Expr', 'Expr', 'Expr', 'Continue'])]", "ExceptHandler -> [('type', 'NoneType'), ('name', 'NoneType'), ('body', ['Assign', 'Expr', 'Expr', 'TryExcept'])]", "ExceptHandler -> [('type', 'NoneType'), ('name', 'NoneType'), ('body', ['Print', 'Print', 'Expr'])]", "ExceptHandler -> [('type', 'NoneType'), ('name', 'NoneType'), ('body', ['Expr', 'If'])]", "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Return'])]", "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['Assign', 'Assign', 'Return'])]", "ExceptHandler -> [('type', 'Name'), ('name', 'Name'), ('body', ['Assign', 'If', 'Assign', 'Return'])]", "ExceptHandler -> [('type', 'Name'), ('name', 'Name'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Return'])]", "ExceptHandler -> [('type', 'Name'), ('name', 'Name'), ('body', ['Assign', 'Assign', 'Expr', 'Return'])]", "ExceptHandler -> [('type', 'NoneType'), ('name', 'NoneType'), ('body', ['Expr', 'Expr', 'Return'])]", "ExceptHandler -> [('type', 'Attribute'), ('name', 'Name'), ('body', ['If', 'Assign'])]", "ExceptHandler -> [('type', 'Tuple'), ('name', 'Name'), ('body', ['Assign', 'TryExcept', 'If'])]", "ExceptHandler -> [('type', 'Tuple'), ('name', 'Name'), ('body', ['TryExcept', 'If'])]", "ExceptHandler -> [('type', 'Name'), ('name', 'Name'), ('body', ['Expr', 'Expr', 'Expr', 'Return'])]", "ExceptHandler -> [('type', 'Name'), ('name', 'Name'), ('body', ['Assign', 'Assign', 'If', 'Raise'])]", "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Assign', 'TryFinally', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign'])]", "ExceptHandler -> [('type', 'Name'), ('name', 'Name'), ('body', ['Import', 'Raise'])]", "ExceptHandler -> [('type', 'Name'), ('name', 'Name'), ('body', ['If', 'TryExcept', 'Assign', 'Assign'])]", "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['Assign', 'Expr'])]", "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['Expr', 'Expr', 'Continue'])]", "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['Assign', 'Assign', 'Assign', 'Assign'])]", "ExceptHandler -> [('type', 'NoneType'), ('name', 'NoneType'), ('body', ['Expr', 'Assign', 'For'])]", "ExceptHandler -> [('type', 'NoneType'), ('name', 'NoneType'), ('body', ['Expr', 'Assign'])]", "ExceptHandler -> [('type', 'Name'), ('name', 'Name'), ('body', ['AugAssign', 'AugAssign'])]", "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['AugAssign', 'Continue'])]", "ExceptHandler -> [('type', 'Tuple'), ('name', 'NoneType'), ('body', ['AugAssign', 'Continue'])]", "ExceptHandler -> [('type', 'Attribute'), ('name', 'Tuple'), ('body', ['Expr', 'Assign', 'Expr'])]", "ExceptHandler -> [('type', 'Tuple'), ('name', 'NoneType'), ('body', ['Continue'])]", "ExceptHandler -> [('type', 'Tuple'), ('name', 'Name'), ('body', ['Expr', 'Raise'])]", "ExceptHandler -> [('type', 'Name'), ('name', 'Name'), ('body', ['FunctionDef', 'Assign', 'Expr', 'Expr', 'Expr'])]", "ExceptHandler -> [('type', 'Name'), ('name', 'Name'), ('body', ['Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr'])]", "ExceptHandler -> [('type', 'NoneType'), ('name', 'NoneType'), ('body', ['ImportFrom', 'FunctionDef'])]", "ExceptHandler -> [('type', 'NoneType'), ('name', 'NoneType'), ('body', ['Delete'])]", "ExceptHandler -> [('type', 'Attribute'), ('name', 'Name'), ('body', ['Expr', 'Return'])]", "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['Assign', 'Print'])]", "ExceptHandler -> [('type', 'Name'), ('name', 'Name'), ('body', ['Import', 'Expr'])]", "ExceptHandler -> [('type', 'Tuple'), ('name', 'NoneType'), ('body', ['If', 'Assign'])]", "ExceptHandler -> [('type', 'Name'), ('name', 'Name'), ('body', ['Assign', 'Continue'])]", "ExceptHandler -> [('type', 'Name'), ('name', 'NoneType'), ('body', ['Assign', 'Expr', 'Expr'])]", "ExceptHandler -> [('type', 'NoneType'), ('name', 'NoneType'), ('body', ['Assign', 'Return'])]", "ExceptHandler -> [('type', 'NoneType'), ('name', 'NoneType'), ('body', ['Print', 'Print', 'Break'])]", "ExceptHandler -> [('type', 'Attribute'), ('name', 'Name'), ('body', ['Print', 'AugAssign', 'Continue'])]", "ExceptHandler -> [('type', 'Attribute'), ('name', 'Name'), ('body', ['Assign', 'Assign', 'Expr', 'Expr'])]", "ExceptHandler -> [('type', 'NoneType'), ('name', 'NoneType'), ('body', ['AugAssign'])]", "ExceptHandler -> [('type', 'Name'), ('name', 'Name'), ('body', ['Expr', 'TryExcept', 'Return'])]", "ExceptHandler -> [('type', 'Attribute'), ('name', 'NoneType'), ('body', ['Assign', 'AugAssign'])]", "ExceptHandler -> [('type', 'Name'), ('name', 'Name'), ('body', ['Delete', 'Expr'])]", "ExceptHandler -> [('type', 'NoneType'), ('name', 'NoneType'), ('body', ['Import', 'Expr'])]", "ExceptHandler -> [('type', 'NoneType'), ('name', 'NoneType'), ('body', ['Print', 'Continue'])]", "ExceptHandler -> [('type', 'NoneType'), ('name', 'NoneType'), ('body', ['Expr', 'Print', 'Continue'])]", "ExceptHandler -> [('type', 'Tuple'), ('name', 'NoneType'), ('body', ['Print', 'Expr'])]"], "Pow": ["Pow -> <NULL>"], "ImportFrom": ["ImportFrom -> [('module', 'str'), ('names', ['alias']), ('level', 'int')]", "ImportFrom -> [('module', 'str'), ('names', ['alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias']), ('level', 'int')]", "ImportFrom -> [('module', 'str'), ('names', ['alias', 'alias', 'alias']), ('level', 'int')]", "ImportFrom -> [('module', 'str'), ('names', ['alias', 'alias', 'alias', 'alias', 'alias', 'alias']), ('level', 'int')]", "ImportFrom -> [('module', 'str'), ('names', ['alias', 'alias', 'alias', 'alias']), ('level', 'int')]", "ImportFrom -> [('module', 'str'), ('names', ['alias', 'alias']), ('level', 'int')]", "ImportFrom -> [('module', 'NoneType'), ('names', ['alias']), ('level', 'int')]", "ImportFrom -> [('module', 'str'), ('names', ['alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias']), ('level', 'int')]", "ImportFrom -> [('module', 'str'), ('names', ['alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias']), ('level', 'int')]", "ImportFrom -> [('module', 'str'), ('names', ['alias', 'alias', 'alias', 'alias', 'alias']), ('level', 'int')]", "ImportFrom -> [('module', 'str'), ('names', ['alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias']), ('level', 'int')]", "ImportFrom -> [('module', 'str'), ('names', ['alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias']), ('level', 'int')]", "ImportFrom -> [('module', 'str'), ('names', ['alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias']), ('level', 'int')]", "ImportFrom -> [('module', 'str'), ('names', ['alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias']), ('level', 'int')]", "ImportFrom -> [('module', 'NoneType'), ('names', ['alias', 'alias']), ('level', 'int')]", "ImportFrom -> [('module', 'str'), ('names', ['alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias']), ('level', 'int')]", "ImportFrom -> [('module', 'NoneType'), ('names', ['alias', 'alias', 'alias']), ('level', 'int')]", "ImportFrom -> [('module', 'str'), ('names', ['alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias']), ('level', 'int')]", "ImportFrom -> [('module', 'str'), ('names', ['alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias']), ('level', 'int')]", "ImportFrom -> [('module', 'str'), ('names', ['alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias']), ('level', 'int')]", "ImportFrom -> [('module', 'str'), ('names', ['alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias', 'alias']), ('level', 'int')]"], "TryFinally": ["TryFinally -> [('body', ['TryExcept']), ('finalbody', ['Expr', 'Expr', 'If'])]", "TryFinally -> [('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'If', 'Expr']), ('finalbody', ['Assign', 'Expr'])]", "TryFinally -> [('body', ['For']), ('finalbody', ['Expr', 'Expr'])]", "TryFinally -> [('body', ['Assign', 'For']), ('finalbody', ['Expr', 'Expr'])]", "TryFinally -> [('body', ['Return']), ('finalbody', ['Expr'])]", "TryFinally -> [('body', ['If', 'Expr', 'While', 'Expr']), ('finalbody', ['If'])]", "TryFinally -> [('body', ['Assign']), ('finalbody', ['Expr'])]", "TryFinally -> [('body', ['If', 'Assign', 'Expr', 'Expr']), ('finalbody', ['If'])]", "TryFinally -> [('body', ['Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'AugAssign', 'Expr', 'For', 'Expr', 'Return']), ('finalbody', ['Expr', 'Expr'])]", "TryFinally -> [('body', ['TryExcept']), ('finalbody', ['Expr'])]", "TryFinally -> [('body', ['Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'If', 'If', 'Expr']), ('finalbody', ['Expr'])]", "TryFinally -> [('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'If', 'Return']), ('finalbody', ['Expr'])]", "TryFinally -> [('body', ['Expr', 'Expr', 'Assign', 'Assign', 'Expr']), ('finalbody', ['Expr', 'TryExcept'])]", "TryFinally -> [('body', ['Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr']), ('finalbody', ['Expr', 'Expr'])]", "TryFinally -> [('body', ['Expr', 'TryExcept']), ('finalbody', ['Expr', 'Expr'])]", "TryFinally -> [('body', ['Assign', 'For', 'Expr']), ('finalbody', ['Expr'])]", "TryFinally -> [('body', ['TryExcept', 'Expr']), ('finalbody', ['If', 'Expr'])]", "TryFinally -> [('body', ['Assign', 'Expr', 'Assign']), ('finalbody', ['Delete'])]", "TryFinally -> [('body', ['Expr']), ('finalbody', ['Expr'])]", "TryFinally -> [('body', ['If', 'Assign', 'Assign', 'If', 'Expr', 'Return']), ('finalbody', ['Expr'])]", "TryFinally -> [('body', ['If', 'Assign', 'Assign', 'While', 'If', 'Assign', 'Assign', 'Assign', 'While', 'If', 'While', 'Expr', 'Assign', 'Assign', 'For', 'Expr', 'Assign', 'If', 'Assign', 'Expr', 'If', 'Return']), ('finalbody', ['Expr', 'Expr'])]", "TryFinally -> [('body', ['TryExcept']), ('finalbody', ['Assign'])]", "TryFinally -> [('body', ['Expr', 'Expr', 'Expr']), ('finalbody', ['Expr'])]", "TryFinally -> [('body', ['Return']), ('finalbody', ['Expr', 'Expr'])]", "TryFinally -> [('body', ['Assign', 'Assign', 'For', 'Expr', 'Expr']), ('finalbody', ['If'])]", "TryFinally -> [('body', ['Expr', 'Expr']), ('finalbody', ['Expr', 'Expr'])]", "TryFinally -> [('body', ['Expr', 'Expr']), ('finalbody', ['Expr', 'If'])]", "TryFinally -> [('body', ['Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'If', 'Expr', 'Assign', 'For']), ('finalbody', ['Expr', 'Expr'])]", "TryFinally -> [('body', ['Expr', 'Expr', 'If', 'Assign', 'Expr', 'Assign', 'Assert', 'Assign', 'Assign', 'If']), ('finalbody', ['Expr'])]", "TryFinally -> [('body', ['Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'If', 'If', 'Expr']), ('finalbody', ['Expr'])]", "TryFinally -> [('body', ['TryExcept']), ('finalbody', ['Assign', 'Expr'])]", "TryFinally -> [('body', ['TryExcept']), ('finalbody', ['Expr', 'If'])]", "TryFinally -> [('body', ['Expr', 'Expr']), ('finalbody', ['Expr'])]", "TryFinally -> [('body', ['If', 'Expr']), ('finalbody', ['AugAssign'])]", "TryFinally -> [('body', ['Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'TryExcept', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('finalbody', ['Expr', 'Assign', 'Assign'])]", "TryFinally -> [('body', ['Expr', 'If']), ('finalbody', ['Expr'])]", "TryFinally -> [('body', ['For']), ('finalbody', ['Expr'])]", "TryFinally -> [('body', ['Expr', 'For']), ('finalbody', ['Expr', 'Expr'])]", "TryFinally -> [('body', ['TryExcept', 'Expr']), ('finalbody', ['Expr'])]", "TryFinally -> [('body', ['Assign', 'Expr', 'Assign', 'Print', 'If', 'Expr']), ('finalbody', ['Expr'])]", "TryFinally -> [('body', ['Assign', 'Assign', 'Expr', 'Assign', 'If', 'Print']), ('finalbody', ['Expr'])]", "TryFinally -> [('body', ['TryFinally', 'Assign', 'TryFinally', 'Assign', 'Assign']), ('finalbody', ['Expr'])]", "TryFinally -> [('body', ['Assign', 'Assign', 'Assign']), ('finalbody', ['Expr'])]", "TryFinally -> [('body', ['Assign', 'TryFinally', 'Expr']), ('finalbody', ['Expr'])]", "TryFinally -> [('body', ['Assign', 'If', 'If']), ('finalbody', ['Expr'])]", "TryFinally -> [('body', ['Assign', 'Assign', 'Assign', 'If']), ('finalbody', ['Expr'])]", "TryFinally -> [('body', ['Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('finalbody', ['Expr'])]", "TryFinally -> [('body', ['Expr', 'With', 'With']), ('finalbody', ['Expr'])]", "TryFinally -> [('body', ['Assign', 'For', 'With']), ('finalbody', ['Expr'])]", "TryFinally -> [('body', ['Expr', 'With']), ('finalbody', ['Expr'])]", "TryFinally -> [('body', ['For']), ('finalbody', ['Expr', 'Expr', 'Expr'])]", "TryFinally -> [('body', ['Assign', 'Assign', 'Expr']), ('finalbody', ['Delete'])]", "TryFinally -> [('body', ['Assign', 'If']), ('finalbody', ['AugAssign'])]", "TryFinally -> [('body', ['Assign', 'Expr', 'Expr', 'Expr', 'Expr']), ('finalbody', ['Expr'])]", "TryFinally -> [('body', ['TryExcept']), ('finalbody', ['If'])]", "TryFinally -> [('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr']), ('finalbody', ['Assign'])]", "TryFinally -> [('body', ['Assign', 'Assign', 'Assign']), ('finalbody', ['Expr', 'Expr', 'Expr'])]", "TryFinally -> [('body', ['TryExcept', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'FunctionDef', 'Assign', 'If', 'Return']), ('finalbody', ['Expr', 'Expr'])]", "TryFinally -> [('body', ['Assign', 'Expr']), ('finalbody', ['Assign'])]", "TryFinally -> [('body', ['Assign', 'Assign', 'Expr']), ('finalbody', ['Assign', 'Assign'])]", "TryFinally -> [('body', ['With', 'Assign', 'Expr']), ('finalbody', ['Expr'])]", "TryFinally -> [('body', ['Assign', 'Assign', 'Expr']), ('finalbody', ['Expr', 'Expr'])]", "TryFinally -> [('body', ['Assign', 'Expr']), ('finalbody', ['With', 'Expr', 'Expr'])]", "TryFinally -> [('body', ['Assign', 'Expr', 'Assign', 'Expr']), ('finalbody', ['Expr', 'Expr'])]", "TryFinally -> [('body', ['For']), ('finalbody', ['If'])]", "TryFinally -> [('body', ['Expr']), ('finalbody', ['Delete'])]", "TryFinally -> [('body', ['For']), ('finalbody', ['Expr', 'If'])]", "TryFinally -> [('body', ['TryExcept']), ('finalbody', ['Expr', 'Print', 'Print', 'Print'])]", "TryFinally -> [('body', ['Return']), ('finalbody', ['Assign', 'Assign', 'Assign', 'If', 'Assign', 'TryExcept', 'Assign', 'Assign', 'TryExcept', 'Delete', 'Assign', 'Assign', 'If', 'Assign', 'If', 'Expr'])]", "TryFinally -> [('body', ['Assign', 'While']), ('finalbody', ['Expr'])]", "TryFinally -> [('body', ['Expr', 'Exec']), ('finalbody', ['Assign'])]", "TryFinally -> [('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('finalbody', ['Expr'])]", "TryFinally -> [('body', ['Assign', 'Assign', 'For']), ('finalbody', ['Expr'])]", "TryFinally -> [('body', ['Assign', 'For']), ('finalbody', ['Expr'])]", "TryFinally -> [('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'If', 'If']), ('finalbody', ['Delete'])]", "TryFinally -> [('body', ['Assign', 'Assign']), ('finalbody', ['Expr'])]", "TryFinally -> [('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr']), ('finalbody', ['Assign'])]", "TryFinally -> [('body', ['Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr']), ('finalbody', ['Expr', 'Expr'])]", "TryFinally -> [('body', ['Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr']), ('finalbody', ['Expr', 'Expr'])]", "TryFinally -> [('body', ['Assign', 'Assign', 'Expr', 'Assign', 'Expr']), ('finalbody', ['Assign'])]", "TryFinally -> [('body', ['Assign', 'Expr', 'Expr', 'Expr']), ('finalbody', ['Expr'])]", "TryFinally -> [('body', ['Assign', 'Expr', 'Assign', 'TryExcept']), ('finalbody', ['Expr'])]", "TryFinally -> [('body', ['Assign']), ('finalbody', ['Assign'])]", "TryFinally -> [('body', ['For']), ('finalbody', ['While', 'Expr'])]", "TryFinally -> [('body', ['If', 'Assign', 'Assign']), ('finalbody', ['If', 'If', 'Assign'])]", "TryFinally -> [('body', ['Expr']), ('finalbody', ['Expr', 'Expr'])]", "TryFinally -> [('body', ['Assign', 'If', 'Assign', 'If']), ('finalbody', ['Assign'])]", "TryFinally -> [('body', ['Assign', 'Assign', 'Assign', 'If', 'Expr']), ('finalbody', ['AugAssign'])]", "TryFinally -> [('body', ['Assign', 'If', 'Expr', 'AugAssign', 'TryFinally', 'If', 'Assign', 'Assign', 'For', 'Expr', 'Assign', 'Assign', 'For', 'Expr', 'Assign', 'Expr', 'Expr']), ('finalbody', ['If', 'Expr'])]", "TryFinally -> [('body', ['Expr']), ('finalbody', ['AugAssign'])]", "TryFinally -> [('body', ['Assign', 'If', 'If', 'If']), ('finalbody', ['AugAssign'])]", "TryFinally -> [('body', ['For']), ('finalbody', ['AugAssign'])]", "TryFinally -> [('body', ['If', 'If', 'If']), ('finalbody', ['AugAssign'])]", "TryFinally -> [('body', ['For', 'TryExcept']), ('finalbody', ['Pass'])]", "TryFinally -> [('body', ['Expr']), ('finalbody', ['If'])]", "TryFinally -> [('body', ['Assign', 'Assign', 'Expr', 'Assign', 'Expr']), ('finalbody', ['Expr', 'Assign'])]", "TryFinally -> [('body', ['If', 'Expr']), ('finalbody', ['Expr'])]", "TryFinally -> [('body', ['Assign', 'Expr']), ('finalbody', ['Expr'])]", "TryFinally -> [('body', ['Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'TryExcept', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr']), ('finalbody', ['Expr', 'Expr'])]", "TryFinally -> [('body', ['TryFinally', 'Expr', 'ImportFrom', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('finalbody', ['Expr', 'Assign', 'Assign'])]", "TryFinally -> [('body', ['Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr']), ('finalbody', ['If'])]", "TryFinally -> [('body', ['Assign', 'If']), ('finalbody', ['Expr'])]", "TryFinally -> [('body', ['TryExcept', 'Assign', 'If']), ('finalbody', ['Expr', 'Expr'])]", "TryFinally -> [('body', ['Assign', 'Expr', 'Assign', 'While', 'Return']), ('finalbody', ['Expr'])]", "TryFinally -> [('body', ['Expr', 'Return']), ('finalbody', ['Expr'])]", "TryFinally -> [('body', ['Assign', 'Assign', 'Expr', 'Assign', 'ClassDef', 'FunctionDef', 'Expr']), ('finalbody', ['Expr'])]", "TryFinally -> [('body', ['Assign', 'Expr', 'Expr', 'Assign', 'Expr']), ('finalbody', ['Expr'])]", "TryFinally -> [('body', ['Expr', 'Assign', 'Expr', 'Assign', 'Expr']), ('finalbody', ['Expr'])]", "TryFinally -> [('body', ['For', 'Return']), ('finalbody', ['Assign'])]", "TryFinally -> [('body', ['Expr']), ('finalbody', ['For', 'If'])]", "TryFinally -> [('body', ['Expr']), ('finalbody', ['If', 'For'])]", "TryFinally -> [('body', ['Return']), ('finalbody', ['Expr', 'If', 'Expr', 'Expr'])]", "TryFinally -> [('body', ['Pass']), ('finalbody', ['Expr'])]", "TryFinally -> [('body', ['If', 'Assign', 'Expr']), ('finalbody', ['Expr'])]"], "GeneratorExp": ["GeneratorExp -> [('elt', 'Attribute'), ('generators', ['comprehension'])]", "GeneratorExp -> [('elt', 'Tuple'), ('generators', ['comprehension'])]", "GeneratorExp -> [('elt', 'Call'), ('generators', ['comprehension'])]", "GeneratorExp -> [('elt', 'BinOp'), ('generators', ['comprehension'])]", "GeneratorExp -> [('elt', 'Name'), ('generators', ['comprehension'])]", "GeneratorExp -> [('elt', 'Compare'), ('generators', ['comprehension'])]", "GeneratorExp -> [('elt', 'Subscript'), ('generators', ['comprehension'])]", "GeneratorExp -> [('elt', 'Num'), ('generators', ['comprehension'])]"], "Not": ["Not -> <NULL>"], "UAdd": ["UAdd -> <NULL>"], "Lambda": ["Lambda -> [('args', 'arguments'), ('body', 'Name')]", "Lambda -> [('args', 'arguments'), ('body', 'Call')]", "Lambda -> [('args', 'arguments'), ('body', 'Attribute')]", "Lambda -> [('args', 'arguments'), ('body', 'Tuple')]", "Lambda -> [('args', 'arguments'), ('body', 'Compare')]", "Lambda -> [('args', 'arguments'), ('body', 'BoolOp')]", "Lambda -> [('args', 'arguments'), ('body', 'BinOp')]", "Lambda -> [('args', 'arguments'), ('body', 'List')]", "Lambda -> [('args', 'arguments'), ('body', 'UnaryOp')]", "Lambda -> [('args', 'arguments'), ('body', 'Num')]", "Lambda -> [('args', 'arguments'), ('body', 'Subscript')]", "Lambda -> [('args', 'arguments'), ('body', 'Str')]", "Lambda -> [('args', 'arguments'), ('body', 'ListComp')]", "Lambda -> [('args', 'arguments'), ('body', 'Dict')]", "Lambda -> [('args', 'arguments'), ('body', 'IfExp')]"], "With": ["With -> [('context_expr', 'Call'), ('optional_vars', 'NoneType'), ('body', ['Expr', 'ImportFrom'])]", "With -> [('context_expr', 'Call'), ('optional_vars', 'NoneType'), ('body', ['Return'])]", "With -> [('context_expr', 'Call'), ('optional_vars', 'Name'), ('body', ['Expr', 'ImportFrom', 'Assert'])]", "With -> [('context_expr', 'Call'), ('optional_vars', 'Name'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr'])]", "With -> [('context_expr', 'Call'), ('optional_vars', 'Name'), ('body', ['TryExcept', 'Assign', 'If'])]", "With -> [('context_expr', 'Call'), ('optional_vars', 'Name'), ('body', ['For'])]", "With -> [('context_expr', 'Call'), ('optional_vars', 'NoneType'), ('body', ['Expr'])]", "With -> [('context_expr', 'Call'), ('optional_vars', 'Name'), ('body', ['Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'For', 'For'])]", "With -> [('context_expr', 'Name'), ('optional_vars', 'NoneType'), ('body', ['Assign', 'Expr', 'Assign'])]", "With -> [('context_expr', 'Call'), ('optional_vars', 'Name'), ('body', ['Expr'])]", "With -> [('context_expr', 'Call'), ('optional_vars', 'NoneType'), ('body', ['For'])]", "With -> [('context_expr', 'Call'), ('optional_vars', 'Name'), ('body', ['Assign', 'If', 'Expr', 'Break'])]", "With -> [('context_expr', 'Call'), ('optional_vars', 'NoneType'), ('body', ['Expr', 'Assign', 'Expr'])]", "With -> [('context_expr', 'Attribute'), ('optional_vars', 'NoneType'), ('body', ['Assert'])]", "With -> [('context_expr', 'Call'), ('optional_vars', 'NoneType'), ('body', ['Expr', 'Return'])]", "With -> [('context_expr', 'Call'), ('optional_vars', 'Name'), ('body', ['Assign'])]", "With -> [('context_expr', 'Call'), ('optional_vars', 'Name'), ('body', ['Assign', 'Return'])]", "With -> [('context_expr', 'Call'), ('optional_vars', 'NoneType'), ('body', ['If', 'Assign', 'Expr', 'Return'])]", "With -> [('context_expr', 'Call'), ('optional_vars', 'Name'), ('body', ['Assign', 'Assert', 'Assign', 'Assert'])]", "With -> [('context_expr', 'Call'), ('optional_vars', 'Name'), ('body', ['Assign', 'If', 'If', 'If'])]", "With -> [('context_expr', 'Call'), ('optional_vars', 'Name'), ('body', ['With'])]", "With -> [('context_expr', 'Call'), ('optional_vars', 'Name'), ('body', ['Print', 'Expr', 'Expr', 'Expr', 'Assign'])]", "With -> [('context_expr', 'Call'), ('optional_vars', 'Name'), ('body', ['Expr', 'Expr', 'Assign'])]", "With -> [('context_expr', 'Call'), ('optional_vars', 'NoneType'), ('body', ['Assign', 'Expr', 'Assign', 'Expr'])]", "With -> [('context_expr', 'Name'), ('optional_vars', 'Name'), ('body', ['Return'])]", "With -> [('context_expr', 'Name'), ('optional_vars', 'Name'), ('body', ['TryExcept', 'Assign', 'If', 'Expr'])]", "With -> [('context_expr', 'Call'), ('optional_vars', 'NoneType'), ('body', ['ImportFrom'])]", "With -> [('context_expr', 'Call'), ('optional_vars', 'Name'), ('body', ['Expr', 'Assign', 'Expr'])]", "With -> [('context_expr', 'Call'), ('optional_vars', 'Name'), ('body', ['Print', 'Expr', 'Expr', 'Expr', 'Expr'])]", "With -> [('context_expr', 'Call'), ('optional_vars', 'Name'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'While', 'If'])]", "With -> [('context_expr', 'Call'), ('optional_vars', 'Name'), ('body', ['Expr', 'AugAssign', 'Expr', 'If'])]", "With -> [('context_expr', 'Call'), ('optional_vars', 'Name'), ('body', ['Assign', 'Assign', 'For'])]", "With -> [('context_expr', 'Call'), ('optional_vars', 'Name'), ('body', ['Assign', 'Assign', 'If'])]", "With -> [('context_expr', 'Call'), ('optional_vars', 'Name'), ('body', ['Return'])]", "With -> [('context_expr', 'Call'), ('optional_vars', 'NoneType'), ('body', ['TryExcept', 'Expr'])]", "With -> [('context_expr', 'Call'), ('optional_vars', 'NoneType'), ('body', ['Expr', 'Expr'])]", "With -> [('context_expr', 'Call'), ('optional_vars', 'Name'), ('body', ['Assign', 'Expr'])]", "With -> [('context_expr', 'Attribute'), ('optional_vars', 'NoneType'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr'])]", "With -> [('context_expr', 'Call'), ('optional_vars', 'NoneType'), ('body', ['Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr'])]", "With -> [('context_expr', 'Call'), ('optional_vars', 'NoneType'), ('body', ['Assign', 'Assign', 'Expr'])]", "With -> [('context_expr', 'Call'), ('optional_vars', 'NoneType'), ('body', ['Assign', 'Expr'])]", "With -> [('context_expr', 'Attribute'), ('optional_vars', 'NoneType'), ('body', ['Expr', 'Assign'])]", "With -> [('context_expr', 'Attribute'), ('optional_vars', 'NoneType'), ('body', ['Expr', 'Return'])]", "With -> [('context_expr', 'Attribute'), ('optional_vars', 'NoneType'), ('body', ['Expr', 'Expr'])]", "With -> [('context_expr', 'Call'), ('optional_vars', 'Name'), ('body', ['Assign', 'Assign', 'Assign'])]", "With -> [('context_expr', 'Call'), ('optional_vars', 'Name'), ('body', ['Assign', 'With', 'For', 'Expr'])]", "With -> [('context_expr', 'Call'), ('optional_vars', 'Name'), ('body', ['Assign', 'Assign', 'Assign', 'With', 'For', 'Expr'])]", "With -> [('context_expr', 'Subscript'), ('optional_vars', 'NoneType'), ('body', ['Assign', 'If', 'If', 'ImportFrom', 'Expr', 'Return'])]", "With -> [('context_expr', 'Attribute'), ('optional_vars', 'Name'), ('body', ['Expr', 'For'])]", "With -> [('context_expr', 'Attribute'), ('optional_vars', 'Name'), ('body', ['Assign', 'Expr', 'Return'])]", "With -> [('context_expr', 'Attribute'), ('optional_vars', 'Name'), ('body', ['Expr'])]", "With -> [('context_expr', 'Call'), ('optional_vars', 'NoneType'), ('body', ['Expr', 'Expr', 'Return'])]", "With -> [('context_expr', 'Call'), ('optional_vars', 'Name'), ('body', ['Assign', 'Assign'])]", "With -> [('context_expr', 'Call'), ('optional_vars', 'Name'), ('body', ['Expr', 'Assign'])]", "With -> [('context_expr', 'Call'), ('optional_vars', 'NoneType'), ('body', ['Assign'])]", "With -> [('context_expr', 'Call'), ('optional_vars', 'NoneType'), ('body', ['Assign', 'Assign', 'For', 'Expr'])]", "With -> [('context_expr', 'Call'), ('optional_vars', 'Name'), ('body', ['Assign', 'Expr', 'Expr'])]", "With -> [('context_expr', 'Call'), ('optional_vars', 'Name'), ('body', ['If'])]", "With -> [('context_expr', 'Call'), ('optional_vars', 'NoneType'), ('body', ['If', 'If', 'For'])]", "With -> [('context_expr', 'Call'), ('optional_vars', 'Name'), ('body', ['For', 'Expr'])]", "With -> [('context_expr', 'Call'), ('optional_vars', 'Name'), ('body', ['Assign', 'TryExcept'])]", "With -> [('context_expr', 'Call'), ('optional_vars', 'NoneType'), ('body', ['Assign', 'Expr', 'TryExcept', 'Expr', 'Expr'])]", "With -> [('context_expr', 'Call'), ('optional_vars', 'Name'), ('body', ['Assign', 'If'])]", "With -> [('context_expr', 'Call'), ('optional_vars', 'Name'), ('body', ['Expr', 'Expr'])]", "With -> [('context_expr', 'Call'), ('optional_vars', 'NoneType'), ('body', ['With'])]", "With -> [('context_expr', 'Call'), ('optional_vars', 'Name'), ('body', ['Assign', 'If', 'AugAssign'])]", "With -> [('context_expr', 'Call'), ('optional_vars', 'NoneType'), ('body', ['Assign', 'If'])]", "With -> [('context_expr', 'Call'), ('optional_vars', 'NoneType'), ('body', ['If'])]", "With -> [('context_expr', 'Call'), ('optional_vars', 'NoneType'), ('body', ['If', 'Expr', 'Assign', 'Expr'])]", "With -> [('context_expr', 'Call'), ('optional_vars', 'NoneType'), ('body', ['Assign', 'Assign', 'If'])]", "With -> [('context_expr', 'Call'), ('optional_vars', 'NoneType'), ('body', ['If', 'Expr', 'Expr', 'Expr', 'If'])]", "With -> [('context_expr', 'Call'), ('optional_vars', 'NoneType'), ('body', ['Expr', 'Expr', 'Assign', 'Expr', 'With', 'Expr', 'Expr', 'Expr'])]", "With -> [('context_expr', 'Call'), ('optional_vars', 'NoneType'), ('body', ['With', 'With', 'Expr'])]"], "IfExp": ["IfExp -> [('test', 'Name'), ('body', 'ListComp'), ('orelse', 'List')]", "IfExp -> [('test', 'Name'), ('body', 'Call'), ('orelse', 'Str')]", "IfExp -> [('test', 'Attribute'), ('body', 'Str'), ('orelse', 'Str')]", "IfExp -> [('test', 'Compare'), ('body', 'Name'), ('orelse', 'Name')]", "IfExp -> [('test', 'Compare'), ('body', 'Str'), ('orelse', 'Str')]", "IfExp -> [('test', 'Call'), ('body', 'Str'), ('orelse', 'Str')]", "IfExp -> [('test', 'UnaryOp'), ('body', 'List'), ('orelse', 'Name')]", "IfExp -> [('test', 'Compare'), ('body', 'Name'), ('orelse', 'Call')]", "IfExp -> [('test', 'Compare'), ('body', 'Name'), ('orelse', 'Num')]", "IfExp -> [('test', 'Compare'), ('body', 'BinOp'), ('orelse', 'Name')]", "IfExp -> [('test', 'Compare'), ('body', 'Attribute'), ('orelse', 'Attribute')]", "IfExp -> [('test', 'Name'), ('body', 'Attribute'), ('orelse', 'Str')]", "IfExp -> [('test', 'Attribute'), ('body', 'Attribute'), ('orelse', 'Str')]", "IfExp -> [('test', 'Attribute'), ('body', 'Subscript'), ('orelse', 'Name')]", "IfExp -> [('test', 'Compare'), ('body', 'BinOp'), ('orelse', 'Str')]", "IfExp -> [('test', 'Name'), ('body', 'Call'), ('orelse', 'Tuple')]", "IfExp -> [('test', 'Name'), ('body', 'List'), ('orelse', 'List')]", "IfExp -> [('test', 'Compare'), ('body', 'Call'), ('orelse', 'Name')]", "IfExp -> [('test', 'Attribute'), ('body', 'Call'), ('orelse', 'List')]", "IfExp -> [('test', 'Compare'), ('body', 'Subscript'), ('orelse', 'Str')]", "IfExp -> [('test', 'Compare'), ('body', 'Compare'), ('orelse', 'Name')]", "IfExp -> [('test', 'Attribute'), ('body', 'Call'), ('orelse', 'Str')]", "IfExp -> [('test', 'UnaryOp'), ('body', 'Attribute'), ('orelse', 'Name')]", "IfExp -> [('test', 'Call'), ('body', 'Call'), ('orelse', 'Num')]", "IfExp -> [('test', 'Name'), ('body', 'Dict'), ('orelse', 'Dict')]", "IfExp -> [('test', 'Name'), ('body', 'Call'), ('orelse', 'Call')]", "IfExp -> [('test', 'Compare'), ('body', 'Subscript'), ('orelse', 'Name')]", "IfExp -> [('test', 'Subscript'), ('body', 'Subscript'), ('orelse', 'Str')]", "IfExp -> [('test', 'Name'), ('body', 'Name'), ('orelse', 'BinOp')]", "IfExp -> [('test', 'Name'), ('body', 'Str'), ('orelse', 'Str')]", "IfExp -> [('test', 'Name'), ('body', 'Num'), ('orelse', 'Num')]", "IfExp -> [('test', 'Call'), ('body', 'Call'), ('orelse', 'Call')]", "IfExp -> [('test', 'Attribute'), ('body', 'Call'), ('orelse', 'Attribute')]", "IfExp -> [('test', 'Name'), ('body', 'BinOp'), ('orelse', 'Str')]", "IfExp -> [('test', 'Compare'), ('body', 'Call'), ('orelse', 'Num')]", "IfExp -> [('test', 'Call'), ('body', 'Call'), ('orelse', 'Name')]", "IfExp -> [('test', 'Attribute'), ('body', 'Subscript'), ('orelse', 'Str')]", "IfExp -> [('test', 'Call'), ('body', 'Name'), ('orelse', 'List')]", "IfExp -> [('test', 'Compare'), ('body', 'Call'), ('orelse', 'Call')]", "IfExp -> [('test', 'Name'), ('body', 'Name'), ('orelse', 'Name')]", "IfExp -> [('test', 'Name'), ('body', 'Attribute'), ('orelse', 'Name')]", "IfExp -> [('test', 'Attribute'), ('body', 'Attribute'), ('orelse', 'Name')]", "IfExp -> [('test', 'Name'), ('body', 'Call'), ('orelse', 'Name')]", "IfExp -> [('test', 'Call'), ('body', 'Compare'), ('orelse', 'Compare')]", "IfExp -> [('test', 'Name'), ('body', 'Name'), ('orelse', 'Attribute')]", "IfExp -> [('test', 'Subscript'), ('body', 'Str'), ('orelse', 'Str')]", "IfExp -> [('test', 'Compare'), ('body', 'BinOp'), ('orelse', 'Num')]", "IfExp -> [('test', 'Attribute'), ('body', 'Name'), ('orelse', 'Name')]", "IfExp -> [('test', 'Name'), ('body', 'Call'), ('orelse', 'Num')]", "IfExp -> [('test', 'UnaryOp'), ('body', 'Num'), ('orelse', 'Num')]", "IfExp -> [('test', 'Attribute'), ('body', 'Num'), ('orelse', 'Name')]", "IfExp -> [('test', 'Compare'), ('body', 'Num'), ('orelse', 'Num')]", "IfExp -> [('test', 'UnaryOp'), ('body', 'Str'), ('orelse', 'Str')]", "IfExp -> [('test', 'Compare'), ('body', 'Name'), ('orelse', 'Attribute')]", "IfExp -> [('test', 'Call'), ('body', 'Tuple'), ('orelse', 'Name')]", "IfExp -> [('test', 'UnaryOp'), ('body', 'Name'), ('orelse', 'Name')]", "IfExp -> [('test', 'Compare'), ('body', 'List'), ('orelse', 'Attribute')]", "IfExp -> [('test', 'Compare'), ('body', 'Attribute'), ('orelse', 'Subscript')]", "IfExp -> [('test', 'Call'), ('body', 'Subscript'), ('orelse', 'Name')]", "IfExp -> [('test', 'Attribute'), ('body', 'Call'), ('orelse', 'Call')]", "IfExp -> [('test', 'Name'), ('body', 'Subscript'), ('orelse', 'Subscript')]", "IfExp -> [('test', 'Compare'), ('body', 'Subscript'), ('orelse', 'Subscript')]", "IfExp -> [('test', 'Attribute'), ('body', 'BinOp'), ('orelse', 'Attribute')]", "IfExp -> [('test', 'BinOp'), ('body', 'Str'), ('orelse', 'Str')]", "IfExp -> [('test', 'Attribute'), ('body', 'Num'), ('orelse', 'Num')]", "IfExp -> [('test', 'Call'), ('body', 'Name'), ('orelse', 'Name')]", "IfExp -> [('test', 'Call'), ('body', 'Num'), ('orelse', 'Num')]", "IfExp -> [('test', 'Subscript'), ('body', 'Call'), ('orelse', 'Name')]", "IfExp -> [('test', 'Compare'), ('body', 'List'), ('orelse', 'List')]", "IfExp -> [('test', 'Compare'), ('body', 'Call'), ('orelse', 'Str')]", "IfExp -> [('test', 'Compare'), ('body', 'Str'), ('orelse', 'BinOp')]", "IfExp -> [('test', 'Call'), ('body', 'Call'), ('orelse', 'Str')]", "IfExp -> [('test', 'Attribute'), ('body', 'Attribute'), ('orelse', 'Call')]", "IfExp -> [('test', 'Attribute'), ('body', 'Call'), ('orelse', 'Name')]"], "Mult": ["Mult -> <NULL>"], "arguments": ["arguments -> [('args', ['Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'str'), ('defaults', [])]", "arguments -> [('args', ['Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', [])]", "arguments -> [('args', []), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', [])]", "arguments -> [('args', ['Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', [])]", "arguments -> [('args', ['Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', [])]", "arguments -> [('args', ['Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Str'])]", "arguments -> [('args', ['Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['BinOp', 'Str'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', [])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Num'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', [])]", "arguments -> [('args', ['Name']), ('vararg', 'str'), ('kwarg', 'str'), ('defaults', [])]", "arguments -> [('args', ['Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name'])]", "arguments -> [('args', ['Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Attribute'])]", "arguments -> [('args', ['Name', 'Name']), ('vararg', 'str'), ('kwarg', 'str'), ('defaults', ['Call'])]", "arguments -> [('args', ['Name', 'Name', 'Name']), ('vararg', 'str'), ('kwarg', 'str'), ('defaults', ['Call', 'Call'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Call', 'Call', 'Name'])]", "arguments -> [('args', ['Name', 'Name', 'Name']), ('vararg', 'str'), ('kwarg', 'str'), ('defaults', ['Call'])]", "arguments -> [('args', ['Name']), ('vararg', 'NoneType'), ('kwarg', 'str'), ('defaults', [])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'str'), ('defaults', ['Name', 'Str', 'Call', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Tuple', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['List', 'Name', 'Name'])]", "arguments -> [('args', ['Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'str'), ('defaults', ['Str', 'Name'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Name', 'Attribute'])]", "arguments -> [('args', ['Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Name'])]", "arguments -> [('args', ['Name']), ('vararg', 'str'), ('kwarg', 'NoneType'), ('defaults', [])]", "arguments -> [('args', ['Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Str'])]", "arguments -> [('args', ['Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name'])]", "arguments -> [('args', ['Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Name'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', [])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'str'), ('defaults', ['Name', 'Name', 'Name'])]", "arguments -> [('args', ['Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'str'), ('defaults', ['Name'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Name'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Str'])]", "arguments -> [('args', ['Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'str'), ('defaults', [])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Name', 'Name'])]", "arguments -> [('args', ['Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'str'), ('defaults', ['Name'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'str'), ('defaults', ['Name'])]", "arguments -> [('args', ['Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Attribute'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Str', 'Name'])]", "arguments -> [('args', ['Name', 'Name']), ('vararg', 'str'), ('kwarg', 'str'), ('defaults', [])]", "arguments -> [('args', ['Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Str', 'Name'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'str'), ('defaults', ['Name', 'Name', 'Name'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Name'])]", "arguments -> [('args', ['Name', 'Name']), ('vararg', 'str'), ('kwarg', 'NoneType'), ('defaults', [])]", "arguments -> [('args', ['Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'str'), ('defaults', ['Attribute'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'str'), ('defaults', ['Attribute', 'Str'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Name'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Tuple'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Num'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Num', 'Name'])]", "arguments -> [('args', ['Name', 'Name']), ('vararg', 'str'), ('kwarg', 'str'), ('defaults', ['Name'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name']), ('vararg', 'str'), ('kwarg', 'str'), ('defaults', ['Name', 'Name'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'str'), ('defaults', ['Str', 'Name', 'Name', 'Name'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Str', 'Str', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Str', 'Str', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Str', 'Name', 'Name', 'Name', 'Name'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Str', 'Name', 'Name', 'Name'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Str', 'Str', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Str', 'Name', 'Name'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Name', 'Str', 'Name', 'Name', 'Name', 'Name', 'Name'])]", "arguments -> [('args', ['Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Tuple'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Str', 'Name', 'Name', 'Name'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Str', 'Name', 'Name', 'Str', 'Name', 'Name'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Num'])]", "arguments -> [('args', ['Tuple', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', [])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Name', 'Name'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Tuple', 'Num', 'Num', 'Num', 'Num', 'Name', 'Name', 'Num'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Name', 'Num', 'Name', 'Name', 'Name'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Num', 'Num', 'Num', 'Name', 'Name', 'Name', 'List', 'Num', 'Name', 'Name'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', [])]", "arguments -> [('args', []), ('vararg', 'str'), ('kwarg', 'NoneType'), ('defaults', [])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Name', 'Num', 'Name', 'Name'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Num'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', [])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Num', 'Num', 'Name'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', [])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Num', 'Name', 'Num'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Str'])]", "arguments -> [('args', ['Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'str'), ('defaults', ['Str', 'Dict'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'str'), ('defaults', ['List', 'Name', 'Name'])]", "arguments -> [('args', ['Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Num'])]", "arguments -> [('args', ['Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'str'), ('defaults', ['Name', 'Str'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Name', 'Name', 'Name'])]", "arguments -> [('args', ['Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Num'])]", "arguments -> [('args', ['Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Str'])]", "arguments -> [('args', ['Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Tuple'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Num', 'Num'])]", "arguments -> [('args', []), ('vararg', 'str'), ('kwarg', 'str'), ('defaults', [])]", "arguments -> [('args', ['Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Num'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'str'), ('defaults', ['Name', 'Name', 'Str', 'Name'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'str'), ('defaults', ['Name', 'Name', 'Name', 'Name'])]", "arguments -> [('args', ['Name', 'Name', 'Name']), ('vararg', 'str'), ('kwarg', 'str'), ('defaults', ['Name'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Str', 'Name', 'Name', 'Name'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name']), ('vararg', 'str'), ('kwarg', 'str'), ('defaults', ['Name'])]", "arguments -> [('args', ['Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Str', 'Name'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Name', 'Name', 'Name'])]", "arguments -> [('args', ['Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Attribute', 'Name'])]", "arguments -> [('args', ['Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Attribute'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Attribute', 'Attribute', 'Tuple'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'str'), ('defaults', ['Name', 'Name', 'Name', 'Str', 'Str', 'Str', 'Subscript', 'Str', 'Str', 'Name'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Num', 'Num', 'Name', 'Name', 'Str', 'Str', 'Str'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Str', 'Str'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Num', 'Name'])]", "arguments -> [('args', ['Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['List'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'str'), ('defaults', ['Name', 'Name', 'Num'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'str'), ('defaults', ['Name', 'List', 'Name', 'Str'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'str'), ('defaults', [])]", "arguments -> [('args', ['Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Num', 'Num'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Num', 'Num', 'Num'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Num', 'Num', 'Name', 'Num'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num'])]", "arguments -> [('args', []), ('vararg', 'NoneType'), ('kwarg', 'str'), ('defaults', [])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Name', 'Name', 'Name'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', [])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Str', 'Str', 'Str'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'str'), ('kwarg', 'str'), ('defaults', ['Name', 'Name', 'Name'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['List'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Name'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Str', 'Str', 'Str', 'Call', 'List', 'List', 'Num'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'str'), ('kwarg', 'NoneType'), ('defaults', [])]", "arguments -> [('args', ['Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Str', 'Num'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name']), ('vararg', 'str'), ('kwarg', 'str'), ('defaults', [])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Attribute'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Num', 'Num'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Attribute', 'Name', 'Name', 'Name'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'str'), ('kwarg', 'str'), ('defaults', [])]", "arguments -> [('args', ['Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Name', 'Name'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'str'), ('defaults', ['Num', 'Name', 'Name'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Num', 'Name', 'Name', 'Name'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Num', 'Num', 'Name', 'Str'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Num', 'Str'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Num', 'Str'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Str'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Num', 'Name'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Str', 'Num'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'str'), ('defaults', ['Num', 'Str'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'str'), ('defaults', ['Num', 'Str'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'str'), ('defaults', ['Str', 'Num', 'Str'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'str'), ('defaults', ['Str', 'Num', 'Str'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Str', 'Num', 'Str', 'Str', 'Num', 'Name', 'Num'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Str', 'Num', 'Str', 'Num', 'Str', 'Num', 'Num', 'Name', 'Str', 'Num', 'Name', 'Num'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'str'), ('defaults', ['Str', 'Str'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'str'), ('defaults', ['Name', 'Name', 'Name', 'Name'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'str'), ('defaults', ['Name', 'Str'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'str'), ('defaults', ['Name', 'Name'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Str', 'Num'])]", "arguments -> [('args', ['Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Str'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Name', 'Name'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Dict'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Num'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Tuple'])]", "arguments -> [('args', ['Tuple']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', [])]", "arguments -> [('args', ['Name', 'Name']), ('vararg', 'str'), ('kwarg', 'str'), ('defaults', ['Str'])]", "arguments -> [('args', ['Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'str'), ('defaults', ['Str'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'str'), ('defaults', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name'])]", "arguments -> [('args', ['Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['BinOp'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Name'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Str', 'Name'])]", "arguments -> [('args', ['Name', 'Name', 'Name']), ('vararg', 'str'), ('kwarg', 'str'), ('defaults', [])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Num', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Str'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Name', 'Name', 'Name', 'Name', 'Str', 'Name', 'Name', 'Name'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Str', 'Name', 'Name', 'Name', 'Name', 'Name', 'Str', 'Name', 'Name'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Name', 'Name', 'Name', 'Name', 'Str', 'Name', 'Name'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Str', 'Str', 'Name', 'Name', 'Name', 'Name', 'Name', 'Str', 'Name', 'Name'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Str', 'Str', 'Name', 'Name', 'Str', 'Name', 'Name', 'Name', 'Name', 'Name', 'Str', 'Name', 'Name'])]", "arguments -> [('args', ['Name', 'Name', 'Name']), ('vararg', 'str'), ('kwarg', 'str'), ('defaults', ['Str'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Num', 'Name'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Name', 'Name', 'Num', 'Str'])]", "arguments -> [('args', ['Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['List'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'str'), ('kwarg', 'str'), ('defaults', ['Name', 'Name', 'Name', 'Name'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name']), ('vararg', 'str'), ('kwarg', 'str'), ('defaults', ['Name', 'Name', 'Name'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'str'), ('kwarg', 'str'), ('defaults', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Str'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Num', 'Name', 'Name'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Num', 'Name', 'Name'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'str'), ('kwarg', 'str'), ('defaults', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name'])]", "arguments -> [('args', ['Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Str', 'Str'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Str', 'Str', 'Name'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Tuple', 'Name', 'Attribute'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Call', 'Num'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Str', 'Call', 'Num', 'Num', 'List'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Name', 'Str'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Dict', 'Str'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Name', 'Str', 'Str'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Dict'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Str', 'BinOp', 'Name', 'Name', 'Num', 'Str'])]", "arguments -> [('args', ['Name', 'Name', 'Name']), ('vararg', 'str'), ('kwarg', 'str'), ('defaults', ['Attribute'])]", "arguments -> [('args', ['Name']), ('vararg', 'str'), ('kwarg', 'str'), ('defaults', ['Name'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Str', 'Name', 'Name', 'Name', 'List', 'Name'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'str'), ('defaults', ['Name', 'Name', 'Str', 'Name', 'Name'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Num', 'Name', 'Attribute', 'Attribute', 'Name'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Name', 'Name'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Name', 'Name', 'Name', 'Tuple', 'Tuple', 'Name'])]", "arguments -> [('args', ['Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Call'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Name', 'Name', 'Name', 'Str', 'Str'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Dict', 'List'])]", "arguments -> [('args', ['Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Dict', 'Name'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Tuple', 'Dict', 'Str', 'Name', 'Name'])]", "arguments -> [('args', ['Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Dict'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['List', 'Str', 'Dict'])]", "arguments -> [('args', ['Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'str'), ('defaults', ['Str', 'Num'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Attribute'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Attribute'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', [])]", "arguments -> [('args', ['Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Num', 'Call'])]", "arguments -> [('args', ['Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Str', 'Str'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Str', 'Name', 'Name'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Str', 'Name'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Str', 'Str', 'Name', 'Name', 'Name', 'Name'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Name', 'Str', 'Name', 'Name', 'Name'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Num', 'Name', 'Name'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Str', 'Dict'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Name', 'Num'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Str', 'Num', 'Name'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Str'])]", "arguments -> [('args', ['Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Name', 'Attribute'])]", "arguments -> [('args', ['Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'str'), ('defaults', ['Name', 'Name'])]", "arguments -> [('args', ['Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Num', 'Name'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Name', 'Name', 'Name', 'Name'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Str', 'Name', 'Str'])]", "arguments -> [('args', ['Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'str'), ('defaults', ['Name', 'Name'])]", "arguments -> [('args', ['Name', 'Name']), ('vararg', 'str'), ('kwarg', 'NoneType'), ('defaults', ['Name'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Str', 'Num', 'Num', 'Name', 'Name', 'Name'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Name', 'Str', 'Num', 'Name', 'Name', 'Name'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Str', 'Num', 'Num', 'Name', 'Name'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Str', 'List'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Str', 'Num', 'Num', 'Name'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Num', 'Str', 'Str', 'Num', 'Num', 'Num', 'Name', 'Str', 'Str', 'Num', 'Attribute', 'Num', 'Num'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Str', 'Str', 'Name', 'Str', 'Str', 'Str', 'Name'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Attribute', 'Name', 'Num', 'Name'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Name', 'Num', 'Call'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Name', 'Attribute', 'List', 'Call'])]", "arguments -> [('args', ['Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['List', 'Num'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Dict', 'Name'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Num'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Str', 'Str', 'Str', 'Str'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Str', 'Str', 'Str'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Str', 'Str', 'Str'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Str', 'Str'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Name', 'Name', 'Name', 'Name', 'Str'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Str', 'Str', 'Str', 'Name'])]", "arguments -> [('args', ['Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['List', 'Name'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'str'), ('defaults', ['Name', 'Num', 'Name', 'Str', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'str'), ('defaults', ['Name', 'Num', 'Name', 'Name', 'Name'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Str', 'Name', 'Name'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['List', 'Dict', 'List'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'str'), ('kwarg', 'str'), ('defaults', [])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'str'), ('kwarg', 'str'), ('defaults', ['Name', 'Name'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'str'), ('kwarg', 'str'), ('defaults', ['Name'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name']), ('vararg', 'str'), ('kwarg', 'str'), ('defaults', ['List', 'Name', 'Name'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'str'), ('kwarg', 'str'), ('defaults', ['Name', 'Name', 'Name', 'Name'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'str'), ('kwarg', 'str'), ('defaults', ['Name', 'Name'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'str'), ('kwarg', 'str'), ('defaults', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'str'), ('kwarg', 'str'), ('defaults', ['Name'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'str'), ('kwarg', 'str'), ('defaults', ['Name', 'Name', 'Name', 'Dict'])]", "arguments -> [('args', ['Name', 'Name', 'Name']), ('vararg', 'str'), ('kwarg', 'str'), ('defaults', ['Dict'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'str'), ('kwarg', 'str'), ('defaults', ['Name', 'Name', 'Name', 'Name'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'str'), ('kwarg', 'str'), ('defaults', ['Name', 'Name'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'str'), ('kwarg', 'str'), ('defaults', ['Name', 'Name', 'Name', 'Name', 'Name'])]", "arguments -> [('args', ['Name', 'Name', 'Name']), ('vararg', 'str'), ('kwarg', 'str'), ('defaults', ['Name', 'Name'])]", "arguments -> [('args', ['Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Num', 'Str'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'str'), ('defaults', [])]", "arguments -> [('args', ['Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'str'), ('defaults', ['Dict'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'str'), ('defaults', ['Dict', 'Name'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'str'), ('defaults', ['Dict', 'Name', 'Name'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Str', 'Tuple', 'Tuple', 'Name'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Str', 'Tuple'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Name', 'Name', 'Num'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Name', 'Name', 'Name', 'Name'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'str'), ('defaults', ['Name', 'Tuple', 'Name', 'Num', 'Tuple'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'str'), ('defaults', ['Name', 'Tuple', 'Name', 'Num', 'Tuple', 'Name', 'Tuple'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Tuple', 'Name', 'Tuple', 'Name', 'Num', 'Tuple'])]", "arguments -> [('args', ['Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Dict'])]", "arguments -> [('args', ['Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Attribute'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Str', 'Name', 'Name', 'Str', 'Name', 'Name', 'Name'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['List', 'List'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Name', 'Name', 'Str', 'Name', 'Num', 'Num', 'Name', 'Name', 'Name'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name'])]", "arguments -> [('args', ['Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Num'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Num', 'Name', 'Name', 'Num'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Num', 'Num', 'Num'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Num', 'Num', 'Num'])]", "arguments -> [('args', ['Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Str', 'Str', 'Str'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'str'), ('defaults', ['Num', 'Name'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'str'), ('kwarg', 'str'), ('defaults', ['Name'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Call', 'Call', 'Name'])]", "arguments -> [('args', ['Name', 'Name', 'Name']), ('vararg', 'str'), ('kwarg', 'NoneType'), ('defaults', [])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Num'])]", "arguments -> [('args', ['Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Tuple'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Str', 'Str', 'Name', 'Name', 'Name', 'List', 'Name', 'Name'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['List', 'List', 'List', 'List'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['List', 'List', 'List', 'List'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Name', 'Name', 'Num', 'Name'])]", "arguments -> [('args', ['Name']), ('vararg', 'NoneType'), ('kwarg', 'str'), ('defaults', ['Name'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Name', 'Num'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Attribute', 'Name', 'Name', 'Name', 'Name', 'Call', 'Name', 'Call', 'Num', 'Name', 'Name', 'Name', 'Name', 'Name', 'Tuple', 'Name', 'Name', 'Name'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Name', 'Str', 'Name'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Tuple'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Num', 'Num', 'Num', 'Num'])]", "arguments -> [('args', ['Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Call'])]", "arguments -> [('args', ['Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Tuple'])]", "arguments -> [('args', ['Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Num', 'Name'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Num', 'Num', 'Name'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'str'), ('defaults', ['Name', 'Name', 'Str', 'Name', 'Name', 'Name', 'Num', 'Num', 'Num', 'Dict', 'Name', 'Str', 'Str'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Num', 'Num', 'Num'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'str'), ('defaults', ['Name', 'Num', 'Name', 'Str', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name'])]", "arguments -> [('args', ['Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Num'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Name', 'Name', 'Name', 'Name'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Str', 'Name', 'Call'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Str', 'Call', 'Str'])]", "arguments -> [('args', ['Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Str', 'Call'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Str', 'Call', 'Name'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Name', 'Call'])]", "arguments -> [('args', ['Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Call'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Str', 'Num'])]", "arguments -> [('args', ['Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Str', 'Str', 'Name'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'str'), ('defaults', ['Name', 'Name', 'Name', 'Name', 'Num', 'Str'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name'])]", "arguments -> [('args', ['Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Attribute'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'str'), ('defaults', ['Str', 'Name', 'Name', 'Str', 'Name', 'Str', 'Str'])]", "arguments -> [('args', ['Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Attribute', 'Attribute'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'str'), ('kwarg', 'str'), ('defaults', ['Name', 'Name', 'Name', 'Dict'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Name', 'Name', 'Name', 'Str', 'Str'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Str', 'Str', 'Str', 'Str', 'Str'])]", "arguments -> [('args', ['Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Dict'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'str'), ('defaults', ['Name', 'Num', 'Name', 'Str', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name'])]", "arguments -> [('args', ['Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'str'), ('defaults', ['Str'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name']), ('vararg', 'str'), ('kwarg', 'str'), ('defaults', ['List'])]", "arguments -> [('args', ['Name', 'Name', 'Name']), ('vararg', 'str'), ('kwarg', 'str'), ('defaults', ['List'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Str', 'Str', 'Name', 'Name', 'Name'])]", "arguments -> [('args', ['Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'str'), ('defaults', ['Name', 'Num'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Str', 'Str', 'Name'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Name', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['List', 'Name', 'Name', 'Name', 'Name'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'str'), ('defaults', ['Name', 'Name'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'str'), ('defaults', ['Name', 'Name', 'Name'])]", "arguments -> [('args', ['Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Num', 'Attribute'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Str', 'Name', 'Name', 'List'])]", "arguments -> [('args', ['Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Call', 'Name'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'str'), ('defaults', ['Str'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Str', 'Str', 'Num', 'Num', 'Num'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Num', 'Str', 'Str', 'Str'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Num', 'Name', 'Name', 'Name', 'Name', 'Name', 'Str', 'Str', 'Dict'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['List', 'List', 'List', 'Num'])]", "arguments -> [('args', ['Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Num', 'Lambda'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Num', 'Num', 'Name'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Str', 'Str'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Name', 'Name', 'Name'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Name', 'Name', 'Name'])]", "arguments -> [('args', ['Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'List'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Str', 'Str', 'Name', 'Name', 'Name', 'List', 'Name'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Name', 'Name', 'Str', 'Name'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Name', 'Name', 'Name', 'Name'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Str', 'Call', 'Num', 'Num', 'Num'])]", "arguments -> [('args', ['Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Lambda'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Str', 'Name', 'Num', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Str', 'Num', 'Num', 'Name', 'Name'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Str', 'Str', 'Str', 'Str', 'Num'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Name', 'Str'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Call'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', [])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Attribute', 'Attribute', 'Attribute'])]", "arguments -> [('args', ['Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Str', 'Name', 'Str'])]", "arguments -> [('args', ['Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'str'), ('defaults', ['Num'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Str'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Str'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Str'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Name', 'Name', 'Attribute', 'Attribute', 'Attribute', 'List', 'Name', 'Name'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name']), ('vararg', 'str'), ('kwarg', 'str'), ('defaults', ['Str', 'List', 'List'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Str', 'Name', 'Name', 'List', 'List', 'List', 'List', 'List', 'List', 'List', 'Name', 'List', 'List', 'Dict', 'Name', 'Name', 'Name'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Num', 'Num', 'Num'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Num', 'Num'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Num', 'Num', 'Name', 'Name', 'Attribute'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Num', 'Num', 'Attribute'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'str'), ('defaults', ['Name', 'Str', 'Str', 'Name', 'Name', 'Name', 'Name', 'Num', 'Num', 'Num', 'Num'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Str', 'Str', 'Name'])]", "arguments -> [('args', ['Name', 'Tuple', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', [])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Num', 'Name', 'Num', 'Dict'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['List', 'Call', 'Call'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Str', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Tuple', 'Name', 'Name', 'Name', 'Name', 'Name'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Tuple', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Tuple', 'Name', 'Name', 'Name'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Tuple', 'Name', 'Name', 'Name', 'Name'])]", "arguments -> [('args', ['Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Dict'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Name', 'Name', 'Num', 'Num', 'Dict'])]", "arguments -> [('args', ['Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Str', 'Name', 'Name'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Num', 'Str', 'Num'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Dict', 'Name', 'Name'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Str'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Dict'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Dict'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Name', 'Name'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', [])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'str'), ('defaults', ['Name', 'Call', 'List', 'Name', 'Name', 'Name', 'Name'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Name', 'Name', 'Name', 'Dict', 'Name'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name']), ('vararg', 'str'), ('kwarg', 'str'), ('defaults', ['Tuple', 'Name'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Tuple', 'Tuple', 'Tuple', 'Name', 'Name'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'str'), ('defaults', ['Num'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Name', 'Tuple'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Name', 'Name', 'Name', 'Num'])]", "arguments -> [('args', ['Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Tuple', 'Tuple'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Tuple', 'Tuple', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', [])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Str', 'Name'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Num', 'Str', 'Name'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Num', 'Str', 'Name'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Name', 'Name', 'Name', 'Name'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Name', 'Name', 'Str'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Str', 'Str', 'Str', 'Name'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Name', 'Str', 'Name'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Str', 'Str', 'Name', 'Name'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Str', 'Str', 'Dict', 'Name'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Str', 'Str', 'Name'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Name', 'Str', 'Str'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Str', 'Name', 'Name'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Str', 'Str', 'Attribute', 'List', 'Dict'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Name', 'Name', 'Str', 'Str', 'Name', 'Name'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Name', 'Name', 'Str', 'Str', 'Name', 'Name'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'str'), ('defaults', ['Str', 'Str', 'Str'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Name', 'Name', 'Name', 'Str'])]", "arguments -> [('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('vararg', 'NoneType'), ('kwarg', 'NoneType'), ('defaults', ['Str', 'Name'])]"], "And": ["And -> <NULL>"], "AugAssign": ["AugAssign -> [('target', 'Name'), ('op', 'Add'), ('value', 'List')]", "AugAssign -> [('target', 'Name'), ('op', 'Div'), ('value', 'Call')]", "AugAssign -> [('target', 'Name'), ('op', 'Add'), ('value', 'Num')]", "AugAssign -> [('target', 'Attribute'), ('op', 'Add'), ('value', 'Num')]", "AugAssign -> [('target', 'Name'), ('op', 'Add'), ('value', 'BinOp')]", "AugAssign -> [('target', 'Name'), ('op', 'Add'), ('value', 'Str')]", "AugAssign -> [('target', 'Name'), ('op', 'Mult'), ('value', 'Name')]", "AugAssign -> [('target', 'Name'), ('op', 'Sub'), ('value', 'Call')]", "AugAssign -> [('target', 'Name'), ('op', 'Add'), ('value', 'Name')]", "AugAssign -> [('target', 'Name'), ('op', 'Add'), ('value', 'Call')]", "AugAssign -> [('target', 'Name'), ('op', 'Sub'), ('value', 'Num')]", "AugAssign -> [('target', 'Attribute'), ('op', 'Add'), ('value', 'Str')]", "AugAssign -> [('target', 'Name'), ('op', 'Sub'), ('value', 'Subscript')]", "AugAssign -> [('target', 'Attribute'), ('op', 'Add'), ('value', 'Call')]", "AugAssign -> [('target', 'Name'), ('op', 'Add'), ('value', 'ListComp')]", "AugAssign -> [('target', 'Attribute'), ('op', 'Add'), ('value', 'Name')]", "AugAssign -> [('target', 'Name'), ('op', 'Add'), ('value', 'Subscript')]", "AugAssign -> [('target', 'Attribute'), ('op', 'Sub'), ('value', 'Name')]", "AugAssign -> [('target', 'Attribute'), ('op', 'BitOr'), ('value', 'Attribute')]", "AugAssign -> [('target', 'Name'), ('op', 'BitOr'), ('value', 'Attribute')]", "AugAssign -> [('target', 'Name'), ('op', 'BitAnd'), ('value', 'UnaryOp')]", "AugAssign -> [('target', 'Attribute'), ('op', 'Add'), ('value', 'BinOp')]", "AugAssign -> [('target', 'Attribute'), ('op', 'Add'), ('value', 'Attribute')]", "AugAssign -> [('target', 'Attribute'), ('op', 'Mod'), ('value', 'Call')]", "AugAssign -> [('target', 'Name'), ('op', 'Mult'), ('value', 'BinOp')]", "AugAssign -> [('target', 'Attribute'), ('op', 'Sub'), ('value', 'Num')]", "AugAssign -> [('target', 'Name'), ('op', 'Add'), ('value', 'Tuple')]", "AugAssign -> [('target', 'Name'), ('op', 'Mult'), ('value', 'Attribute')]", "AugAssign -> [('target', 'Attribute'), ('op', 'Mult'), ('value', 'Num')]", "AugAssign -> [('target', 'Attribute'), ('op', 'Sub'), ('value', 'Attribute')]", "AugAssign -> [('target', 'Name'), ('op', 'Add'), ('value', 'Attribute')]", "AugAssign -> [('target', 'Subscript'), ('op', 'Add'), ('value', 'BinOp')]", "AugAssign -> [('target', 'Name'), ('op', 'Div'), ('value', 'BinOp')]", "AugAssign -> [('target', 'Subscript'), ('op', 'Add'), ('value', 'Num')]", "AugAssign -> [('target', 'Name'), ('op', 'BitOr'), ('value', 'Call')]", "AugAssign -> [('target', 'Subscript'), ('op', 'Add'), ('value', 'Subscript')]", "AugAssign -> [('target', 'Name'), ('op', 'Sub'), ('value', 'BinOp')]", "AugAssign -> [('target', 'Subscript'), ('op', 'Add'), ('value', 'Call')]", "AugAssign -> [('target', 'Name'), ('op', 'Sub'), ('value', 'Name')]", "AugAssign -> [('target', 'Subscript'), ('op', 'Sub'), ('value', 'Name')]", "AugAssign -> [('target', 'Subscript'), ('op', 'Add'), ('value', 'Name')]", "AugAssign -> [('target', 'Name'), ('op', 'BitAnd'), ('value', 'BinOp')]", "AugAssign -> [('target', 'Subscript'), ('op', 'Add'), ('value', 'Str')]", "AugAssign -> [('target', 'Name'), ('op', 'Mult'), ('value', 'Num')]", "AugAssign -> [('target', 'Attribute'), ('op', 'Mult'), ('value', 'Name')]", "AugAssign -> [('target', 'Attribute'), ('op', 'Add'), ('value', 'Tuple')]", "AugAssign -> [('target', 'Name'), ('op', 'LShift'), ('value', 'Num')]", "AugAssign -> [('target', 'Name'), ('op', 'BitAnd'), ('value', 'Name')]", "AugAssign -> [('target', 'Name'), ('op', 'BitOr'), ('value', 'Name')]", "AugAssign -> [('target', 'Name'), ('op', 'BitXor'), ('value', 'Name')]", "AugAssign -> [('target', 'Name'), ('op', 'Mod'), ('value', 'Num')]", "AugAssign -> [('target', 'Name'), ('op', 'Div'), ('value', 'Num')]", "AugAssign -> [('target', 'Attribute'), ('op', 'Add'), ('value', 'IfExp')]", "AugAssign -> [('target', 'Attribute'), ('op', 'Add'), ('value', 'Subscript')]", "AugAssign -> [('target', 'Subscript'), ('op', 'Sub'), ('value', 'Num')]", "AugAssign -> [('target', 'Name'), ('op', 'Add'), ('value', 'IfExp')]", "AugAssign -> [('target', 'Attribute'), ('op', 'Sub'), ('value', 'Call')]", "AugAssign -> [('target', 'Name'), ('op', 'BitAnd'), ('value', 'Call')]", "AugAssign -> [('target', 'Name'), ('op', 'Add'), ('value', 'BoolOp')]", "AugAssign -> [('target', 'Name'), ('op', 'Mod'), ('value', 'Name')]"], "RShift": ["RShift -> <NULL>"], "Name": ["Name -> [('id', 'str'), ('ctx', 'Load')]", "Name -> [('id', 'str'), ('ctx', 'Param')]", "Name -> [('id', 'str'), ('ctx', 'Store')]", "Name -> [('id', 'str'), ('ctx', 'Del')]"], "BinOp": ["BinOp -> [('left', 'Call'), ('op', 'Div'), ('right', 'Num')]", "BinOp -> [('left', 'Num'), ('op', 'Mult'), ('right', 'Call')]", "BinOp -> [('left', 'Call'), ('op', 'Mult'), ('right', 'Num')]", "BinOp -> [('left', 'Call'), ('op', 'BitOr'), ('right', 'Call')]", "BinOp -> [('left', 'Call'), ('op', 'BitOr'), ('right', 'BinOp')]", "BinOp -> [('left', 'Call'), ('op', 'BitAnd'), ('right', 'Call')]", "BinOp -> [('left', 'Str'), ('op', 'Mod'), ('right', 'Name')]", "BinOp -> [('left', 'Str'), ('op', 'Mod'), ('right', 'Tuple')]", "BinOp -> [('left', 'Tuple'), ('op', 'Add'), ('right', 'Call')]", "BinOp -> [('left', 'Str'), ('op', 'Add'), ('right', 'Attribute')]", "BinOp -> [('left', 'Str'), ('op', 'Mod'), ('right', 'Call')]", "BinOp -> [('left', 'Str'), ('op', 'Add'), ('right', 'Name')]", "BinOp -> [('left', 'List'), ('op', 'Add'), ('right', 'Name')]", "BinOp -> [('left', 'Num'), ('op', 'Mult'), ('right', 'Num')]", "BinOp -> [('left', 'BinOp'), ('op', 'Add'), ('right', 'Str')]", "BinOp -> [('left', 'Name'), ('op', 'Mod'), ('right', 'Name')]", "BinOp -> [('left', 'Name'), ('op', 'Mod'), ('right', 'Num')]", "BinOp -> [('left', 'Str'), ('op', 'Mod'), ('right', 'Attribute')]", "BinOp -> [('left', 'Attribute'), ('op', 'Add'), ('right', 'Num')]", "BinOp -> [('left', 'Name'), ('op', 'Div'), ('right', 'Name')]", "BinOp -> [('left', 'Name'), ('op', 'Sub'), ('right', 'Attribute')]", "BinOp -> [('left', 'BinOp'), ('op', 'Pow'), ('right', 'Num')]", "BinOp -> [('left', 'Attribute'), ('op', 'Sub'), ('right', 'Name')]", "BinOp -> [('left', 'Name'), ('op', 'Mult'), ('right', 'Name')]", "BinOp -> [('left', 'Name'), ('op', 'Sub'), ('right', 'Name')]", "BinOp -> [('left', 'Subscript'), ('op', 'Div'), ('right', 'Name')]", "BinOp -> [('left', 'Subscript'), ('op', 'Mult'), ('right', 'Subscript')]", "BinOp -> [('left', 'Name'), ('op', 'Add'), ('right', 'Attribute')]", "BinOp -> [('left', 'BinOp'), ('op', 'Add'), ('right', 'Call')]", "BinOp -> [('left', 'Name'), ('op', 'Add'), ('right', 'Str')]", "BinOp -> [('left', 'Str'), ('op', 'Add'), ('right', 'Call')]", "BinOp -> [('left', 'Name'), ('op', 'Div'), ('right', 'Num')]", "BinOp -> [('left', 'Name'), ('op', 'Div'), ('right', 'BinOp')]", "BinOp -> [('left', 'Name'), ('op', 'Add'), ('right', 'Num')]", "BinOp -> [('left', 'Name'), ('op', 'Mult'), ('right', 'Num')]", "BinOp -> [('left', 'Attribute'), ('op', 'Mult'), ('right', 'Call')]", "BinOp -> [('left', 'Call'), ('op', 'Add'), ('right', 'Call')]", "BinOp -> [('left', 'BinOp'), ('op', 'Add'), ('right', 'Name')]", "BinOp -> [('left', 'Subscript'), ('op', 'Div'), ('right', 'Num')]", "BinOp -> [('left', 'Call'), ('op', 'Add'), ('right', 'Num')]", "BinOp -> [('left', 'BinOp'), ('op', 'Sub'), ('right', 'Num')]", "BinOp -> [('left', 'UnaryOp'), ('op', 'Sub'), ('right', 'BinOp')]", "BinOp -> [('left', 'Num'), ('op', 'Pow'), ('right', 'Num')]", "BinOp -> [('left', 'BinOp'), ('op', 'Div'), ('right', 'Call')]", "BinOp -> [('left', 'UnaryOp'), ('op', 'Sub'), ('right', 'Num')]", "BinOp -> [('left', 'BinOp'), ('op', 'Sub'), ('right', 'BinOp')]", "BinOp -> [('left', 'List'), ('op', 'Add'), ('right', 'ListComp')]", "BinOp -> [('left', 'Call'), ('op', 'Mod'), ('right', 'Dict')]", "BinOp -> [('left', 'Name'), ('op', 'BitOr'), ('right', 'Call')]", "BinOp -> [('left', 'Name'), ('op', 'Mod'), ('right', 'Attribute')]", "BinOp -> [('left', 'Attribute'), ('op', 'Mod'), ('right', 'Name')]", "BinOp -> [('left', 'Call'), ('op', 'Mod'), ('right', 'Name')]", "BinOp -> [('left', 'BoolOp'), ('op', 'Add'), ('right', 'Name')]", "BinOp -> [('left', 'Name'), ('op', 'Sub'), ('right', 'Num')]", "BinOp -> [('left', 'BoolOp'), ('op', 'Add'), ('right', 'Call')]", "BinOp -> [('left', 'Attribute'), ('op', 'Add'), ('right', 'Name')]", "BinOp -> [('left', 'Attribute'), ('op', 'Add'), ('right', 'Str')]", "BinOp -> [('left', 'Attribute'), ('op', 'BitOr'), ('right', 'Attribute')]", "BinOp -> [('left', 'Call'), ('op', 'Add'), ('right', 'Str')]", "BinOp -> [('left', 'Name'), ('op', 'Add'), ('right', 'Name')]", "BinOp -> [('left', 'Call'), ('op', 'Sub'), ('right', 'Num')]", "BinOp -> [('left', 'BinOp'), ('op', 'Add'), ('right', 'Num')]", "BinOp -> [('left', 'Name'), ('op', 'Sub'), ('right', 'BinOp')]", "BinOp -> [('left', 'Subscript'), ('op', 'Add'), ('right', 'BinOp')]", "BinOp -> [('left', 'Subscript'), ('op', 'Mult'), ('right', 'Name')]", "BinOp -> [('left', 'Subscript'), ('op', 'Sub'), ('right', 'Name')]", "BinOp -> [('left', 'Str'), ('op', 'Mod'), ('right', 'Subscript')]", "BinOp -> [('left', 'Attribute'), ('op', 'Add'), ('right', 'Attribute')]", "BinOp -> [('left', 'List'), ('op', 'Add'), ('right', 'Call')]", "BinOp -> [('left', 'List'), ('op', 'Add'), ('right', 'Subscript')]", "BinOp -> [('left', 'Str'), ('op', 'Mult'), ('right', 'Num')]", "BinOp -> [('left', 'Name'), ('op', 'Add'), ('right', 'Call')]", "BinOp -> [('left', 'Subscript'), ('op', 'Add'), ('right', 'Name')]", "BinOp -> [('left', 'BinOp'), ('op', 'Mult'), ('right', 'BinOp')]", "BinOp -> [('left', 'BinOp'), ('op', 'Mult'), ('right', 'Num')]", "BinOp -> [('left', 'Name'), ('op', 'Add'), ('right', 'Tuple')]", "BinOp -> [('left', 'Num'), ('op', 'Sub'), ('right', 'Name')]", "BinOp -> [('left', 'BinOp'), ('op', 'Div'), ('right', 'Name')]", "BinOp -> [('left', 'Num'), ('op', 'Mult'), ('right', 'Name')]", "BinOp -> [('left', 'BinOp'), ('op', 'Div'), ('right', 'Num')]", "BinOp -> [('left', 'Call'), ('op', 'Add'), ('right', 'List')]", "BinOp -> [('left', 'BinOp'), ('op', 'Add'), ('right', 'Attribute')]", "BinOp -> [('left', 'Attribute'), ('op', 'Sub'), ('right', 'Num')]", "BinOp -> [('left', 'UnaryOp'), ('op', 'Add'), ('right', 'Num')]", "BinOp -> [('left', 'Num'), ('op', 'LShift'), ('right', 'Num')]", "BinOp -> [('left', 'Name'), ('op', 'BitOr'), ('right', 'Name')]", "BinOp -> [('left', 'BinOp'), ('op', 'Div'), ('right', 'BinOp')]", "BinOp -> [('left', 'BinOp'), ('op', 'BitOr'), ('right', 'Call')]", "BinOp -> [('left', 'Attribute'), ('op', 'BitOr'), ('right', 'Call')]", "BinOp -> [('left', 'Attribute'), ('op', 'Add'), ('right', 'BinOp')]", "BinOp -> [('left', 'Name'), ('op', 'Sub'), ('right', 'Call')]", "BinOp -> [('left', 'Attribute'), ('op', 'Add'), ('right', 'Tuple')]", "BinOp -> [('left', 'Num'), ('op', 'Mult'), ('right', 'BinOp')]", "BinOp -> [('left', 'Str'), ('op', 'Add'), ('right', 'BinOp')]", "BinOp -> [('left', 'Str'), ('op', 'Mod'), ('right', 'Dict')]", "BinOp -> [('left', 'Call'), ('op', 'Add'), ('right', 'Name')]", "BinOp -> [('left', 'Str'), ('op', 'Mod'), ('right', 'BinOp')]", "BinOp -> [('left', 'Attribute'), ('op', 'Mult'), ('right', 'Num')]", "BinOp -> [('left', 'Attribute'), ('op', 'Sub'), ('right', 'Attribute')]", "BinOp -> [('left', 'Attribute'), ('op', 'Div'), ('right', 'Attribute')]", "BinOp -> [('left', 'Subscript'), ('op', 'Mult'), ('right', 'BinOp')]", "BinOp -> [('left', 'Subscript'), ('op', 'Add'), ('right', 'Subscript')]", "BinOp -> [('left', 'Subscript'), ('op', 'Sub'), ('right', 'Subscript')]", "BinOp -> [('left', 'Name'), ('op', 'Add'), ('right', 'BinOp')]", "BinOp -> [('left', 'Name'), ('op', 'Mult'), ('right', 'BinOp')]", "BinOp -> [('left', 'Call'), ('op', 'Sub'), ('right', 'Call')]", "BinOp -> [('left', 'Call'), ('op', 'Mod'), ('right', 'Num')]", "BinOp -> [('left', 'BinOp'), ('op', 'Sub'), ('right', 'Name')]", "BinOp -> [('left', 'Num'), ('op', 'Mult'), ('right', 'Attribute')]", "BinOp -> [('left', 'Attribute'), ('op', 'Div'), ('right', 'Num')]", "BinOp -> [('left', 'Name'), ('op', 'Pow'), ('right', 'Num')]", "BinOp -> [('left', 'Call'), ('op', 'Mult'), ('right', 'Name')]", "BinOp -> [('left', 'BinOp'), ('op', 'Mult'), ('right', 'Name')]", "BinOp -> [('left', 'Name'), ('op', 'Mult'), ('right', 'Attribute')]", "BinOp -> [('left', 'Num'), ('op', 'Add'), ('right', 'Name')]", "BinOp -> [('left', 'Attribute'), ('op', 'Mult'), ('right', 'Name')]", "BinOp -> [('left', 'Subscript'), ('op', 'Sub'), ('right', 'Call')]", "BinOp -> [('left', 'BinOp'), ('op', 'Div'), ('right', 'Attribute')]", "BinOp -> [('left', 'Call'), ('op', 'Mult'), ('right', 'Attribute')]", "BinOp -> [('left', 'Name'), ('op', 'Mult'), ('right', 'Call')]", "BinOp -> [('left', 'BinOp'), ('op', 'Add'), ('right', 'Subscript')]", "BinOp -> [('left', 'Name'), ('op', 'Div'), ('right', 'Subscript')]", "BinOp -> [('left', 'Attribute'), ('op', 'Sub'), ('right', 'BinOp')]", "BinOp -> [('left', 'Name'), ('op', 'Sub'), ('right', 'Subscript')]", "BinOp -> [('left', 'Call'), ('op', 'Div'), ('right', 'Name')]", "BinOp -> [('left', 'Num'), ('op', 'Add'), ('right', 'BinOp')]", "BinOp -> [('left', 'Num'), ('op', 'Div'), ('right', 'Subscript')]", "BinOp -> [('left', 'Num'), ('op', 'Div'), ('right', 'UnaryOp')]", "BinOp -> [('left', 'Subscript'), ('op', 'Sub'), ('right', 'Attribute')]", "BinOp -> [('left', 'UnaryOp'), ('op', 'Div'), ('right', 'Num')]", "BinOp -> [('left', 'Subscript'), ('op', 'Mult'), ('right', 'Call')]", "BinOp -> [('left', 'Num'), ('op', 'Div'), ('right', 'Name')]", "BinOp -> [('left', 'Num'), ('op', 'Sub'), ('right', 'Num')]", "BinOp -> [('left', 'Num'), ('op', 'Sub'), ('right', 'Call')]", "BinOp -> [('left', 'BinOp'), ('op', 'Add'), ('right', 'BinOp')]", "BinOp -> [('left', 'Subscript'), ('op', 'Add'), ('right', 'List')]", "BinOp -> [('left', 'Num'), ('op', 'Div'), ('right', 'BinOp')]", "BinOp -> [('left', 'Call'), ('op', 'Sub'), ('right', 'Name')]", "BinOp -> [('left', 'UnaryOp'), ('op', 'Mult'), ('right', 'Name')]", "BinOp -> [('left', 'Subscript'), ('op', 'Mult'), ('right', 'Num')]", "BinOp -> [('left', 'Name'), ('op', 'Mod'), ('right', 'Dict')]", "BinOp -> [('left', 'Str'), ('op', 'Mult'), ('right', 'Name')]", "BinOp -> [('left', 'Call'), ('op', 'Add'), ('right', 'BinOp')]", "BinOp -> [('left', 'Subscript'), ('op', 'Add'), ('right', 'Str')]", "BinOp -> [('left', 'Name'), ('op', 'Add'), ('right', 'List')]", "BinOp -> [('left', 'BinOp'), ('op', 'Mult'), ('right', 'Call')]", "BinOp -> [('left', 'BinOp'), ('op', 'Mult'), ('right', 'Subscript')]", "BinOp -> [('left', 'Call'), ('op', 'Mult'), ('right', 'Subscript')]", "BinOp -> [('left', 'Str'), ('op', 'Mult'), ('right', 'BinOp')]", "BinOp -> [('left', 'BinOp'), ('op', 'Mult'), ('right', 'Attribute')]", "BinOp -> [('left', 'Name'), ('op', 'BitAnd'), ('right', 'Num')]", "BinOp -> [('left', 'BinOp'), ('op', 'BitAnd'), ('right', 'Num')]", "BinOp -> [('left', 'Name'), ('op', 'BitXor'), ('right', 'Name')]", "BinOp -> [('left', 'Subscript'), ('op', 'Sub'), ('right', 'Num')]", "BinOp -> [('left', 'Call'), ('op', 'Add'), ('right', 'Tuple')]", "BinOp -> [('left', 'List'), ('op', 'Mult'), ('right', 'Call')]", "BinOp -> [('left', 'List'), ('op', 'Mult'), ('right', 'Name')]", "BinOp -> [('left', 'Tuple'), ('op', 'Mult'), ('right', 'Name')]", "BinOp -> [('left', 'ListComp'), ('op', 'Add'), ('right', 'BinOp')]", "BinOp -> [('left', 'List'), ('op', 'Mult'), ('right', 'BinOp')]", "BinOp -> [('left', 'ListComp'), ('op', 'Add'), ('right', 'ListComp')]", "BinOp -> [('left', 'Num'), ('op', 'Add'), ('right', 'Call')]", "BinOp -> [('left', 'List'), ('op', 'Add'), ('right', 'BinOp')]", "BinOp -> [('left', 'List'), ('op', 'Mult'), ('right', 'Num')]", "BinOp -> [('left', 'Num'), ('op', 'Mult'), ('right', 'UnaryOp')]", "BinOp -> [('left', 'Num'), ('op', 'Mult'), ('right', 'Subscript')]", "BinOp -> [('left', 'Name'), ('op', 'Pow'), ('right', 'Name')]", "BinOp -> [('left', 'Attribute'), ('op', 'Mod'), ('right', 'Attribute')]", "BinOp -> [('left', 'Attribute'), ('op', 'Mod'), ('right', 'Tuple')]", "BinOp -> [('left', 'List'), ('op', 'Mult'), ('right', 'Attribute')]", "BinOp -> [('left', 'Name'), ('op', 'Mod'), ('right', 'Tuple')]", "BinOp -> [('left', 'Str'), ('op', 'Add'), ('right', 'Str')]", "BinOp -> [('left', 'Attribute'), ('op', 'Add'), ('right', 'Call')]", "BinOp -> [('left', 'BinOp'), ('op', 'BitOr'), ('right', 'Attribute')]", "BinOp -> [('left', 'Str'), ('op', 'Mod'), ('right', 'Str')]", "BinOp -> [('left', 'Call'), ('op', 'Mod'), ('right', 'Subscript')]", "BinOp -> [('left', 'Call'), ('op', 'Mod'), ('right', 'Tuple')]", "BinOp -> [('left', 'BinOp'), ('op', 'Add'), ('right', 'List')]", "BinOp -> [('left', 'Attribute'), ('op', 'BitAnd'), ('right', 'Num')]", "BinOp -> [('left', 'Name'), ('op', 'FloorDiv'), ('right', 'Num')]", "BinOp -> [('left', 'BinOp'), ('op', 'FloorDiv'), ('right', 'Attribute')]", "BinOp -> [('left', 'Call'), ('op', 'Add'), ('right', 'Subscript')]", "BinOp -> [('left', 'Str'), ('op', 'Add'), ('right', 'Subscript')]", "BinOp -> [('left', 'Name'), ('op', 'FloorDiv'), ('right', 'Name')]", "BinOp -> [('left', 'Name'), ('op', 'Div'), ('right', 'Call')]", "BinOp -> [('left', 'Num'), ('op', 'Pow'), ('right', 'Name')]", "BinOp -> [('left', 'Num'), ('op', 'Pow'), ('right', 'UnaryOp')]", "BinOp -> [('left', 'BinOp'), ('op', 'Pow'), ('right', 'BinOp')]", "BinOp -> [('left', 'BinOp'), ('op', 'Pow'), ('right', 'Name')]", "BinOp -> [('left', 'Name'), ('op', 'Mod'), ('right', 'Call')]", "BinOp -> [('left', 'Call'), ('op', 'Div'), ('right', 'BinOp')]", "BinOp -> [('left', 'Subscript'), ('op', 'Pow'), ('right', 'Num')]", "BinOp -> [('left', 'Compare'), ('op', 'BitAnd'), ('right', 'Compare')]", "BinOp -> [('left', 'Call'), ('op', 'Div'), ('right', 'Call')]", "BinOp -> [('left', 'BinOp'), ('op', 'BitAnd'), ('right', 'Compare')]", "BinOp -> [('left', 'Attribute'), ('op', 'Mult'), ('right', 'Subscript')]", "BinOp -> [('left', 'UnaryOp'), ('op', 'Mult'), ('right', 'Attribute')]", "BinOp -> [('left', 'Subscript'), ('op', 'Div'), ('right', 'BinOp')]", "BinOp -> [('left', 'Call'), ('op', 'Pow'), ('right', 'Num')]", "BinOp -> [('left', 'Subscript'), ('op', 'Add'), ('right', 'Call')]", "BinOp -> [('left', 'Attribute'), ('op', 'Pow'), ('right', 'BinOp')]", "BinOp -> [('left', 'Attribute'), ('op', 'Div'), ('right', 'BinOp')]", "BinOp -> [('left', 'Attribute'), ('op', 'Mult'), ('right', 'BinOp')]", "BinOp -> [('left', 'Attribute'), ('op', 'Pow'), ('right', 'Attribute')]", "BinOp -> [('left', 'Subscript'), ('op', 'Pow'), ('right', 'BinOp')]", "BinOp -> [('left', 'Subscript'), ('op', 'Pow'), ('right', 'Attribute')]", "BinOp -> [('left', 'Attribute'), ('op', 'Mult'), ('right', 'Attribute')]", "BinOp -> [('left', 'Num'), ('op', 'Div'), ('right', 'Attribute')]", "BinOp -> [('left', 'Num'), ('op', 'Div'), ('right', 'Num')]", "BinOp -> [('left', 'Num'), ('op', 'Sub'), ('right', 'BinOp')]", "BinOp -> [('left', 'Num'), ('op', 'Sub'), ('right', 'Subscript')]", "BinOp -> [('left', 'Attribute'), ('op', 'Add'), ('right', 'UnaryOp')]", "BinOp -> [('left', 'Call'), ('op', 'Mult'), ('right', 'UnaryOp')]", "BinOp -> [('left', 'Name'), ('op', 'Div'), ('right', 'IfExp')]", "BinOp -> [('left', 'Call'), ('op', 'Mod'), ('right', 'Call')]", "BinOp -> [('left', 'Call'), ('op', 'Mod'), ('right', 'Attribute')]", "BinOp -> [('left', 'Call'), ('op', 'Add'), ('right', 'ListComp')]", "BinOp -> [('left', 'Attribute'), ('op', 'Add'), ('right', 'List')]", "BinOp -> [('left', 'Name'), ('op', 'Div'), ('right', 'Attribute')]", "BinOp -> [('left', 'Tuple'), ('op', 'Mult'), ('right', 'Call')]", "BinOp -> [('left', 'Name'), ('op', 'Add'), ('right', 'Subscript')]", "BinOp -> [('left', 'Name'), ('op', 'BitAnd'), ('right', 'Name')]", "BinOp -> [('left', 'BinOp'), ('op', 'BitOr'), ('right', 'Name')]", "BinOp -> [('left', 'Subscript'), ('op', 'Add'), ('right', 'Tuple')]", "BinOp -> [('left', 'ListComp'), ('op', 'Add'), ('right', 'List')]", "BinOp -> [('left', 'Attribute'), ('op', 'Sub'), ('right', 'Call')]", "BinOp -> [('left', 'Num'), ('op', 'LShift'), ('right', 'Name')]", "BinOp -> [('left', 'Name'), ('op', 'BitAnd'), ('right', 'Attribute')]", "BinOp -> [('left', 'Name'), ('op', 'BitAnd'), ('right', 'UnaryOp')]", "BinOp -> [('left', 'BinOp'), ('op', 'Mod'), ('right', 'Name')]", "BinOp -> [('left', 'Call'), ('op', 'Add'), ('right', 'Attribute')]", "BinOp -> [('left', 'Call'), ('op', 'Mult'), ('right', 'BinOp')]", "BinOp -> [('left', 'BinOp'), ('op', 'Mod'), ('right', 'Call')]", "BinOp -> [('left', 'Name'), ('op', 'FloorDiv'), ('right', 'BinOp')]", "BinOp -> [('left', 'Name'), ('op', 'Mod'), ('right', 'Str')]", "BinOp -> [('left', 'Attribute'), ('op', 'Mod'), ('right', 'Call')]", "BinOp -> [('left', 'Attribute'), ('op', 'Mod'), ('right', 'Dict')]", "BinOp -> [('left', 'BinOp'), ('op', 'Mod'), ('right', 'Attribute')]", "BinOp -> [('left', 'Num'), ('op', 'Div'), ('right', 'Call')]", "BinOp -> [('left', 'Attribute'), ('op', 'Pow'), ('right', 'Num')]", "BinOp -> [('left', 'UnaryOp'), ('op', 'Sub'), ('right', 'Name')]", "BinOp -> [('left', 'UnaryOp'), ('op', 'Add'), ('right', 'Name')]", "BinOp -> [('left', 'Name'), ('op', 'BitAnd'), ('right', 'Compare')]", "BinOp -> [('left', 'Call'), ('op', 'Sub'), ('right', 'Attribute')]", "BinOp -> [('left', 'BinOp'), ('op', 'BitXor'), ('right', 'BinOp')]", "BinOp -> [('left', 'Call'), ('op', 'Div'), ('right', 'Attribute')]", "BinOp -> [('left', 'Subscript'), ('op', 'Add'), ('right', 'Attribute')]", "BinOp -> [('left', 'Subscript'), ('op', 'Add'), ('right', 'Num')]", "BinOp -> [('left', 'List'), ('op', 'Add'), ('right', 'Attribute')]", "BinOp -> [('left', 'Name'), ('op', 'RShift'), ('right', 'Num')]", "BinOp -> [('left', 'Call'), ('op', 'Add'), ('right', 'IfExp')]", "BinOp -> [('left', 'Tuple'), ('op', 'Add'), ('right', 'Tuple')]", "BinOp -> [('left', 'Name'), ('op', 'Pow'), ('right', 'BinOp')]", "BinOp -> [('left', 'BinOp'), ('op', 'Add'), ('right', 'ListComp')]", "BinOp -> [('left', 'Num'), ('op', 'Pow'), ('right', 'Call')]", "BinOp -> [('left', 'Num'), ('op', 'Pow'), ('right', 'BinOp')]", "BinOp -> [('left', 'Num'), ('op', 'Add'), ('right', 'Num')]", "BinOp -> [('left', 'Name'), ('op', 'FloorDiv'), ('right', 'Attribute')]", "BinOp -> [('left', 'Attribute'), ('op', 'Mod'), ('right', 'Str')]", "BinOp -> [('left', 'BinOp'), ('op', 'Mod'), ('right', 'Tuple')]", "BinOp -> [('left', 'Subscript'), ('op', 'Mod'), ('right', 'Call')]", "BinOp -> [('left', 'Subscript'), ('op', 'Mod'), ('right', 'Name')]", "BinOp -> [('left', 'Call'), ('op', 'Mod'), ('right', 'Str')]", "BinOp -> [('left', 'Call'), ('op', 'BitAnd'), ('right', 'Num')]", "BinOp -> [('left', 'BinOp'), ('op', 'BitAnd'), ('right', 'Call')]", "BinOp -> [('left', 'Subscript'), ('op', 'BitOr'), ('right', 'Call')]", "BinOp -> [('left', 'Num'), ('op', 'Pow'), ('right', 'Attribute')]", "BinOp -> [('left', 'Repr'), ('op', 'Add'), ('right', 'Repr')]", "BinOp -> [('left', 'BinOp'), ('op', 'Mod'), ('right', 'Num')]", "BinOp -> [('left', 'Name'), ('op', 'BitAnd'), ('right', 'BinOp')]", "BinOp -> [('left', 'Str'), ('op', 'Mult'), ('right', 'Attribute')]", "BinOp -> [('left', 'ListComp'), ('op', 'Add'), ('right', 'Name')]", "BinOp -> [('left', 'Name'), ('op', 'BitAnd'), ('right', 'Call')]", "BinOp -> [('left', 'Name'), ('op', 'BitOr'), ('right', 'Attribute')]", "BinOp -> [('left', 'Str'), ('op', 'Mult'), ('right', 'Call')]", "BinOp -> [('left', 'Attribute'), ('op', 'Mod'), ('right', 'Num')]", "BinOp -> [('left', 'UnaryOp'), ('op', 'Div'), ('right', 'Name')]", "BinOp -> [('left', 'Call'), ('op', 'Mult'), ('right', 'Call')]", "BinOp -> [('left', 'BinOp'), ('op', 'RShift'), ('right', 'Name')]", "BinOp -> [('left', 'BinOp'), ('op', 'BitOr'), ('right', 'BinOp')]", "BinOp -> [('left', 'Name'), ('op', 'LShift'), ('right', 'Name')]", "BinOp -> [('left', 'Call'), ('op', 'BitXor'), ('right', 'Call')]", "BinOp -> [('left', 'Subscript'), ('op', 'Div'), ('right', 'Call')]", "BinOp -> [('left', 'Attribute'), ('op', 'BitAnd'), ('right', 'UnaryOp')]", "BinOp -> [('left', 'Name'), ('op', 'LShift'), ('right', 'Num')]", "BinOp -> [('left', 'BinOp'), ('op', 'RShift'), ('right', 'Num')]", "BinOp -> [('left', 'Call'), ('op', 'Add'), ('right', 'BoolOp')]", "BinOp -> [('left', 'Str'), ('op', 'Mod'), ('right', 'BoolOp')]", "BinOp -> [('left', 'Attribute'), ('op', 'Div'), ('right', 'Name')]", "BinOp -> [('left', 'Subscript'), ('op', 'BitAnd'), ('right', 'Name')]", "BinOp -> [('left', 'Subscript'), ('op', 'Mod'), ('right', 'Tuple')]", "BinOp -> [('left', 'Name'), ('op', 'BitOr'), ('right', 'BinOp')]", "BinOp -> [('left', 'Tuple'), ('op', 'Add'), ('right', 'Subscript')]", "BinOp -> [('left', 'BinOp'), ('op', 'BitAnd'), ('right', 'UnaryOp')]", "BinOp -> [('left', 'Attribute'), ('op', 'BitAnd'), ('right', 'Name')]", "BinOp -> [('left', 'Call'), ('op', 'Pow'), ('right', 'BinOp')]", "BinOp -> [('left', 'BinOp'), ('op', 'Sub'), ('right', 'Subscript')]", "BinOp -> [('left', 'List'), ('op', 'Mult'), ('right', 'Subscript')]", "BinOp -> [('left', 'Call'), ('op', 'Sub'), ('right', 'BinOp')]", "BinOp -> [('left', 'Name'), ('op', 'Mult'), ('right', 'Subscript')]", "BinOp -> [('left', 'BoolOp'), ('op', 'Add'), ('right', 'BoolOp')]", "BinOp -> [('left', 'Name'), ('op', 'Add'), ('right', 'BoolOp')]", "BinOp -> [('left', 'List'), ('op', 'Add'), ('right', 'BoolOp')]", "BinOp -> [('left', 'BinOp'), ('op', 'Sub'), ('right', 'Call')]", "BinOp -> [('left', 'Num'), ('op', 'Mult'), ('right', 'Str')]", "BinOp -> [('left', 'Attribute'), ('op', 'BitAnd'), ('right', 'Attribute')]", "BinOp -> [('left', 'BinOp'), ('op', 'Mult'), ('right', 'Str')]", "BinOp -> [('left', 'UnaryOp'), ('op', 'Sub'), ('right', 'Call')]", "BinOp -> [('left', 'Call'), ('op', 'BitAnd'), ('right', 'Name')]", "BinOp -> [('left', 'Name'), ('op', 'RShift'), ('right', 'Name')]", "BinOp -> [('left', 'Call'), ('op', 'BitXor'), ('right', 'BinOp')]", "BinOp -> [('left', 'Attribute'), ('op', 'LShift'), ('right', 'Num')]", "BinOp -> [('left', 'Attribute'), ('op', 'RShift'), ('right', 'Num')]", "BinOp -> [('left', 'Attribute'), ('op', 'BitAnd'), ('right', 'BinOp')]", "BinOp -> [('left', 'Call'), ('op', 'Sub'), ('right', 'Subscript')]", "BinOp -> [('left', 'Subscript'), ('op', 'Sub'), ('right', 'BinOp')]", "BinOp -> [('left', 'Num'), ('op', 'Mult'), ('right', 'List')]", "BinOp -> [('left', 'Name'), ('op', 'Mult'), ('right', 'Compare')]", "BinOp -> [('left', 'Str'), ('op', 'Mult'), ('right', 'Subscript')]", "BinOp -> [('left', 'Attribute'), ('op', 'Sub'), ('right', 'Subscript')]", "BinOp -> [('left', 'UnaryOp'), ('op', 'Mult'), ('right', 'Call')]", "BinOp -> [('left', 'Attribute'), ('op', 'Div'), ('right', 'Call')]", "BinOp -> [('left', 'List'), ('op', 'Add'), ('right', 'List')]", "BinOp -> [('left', 'Tuple'), ('op', 'Add'), ('right', 'Name')]", "BinOp -> [('left', 'Name'), ('op', 'Mod'), ('right', 'Subscript')]", "BinOp -> [('left', 'Subscript'), ('op', 'Div'), ('right', 'Attribute')]", "BinOp -> [('left', 'BinOp'), ('op', 'Div'), ('right', 'Subscript')]", "BinOp -> [('left', 'Call'), ('op', 'Div'), ('right', 'Str')]", "BinOp -> [('left', 'Name'), ('op', 'Div'), ('right', 'Str')]", "BinOp -> [('left', 'Attribute'), ('op', 'Add'), ('right', 'Subscript')]", "BinOp -> [('left', 'Num'), ('op', 'LShift'), ('right', 'BinOp')]", "BinOp -> [('left', 'Num'), ('op', 'LShift'), ('right', 'Attribute')]", "BinOp -> [('left', 'Num'), ('op', 'FloorDiv'), ('right', 'Num')]", "BinOp -> [('left', 'Attribute'), ('op', 'FloorDiv'), ('right', 'Num')]", "BinOp -> [('left', 'Name'), ('op', 'RShift'), ('right', 'BinOp')]", "BinOp -> [('left', 'UnaryOp'), ('op', 'Div'), ('right', 'BinOp')]", "BinOp -> [('left', 'BinOp'), ('op', 'Sub'), ('right', 'Attribute')]", "BinOp -> [('left', 'Num'), ('op', 'Mod'), ('right', 'Num')]", "BinOp -> [('left', 'Call'), ('op', 'BitAnd'), ('right', 'Attribute')]", "BinOp -> [('left', 'Call'), ('op', 'BitOr'), ('right', 'Attribute')]", "BinOp -> [('left', 'Subscript'), ('op', 'Mult'), ('right', 'Attribute')]", "BinOp -> [('left', 'Name'), ('op', 'Add'), ('right', 'IfExp')]", "BinOp -> [('left', 'Call'), ('op', 'Div'), ('right', 'Subscript')]", "BinOp -> [('left', 'Call'), ('op', 'BitAnd'), ('right', 'BinOp')]", "BinOp -> [('left', 'List'), ('op', 'Add'), ('right', 'IfExp')]"], "Expr": ["Expr -> [('value', 'Call')]", "Expr -> [('value', 'Str')]", "Expr -> [('value', 'Name')]", "Expr -> [('value', 'Tuple')]", "Expr -> [('value', 'BinOp')]", "Expr -> [('value', 'Yield')]", "Expr -> [('value', 'Attribute')]", "Expr -> [('value', 'Subscript')]", "Expr -> [('value', 'ListComp')]", "Expr -> [('value', 'BoolOp')]", "Expr -> [('value', 'List')]", "Expr -> [('value', 'Compare')]"], "BoolOp": ["BoolOp -> [('op', 'Or'), ('values', ['Compare', 'Compare'])]", "BoolOp -> [('op', 'And'), ('values', ['Attribute', 'Compare'])]", "BoolOp -> [('op', 'And'), ('values', ['Compare', 'Compare'])]", "BoolOp -> [('op', 'And'), ('values', ['Name', 'Name'])]", "BoolOp -> [('op', 'And'), ('values', ['Compare', 'Call'])]", "BoolOp -> [('op', 'And'), ('values', ['UnaryOp', 'Compare'])]", "BoolOp -> [('op', 'Or'), ('values', ['Attribute', 'Attribute'])]", "BoolOp -> [('op', 'Or'), ('values', ['Attribute', 'Attribute', 'Attribute'])]", "BoolOp -> [('op', 'Or'), ('values', ['Call', 'Call'])]", "BoolOp -> [('op', 'And'), ('values', ['Compare', 'UnaryOp', 'Compare'])]", "BoolOp -> [('op', 'And'), ('values', ['Call', 'UnaryOp'])]", "BoolOp -> [('op', 'And'), ('values', ['Call', 'Call'])]", "BoolOp -> [('op', 'Or'), ('values', ['Call', 'UnaryOp'])]", "BoolOp -> [('op', 'Or'), ('values', ['UnaryOp', 'Compare'])]", "BoolOp -> [('op', 'And'), ('values', ['Attribute', 'Call'])]", "BoolOp -> [('op', 'And'), ('values', ['Compare', 'UnaryOp'])]", "BoolOp -> [('op', 'And'), ('values', ['Compare', 'Attribute', 'UnaryOp'])]", "BoolOp -> [('op', 'Or'), ('values', ['UnaryOp', 'UnaryOp'])]", "BoolOp -> [('op', 'Or'), ('values', ['Call', 'Compare'])]", "BoolOp -> [('op', 'Or'), ('values', ['Call', 'Str'])]", "BoolOp -> [('op', 'And'), ('values', ['Name', 'Attribute'])]", "BoolOp -> [('op', 'And'), ('values', ['Name', 'Compare'])]", "BoolOp -> [('op', 'And'), ('values', ['Name', 'Call'])]", "BoolOp -> [('op', 'And'), ('values', ['Call', 'Name'])]", "BoolOp -> [('op', 'Or'), ('values', ['Attribute', 'Str'])]", "BoolOp -> [('op', 'Or'), ('values', ['Subscript', 'Str'])]", "BoolOp -> [('op', 'Or'), ('values', ['BoolOp', 'Str'])]", "BoolOp -> [('op', 'And'), ('values', ['Attribute', 'Str'])]", "BoolOp -> [('op', 'Or'), ('values', ['Name', 'Attribute'])]", "BoolOp -> [('op', 'Or'), ('values', ['BoolOp', 'Compare'])]", "BoolOp -> [('op', 'Or'), ('values', ['Call', 'Attribute'])]", "BoolOp -> [('op', 'And'), ('values', ['Call', 'Compare'])]", "BoolOp -> [('op', 'Or'), ('values', ['Subscript', 'Name'])]", "BoolOp -> [('op', 'Or'), ('values', ['Attribute', 'Name'])]", "BoolOp -> [('op', 'And'), ('values', ['UnaryOp', 'Call'])]", "BoolOp -> [('op', 'Or'), ('values', ['Call', 'Num'])]", "BoolOp -> [('op', 'And'), ('values', ['Compare', 'Str'])]", "BoolOp -> [('op', 'Or'), ('values', ['Name', 'Dict'])]", "BoolOp -> [('op', 'Or'), ('values', ['Compare', 'Attribute'])]", "BoolOp -> [('op', 'Or'), ('values', ['Name', 'List'])]", "BoolOp -> [('op', 'And'), ('values', ['Compare', 'Compare', 'UnaryOp'])]", "BoolOp -> [('op', 'Or'), ('values', ['BoolOp', 'Dict'])]", "BoolOp -> [('op', 'Or'), ('values', ['Name', 'Name'])]", "BoolOp -> [('op', 'Or'), ('values', ['BoolOp', 'Num'])]", "BoolOp -> [('op', 'And'), ('values', ['Name', 'Num'])]", "BoolOp -> [('op', 'And'), ('values', ['Call', 'Compare', 'Call'])]", "BoolOp -> [('op', 'And'), ('values', ['Name', 'UnaryOp'])]", "BoolOp -> [('op', 'Or'), ('values', ['Compare', 'UnaryOp'])]", "BoolOp -> [('op', 'And'), ('values', ['Attribute', 'Call', 'Call'])]", "BoolOp -> [('op', 'And'), ('values', ['Attribute', 'Attribute', 'Attribute'])]", "BoolOp -> [('op', 'Or'), ('values', ['Attribute', 'Call'])]", "BoolOp -> [('op', 'Or'), ('values', ['Name', 'Call'])]", "BoolOp -> [('op', 'And'), ('values', ['Compare', 'BoolOp'])]", "BoolOp -> [('op', 'And'), ('values', ['UnaryOp', 'Attribute'])]", "BoolOp -> [('op', 'Or'), ('values', ['BoolOp', 'Attribute'])]", "BoolOp -> [('op', 'And'), ('values', ['Name', 'BinOp'])]", "BoolOp -> [('op', 'And'), ('values', ['BoolOp', 'Compare'])]", "BoolOp -> [('op', 'And'), ('values', ['Attribute', 'UnaryOp', 'Compare'])]", "BoolOp -> [('op', 'And'), ('values', ['Call', 'Call', 'Compare'])]", "BoolOp -> [('op', 'And'), ('values', ['Attribute', 'Name'])]", "BoolOp -> [('op', 'Or'), ('values', ['Compare', 'Compare', 'Call'])]", "BoolOp -> [('op', 'Or'), ('values', ['Compare', 'Call'])]", "BoolOp -> [('op', 'And'), ('values', ['Call', 'Str'])]", "BoolOp -> [('op', 'Or'), ('values', ['Name', 'Str'])]", "BoolOp -> [('op', 'And'), ('values', ['Attribute', 'UnaryOp'])]", "BoolOp -> [('op', 'Or'), ('values', ['Compare', 'Compare', 'Compare', 'Compare'])]", "BoolOp -> [('op', 'And'), ('values', ['Attribute', 'Compare', 'Compare'])]", "BoolOp -> [('op', 'And'), ('values', ['Name', 'Attribute', 'Compare'])]", "BoolOp -> [('op', 'Or'), ('values', ['Call', 'Name'])]", "BoolOp -> [('op', 'Or'), ('values', ['UnaryOp', 'Call'])]", "BoolOp -> [('op', 'And'), ('values', ['UnaryOp', 'Name'])]", "BoolOp -> [('op', 'Or'), ('values', ['BoolOp', 'Name'])]", "BoolOp -> [('op', 'And'), ('values', ['Name', 'List'])]", "BoolOp -> [('op', 'Or'), ('values', ['Name', 'BoolOp'])]", "BoolOp -> [('op', 'And'), ('values', ['Compare', 'Attribute'])]", "BoolOp -> [('op', 'Or'), ('values', ['Subscript', 'Call'])]", "BoolOp -> [('op', 'Or'), ('values', ['Name', 'Subscript'])]", "BoolOp -> [('op', 'And'), ('values', ['Call', 'Attribute'])]", "BoolOp -> [('op', 'And'), ('values', ['UnaryOp', 'UnaryOp'])]", "BoolOp -> [('op', 'Or'), ('values', ['BoolOp', 'BoolOp'])]", "BoolOp -> [('op', 'Or'), ('values', ['Call', 'List'])]", "BoolOp -> [('op', 'Or'), ('values', ['Attribute', 'Tuple'])]", "BoolOp -> [('op', 'Or'), ('values', ['Attribute', 'List'])]", "BoolOp -> [('op', 'And'), ('values', ['Compare', 'Name'])]", "BoolOp -> [('op', 'Or'), ('values', ['Name', 'Name', 'Name'])]", "BoolOp -> [('op', 'And'), ('values', ['Name', 'Compare', 'Compare'])]", "BoolOp -> [('op', 'Or'), ('values', ['Name', 'Num'])]", "BoolOp -> [('op', 'Or'), ('values', ['Name', 'UnaryOp'])]", "BoolOp -> [('op', 'Or'), ('values', ['Compare', 'Compare', 'Compare'])]", "BoolOp -> [('op', 'And'), ('values', ['Compare', 'Compare', 'Compare'])]", "BoolOp -> [('op', 'And'), ('values', ['Call', 'UnaryOp', 'Compare'])]", "BoolOp -> [('op', 'And'), ('values', ['Call', 'Attribute', 'Compare'])]", "BoolOp -> [('op', 'Or'), ('values', ['Compare', 'Name'])]", "BoolOp -> [('op', 'And'), ('values', ['UnaryOp', 'BoolOp'])]", "BoolOp -> [('op', 'And'), ('values', ['Compare', 'UnaryOp', 'UnaryOp'])]", "BoolOp -> [('op', 'And'), ('values', ['Name', 'BoolOp'])]", "BoolOp -> [('op', 'Or'), ('values', ['Name', 'Compare'])]", "BoolOp -> [('op', 'And'), ('values', ['Attribute', 'Name', 'Compare'])]", "BoolOp -> [('op', 'And'), ('values', ['Compare', 'Compare', 'UnaryOp', 'UnaryOp', 'UnaryOp', 'BoolOp'])]", "BoolOp -> [('op', 'And'), ('values', ['UnaryOp', 'UnaryOp', 'UnaryOp'])]", "BoolOp -> [('op', 'And'), ('values', ['Compare', 'BoolOp', 'Name'])]", "BoolOp -> [('op', 'Or'), ('values', ['Compare', 'Call', 'Call'])]", "BoolOp -> [('op', 'And'), ('values', ['Compare', 'Subscript'])]", "BoolOp -> [('op', 'And'), ('values', ['UnaryOp', 'Name', 'Compare'])]", "BoolOp -> [('op', 'Or'), ('values', ['Call', 'Tuple'])]", "BoolOp -> [('op', 'And'), ('values', ['Name', 'Name', 'Name'])]", "BoolOp -> [('op', 'Or'), ('values', ['Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute'])]", "BoolOp -> [('op', 'And'), ('values', ['Attribute', 'Attribute'])]", "BoolOp -> [('op', 'And'), ('values', ['Num', 'Compare'])]", "BoolOp -> [('op', 'And'), ('values', ['Call', 'Compare', 'UnaryOp'])]", "BoolOp -> [('op', 'And'), ('values', ['UnaryOp', 'Name', 'Compare', 'Compare'])]", "BoolOp -> [('op', 'And'), ('values', ['UnaryOp', 'Str'])]", "BoolOp -> [('op', 'Or'), ('values', ['Subscript', 'Attribute'])]", "BoolOp -> [('op', 'And'), ('values', ['Name', 'Attribute', 'BoolOp'])]", "BoolOp -> [('op', 'And'), ('values', ['UnaryOp', 'Name', 'Call'])]", "BoolOp -> [('op', 'And'), ('values', ['UnaryOp', 'UnaryOp', 'Attribute'])]", "BoolOp -> [('op', 'Or'), ('values', ['Attribute', 'Compare', 'UnaryOp'])]", "BoolOp -> [('op', 'Or'), ('values', ['UnaryOp', 'UnaryOp', 'UnaryOp'])]", "BoolOp -> [('op', 'And'), ('values', ['UnaryOp', 'UnaryOp', 'UnaryOp', 'UnaryOp', 'BoolOp'])]", "BoolOp -> [('op', 'And'), ('values', ['Compare', 'Compare', 'Compare', 'Compare'])]", "BoolOp -> [('op', 'And'), ('values', ['Call', 'Call', 'Call'])]", "BoolOp -> [('op', 'And'), ('values', ['Compare', 'Call', 'Call'])]", "BoolOp -> [('op', 'And'), ('values', ['Call', 'Call', 'Call', 'UnaryOp'])]", "BoolOp -> [('op', 'And'), ('values', ['Name', 'Call', 'Compare'])]", "BoolOp -> [('op', 'And'), ('values', ['Subscript', 'Compare'])]", "BoolOp -> [('op', 'And'), ('values', ['UnaryOp', 'Attribute', 'Attribute'])]", "BoolOp -> [('op', 'Or'), ('values', ['Call', 'Call', 'Call'])]", "BoolOp -> [('op', 'Or'), ('values', ['Call', 'Subscript'])]", "BoolOp -> [('op', 'And'), ('values', ['Compare', 'Name', 'Call'])]", "BoolOp -> [('op', 'And'), ('values', ['Name', 'Call', 'Call'])]", "BoolOp -> [('op', 'Or'), ('values', ['Compare', 'BoolOp'])]", "BoolOp -> [('op', 'And'), ('values', ['UnaryOp', 'Call', 'Compare'])]", "BoolOp -> [('op', 'And'), ('values', ['Compare', 'Attribute', 'Attribute', 'Attribute'])]", "BoolOp -> [('op', 'And'), ('values', ['Compare', 'Attribute', 'Attribute', 'Attribute', 'Compare'])]", "BoolOp -> [('op', 'Or'), ('values', ['UnaryOp', 'Compare', 'BoolOp', 'BoolOp'])]", "BoolOp -> [('op', 'And'), ('values', ['Compare', 'Compare', 'Call'])]", "BoolOp -> [('op', 'Or'), ('values', ['UnaryOp', 'Name'])]", "BoolOp -> [('op', 'And'), ('values', ['Name', 'Str'])]", "BoolOp -> [('op', 'And'), ('values', ['Subscript', 'Num'])]", "BoolOp -> [('op', 'Or'), ('values', ['Attribute', 'Compare'])]", "BoolOp -> [('op', 'And'), ('values', ['Compare', 'Name', 'Attribute'])]", "BoolOp -> [('op', 'And'), ('values', ['Name', 'Attribute', 'Attribute'])]", "BoolOp -> [('op', 'And'), ('values', ['Call', 'Attribute', 'Call'])]", "BoolOp -> [('op', 'Or'), ('values', ['Name', 'Tuple'])]", "BoolOp -> [('op', 'Or'), ('values', ['UnaryOp', 'BoolOp'])]", "BoolOp -> [('op', 'Or'), ('values', ['BoolOp', 'List'])]", "BoolOp -> [('op', 'Or'), ('values', ['Attribute', 'UnaryOp'])]", "BoolOp -> [('op', 'Or'), ('values', ['Attribute', 'BoolOp'])]", "BoolOp -> [('op', 'And'), ('values', ['BoolOp', 'Call'])]", "BoolOp -> [('op', 'And'), ('values', ['Attribute', 'BoolOp'])]", "BoolOp -> [('op', 'And'), ('values', ['Subscript', 'UnaryOp'])]", "BoolOp -> [('op', 'And'), ('values', ['Subscript', 'Attribute'])]", "BoolOp -> [('op', 'Or'), ('values', ['Attribute', 'Dict'])]", "BoolOp -> [('op', 'And'), ('values', ['Name', 'UnaryOp', 'Call'])]", "BoolOp -> [('op', 'And'), ('values', ['Attribute', 'BinOp'])]", "BoolOp -> [('op', 'Or'), ('values', ['BoolOp', 'Subscript'])]", "BoolOp -> [('op', 'And'), ('values', ['Attribute', 'Subscript'])]", "BoolOp -> [('op', 'And'), ('values', ['BoolOp', 'BoolOp'])]", "BoolOp -> [('op', 'Or'), ('values', ['Compare', 'UnaryOp', 'UnaryOp'])]", "BoolOp -> [('op', 'And'), ('values', ['Name', 'Subscript'])]", "BoolOp -> [('op', 'Or'), ('values', ['Str', 'Str'])]", "BoolOp -> [('op', 'And'), ('values', ['Compare', 'Compare', 'BoolOp'])]", "BoolOp -> [('op', 'And'), ('values', ['UnaryOp', 'Attribute', 'Name'])]", "BoolOp -> [('op', 'And'), ('values', ['Call', 'Compare', 'Compare'])]", "BoolOp -> [('op', 'And'), ('values', ['Name', 'UnaryOp', 'UnaryOp'])]", "BoolOp -> [('op', 'Or'), ('values', ['Compare', 'Compare', 'UnaryOp'])]", "BoolOp -> [('op', 'And'), ('values', ['Attribute', 'Subscript', 'Call'])]", "BoolOp -> [('op', 'And'), ('values', ['Compare', 'UnaryOp', 'UnaryOp', 'UnaryOp'])]", "BoolOp -> [('op', 'And'), ('values', ['Attribute', 'Attribute', 'Call', 'Compare'])]", "BoolOp -> [('op', 'And'), ('values', ['Compare', 'Compare', 'Subscript'])]", "BoolOp -> [('op', 'And'), ('values', ['Compare', 'Subscript', 'Compare'])]", "BoolOp -> [('op', 'Or'), ('values', ['Compare', 'UnaryOp', 'Compare'])]", "BoolOp -> [('op', 'And'), ('values', ['Compare', 'Call', 'UnaryOp'])]", "BoolOp -> [('op', 'And'), ('values', ['UnaryOp', 'Call', 'UnaryOp'])]", "BoolOp -> [('op', 'And'), ('values', ['UnaryOp', 'Subscript'])]", "BoolOp -> [('op', 'And'), ('values', ['BoolOp', 'Attribute'])]", "BoolOp -> [('op', 'And'), ('values', ['Attribute', 'UnaryOp', 'Attribute'])]", "BoolOp -> [('op', 'And'), ('values', ['Compare', 'UnaryOp', 'Subscript'])]", "BoolOp -> [('op', 'And'), ('values', ['Compare', 'Compare', 'UnaryOp', 'Subscript'])]", "BoolOp -> [('op', 'And'), ('values', ['Compare', 'BinOp'])]", "BoolOp -> [('op', 'Or'), ('values', ['Attribute', 'BoolOp', 'Attribute'])]", "BoolOp -> [('op', 'Or'), ('values', ['BoolOp', 'Call'])]", "BoolOp -> [('op', 'Or'), ('values', ['Call', 'BoolOp'])]", "BoolOp -> [('op', 'And'), ('values', ['Attribute', 'BoolOp', 'Compare'])]", "BoolOp -> [('op', 'Or'), ('values', ['UnaryOp', 'Attribute'])]", "BoolOp -> [('op', 'Or'), ('values', ['Attribute', 'Num'])]", "BoolOp -> [('op', 'And'), ('values', ['Call', 'BinOp'])]", "BoolOp -> [('op', 'Or'), ('values', ['Name', 'BinOp'])]", "BoolOp -> [('op', 'Or'), ('values', ['Subscript', 'Num'])]", "BoolOp -> [('op', 'And'), ('values', ['Name', 'Compare', 'UnaryOp'])]", "BoolOp -> [('op', 'And'), ('values', ['Subscript', 'Subscript'])]", "BoolOp -> [('op', 'And'), ('values', ['Name', 'Compare', 'BoolOp'])]", "BoolOp -> [('op', 'And'), ('values', ['Name', 'Call', 'Call', 'Compare'])]", "BoolOp -> [('op', 'Or'), ('values', ['Name', 'Attribute', 'Compare'])]", "BoolOp -> [('op', 'Or'), ('values', ['BoolOp', 'BinOp'])]", "BoolOp -> [('op', 'And'), ('values', ['Call', 'UnaryOp', 'UnaryOp'])]", "BoolOp -> [('op', 'And'), ('values', ['UnaryOp', 'Compare', 'Compare', 'Compare'])]", "BoolOp -> [('op', 'And'), ('values', ['Name', 'Name', 'Compare'])]", "BoolOp -> [('op', 'And'), ('values', ['Name', 'Name', 'UnaryOp'])]", "BoolOp -> [('op', 'Or'), ('values', ['Compare', 'Call', 'Call', 'Call'])]", "BoolOp -> [('op', 'Or'), ('values', ['Compare', 'Call', 'Compare'])]", "BoolOp -> [('op', 'Or'), ('values', ['Call', 'Call', 'Call', 'Compare', 'Call', 'BoolOp'])]", "BoolOp -> [('op', 'Or'), ('values', ['ListComp', 'List'])]", "BoolOp -> [('op', 'Or'), ('values', ['UnaryOp', 'Attribute', 'BoolOp'])]", "BoolOp -> [('op', 'And'), ('values', ['Name', 'Call', 'Attribute'])]", "BoolOp -> [('op', 'And'), ('values', ['Attribute', 'Attribute', 'Compare'])]", "BoolOp -> [('op', 'Or'), ('values', ['BoolOp', 'BoolOp', 'Compare'])]", "BoolOp -> [('op', 'And'), ('values', ['Call', 'BoolOp'])]", "BoolOp -> [('op', 'Or'), ('values', ['BoolOp', 'UnaryOp'])]", "BoolOp -> [('op', 'And'), ('values', ['BinOp', 'Compare'])]", "BoolOp -> [('op', 'Or'), ('values', ['Call', 'Call', 'Call', 'Call'])]", "BoolOp -> [('op', 'And'), ('values', ['Call', 'BoolOp', 'BoolOp'])]", "BoolOp -> [('op', 'And'), ('values', ['Name', 'UnaryOp', 'Compare'])]", "BoolOp -> [('op', 'And'), ('values', ['Call', 'ListComp'])]", "BoolOp -> [('op', 'And'), ('values', ['BoolOp', 'BoolOp', 'BoolOp'])]", "BoolOp -> [('op', 'Or'), ('values', ['UnaryOp', 'UnaryOp', 'Compare', 'Compare', 'Compare'])]", "BoolOp -> [('op', 'And'), ('values', ['Compare', 'Name', 'UnaryOp'])]", "BoolOp -> [('op', 'Or'), ('values', ['Name', 'Attribute', 'Name'])]", "BoolOp -> [('op', 'Or'), ('values', ['Call', 'Call', 'Name'])]", "BoolOp -> [('op', 'Or'), ('values', ['Compare', 'BoolOp', 'Compare'])]", "BoolOp -> [('op', 'And'), ('values', ['UnaryOp', 'Name', 'Name'])]", "BoolOp -> [('op', 'And'), ('values', ['Compare', 'Attribute', 'Compare'])]", "BoolOp -> [('op', 'And'), ('values', ['Compare', 'Call', 'BoolOp'])]", "BoolOp -> [('op', 'And'), ('values', ['Compare', 'Num'])]", "BoolOp -> [('op', 'And'), ('values', ['Subscript', 'Call'])]", "BoolOp -> [('op', 'Or'), ('values', ['Call', 'Call', 'Num'])]", "BoolOp -> [('op', 'And'), ('values', ['Compare', 'Attribute', 'Attribute'])]", "BoolOp -> [('op', 'And'), ('values', ['Attribute', 'Subscript', 'UnaryOp'])]", "BoolOp -> [('op', 'And'), ('values', ['Name', 'UnaryOp', 'BoolOp'])]", "BoolOp -> [('op', 'And'), ('values', ['Call', 'Subscript'])]", "BoolOp -> [('op', 'Or'), ('values', ['Compare', 'Name', 'Name'])]", "BoolOp -> [('op', 'And'), ('values', ['Name', 'Name', 'Compare', 'Compare', 'Compare', 'Compare'])]", "BoolOp -> [('op', 'And'), ('values', ['Call', 'Compare', 'BoolOp'])]", "BoolOp -> [('op', 'And'), ('values', ['Call', 'Name', 'Compare'])]", "BoolOp -> [('op', 'Or'), ('values', ['Call', 'Call', 'Call', 'Call', 'Call', 'Call'])]"], "List": ["List -> [('elts', ['Dict']), ('ctx', 'Load')]", "List -> [('elts', ['Dict', 'Dict', 'Dict', 'Dict', 'Dict']), ('ctx', 'Load')]", "List -> [('elts', ['Dict', 'Dict']), ('ctx', 'Load')]", "List -> [('elts', ['Dict', 'Dict', 'Dict']), ('ctx', 'Load')]", "List -> [('elts', []), ('ctx', 'Load')]", "List -> [('elts', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('ctx', 'Load')]", "List -> [('elts', ['Tuple', 'Tuple', 'Tuple', 'Tuple']), ('ctx', 'Load')]", "List -> [('elts', ['Dict', 'Dict', 'Dict', 'Dict']), ('ctx', 'Load')]", "List -> [('elts', ['Str']), ('ctx', 'Load')]", "List -> [('elts', ['Call', 'Call']), ('ctx', 'Load')]", "List -> [('elts', ['Num', 'Num']), ('ctx', 'Load')]", "List -> [('elts', ['Num', 'Num', 'Num', 'Num', 'Num', 'Num']), ('ctx', 'Load')]", "List -> [('elts', ['Str', 'Str']), ('ctx', 'Load')]", "List -> [('elts', ['Str', 'Str', 'Str']), ('ctx', 'Load')]", "List -> [('elts', ['Tuple']), ('ctx', 'Load')]", "List -> [('elts', ['Str', 'Name', 'Name']), ('ctx', 'Load')]", "List -> [('elts', ['Str', 'Str', 'Name']), ('ctx', 'Load')]", "List -> [('elts', ['BinOp']), ('ctx', 'Load')]", "List -> [('elts', ['Str', 'Str', 'Str', 'Str']), ('ctx', 'Load')]", "List -> [('elts', ['Name']), ('ctx', 'Load')]", "List -> [('elts', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Num', 'Name']), ('ctx', 'Load')]", "List -> [('elts', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Num', 'Name', 'Name']), ('ctx', 'Load')]", "List -> [('elts', ['Attribute', 'Attribute', 'Attribute', 'Attribute']), ('ctx', 'Load')]", "List -> [('elts', ['BinOp', 'BinOp']), ('ctx', 'Load')]", "List -> [('elts', ['Attribute']), ('ctx', 'Load')]", "List -> [('elts', ['Attribute', 'Attribute']), ('ctx', 'Load')]", "List -> [('elts', ['Attribute', 'Name', 'Name']), ('ctx', 'Load')]", "List -> [('elts', ['Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Name', 'Attribute', 'Attribute']), ('ctx', 'Load')]", "List -> [('elts', ['Str', 'Str', 'Str', 'Str', 'Str']), ('ctx', 'Load')]", "List -> [('elts', ['Num', 'Num', 'Num', 'Num', 'Num']), ('ctx', 'Load')]", "List -> [('elts', ['Call']), ('ctx', 'Load')]", "List -> [('elts', ['Tuple', 'Tuple']), ('ctx', 'Load')]", "List -> [('elts', ['Num', 'Num', 'Num']), ('ctx', 'Load')]", "List -> [('elts', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('ctx', 'Load')]", "List -> [('elts', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('ctx', 'Load')]", "List -> [('elts', ['Call', 'Call', 'Call', 'Call']), ('ctx', 'Load')]", "List -> [('elts', ['Name', 'Name']), ('ctx', 'Load')]", "List -> [('elts', ['Name', 'Name', 'Name']), ('ctx', 'Load')]", "List -> [('elts', ['Num', 'Num', 'Call']), ('ctx', 'Load')]", "List -> [('elts', ['Tuple', 'Tuple', 'Name']), ('ctx', 'Load')]", "List -> [('elts', ['Name', 'Name', 'Str']), ('ctx', 'Load')]", "List -> [('elts', ['Tuple', 'Name', 'Tuple']), ('ctx', 'Load')]", "List -> [('elts', ['Tuple', 'Tuple', 'Tuple']), ('ctx', 'Load')]", "List -> [('elts', ['Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple']), ('ctx', 'Load')]", "List -> [('elts', ['Tuple', 'Name']), ('ctx', 'Load')]", "List -> [('elts', ['Attribute', 'Name']), ('ctx', 'Load')]", "List -> [('elts', ['Num']), ('ctx', 'Load')]", "List -> [('elts', ['Num', 'Num', 'Num', 'Name', 'Name']), ('ctx', 'Load')]", "List -> [('elts', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('ctx', 'Store')]", "List -> [('elts', ['Name', 'Name', 'Name', 'BinOp', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Name']), ('ctx', 'Load')]", "List -> [('elts', ['Name', 'Name', 'Name', 'Name', 'Num']), ('ctx', 'Load')]", "List -> [('elts', ['Name', 'Name', 'Name', 'Name', 'Name']), ('ctx', 'Load')]", "List -> [('elts', ['Name', 'Num', 'Num']), ('ctx', 'Load')]", "List -> [('elts', ['Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num']), ('ctx', 'Load')]", "List -> [('elts', ['Subscript', 'Subscript', 'Subscript']), ('ctx', 'Load')]", "List -> [('elts', ['Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute']), ('ctx', 'Load')]", "List -> [('elts', ['Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute']), ('ctx', 'Load')]", "List -> [('elts', ['Num', 'Num', 'Num', 'Num']), ('ctx', 'Load')]", "List -> [('elts', ['Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num']), ('ctx', 'Load')]", "List -> [('elts', ['Num', 'Num', 'Num', 'Num', 'Num', 'BinOp', 'BinOp', 'Name', 'BinOp', 'BinOp', 'BinOp', 'Name', 'BinOp', 'Num']), ('ctx', 'Load')]", "List -> [('elts', ['Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'BinOp', 'BinOp', 'Name', 'BinOp', 'BinOp', 'BinOp', 'Name', 'BinOp', 'Num']), ('ctx', 'Load')]", "List -> [('elts', ['Num', 'Num', 'Num', 'Attribute']), ('ctx', 'Load')]", "List -> [('elts', ['ListComp']), ('ctx', 'Load')]", "List -> [('elts', ['Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num']), ('ctx', 'Load')]", "List -> [('elts', ['Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute']), ('ctx', 'Load')]", "List -> [('elts', ['Call', 'Call', 'Call']), ('ctx', 'Load')]", "List -> [('elts', ['Attribute', 'Attribute', 'Attribute']), ('ctx', 'Load')]", "List -> [('elts', ['List', 'List', 'List']), ('ctx', 'Load')]", "List -> [('elts', ['Num', 'Num', 'BinOp', 'BinOp']), ('ctx', 'Load')]", "List -> [('elts', ['Subscript']), ('ctx', 'Load')]", "List -> [('elts', ['Name', 'BinOp', 'BinOp', 'BinOp']), ('ctx', 'Load')]", "List -> [('elts', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('ctx', 'Load')]", "List -> [('elts', ['Lambda', 'Lambda', 'Lambda', 'Lambda', 'Lambda', 'Lambda']), ('ctx', 'Load')]", "List -> [('elts', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('ctx', 'Load')]", "List -> [('elts', ['Attribute', 'Num']), ('ctx', 'Load')]", "List -> [('elts', ['Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num']), ('ctx', 'Load')]", "List -> [('elts', ['Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple']), ('ctx', 'Load')]", "List -> [('elts', ['Str', 'Str', 'Call']), ('ctx', 'Load')]", "List -> [('elts', ['Str', 'Str', 'Str', 'Name']), ('ctx', 'Load')]", "List -> [('elts', ['Str', 'Str', 'Str', 'Str', 'Call']), ('ctx', 'Load')]", "List -> [('elts', ['Str', 'Str', 'Str', 'Attribute', 'Attribute']), ('ctx', 'Load')]", "List -> [('elts', ['Str', 'Str', 'Str', 'Call']), ('ctx', 'Load')]", "List -> [('elts', ['Call', 'Call', 'Call', 'Call', 'Call']), ('ctx', 'Load')]", "List -> [('elts', ['Call', 'Call', 'Str', 'Str', 'Call']), ('ctx', 'Load')]", "List -> [('elts', ['Call', 'Name', 'Name', 'Name']), ('ctx', 'Load')]", "List -> [('elts', ['Call', 'Call', 'Call', 'Call', 'Name']), ('ctx', 'Load')]", "List -> [('elts', ['Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call']), ('ctx', 'Load')]", "List -> [('elts', ['Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call']), ('ctx', 'Load')]", "List -> [('elts', ['Name', 'Call']), ('ctx', 'Load')]", "List -> [('elts', ['Name', 'Name', 'Name', 'Call', 'Call']), ('ctx', 'Load')]", "List -> [('elts', ['Name', 'Name', 'Name', 'Name']), ('ctx', 'Load')]", "List -> [('elts', ['Call', 'Name', 'Name', 'Name', 'Name']), ('ctx', 'Load')]", "List -> [('elts', ['Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple']), ('ctx', 'Load')]", "List -> [('elts', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('ctx', 'Load')]", "List -> [('elts', ['Call', 'Call', 'Str', 'Call', 'Str', 'Call']), ('ctx', 'Load')]", "List -> [('elts', ['Attribute', 'Call', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute']), ('ctx', 'Load')]", "List -> [('elts', ['Name', 'Name', 'Call', 'Call']), ('ctx', 'Load')]", "List -> [('elts', ['List']), ('ctx', 'Load')]", "List -> [('elts', ['List', 'List']), ('ctx', 'Load')]", "List -> [('elts', ['Str', 'Str', 'Str', 'Dict']), ('ctx', 'Load')]", "List -> [('elts', ['Str', 'Str', 'Str', 'List']), ('ctx', 'Load')]", "List -> [('elts', ['Name', 'BinOp']), ('ctx', 'Load')]", "List -> [('elts', ['Str', 'Name', 'Str', 'Name']), ('ctx', 'Load')]", "List -> [('elts', ['Str', 'Str', 'Str', 'Attribute', 'Str', 'Name']), ('ctx', 'Load')]", "List -> [('elts', ['Str', 'Name']), ('ctx', 'Load')]", "List -> [('elts', ['Name', 'Num']), ('ctx', 'Load')]", "List -> [('elts', ['Call', 'Num']), ('ctx', 'Load')]", "List -> [('elts', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('ctx', 'Load')]", "List -> [('elts', ['Num', 'Num', 'BinOp', 'Num']), ('ctx', 'Load')]", "List -> [('elts', ['Str', 'BinOp', 'Str', 'Str']), ('ctx', 'Load')]", "List -> [('elts', ['Name', 'Str', 'Name']), ('ctx', 'Load')]", "List -> [('elts', ['Name', 'Str', 'Str', 'Call', 'Str', 'Name', 'Call']), ('ctx', 'Load')]", "List -> [('elts', ['Name', 'Str', 'Call', 'Str', 'Name', 'Name']), ('ctx', 'Load')]", "List -> [('elts', ['Name', 'Str', 'Str', 'Str', 'Str', 'Str', 'Name']), ('ctx', 'Load')]", "List -> [('elts', ['Name', 'Str']), ('ctx', 'Load')]", "List -> [('elts', ['Name', 'Str', 'Name', 'Str', 'Str']), ('ctx', 'Load')]", "List -> [('elts', ['Name', 'Str', 'Name', 'Str', 'Str', 'Str', 'Str']), ('ctx', 'Load')]", "List -> [('elts', ['Name', 'Str', 'Name', 'Str']), ('ctx', 'Load')]", "List -> [('elts', ['Name', 'Str', 'Str', 'Str', 'Name']), ('ctx', 'Load')]", "List -> [('elts', ['Name', 'Str', 'Name', 'Name']), ('ctx', 'Load')]", "List -> [('elts', ['Name', 'Str', 'Str', 'Str', 'Name', 'Str', 'Str']), ('ctx', 'Load')]", "List -> [('elts', ['Name', 'Str', 'Str', 'Str', 'Name', 'Str']), ('ctx', 'Load')]", "List -> [('elts', ['Name', 'Str', 'Str', 'Name', 'Str', 'Name']), ('ctx', 'Load')]", "List -> [('elts', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('ctx', 'Load')]", "List -> [('elts', ['Str', 'Str', 'Str', 'Call', 'Call']), ('ctx', 'Load')]", "List -> [('elts', ['Call', 'Str', 'Str']), ('ctx', 'Load')]", "List -> [('elts', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('ctx', 'Load')]", "List -> [('elts', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('ctx', 'Load')]", "List -> [('elts', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('ctx', 'Load')]", "List -> [('elts', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('ctx', 'Load')]", "List -> [('elts', ['Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call']), ('ctx', 'Load')]", "List -> [('elts', ['Name', 'Str', 'Str', 'Name']), ('ctx', 'Load')]", "List -> [('elts', ['Name', 'Name', 'Name', 'Call', 'Name']), ('ctx', 'Load')]", "List -> [('elts', ['Call', 'Call', 'Name', 'Call', 'Call', 'Call', 'Call', 'Name', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Name', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call']), ('ctx', 'Load')]", "List -> [('elts', ['Call', 'Call', 'Name']), ('ctx', 'Load')]", "List -> [('elts', ['Str', 'Str', 'Name', 'Str']), ('ctx', 'Load')]", "List -> [('elts', ['Name', 'Str', 'Str']), ('ctx', 'Load')]", "List -> [('elts', ['Str', 'BinOp', 'Str']), ('ctx', 'Load')]", "List -> [('elts', ['Subscript', 'Num']), ('ctx', 'Load')]", "List -> [('elts', ['Str', 'Str', 'Attribute', 'Str', 'Attribute']), ('ctx', 'Load')]", "List -> [('elts', ['Str', 'Attribute', 'Attribute']), ('ctx', 'Load')]", "List -> [('elts', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('ctx', 'Load')]", "List -> [('elts', ['Str', 'Str', 'Name', 'Str', 'BinOp', 'Str', 'Attribute']), ('ctx', 'Load')]", "List -> [('elts', ['Str', 'Str', 'Name', 'Str', 'Str', 'Attribute']), ('ctx', 'Load')]", "List -> [('elts', ['Call', 'Name']), ('ctx', 'Load')]", "List -> [('elts', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('ctx', 'Load')]", "List -> [('elts', ['Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple']), ('ctx', 'Load')]", "List -> [('elts', ['BinOp', 'BinOp', 'BinOp']), ('ctx', 'Load')]", "List -> [('elts', ['BinOp', 'Name', 'BinOp']), ('ctx', 'Load')]", "List -> [('elts', ['BinOp', 'Name', 'Num']), ('ctx', 'Load')]", "List -> [('elts', ['Num', 'Num', 'BinOp', 'BinOp', 'BinOp', 'Name']), ('ctx', 'Load')]", "List -> [('elts', ['Name', 'Attribute']), ('ctx', 'Load')]", "List -> [('elts', ['Attribute', 'Call']), ('ctx', 'Load')]", "List -> [('elts', ['Name', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Call', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num']), ('ctx', 'Load')]", "List -> [('elts', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('ctx', 'Load')]", "List -> [('elts', ['Str', 'Str', 'BinOp', 'BinOp']), ('ctx', 'Load')]", "List -> [('elts', ['Str', 'Str', 'Str', 'Str', 'BinOp', 'Str', 'Str', 'BinOp', 'Str', 'Str']), ('ctx', 'Load')]", "List -> [('elts', ['Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute']), ('ctx', 'Load')]", "List -> [('elts', ['Attribute', 'Str', 'Name', 'Name']), ('ctx', 'Load')]", "List -> [('elts', ['Attribute', 'Str', 'Name']), ('ctx', 'Load')]", "List -> [('elts', ['Attribute', 'Str', 'Str']), ('ctx', 'Load')]", "List -> [('elts', ['Attribute', 'Str', 'Str', 'Str', 'Name', 'Name']), ('ctx', 'Load')]", "List -> [('elts', ['Attribute', 'Str']), ('ctx', 'Load')]", "List -> [('elts', ['Name', 'Attribute', 'Attribute']), ('ctx', 'Load')]", "List -> [('elts', ['Num', 'Str', 'Num']), ('ctx', 'Load')]", "List -> [('elts', ['Tuple', 'Call', 'Call']), ('ctx', 'Load')]", "List -> [('elts', ['Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num']), ('ctx', 'Load')]", "List -> [('elts', ['Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num']), ('ctx', 'Load')]", "List -> [('elts', ['Subscript', 'Str', 'Attribute', 'Str', 'Call', 'Str', 'Call', 'Str', 'Call']), ('ctx', 'Load')]", "List -> [('elts', ['Str', 'Attribute', 'Str']), ('ctx', 'Load')]", "List -> [('elts', ['Call', 'Str']), ('ctx', 'Load')]", "List -> [('elts', ['Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call']), ('ctx', 'Load')]", "List -> [('elts', ['Call', 'Str', 'Call', 'Str', 'Str']), ('ctx', 'Load')]", "List -> [('elts', ['Str', 'Call']), ('ctx', 'Load')]", "List -> [('elts', ['List', 'List', 'List', 'List']), ('ctx', 'Load')]", "List -> [('elts', ['Tuple', 'Str']), ('ctx', 'Load')]", "List -> [('elts', ['Tuple', 'Str', 'Str']), ('ctx', 'Load')]", "List -> [('elts', ['BinOp', 'Str', 'BinOp', 'BinOp']), ('ctx', 'Load')]", "List -> [('elts', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('ctx', 'Load')]", "List -> [('elts', ['Str', 'Attribute']), ('ctx', 'Load')]", "List -> [('elts', ['Str', 'Str', 'Attribute']), ('ctx', 'Load')]", "List -> [('elts', ['Str', 'Str', 'Name', 'Attribute', 'Str', 'Attribute']), ('ctx', 'Load')]", "List -> [('elts', ['Str', 'Str', 'Name', 'Str', 'Attribute', 'Str', 'Attribute']), ('ctx', 'Load')]", "List -> [('elts', ['Attribute', 'Attribute', 'Call']), ('ctx', 'Load')]", "List -> [('elts', ['BinOp', 'Str', 'Str']), ('ctx', 'Load')]", "List -> [('elts', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('ctx', 'Load')]", "List -> [('elts', ['Name', 'Attribute', 'Attribute', 'Attribute']), ('ctx', 'Load')]", "List -> [('elts', ['Name', 'Attribute', 'Attribute', 'Attribute', 'Name']), ('ctx', 'Load')]", "List -> [('elts', ['Name', 'Attribute', 'Name']), ('ctx', 'Load')]", "List -> [('elts', ['Name', 'Str', 'BinOp']), ('ctx', 'Load')]", "List -> [('elts', ['Num', 'Name', 'Name', 'Name', 'Name', 'Name']), ('ctx', 'Load')]", "List -> [('elts', ['Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple']), ('ctx', 'Load')]", "List -> [('elts', ['Tuple', 'Tuple', 'Call', 'Tuple', 'Tuple', 'Call', 'Tuple']), ('ctx', 'Load')]", "List -> [('elts', ['Str', 'Name', 'Attribute', 'Attribute']), ('ctx', 'Load')]", "List -> [('elts', ['Str', 'Name', 'Attribute', 'Name', 'Str', 'Attribute']), ('ctx', 'Load')]", "List -> [('elts', ['Call', 'Name', 'Call']), ('ctx', 'Load')]", "List -> [('elts', ['Call', 'Name', 'Str']), ('ctx', 'Load')]", "List -> [('elts', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('ctx', 'Load')]", "List -> [('elts', ['BinOp', 'BinOp', 'Str', 'Call']), ('ctx', 'Load')]", "List -> [('elts', ['BinOp', 'Str']), ('ctx', 'Load')]", "List -> [('elts', ['BinOp', 'BinOp', 'BinOp', 'Str', 'Call']), ('ctx', 'Load')]", "List -> [('elts', ['BinOp', 'Str', 'Str', 'Str', 'Str', 'Str']), ('ctx', 'Load')]", "List -> [('elts', ['BinOp', 'Str', 'BinOp', 'Str']), ('ctx', 'Load')]", "List -> [('elts', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('ctx', 'Load')]", "List -> [('elts', ['Subscript', 'Subscript']), ('ctx', 'Load')]", "List -> [('elts', ['Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute']), ('ctx', 'Load')]", "List -> [('elts', ['Str', 'Str', 'Str', 'Str', 'Attribute', 'Str', 'BinOp']), ('ctx', 'Load')]", "List -> [('elts', ['Str', 'Str', 'Str', 'Str', 'Attribute', 'Str', 'Name', 'Str', 'BinOp', 'Name']), ('ctx', 'Load')]", "List -> [('elts', ['BinOp', 'BinOp', 'Str']), ('ctx', 'Load')]", "List -> [('elts', ['Dict', 'Dict', 'Dict', 'Dict', 'Dict', 'Dict']), ('ctx', 'Load')]", "List -> [('elts', ['Dict', 'Dict', 'Dict', 'Dict', 'Dict', 'Dict', 'Dict']), ('ctx', 'Load')]", "List -> [('elts', ['Subscript', 'Subscript', 'Subscript', 'Subscript']), ('ctx', 'Load')]", "List -> [('elts', ['BinOp', 'Str', 'Name', 'Str']), ('ctx', 'Load')]", "List -> [('elts', ['Name', 'Str', 'Str', 'Str', 'Str', 'Str']), ('ctx', 'Load')]", "List -> [('elts', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('ctx', 'Load')]", "List -> [('elts', ['Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple']), ('ctx', 'Load')]", "List -> [('elts', ['UnaryOp', 'UnaryOp', 'UnaryOp']), ('ctx', 'Load')]", "List -> [('elts', ['Name', 'Call', 'Name']), ('ctx', 'Load')]", "List -> [('elts', ['Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num']), ('ctx', 'Load')]", "List -> [('elts', ['Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num']), ('ctx', 'Load')]", "List -> [('elts', ['Str', 'Str', 'Name', 'Str', 'Str', 'Name', 'Str', 'Str', 'Name']), ('ctx', 'Load')]", "List -> [('elts', ['Dict', 'Dict', 'Dict', 'Dict', 'Dict', 'Dict', 'Dict', 'Dict', 'Dict', 'Dict', 'Dict']), ('ctx', 'Load')]", "List -> [('elts', ['Call', 'Call', 'Str', 'Str']), ('ctx', 'Load')]", "List -> [('elts', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('ctx', 'Load')]", "List -> [('elts', ['Str', 'BinOp', 'Str', 'Str', 'Str']), ('ctx', 'Load')]", "List -> [('elts', ['Str', 'Str', 'BinOp']), ('ctx', 'Load')]", "List -> [('elts', ['List', 'List', 'List', 'List', 'List', 'List', 'List', 'List']), ('ctx', 'Load')]", "List -> [('elts', ['Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple']), ('ctx', 'Load')]", "List -> [('elts', ['Str', 'Subscript']), ('ctx', 'Load')]", "List -> [('elts', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('ctx', 'Load')]", "List -> [('elts', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('ctx', 'Load')]", "List -> [('elts', ['UnaryOp', 'BinOp', 'UnaryOp']), ('ctx', 'Load')]", "List -> [('elts', ['Name', 'UnaryOp']), ('ctx', 'Load')]", "List -> [('elts', ['Num', 'BinOp', 'Num']), ('ctx', 'Load')]", "List -> [('elts', ['BinOp', 'Num', 'Num']), ('ctx', 'Load')]", "List -> [('elts', ['Name', 'Subscript']), ('ctx', 'Load')]", "List -> [('elts', ['Name', 'Name', 'Call']), ('ctx', 'Load')]", "List -> [('elts', ['Dict', 'Dict', 'Dict', 'Dict', 'Dict', 'Dict', 'Dict', 'Dict', 'Dict']), ('ctx', 'Load')]", "List -> [('elts', ['Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple']), ('ctx', 'Load')]", "List -> [('elts', ['Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple']), ('ctx', 'Load')]", "List -> [('elts', ['Str', 'Str', 'Str', 'Str', 'Str', 'Attribute', 'Str', 'BinOp']), ('ctx', 'Load')]", "List -> [('elts', ['Str', 'Subscript', 'Subscript', 'Subscript', 'Subscript']), ('ctx', 'Load')]", "List -> [('elts', ['Str', 'Subscript', 'Call', 'Subscript']), ('ctx', 'Load')]", "List -> [('elts', ['Str', 'Subscript', 'Call']), ('ctx', 'Load')]", "List -> [('elts', ['Str', 'Subscript', 'Subscript']), ('ctx', 'Load')]", "List -> [('elts', ['Str', 'Subscript', 'Str', 'Call', 'Str', 'Call', 'Str', 'Call']), ('ctx', 'Load')]", "List -> [('elts', ['Str', 'Str', 'Str', 'Attribute']), ('ctx', 'Load')]", "List -> [('elts', ['Tuple', 'Call', 'Tuple', 'Tuple', 'Call']), ('ctx', 'Load')]", "List -> [('elts', ['Str', 'Str', 'Num']), ('ctx', 'Load')]", "List -> [('elts', ['Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num']), ('ctx', 'Load')]", "List -> [('elts', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('ctx', 'Load')]", "List -> [('elts', ['Num', 'BinOp']), ('ctx', 'Load')]", "List -> [('elts', ['Attribute', 'Str', 'Name', 'Str']), ('ctx', 'Load')]", "List -> [('elts', ['Attribute', 'Str', 'BinOp']), ('ctx', 'Load')]", "List -> [('elts', ['Subscript', 'Str', 'Name']), ('ctx', 'Load')]", "List -> [('elts', ['BinOp', 'Str', 'Name', 'Name']), ('ctx', 'Load')]", "List -> [('elts', ['Num', 'Name']), ('ctx', 'Load')]", "List -> [('elts', ['Str', 'Tuple', 'Name', 'Name', 'Tuple']), ('ctx', 'Load')]", "List -> [('elts', ['Num', 'Str', 'Num', 'Tuple', 'BinOp']), ('ctx', 'Load')]", "List -> [('elts', ['Num', 'Name', 'Attribute', 'Tuple', 'Name']), ('ctx', 'Load')]", "List -> [('elts', ['Str', 'Str', 'Attribute', 'Tuple', 'Name']), ('ctx', 'Load')]", "List -> [('elts', ['Subscript', 'BinOp', 'Subscript']), ('ctx', 'Load')]", "List -> [('elts', ['Name', 'Call', 'Call']), ('ctx', 'Load')]", "List -> [('elts', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('ctx', 'Load')]", "List -> [('elts', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'BinOp', 'Str']), ('ctx', 'Load')]", "List -> [('elts', ['BinOp', 'Subscript']), ('ctx', 'Load')]", "List -> [('elts', ['Str', 'List', 'List']), ('ctx', 'Load')]", "List -> [('elts', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('ctx', 'Load')]", "List -> [('elts', ['Str', 'Str', 'Str', 'Str', 'Name']), ('ctx', 'Load')]", "List -> [('elts', ['Str', 'Str', 'Str', 'Str', 'BinOp']), ('ctx', 'Load')]", "List -> [('elts', ['Str', 'Str', 'Str', 'Attribute', 'Name']), ('ctx', 'Load')]", "List -> [('elts', ['Str', 'Str', 'Str', 'BinOp']), ('ctx', 'Load')]", "List -> [('elts', ['Str', 'BinOp']), ('ctx', 'Load')]", "List -> [('elts', ['List', 'List', 'List', 'List', 'List', 'List']), ('ctx', 'Load')]", "List -> [('elts', ['Str', 'Num']), ('ctx', 'Load')]", "List -> [('elts', ['List', 'List', 'List', 'List', 'List']), ('ctx', 'Load')]", "List -> [('elts', ['Attribute', 'Str', 'Str', 'Str', 'Str', 'Name']), ('ctx', 'Load')]", "List -> [('elts', ['Attribute', 'Str', 'Str', 'Name']), ('ctx', 'Load')]", "List -> [('elts', ['Attribute', 'Str', 'Str', 'Str']), ('ctx', 'Load')]", "List -> [('elts', ['Attribute', 'Str', 'Str', 'Name', 'Name']), ('ctx', 'Load')]", "List -> [('elts', ['Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple']), ('ctx', 'Load')]", "List -> [('elts', ['Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple']), ('ctx', 'Load')]", "List -> [('elts', ['Attribute', 'Name', 'Call']), ('ctx', 'Load')]", "List -> [('elts', ['Str', 'Str', 'Str', 'Str', 'Attribute']), ('ctx', 'Load')]", "List -> [('elts', ['Num', 'Num', 'Num', 'BinOp']), ('ctx', 'Load')]", "List -> [('elts', ['Str', 'Name', 'Str']), ('ctx', 'Load')]", "List -> [('elts', ['Str', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('ctx', 'Load')]", "List -> [('elts', ['Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call']), ('ctx', 'Load')]", "List -> [('elts', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('ctx', 'Load')]", "List -> [('elts', ['Attribute', 'Attribute', 'Attribute', 'Call']), ('ctx', 'Load')]", "List -> [('elts', ['Str', 'Name', 'Attribute', 'Tuple', 'Name']), ('ctx', 'Load')]", "List -> [('elts', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('ctx', 'Load')]", "List -> [('elts', ['Call', 'Call', 'Call', 'Name']), ('ctx', 'Load')]", "List -> [('elts', ['Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call']), ('ctx', 'Load')]", "List -> [('elts', ['Name', 'Name', 'Call', 'Name']), ('ctx', 'Load')]", "List -> [('elts', ['Name', 'Name', 'Call', 'Call', 'Call']), ('ctx', 'Load')]", "List -> [('elts', ['Num', 'Num', 'BinOp']), ('ctx', 'Load')]", "List -> [('elts', ['Num', 'BinOp', 'BinOp', 'BinOp']), ('ctx', 'Load')]", "List -> [('elts', ['Name', 'Num', 'Num', 'Name']), ('ctx', 'Load')]", "List -> [('elts', ['Num', 'BinOp', 'BinOp', 'Num']), ('ctx', 'Load')]", "List -> [('elts', ['Name', 'Num', 'Name']), ('ctx', 'Load')]", "List -> [('elts', ['Name', 'Num', 'Name', 'Name']), ('ctx', 'Load')]", "List -> [('elts', ['Call', 'Name', 'Name']), ('ctx', 'Load')]", "List -> [('elts', ['Name', 'Subscript', 'Subscript']), ('ctx', 'Load')]", "List -> [('elts', ['UnaryOp', 'Subscript', 'Subscript']), ('ctx', 'Load')]", "List -> [('elts', ['Name', 'Lambda', 'Name']), ('ctx', 'Load')]", "List -> [('elts', ['Attribute', 'Attribute', 'Lambda']), ('ctx', 'Load')]", "List -> [('elts', ['Attribute', 'Lambda']), ('ctx', 'Load')]", "List -> [('elts', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('ctx', 'Load')]", "List -> [('elts', ['Call', 'Call', 'Call', 'Call', 'Call', 'Call']), ('ctx', 'Load')]", "List -> [('elts', ['Attribute', 'Call', 'Str']), ('ctx', 'Load')]", "List -> [('elts', ['Attribute', 'Call', 'Call']), ('ctx', 'Load')]", "List -> [('elts', ['Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call']), ('ctx', 'Load')]", "List -> [('elts', ['Str', 'Call', 'Str']), ('ctx', 'Load')]", "List -> [('elts', ['Str', 'Call', 'Str', 'BinOp']), ('ctx', 'Load')]", "List -> [('elts', ['Name', 'Name', 'Name', 'Str']), ('ctx', 'Load')]", "List -> [('elts', ['BinOp', 'BinOp', 'Str', 'Str']), ('ctx', 'Load')]", "List -> [('elts', ['Compare']), ('ctx', 'Load')]", "List -> [('elts', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('ctx', 'Load')]", "List -> [('elts', ['Str', 'List']), ('ctx', 'Load')]"], "ClassDef": ["ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', []), ('body', ['Expr', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute', 'Attribute']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Expr', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', []), ('body', ['FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Pass']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', []), ('body', ['FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', []), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', []), ('body', ['Expr', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', []), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', []), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', []), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', []), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', ['Call'])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'FunctionDef']), ('decorator_list', ['Call'])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'FunctionDef', 'FunctionDef']), ('decorator_list', ['Call'])]", "ClassDef -> [('name', 'str'), ('bases', []), ('body', ['Assign', 'Assign', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'Assign', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['FunctionDef', 'ClassDef', 'ClassDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'Assign', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute', 'Attribute', 'Name']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', []), ('body', ['Assign']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', []), ('body', ['Pass']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', []), ('body', ['Assign', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Assign', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Assign', 'ClassDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', []), ('body', ['Expr', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'If', 'FunctionDef', 'Assign', 'FunctionDef', 'Assign', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'If', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'If']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['FunctionDef', 'FunctionDef']), ('decorator_list', ['Call'])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Expr', 'Assign', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Expr', 'Assign', 'Assign', 'FunctionDef', 'ClassDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'ClassDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Assign', 'Assign', 'Assign', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'ClassDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Assign', 'Assign', 'FunctionDef', 'ClassDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', []), ('body', ['Assign', 'Assign']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'ClassDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Assign', 'Assign', 'Assign', 'ClassDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'Assign', 'Assign', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Expr', 'Assign', 'ClassDef', 'ClassDef', 'FunctionDef', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'Assign', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', []), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', []), ('body', ['Assign', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', ['Call'])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Pass']), ('decorator_list', ['Call'])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'Assign']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name', 'Name', 'Name', 'Name', 'Name']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', ['Call'])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'ClassDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'ClassDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', []), ('body', ['Assign', 'Assign', 'Assign']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'FunctionDef', 'Assign']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Expr', 'Assign']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'ClassDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', ['Attribute'])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'Assign', 'FunctionDef', 'Assign', 'FunctionDef', 'Assign', 'FunctionDef', 'Assign', 'FunctionDef', 'Assign', 'FunctionDef', 'Assign', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name', 'Name']), ('body', ['FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Expr', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Expr', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'FunctionDef', 'ClassDef', 'ClassDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'FunctionDef', 'FunctionDef', 'ClassDef', 'ClassDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'ClassDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'FunctionDef', 'ClassDef', 'ClassDef', 'Assign', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'FunctionDef', 'FunctionDef', 'ClassDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['FunctionDef', 'ClassDef', 'ClassDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Pass']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', []), ('body', ['ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'ImportFrom', 'ImportFrom', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute', 'Attribute']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', []), ('body', ['Expr', 'Assign', 'Assign']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'ClassDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', []), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', ['Name'])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['FunctionDef', 'Assign', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'Assign', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name', 'Name', 'Name']), ('body', ['Expr', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name', 'Name']), ('body', ['Expr', 'Assign']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name', 'Name']), ('body', ['Expr', 'Assign', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name', 'Name', 'Name']), ('body', ['Expr', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name', 'Name', 'Name', 'Name']), ('body', ['Expr', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name', 'Name', 'Name', 'Name', 'Name']), ('body', ['Expr', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', []), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', []), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'Assign', 'Assign', 'FunctionDef', 'Assign']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Expr', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Expr', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Expr', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'ClassDef', 'FunctionDef', 'FunctionDef', 'Assign']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name', 'Name']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', []), ('body', ['Expr', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'Expr', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Expr', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name', 'Name']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['FunctionDef', 'Assign', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name', 'Attribute']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name', 'Attribute']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name', 'Attribute']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', []), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'Assign', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Pass']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', []), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'ClassDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['ClassDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name', 'Name']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Assign', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Expr', 'Expr', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute', 'Attribute']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name', 'Attribute']), ('body', ['Assign', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name', 'Attribute']), ('body', ['Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name', 'Attribute']), ('body', ['Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name', 'Attribute']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name', 'Attribute']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Assign', 'Assign']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', []), ('body', ['Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['FunctionDef', 'Assign']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name', 'Name']), ('body', ['Expr', 'Expr', 'Assign', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Expr', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute', 'Name']), ('body', ['Expr', 'FunctionDef', 'Assign']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Expr', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Expr', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Expr', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'Assign', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'Assign', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'Assign', 'FunctionDef', 'Assign', 'Assign', 'FunctionDef', 'Assign', 'Assign', 'FunctionDef', 'Assign', 'FunctionDef', 'Assign', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'Assign', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'Assign', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute', 'Name']), ('body', ['Expr', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Expr', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', []), ('body', ['Expr', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'ClassDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'Assign']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'ClassDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Assign', 'Assign', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'ClassDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'ClassDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'ClassDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'ClassDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', []), ('body', ['Assign', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name', 'Name']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Expr', 'Assign']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Expr', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'Assign']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', []), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', []), ('body', ['Expr', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['FunctionDef', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Assign', 'Assign', 'ClassDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'ClassDef', 'FunctionDef', 'Assign', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Expr', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', []), ('body', ['Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', ['Call'])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', ['Call'])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', []), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'ClassDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'ClassDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'Assign', 'Assign']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', []), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', []), ('body', ['Expr', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name', 'Name']), ('body', ['Expr', 'Assign', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', []), ('body', ['Assign', 'Expr', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', []), ('body', ['Assign', 'Expr', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', []), ('body', ['Expr', 'Assign', 'Assign', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Assign']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Expr', 'Assign', 'Assign']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Expr', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Assign', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', []), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', []), ('body', ['Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Expr', 'Assign', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', []), ('body', ['Expr', 'Assign', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', []), ('body', ['Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Expr', 'Assign', 'Assign', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'If', 'FunctionDef', 'Assign', 'FunctionDef', 'Assign', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', []), ('body', ['Assign', 'Assign', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Expr', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', []), ('body', ['Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Expr', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name', 'Name']), ('body', ['Expr', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name', 'Name']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name', 'Name']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name', 'Name']), ('body', ['FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name', 'Name']), ('body', ['Expr', 'FunctionDef', 'Assign', 'Assign']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name', 'Name']), ('body', ['Expr', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Assign', 'Assign', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', []), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute', 'Name']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['FunctionDef', 'Assign', 'FunctionDef', 'Assign', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['FunctionDef', 'FunctionDef', 'Assign']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'ClassDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'Assign', 'FunctionDef', 'ClassDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', ['Call'])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'For', 'If', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'FunctionDef', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'FunctionDef', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', []), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'Assign', 'ClassDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'ClassDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'ClassDef', 'FunctionDef', 'FunctionDef', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Assign', 'Assign', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'ClassDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'Assign', 'Assign', 'ClassDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', []), ('body', ['Expr', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'ClassDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'ClassDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'ClassDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'FunctionDef', 'FunctionDef', 'ClassDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'ClassDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'Assign', 'Assign', 'FunctionDef', 'ClassDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name', 'Name']), ('body', ['Assign', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name', 'Name']), ('body', ['Assign']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name', 'Attribute']), ('body', ['Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name', 'Attribute']), ('body', ['Assign']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name', 'Name']), ('body', ['Expr', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name', 'Name']), ('body', ['Expr', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', []), ('body', ['ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', []), ('body', ['Expr', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name', 'Name']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'Assign', 'FunctionDef', 'ClassDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'ClassDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Expr', 'Pass']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Expr', 'ClassDef', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'ClassDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'ClassDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'ClassDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'ClassDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name', 'Name']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name', 'Name']), ('body', ['Expr', 'Assign', 'Assign', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Expr', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Expr', 'Assign', 'Assign', 'ClassDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Expr', 'Assign', 'Assign', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['FunctionDef', 'FunctionDef', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', []), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'ClassDef', 'ClassDef', 'FunctionDef', 'ClassDef', 'FunctionDef', 'ClassDef', 'FunctionDef', 'ClassDef', 'FunctionDef', 'ClassDef', 'FunctionDef', 'ClassDef', 'FunctionDef', 'ClassDef', 'FunctionDef', 'ClassDef', 'FunctionDef', 'ClassDef', 'FunctionDef', 'ClassDef', 'FunctionDef', 'ClassDef', 'FunctionDef', 'ClassDef', 'FunctionDef', 'ClassDef', 'FunctionDef', 'ClassDef', 'FunctionDef', 'ClassDef', 'FunctionDef', 'ClassDef', 'FunctionDef', 'ClassDef', 'FunctionDef', 'ClassDef', 'FunctionDef', 'ClassDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name', 'Name']), ('body', ['Pass']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', []), ('body', ['Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Assign', 'FunctionDef', 'Assign', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'Assign']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['FunctionDef', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', ['Attribute'])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', []), ('body', ['Pass']), ('decorator_list', ['Call'])]", "ClassDef -> [('name', 'str'), ('bases', []), ('body', ['Assign']), ('decorator_list', ['Call'])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'ClassDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', []), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', []), ('body', ['Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute', 'Attribute', 'Attribute']), ('body', ['Expr', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Expr', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['If', 'If', 'If']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Expr', 'Expr', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['If', 'Assign', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'If']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['FunctionDef', 'ClassDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', []), ('body', ['If']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', ['Attribute'])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['FunctionDef', 'FunctionDef']), ('decorator_list', ['Attribute'])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', ['Attribute'])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', ['Attribute'])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name', 'Name']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'If', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name', 'Name']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'Assign']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', []), ('body', ['FunctionDef', 'FunctionDef']), ('decorator_list', ['Call'])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', []), ('body', ['Expr']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', []), ('body', ['Expr', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', []), ('body', ['FunctionDef', 'FunctionDef', 'Assign', 'Assign']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', []), ('body', ['Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', []), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', ['Call'])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['ClassDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', []), ('body', ['Expr', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'ClassDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['FunctionDef']), ('decorator_list', ['Attribute'])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', ['Attribute'])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['FunctionDef', 'FunctionDef']), ('decorator_list', ['Attribute'])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', ['Attribute'])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Expr', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', []), ('body', ['Expr', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['FunctionDef', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', []), ('body', ['Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', []), ('body', ['Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute', 'Name']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Expr', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', []), ('body', ['Expr', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute', 'Attribute', 'Name']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute', 'Attribute', 'Name']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'ClassDef', 'FunctionDef', 'Assign', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'Assign']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'ClassDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'Assign', 'Assign', 'FunctionDef', 'Assign']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'ClassDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'ClassDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Expr', 'Assign', 'Assign', 'ClassDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'Assign', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', []), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', []), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'Assign', 'FunctionDef', 'Assign', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name', 'Name']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Expr', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Assign', 'Assign', 'While', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', ['Attribute'])]", "ClassDef -> [('name', 'str'), ('bases', []), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', []), ('body', ['Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Expr', 'Expr', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Expr', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Expr', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'Assign', 'ClassDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Expr', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'ClassDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['FunctionDef', 'Expr', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Expr', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'ClassDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute', 'Name']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'ClassDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['FunctionDef', 'ClassDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', []), ('body', ['Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name', 'Name']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'If', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'If', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Assign', 'Assign', 'Assign']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', []), ('body', ['FunctionDef', 'FunctionDef', 'Assign']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Assign', 'ClassDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', []), ('body', ['Expr', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', []), ('body', ['Expr', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute', 'Attribute']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute', 'Attribute']), ('body', ['Expr', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', []), ('body', ['Assign', 'FunctionDef', 'FunctionDef', 'Expr']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', ['Call'])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', ['Call'])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'Assign']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Expr', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name', 'Attribute']), ('body', ['Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name', 'Name']), ('body', ['Expr']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'ClassDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'ClassDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute', 'Attribute']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Expr', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Expr', 'ClassDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Assign', 'Assign', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute', 'Attribute']), ('body', ['Expr', 'Assign', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', []), ('body', ['Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute', 'Name']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['FunctionDef', 'FunctionDef', 'Assign', 'Assign', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', []), ('body', ['Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute', 'Attribute']), ('body', ['Pass']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Assign', 'ClassDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Assign', 'FunctionDef', 'ClassDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute']), ('body', ['Assign', 'Assign', 'ClassDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Call']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'If', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Attribute', 'Attribute', 'Name']), ('body', ['Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name', 'Attribute']), ('body', ['Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "ClassDef -> [('name', 'str'), ('bases', ['Name']), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]"], "Yield": ["Yield -> [('value', 'Call')]", "Yield -> [('value', 'Str')]", "Yield -> [('value', 'ListComp')]", "Yield -> [('value', 'Attribute')]", "Yield -> [('value', 'Name')]", "Yield -> [('value', 'Num')]", "Yield -> [('value', 'BinOp')]", "Yield -> [('value', 'Subscript')]", "Yield -> [('value', 'Tuple')]", "Yield -> [('value', 'NoneType')]", "Yield -> [('value', 'Dict')]", "Yield -> [('value', 'List')]"], "BitAnd": ["BitAnd -> <NULL>"], "Continue": ["Continue -> <NULL>"], "Del": ["Del -> <NULL>"], "Str": ["Str -> [('s', 'str')]", "Str -> [('s', 'unicode')]"], "Div": ["Div -> <NULL>"], "Assign": ["Assign -> [('targets', ['Name']), ('value', 'Call')]", "Assign -> [('targets', ['Name']), ('value', 'Str')]", "Assign -> [('targets', ['Name']), ('value', 'Subscript')]", "Assign -> [('targets', ['Attribute']), ('value', 'Name')]", "Assign -> [('targets', ['Attribute']), ('value', 'Call')]", "Assign -> [('targets', ['Name']), ('value', 'BinOp')]", "Assign -> [('targets', ['Name']), ('value', 'List')]", "Assign -> [('targets', ['Name']), ('value', 'Tuple')]", "Assign -> [('targets', ['Name']), ('value', 'Name')]", "Assign -> [('targets', ['Attribute']), ('value', 'Dict')]", "Assign -> [('targets', ['Attribute']), ('value', 'List')]", "Assign -> [('targets', ['Attribute']), ('value', 'Num')]", "Assign -> [('targets', ['Tuple']), ('value', 'Call')]", "Assign -> [('targets', ['Subscript']), ('value', 'Call')]", "Assign -> [('targets', ['Attribute']), ('value', 'BinOp')]", "Assign -> [('targets', ['Name']), ('value', 'Attribute')]", "Assign -> [('targets', ['Name']), ('value', 'Num')]", "Assign -> [('targets', ['Subscript']), ('value', 'Name')]", "Assign -> [('targets', ['Attribute']), ('value', 'Tuple')]", "Assign -> [('targets', ['Subscript']), ('value', 'BinOp')]", "Assign -> [('targets', ['Name']), ('value', 'BoolOp')]", "Assign -> [('targets', ['Tuple']), ('value', 'Name')]", "Assign -> [('targets', ['Name', 'Name']), ('value', 'BinOp')]", "Assign -> [('targets', ['Name']), ('value', 'Dict')]", "Assign -> [('targets', ['Subscript']), ('value', 'Subscript')]", "Assign -> [('targets', ['Tuple']), ('value', 'Tuple')]", "Assign -> [('targets', ['Attribute']), ('value', 'Subscript')]", "Assign -> [('targets', ['Attribute']), ('value', 'Attribute')]", "Assign -> [('targets', ['Name']), ('value', 'ListComp')]", "Assign -> [('targets', ['Subscript']), ('value', 'Str')]", "Assign -> [('targets', ['Subscript']), ('value', 'Dict')]", "Assign -> [('targets', ['Attribute']), ('value', 'Str')]", "Assign -> [('targets', ['Attribute']), ('value', 'Compare')]", "Assign -> [('targets', ['Subscript']), ('value', 'Attribute')]", "Assign -> [('targets', ['Subscript', 'Name']), ('value', 'Call')]", "Assign -> [('targets', ['Attribute']), ('value', 'Lambda')]", "Assign -> [('targets', ['Name']), ('value', 'Lambda')]", "Assign -> [('targets', ['Name', 'Name']), ('value', 'Name')]", "Assign -> [('targets', ['Subscript']), ('value', 'IfExp')]", "Assign -> [('targets', ['Attribute']), ('value', 'BoolOp')]", "Assign -> [('targets', ['Subscript']), ('value', 'ListComp')]", "Assign -> [('targets', ['Subscript']), ('value', 'List')]", "Assign -> [('targets', ['Tuple']), ('value', 'ListComp')]", "Assign -> [('targets', ['Tuple']), ('value', 'Attribute')]", "Assign -> [('targets', ['Name', 'Name', 'Name']), ('value', 'Str')]", "Assign -> [('targets', ['Attribute']), ('value', 'ListComp')]", "Assign -> [('targets', ['Subscript']), ('value', 'Tuple')]", "Assign -> [('targets', ['Name']), ('value', 'Compare')]", "Assign -> [('targets', ['Tuple']), ('value', 'GeneratorExp')]", "Assign -> [('targets', ['Tuple']), ('value', 'Subscript')]", "Assign -> [('targets', ['Subscript']), ('value', 'Num')]", "Assign -> [('targets', ['Name', 'Tuple']), ('value', 'Call')]", "Assign -> [('targets', ['Name', 'List']), ('value', 'Call')]", "Assign -> [('targets', ['Subscript', 'Subscript']), ('value', 'Num')]", "Assign -> [('targets', ['Name', 'Name']), ('value', 'Call')]", "Assign -> [('targets', ['Attribute', 'Name']), ('value', 'Num')]", "Assign -> [('targets', ['Name']), ('value', 'UnaryOp')]", "Assign -> [('targets', ['Name']), ('value', 'IfExp')]", "Assign -> [('targets', ['Tuple']), ('value', 'BoolOp')]", "Assign -> [('targets', ['Attribute']), ('value', 'UnaryOp')]", "Assign -> [('targets', ['Attribute', 'Name']), ('value', 'Call')]", "Assign -> [('targets', ['Attribute', 'Name']), ('value', 'Dict')]", "Assign -> [('targets', ['Name', 'Name']), ('value', 'Num')]", "Assign -> [('targets', ['Attribute', 'Attribute']), ('value', 'Num')]", "Assign -> [('targets', ['Attribute', 'Attribute']), ('value', 'Name')]", "Assign -> [('targets', ['Name', 'Attribute']), ('value', 'BinOp')]", "Assign -> [('targets', ['Name']), ('value', 'Yield')]", "Assign -> [('targets', ['Tuple']), ('value', 'IfExp')]", "Assign -> [('targets', ['Subscript']), ('value', 'BoolOp')]", "Assign -> [('targets', ['Subscript', 'Name']), ('value', 'Name')]", "Assign -> [('targets', ['Attribute']), ('value', 'IfExp')]", "Assign -> [('targets', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('value', 'Name')]", "Assign -> [('targets', ['Name', 'Name']), ('value', 'Attribute')]", "Assign -> [('targets', ['Attribute', 'Attribute', 'Attribute']), ('value', 'Num')]", "Assign -> [('targets', ['Subscript', 'Name']), ('value', 'List')]", "Assign -> [('targets', ['Name', 'Tuple']), ('value', 'Tuple')]", "Assign -> [('targets', ['Attribute', 'Attribute', 'Attribute']), ('value', 'Name')]", "Assign -> [('targets', ['Attribute', 'Attribute']), ('value', 'Str')]", "Assign -> [('targets', ['Attribute']), ('value', 'Repr')]", "Assign -> [('targets', ['Name', 'Subscript']), ('value', 'Call')]", "Assign -> [('targets', ['Name', 'Attribute']), ('value', 'Call')]", "Assign -> [('targets', ['Name']), ('value', 'GeneratorExp')]", "Assign -> [('targets', ['Attribute', 'Attribute']), ('value', 'Call')]", "Assign -> [('targets', ['Attribute', 'Name']), ('value', 'Str')]", "Assign -> [('targets', ['Attribute', 'Attribute', 'Attribute', 'Attribute']), ('value', 'Dict')]", "Assign -> [('targets', ['Name', 'Attribute']), ('value', 'Name')]", "Assign -> [('targets', ['Name', 'Attribute']), ('value', 'Subscript')]", "Assign -> [('targets', ['Attribute', 'Attribute']), ('value', 'Attribute')]", "Assign -> [('targets', ['Name', 'Attribute']), ('value', 'ListComp')]", "Assign -> [('targets', ['Subscript', 'Subscript']), ('value', 'Str')]", "Assign -> [('targets', ['Name', 'Name']), ('value', 'Str')]", "Assign -> [('targets', ['Attribute', 'Attribute', 'Attribute', 'Attribute']), ('value', 'Name')]", "Assign -> [('targets', ['Name', 'Name', 'Name', 'Name']), ('value', 'Call')]", "Assign -> [('targets', ['Attribute']), ('value', 'GeneratorExp')]", "Assign -> [('targets', ['Subscript', 'Subscript']), ('value', 'List')]", "Assign -> [('targets', ['Subscript']), ('value', 'Compare')]", "Assign -> [('targets', ['Attribute']), ('value', 'Yield')]", "Assign -> [('targets', ['Subscript']), ('value', 'UnaryOp')]", "Assign -> [('targets', ['Name', 'Name', 'Name', 'Name', 'Name']), ('value', 'Name')]", "Assign -> [('targets', ['Name', 'Attribute']), ('value', 'List')]", "Assign -> [('targets', ['Tuple', 'Name']), ('value', 'Tuple')]", "Assign -> [('targets', ['Name']), ('value', 'DictComp')]", "Assign -> [('targets', ['Subscript', 'Subscript']), ('value', 'Name')]", "Assign -> [('targets', ['Subscript', 'Name']), ('value', 'Dict')]", "Assign -> [('targets', ['Name', 'Name', 'Name']), ('value', 'Name')]", "Assign -> [('targets', ['Attribute', 'Name']), ('value', 'List')]", "Assign -> [('targets', ['Subscript', 'Subscript']), ('value', 'Call')]", "Assign -> [('targets', ['Subscript', 'Subscript']), ('value', 'Attribute')]"], "FunctionDef": ["FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Expr']), ('decorator_list', ['Call'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Delete', 'Expr', 'Assign', 'Assign', 'Expr', 'Delete', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', ['Call'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Expr', 'Expr', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'For', 'Assign', 'Assign', 'For', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Expr', 'While', 'For', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Print', 'If', 'Print', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'For', 'Assign', 'Assign', 'Assign', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Assign', 'TryExcept', 'Expr', 'Print', 'Assign', 'For', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'TryExcept', 'Expr', 'Assign', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'TryExcept']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['FunctionDef', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Return']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Return']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Return']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['TryExcept']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Return']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'Return']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Raise']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Print', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['AugAssign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'While', 'Expr', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Expr', 'For', 'Print', 'Assign', 'Expr', 'Print', 'If', 'Expr', 'Pass']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['For', 'For', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'For', 'For', 'For', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'For', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'While', 'Pass']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'If', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'For', 'For', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr']), ('decorator_list', ['Attribute'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'Return']), ('decorator_list', ['Name', 'Call', 'Attribute'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'If', 'Return']), ('decorator_list', ['Call'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'Return']), ('decorator_list', ['Name', 'Call'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'Assign', 'Assign', 'For', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'If', 'Assign', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'Expr', 'Expr', 'TryExcept']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'TryFinally']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'ImportFrom', 'If', 'Expr', 'TryFinally']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'ImportFrom', 'Assign', 'If', 'Assign', 'Assign', 'For', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'For', 'Expr', 'Expr', 'For', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'If', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'ImportFrom', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'ImportFrom', 'Assign', 'Assign', 'If', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'Assign', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'For', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'TryExcept']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'TryExcept', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'TryExcept', 'For', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'FunctionDef', 'Assign', 'Expr', 'Assign', 'For', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'TryExcept', 'Assign', 'Assign', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'Assign', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'If', 'If', 'Assign', 'For', 'AugAssign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'TryExcept', 'If', 'Assign', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'If', 'Assign', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'If', 'Assign', 'For', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'TryExcept', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'FunctionDef', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'FunctionDef', 'Assign', 'If', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', ['Name', 'Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'If', 'Expr', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'If', 'Expr', 'If', 'Assign', 'TryExcept', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Return']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Return']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'If', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'Assign', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'Assign', 'Assign', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'If', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'TryExcept', 'Assign', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'TryExcept', 'Return']), ('decorator_list', ['Call'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'For', 'Return']), ('decorator_list', ['Call'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'TryExcept']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['TryExcept', 'If', 'If', 'Assign', 'Assign', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'TryExcept']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Return']), ('decorator_list', ['Call'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Print']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Expr']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'Return']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'For', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'TryFinally']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'For', 'Return']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Return']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'TryExcept']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'If', 'If', 'Expr', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'If', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'For', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['For', 'Raise']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'Return']), ('decorator_list', ['Attribute'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'For', 'Return']), ('decorator_list', ['Attribute'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Return']), ('decorator_list', ['Attribute'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assert', 'For', 'Return']), ('decorator_list', ['Attribute'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'For', 'Expr', 'Return']), ('decorator_list', ['Attribute'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'For', 'Assign', 'If', 'For', 'Assign', 'While', 'Return']), ('decorator_list', ['Attribute'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'If', 'For', 'Expr', 'Assign', 'While', 'Expr', 'Return', 'Expr']), ('decorator_list', ['Attribute'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'AugAssign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Return']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Assert', 'Assign', 'Expr', 'If', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assert', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'If', 'If']), ('decorator_list', ['Attribute'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['TryExcept']), ('decorator_list', ['Attribute'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'If', 'Return']), ('decorator_list', ['Attribute'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'If', 'If']), ('decorator_list', ['Attribute'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'Assert', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Expr', 'Expr', 'If', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'For', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'If', 'Expr', 'If', 'Expr', 'If', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Return']), ('decorator_list', ['Attribute'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Assert', 'Assert', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'If', 'Assign', 'For', 'Assign', 'Assign', 'Expr', 'Expr', 'Return']), ('decorator_list', ['Attribute'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'For', 'Expr', 'Expr', 'Expr', 'If', 'For', 'Return']), ('decorator_list', ['Attribute'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'If', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Expr', 'For', 'Assign', 'Assign', 'If', 'Expr', 'Expr', 'Return']), ('decorator_list', ['Attribute'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'TryExcept', 'If', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Assign', 'If', 'Return']), ('decorator_list', ['Attribute'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'If', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'TryExcept', 'For', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'If', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Raise']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'FunctionDef', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'Import', 'Assign', 'Assign', 'If', 'If', 'If', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Return']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'If', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'If', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Raise']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'TryExcept']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'If', 'TryExcept', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'For', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'For', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'If', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'TryExcept', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'If', 'Expr', 'Assign', 'For', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'TryExcept']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'If', 'If', 'For', 'If', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'TryExcept', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'If', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Expr', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'Return']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'If', 'For', 'Return']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'If', 'If', 'If', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'If', 'Assign', 'If', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'Expr', 'Assign', 'TryExcept']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'For', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'With']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'ImportFrom', 'If', 'Assign', 'Assign', 'Assign', 'For', 'While']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'TryExcept', 'Assign', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'For', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'Assign', 'Return']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Import', 'Import', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'Return']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['With']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'ImportFrom', 'ImportFrom', 'ClassDef', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ClassDef', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'ImportFrom', 'ImportFrom', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'FunctionDef', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Import', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ClassDef', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Delete', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'FunctionDef', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'ClassDef', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ClassDef', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ClassDef', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ClassDef', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Pass']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'ImportFrom', 'ClassDef', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'For', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ClassDef', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', ['Call'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'ClassDef', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'ClassDef', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Expr', 'For', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'If', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'Expr', 'If', 'Assign', 'Assign', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'Expr', 'Assign', 'Assign', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'If', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'For']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'For']), ('decorator_list', ['Name', 'Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'Assign', 'Expr']), ('decorator_list', ['Name', 'Name', 'Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'If', 'Expr', 'Expr', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'If', 'Assign', 'If', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'If']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'For', 'Assign', 'Assign', 'Expr', 'For', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'For']), ('decorator_list', ['Name', 'Name', 'Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Expr', 'For', 'If', 'Expr', 'Expr', 'Assign', 'Expr', 'If']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'If', 'Expr', 'Expr', 'Assign', 'Expr']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'For']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'For']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'For']), ('decorator_list', ['Name', 'Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'For', 'For']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'For', 'If']), ('decorator_list', ['Name', 'Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'If', 'For']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Expr', 'For']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'For', 'For', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr']), ('decorator_list', ['Name', 'Name', 'Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'If']), ('decorator_list', ['Name', 'Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr']), ('decorator_list', ['Name', 'Name', 'Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', ['Name', 'Name', 'Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Assign', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'For', 'Expr', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assert', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'TryFinally']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assert', 'Assign', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'If', 'If', 'If', 'If', 'Raise']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'If', 'For', 'Assert']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'If', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'For', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assert', 'If', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assert', 'If', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'If', 'For', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Expr', 'If', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'If', 'Assign', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Expr', 'Assign', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['TryExcept']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'If', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'TryExcept', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'TryExcept']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'While', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'TryExcept', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'If', 'Assign', 'For', 'Assign', 'If', 'ImportFrom', 'Assign', 'Assign', 'If', 'If', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'If', 'If', 'Assign', 'For', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'While', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Import', 'Assign', 'Assign', 'Assign', 'AugAssign', 'AugAssign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'TryExcept', 'Assign', 'If', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Print', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['TryExcept', 'Assign', 'Expr', 'If', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'If', 'Expr', 'Assign', 'Expr', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Print']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Print']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Print']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['TryExcept', 'Expr', 'Assign', 'Expr', 'Print']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'If', 'If', 'Expr', 'TryFinally', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'Assign', 'For', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'For', 'If', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'If', 'Return']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'TryExcept']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'If', 'AugAssign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['FunctionDef', 'Assign', 'Assign', 'Return']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'Assign', 'While', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Delete', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'Assign', 'For', 'Assign', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'For', 'Expr', 'Assign', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['TryExcept', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'For', 'For', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'For', 'Raise']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'TryExcept', 'Assign', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'For', 'For', 'For', 'For', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'TryExcept', 'Assign', 'If', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'For', 'For', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['TryExcept', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'For', 'For', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'If', 'For', 'Raise']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Global', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'TryExcept', 'TryExcept', 'TryExcept']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'Assign', 'TryExcept', 'For', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'If', 'If', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assert', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Expr', 'For', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'For', 'For', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'TryExcept', 'Assign', 'If', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'If', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'If', 'If', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assert', 'Assert', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'AugAssign', 'Assign', 'Expr', 'If', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'If', 'Assign', 'For', 'If', 'Expr', 'Expr', 'Expr', 'If', 'Assign', 'Expr', 'Expr', 'AugAssign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'For', 'Assign', 'While', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'Expr', 'Assign', 'Assign', 'Expr', 'Return']), ('decorator_list', ['Name', 'Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Assign', 'If', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'Assign', 'Expr', 'Return']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assert', 'If', 'TryExcept', 'If', 'Assign', 'Expr', 'Return']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'Assign', 'Expr', 'Return']), ('decorator_list', ['Name', 'Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['While']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'For', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'Assign', 'Assign', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'Assign', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'If', 'If', 'Assign', 'If', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'If', 'If', 'If', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'For', 'Assign', 'Assign', 'Assign', 'While', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Print', 'Assign', 'For', 'Print', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'Assign', 'If', 'Print', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Print', 'While', 'For', 'If', 'If', 'Expr', 'Pass', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'If', 'Assign', 'Print', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'FunctionDef', 'Assign', 'Print', 'If', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'If', 'Assign', 'If', 'If', 'Assign', 'Assign', 'For', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'Assign', 'Assign', 'Print', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Print', 'Assign', 'Print', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'For', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Print', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'For', 'Print', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'For', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Assign', 'For', 'Expr', 'Expr', 'Expr', 'Print', 'Expr', 'Expr', 'Return', 'Expr', 'Assign', 'Assign', 'Print', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'AugAssign', 'Assign', 'Print', 'Print', 'FunctionDef', 'Assign', 'Print', 'FunctionDef', 'Print', 'For', 'Expr', 'Assign', 'Assign', 'Print', 'Assign', 'For', 'Expr', 'Print', 'Assign', 'Assign', 'For', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Expr', 'Expr', 'Expr', 'Return', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Expr', 'Expr', 'Print', 'If', 'Return', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Print', 'Assign', 'Assign', 'Assign', 'Assign', 'Print', 'FunctionDef', 'Assign', 'Assign', 'Expr', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'Print', 'Assign', 'Return', 'Expr', 'Assign', 'Print', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'AugAssign', 'AugAssign', 'Print', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'Assign', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'If', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'While', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['FunctionDef', 'If', 'If', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'AugAssign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'AugAssign', 'AugAssign', 'AugAssign', 'AugAssign', 'AugAssign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'If', 'If', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assert', 'Assert', 'Assert', 'Assert']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'If', 'Expr', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'For', 'For', 'Assign', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'For', 'For', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'AugAssign', 'AugAssign', 'AugAssign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'AugAssign', 'Expr', 'Assign', 'If', 'AugAssign', 'Assign', 'If', 'For', 'AugAssign', 'If', 'If', 'AugAssign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'Assign', 'If', 'Expr', 'If', 'Assign', 'Assign', 'Expr', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'AugAssign', 'AugAssign', 'AugAssign', 'AugAssign', 'If', 'AugAssign', 'AugAssign', 'AugAssign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'AugAssign', 'AugAssign', 'For', 'AugAssign', 'AugAssign', 'AugAssign', 'AugAssign', 'AugAssign', 'AugAssign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'If', 'If', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'TryExcept', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'If', 'Expr', 'Expr', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['For', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['For', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'For', 'Expr', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'For', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['For', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['FunctionDef', 'Assign', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['For', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'FunctionDef', 'For', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'If', 'Expr', 'For', 'Assign', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'For', 'For', 'If', 'Assign', 'FunctionDef', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'For', 'Return', 'Assign', 'Expr', 'For', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'For', 'Expr', 'Assign', 'Assign', 'Assign', 'For', 'Expr', 'Expr', 'Expr', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'For', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Assign', 'For', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'For', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Assign', 'If', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'For', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'For', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'FunctionDef', 'FunctionDef', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Delete']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'FunctionDef', 'FunctionDef', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['FunctionDef', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'For', 'For', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'For', 'Assign', 'Assign', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'While']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Print', 'For', 'Print']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'For', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'For', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Print', 'Assign', 'Assign', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'For', 'FunctionDef', 'Assign', 'For', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'For', 'Expr', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'For', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'If', 'Assign', 'For', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'For', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'Expr', 'If', 'Assign', 'Expr', 'Expr', 'Assign', 'For', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Print', 'For', 'Return', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Print']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Delete', 'Expr', 'Delete', 'Expr', 'Delete', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Expr', 'Expr', 'Assign', 'Assign', 'AugAssign', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'Expr', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'For', 'Assign', 'For', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'For', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ClassDef', 'FunctionDef', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'For', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Print', 'Assign', 'Expr', 'Print']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Expr', 'Print', 'For', 'Print']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Assign', 'Expr', 'Assign', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'Assign', 'If', 'If', 'Assign', 'If', 'Assign', 'Assign', 'If', 'If']), ('decorator_list', ['Attribute'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'For', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'If', 'Assign', 'Assign', 'Assign', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'If', 'Assign', 'Assign', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'If', 'If', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign']), ('decorator_list', ['Call'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Delete']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'Expr', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['FunctionDef', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'While', 'While', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Print', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'For', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'While', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Print', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'For', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'For', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'If', 'If', 'If', 'If', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'If', 'Expr', 'Print', 'Assign', 'Assign', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'For', 'For', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'For', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'If', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'For', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'TryExcept', 'TryExcept', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Global', 'Assign', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'If', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Raise']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assert', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'If', 'Assign', 'For', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'AugAssign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Expr', 'Assign', 'Expr', 'If', 'Assign', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['For', 'Assign', 'Assign', 'If', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'Assign', 'If', 'Assign', 'If', 'If', 'If', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Expr', 'Expr', 'If', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'Expr', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'If', 'Expr', 'Expr', 'Assign', 'Assign', 'If', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'TryFinally']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'If', 'If', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'TryFinally']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['TryFinally']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'ImportFrom', 'Assign', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Expr', 'TryFinally']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'If', 'Expr', 'Assign', 'Assign', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'For', 'If', 'Assign', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'FunctionDef', 'If', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'If', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'If', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'If', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['TryExcept', 'Expr', 'Expr', 'Assign', 'Assign', 'TryFinally']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'TryFinally']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'While', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'For', 'For', 'Assign', 'Assign', 'TryExcept']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ClassDef', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'If', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'TryFinally']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'If', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'If', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'For', 'Assert', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'TryExcept', 'Expr', 'TryFinally']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'While']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['For', 'For', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'For', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'TryFinally']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Return', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Print', 'If', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'If', 'If', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'FunctionDef', 'Assign', 'If', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'If', 'For', 'For', 'For', 'If', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'If', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'If', 'Expr', 'Assign', 'FunctionDef', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'If', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'TryExcept', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'FunctionDef', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'If', 'If', 'Assign', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'If', 'If', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'TryFinally', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assert', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assert']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assert', 'Assign', 'Assign', 'Assign', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'While', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'For', 'Assign', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'For', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'For', 'For', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assert', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'For', 'Assign', 'If', 'For', 'If', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'AugAssign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Return', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'If', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'If', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'If', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'If', 'Expr', 'Expr', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'For', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'If', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'If', 'Assign', 'Assign', 'Assign', 'If', 'Expr', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'For', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'If', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['TryExcept', 'Assign', 'If', 'If', 'TryExcept', 'If', 'If', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'Assign', 'Import', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'If', 'TryExcept', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Expr', 'Expr', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Expr', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Expr', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'For', 'Expr', 'Assign', 'For', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'If', 'If', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'If', 'Assign', 'For', 'Assign', 'Assign', 'Assign', 'Assign', 'TryFinally', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'If', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Expr', 'If', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Expr', 'Assign', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['For', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['TryExcept', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'If', 'Assign', 'Assign', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'If', 'If', 'Assign', 'Assign', 'Assert', 'Assign', 'Assign', 'Assign', 'While', 'Expr', 'Expr', 'If', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'TryFinally']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'For', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'For', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'TryFinally', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Expr', 'If', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'Assign', 'If', 'Assign', 'If', 'If', 'If', 'Assign', 'Expr', 'If', 'If', 'If', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'While']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'If', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Expr', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'For', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'If', 'Assign', 'Assign', 'If', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'If', 'If', 'Assign', 'Assign', 'If', 'Assign', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'If', 'If', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'Assign', 'Assign', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'If', 'Assign', 'Assign', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Assign', 'Assign', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'If', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'If', 'If', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'For', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'While', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'For', 'Expr', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Expr', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'If', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'FunctionDef', 'Assign', 'Expr', 'Expr', 'Assign', 'FunctionDef', 'For', 'Assign', 'Expr', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'AugAssign', 'AugAssign', 'AugAssign', 'AugAssign', 'Assign', 'AugAssign', 'AugAssign', 'AugAssign', 'AugAssign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'While']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'TryExcept']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['FunctionDef', 'Expr', 'Assign', 'While', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'If', 'Assign']), ('decorator_list', ['Name', 'Attribute'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'If', 'Print', 'Assign', 'Assign', 'Assign', 'If', 'If', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Print', 'Assign']), ('decorator_list', ['Name', 'Attribute'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Print', 'Assign', 'Assign']), ('decorator_list', ['Name', 'Attribute'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'For', 'Expr', 'For', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'If', 'FunctionDef', 'Assign', 'If', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'TryExcept']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'If', 'For', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'For', 'Assign', 'If', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'Assign', 'If', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['FunctionDef', 'Assign', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'Assign', 'If', 'Assign', 'For', 'If', 'For', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'If', 'FunctionDef', 'Expr', 'Assign', 'Assign', 'While', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'For', 'Expr', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'TryExcept', 'Assign', 'If', 'Assign', 'If', 'If', 'TryExcept', 'Assign', 'FunctionDef', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'If', 'If', 'If', 'If', 'If', 'If', 'FunctionDef', 'If', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'FunctionDef', 'Assign', 'TryExcept']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'FunctionDef', 'Assign', 'TryFinally']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'For', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'For', 'Assign', 'Assign', 'For', 'Assign', 'For', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'Assign', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'If', 'Assign', 'If', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'If', 'Assign', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'For', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'If', 'If', 'Delete', 'Assign', 'Assign', 'Expr', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'TryExcept', 'TryExcept', 'Assign', 'If', 'Expr', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'If', 'Assign', 'Assign', 'Return']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'If', 'Expr', 'Assign', 'Return']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'Assign', 'Expr', 'Assign', 'Return']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'For', 'Assign', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'TryExcept']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'If', 'If', 'If', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'TryExcept']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Print', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['With']), ('decorator_list', ['Call'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'TryFinally']), ('decorator_list', ['Call'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Raise', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['For', 'Return']), ('decorator_list', ['Call'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'If', 'Assign', 'If', 'Expr', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Expr', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Expr', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Print', 'Assign', 'Assign', 'ClassDef', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['FunctionDef', 'TryExcept']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'AugAssign', 'For', 'Import', 'FunctionDef', 'Assign', 'Assign', 'For', 'If', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'For', 'Assign', 'If', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'FunctionDef', 'Assign', 'Assign', 'For', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'Assign', 'For', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'TryExcept', 'TryExcept', 'TryExcept', 'TryExcept', 'TryExcept', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'TryFinally']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'For', 'If', 'If', 'If', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Assign', 'If', 'Expr', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'While']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'If', 'Assign', 'If', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assert', 'If', 'Assert', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'If', 'Assign', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'For', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'For', 'For', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'For', 'Assign', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Import', 'Assign', 'Assign', 'Assign', 'Expr', 'For', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Print', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Assign', 'For', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Print', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Import', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'Assign', 'If', 'For', 'Assign', 'Assign', 'Import', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'ImportFrom', 'ImportFrom', 'If', 'Assign', 'If', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Import', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'ImportFrom', 'Import', 'Assign', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Assign', 'If', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'AugAssign', 'If', 'If', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'AugAssign', 'AugAssign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assert', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'Assign', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'Assign', 'If', 'Print']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'If', 'Assign', 'Import', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'Import', 'Import', 'Assign', 'If', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Import', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'Assign', 'Import', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Print']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'ImportFrom', 'If', 'Assign', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'ImportFrom', 'ImportFrom', 'If', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'ImportFrom', 'Assign', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Print', 'Assign', 'Print', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'If', 'Assign', 'Assign', 'If', 'Expr', 'Expr', 'Print']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'If', 'Assign', 'Assign', 'If', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'ImportFrom', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Assign', 'Print']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'If', 'Assign', 'Assign', 'Print', 'Assign', 'Assign', 'Expr', 'Print']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'If', 'Assign', 'Assign', 'Print', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'Assign', 'While', 'Assign', 'If', 'Return']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'If', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'If', 'If', 'Print', 'Assign', 'If', 'Assign', 'Expr', 'Expr', 'Assign', 'Print']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Assert', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Import', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Print']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Print']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'ImportFrom', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Print', 'Assign', 'Print']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Print', 'If', 'Assign', 'For', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'For', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'TryExcept']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'With', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'With', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'For', 'TryExcept']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'For', 'If', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', ['Attribute'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['FunctionDef', 'Assign', 'FunctionDef', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'FunctionDef', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'If', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'TryExcept']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', ['Call'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', ['Call'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'For', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', ['Call'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'For', 'Assign', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Global', 'TryExcept', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Import', 'Import', 'Import', 'Import', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Expr', 'Assign', 'Assign', 'If', 'Assign', 'If', 'Expr', 'Assign', 'If', 'If', 'If', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'If', 'Expr', 'Assign', 'Assign', 'If', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'TryExcept', 'Assign', 'Expr', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'Expr', 'Assign', 'For', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'TryExcept']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'If', 'If', 'Assign', 'If', 'Assign', 'If', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'For', 'For', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'If', 'If', 'Assign', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'If', 'Assign', 'For', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'If', 'If', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'If', 'Assign', 'Assign', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'If', 'Assign', 'Expr', 'Assign', 'Assign', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'Expr', 'Expr', 'Assign', 'If', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'While', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'ImportFrom', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'If', 'If', 'If', 'If', 'Assign', 'For', 'Assign', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'With', 'With']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'For', 'For', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'If', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'While', 'Assign', 'For', 'Expr', 'For', 'AugAssign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'For', 'For', 'For', 'For', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'While']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'For', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'For', 'For', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'For', 'For', 'For', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Assign', 'For', 'Expr', 'Expr', 'If', 'If', 'Expr', 'If', 'If', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'If', 'If', 'If', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['For', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'For', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'For', 'If', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'If', 'If', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'If', 'Expr', 'Expr', 'Expr', 'If', 'If', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['For', 'Expr', 'Expr', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'If', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'If', 'If', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'If', 'For', 'If', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'If', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'If', 'Assign', 'Expr', 'Expr', 'Expr', 'If', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'If', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'For', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Expr', 'For', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Expr', 'Expr', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Expr', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Delete', 'Assign', 'Delete', 'Assign', 'Delete', 'Delete']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'TryExcept', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'TryExcept', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'Assign', 'Assign', 'For', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'If', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'TryExcept', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'For', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'AugAssign', 'AugAssign', 'AugAssign', 'Assign', 'Assign', 'AugAssign', 'AugAssign', 'AugAssign', 'AugAssign', 'AugAssign', 'AugAssign', 'AugAssign', 'AugAssign', 'AugAssign', 'AugAssign', 'Expr', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'Assign', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'If', 'Assign', 'Assign', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'If', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign']), ('decorator_list', ['Attribute'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'AugAssign', 'AugAssign', 'Return']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'Assign', 'AugAssign', 'AugAssign', 'Assign', 'AugAssign', 'AugAssign', 'Expr', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'For', 'Assign', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'AugAssign', 'AugAssign', 'AugAssign', 'AugAssign', 'Assign', 'AugAssign', 'AugAssign', 'AugAssign', 'AugAssign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'For', 'Return']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'AugAssign', 'AugAssign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'AugAssign', 'Assign', 'Assign', 'Assign', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'If', 'If', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'Assign', 'While']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'If', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Expr', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'FunctionDef', 'TryFinally']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'TryFinally']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'While']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Assign', 'Assign', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'If', 'Assign', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'While', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'If', 'Return']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'TryExcept', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'Assign', 'If', 'Expr', 'If', 'If', 'If', 'If', 'Assign', 'AugAssign', 'AugAssign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'Assign', 'If', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'TryFinally', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'FunctionDef', 'FunctionDef', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'If', 'Raise']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'Assign', 'If', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assert']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Import', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'ImportFrom', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'For', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'If', 'If', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'If', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'Assign', 'Assert', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'If', 'If', 'If', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'TryExcept']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'For', 'If', 'Assign', 'Expr', 'If', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'Assign', 'If', 'If', 'Assign', 'TryExcept']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'For', 'For', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'If', 'TryExcept', 'Assign', 'If', 'If', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'While']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Raise']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'Assign', 'Assign', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'Assign', 'Assign', 'For', 'If', 'Assign', 'Print', 'Assign', 'Print', 'Expr', 'Expr', 'Print', 'Expr', 'Print']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'If', 'If', 'If', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'TryExcept', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Print', 'If', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Assign', 'AugAssign', 'Assign', 'Assign', 'For', 'Assign', 'AugAssign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Print', 'Expr', 'Print', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Pass']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'For', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'Assign', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'If', 'TryExcept', 'Assign', 'For', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Expr', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'For', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'Expr', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assert']), ('decorator_list', ['Call'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assert']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assert']), ('decorator_list', ['Call'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'If', 'TryExcept', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'If', 'Assign', 'Assign', 'If', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'TryExcept', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'FunctionDef', 'FunctionDef', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'If', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'TryExcept', 'Expr', 'TryExcept']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'If', 'Assign', 'If', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Expr', 'Assign', 'Assign', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'If', 'Assign', 'Assign', 'For', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'If', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'Expr', 'TryExcept']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'For', 'Expr', 'ImportFrom', 'Expr', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'Expr', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Return']), ('decorator_list', ['Call'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'For', 'Assign', 'Expr', 'If']), ('decorator_list', ['Attribute'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'Expr']), ('decorator_list', ['Attribute'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'If', 'Assign', 'Expr', 'If', 'Assign', 'Assign', 'If', 'If', 'Assign', 'Assign', 'If', 'Assign', 'For', 'For']), ('decorator_list', ['Attribute'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Expr']), ('decorator_list', ['Attribute', 'Attribute'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If']), ('decorator_list', ['Attribute'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'TryExcept', 'Assign', 'If', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'FunctionDef', 'Assign', 'If', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'For', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'If', 'TryExcept', 'If', 'Assign', 'Expr', 'Expr', 'Expr', 'Print', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'Assign', 'If', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'TryExcept', 'If', 'Assign', 'Expr', 'Assign', 'For', 'TryExcept', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'If', 'If', 'For', 'For', 'If', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'FunctionDef', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'FunctionDef', 'Expr', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Expr', 'If', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'Assign', 'If', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'If', 'Assign', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'For', 'Assign', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'If', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Expr', 'For', 'If', 'If', 'Assign', 'Assign', 'If', 'If', 'Assign', 'Assign', 'For', 'Expr', 'For', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'Print', 'AugAssign', 'AugAssign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Print', 'Assign', 'Assign', 'Assign', 'For', 'AugAssign', 'Assign', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['FunctionDef', 'Assign', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Global', 'Assign', 'Assign', 'If', 'While', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'If', 'If', 'Assign', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'If', 'Assign', 'If', 'If', 'If', 'If', 'Assign', 'Expr', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'If', 'If', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Expr', 'Expr', 'Expr', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Import', 'Assign', 'Print', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Pass']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'Assign', 'If', 'Assign', 'If', 'If', 'Assign', 'For', 'Assign', 'Assign', 'For', 'Assign', 'If', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'If', 'If', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Delete']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'ImportFrom', 'ImportFrom', 'If', 'If', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'FunctionDef', 'If', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'If', 'FunctionDef', 'Assign', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'ImportFrom', 'If', 'Assign', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'ImportFrom', 'Assign', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'ImportFrom', 'If', 'If', 'Assign', 'Assign', 'Assign', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'For', 'Assign', 'Expr', 'For', 'Assign', 'Expr', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'For', 'If', 'Expr', 'Assign', 'Expr', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'If', 'If', 'Assign', 'Assign', 'Expr', 'Assign', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'If', 'If', 'Assign', 'If', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['TryExcept', 'Assign', 'Assign', 'For', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'For', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Print', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assert', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'If', 'If', 'Assign', 'Assign', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'If', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'For', 'FunctionDef', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assert', 'Assign', 'For', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'Import', 'ImportFrom', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'TryExcept', 'While', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Global', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'While']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'TryExcept', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'Assign', 'TryExcept', 'Assign', 'Assign', 'If', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'TryExcept', 'TryExcept', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'If', 'Assign', 'Assign', 'If', 'If', 'Expr', 'Assign', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assert', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'If', 'If', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'Print', 'Expr', 'Print', 'Print', 'Print', 'Expr', 'TryExcept']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['TryExcept', 'Assign', 'Assign', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'If', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Import', 'Expr', 'If', 'TryExcept', 'TryExcept', 'TryExcept', 'Assign', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', ['Call'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', ['Call'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Return']), ('decorator_list', ['Call'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Return']), ('decorator_list', ['Call'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Return']), ('decorator_list', ['Call'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Return']), ('decorator_list', ['Call'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'TryExcept', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Print', 'Assign', 'If', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Print', 'Print', 'Print', 'Print', 'Print']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Pass']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Expr', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'While', 'Assign', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'If', 'If', 'If', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'If', 'If', 'Assign', 'With']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Assign', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'If', 'Assign', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'For', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'With']), ('decorator_list', ['Call'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Expr']), ('decorator_list', ['Call'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'If', 'Expr']), ('decorator_list', ['Call'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'TryExcept', 'Return']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'TryExcept', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['FunctionDef', 'Return']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'If', 'If', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'Assign', 'Assign', 'Print']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'If', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'For', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'Assign', 'If', 'Expr', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'TryExcept', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'TryExcept', 'Assign', 'TryExcept', 'Assign', 'TryExcept']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'TryExcept', 'Assign', 'TryExcept', 'Assign', 'TryExcept']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'Expr', 'Assign', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'If', 'Assign', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Expr', 'If', 'Assign', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'If', 'If', 'If', 'Assign', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'If', 'If', 'Expr', 'Assign', 'If', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'Assign', 'Expr', 'Assign', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Expr', 'Assign', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Expr', 'Assign', 'If', 'If', 'Assign', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Expr', 'Assign', 'Assign', 'For', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Expr', 'Assign', 'If', 'Assign', 'Assign', 'For', 'Assign', 'Assign', 'Assign', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Assign', 'Assign', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Expr', 'Assign', 'Assign', 'Assign', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'For', 'Assign', 'Assign', 'If', 'Assign', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'For', 'If', 'For', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'If', 'Expr', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'If', 'If', 'Assign', 'Assign', 'Assign', 'If', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'If', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'TryExcept', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'Assign', 'If', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assert', 'Assign', 'Assign', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'While', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'TryExcept', 'Assign', 'Assign', 'Assign', 'TryFinally', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'If', 'If', 'If', 'If', 'If', 'If', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'Expr', 'Assign', 'Expr', 'FunctionDef', 'FunctionDef', 'For', 'Assign', 'Expr', 'Assign', 'Expr', 'Return']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Return']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'If', 'Assign', 'Assign', 'Delete', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', ['Call', 'Name', 'Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'If']), ('decorator_list', ['Call', 'Name', 'Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', ['Call', 'Name', 'Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Import', 'Assign', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'If', 'Assign', 'If', 'Expr', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'TryExcept', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Assign', 'Expr']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'TryExcept', 'Assign', 'If', 'Return']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Return']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'If', 'Assign', 'If', 'If', 'If', 'Assign', 'Assign', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'If', 'If', 'If', 'Assign', 'Assign', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'TryExcept', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'If', 'Assign', 'Assign', 'If', 'If', 'If', 'If', 'Assign', 'Assign', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'TryExcept', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'If', 'If', 'Assign', 'Assign', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'TryExcept', 'Assign', 'Assign', 'If', 'If', 'Assign', 'If', 'If', 'If', 'Assign', 'Assign', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'TryExcept', 'Assign', 'Assign', 'If', 'If', 'If', 'TryExcept', 'If', 'If', 'Assign', 'For', 'Assign', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'ImportFrom', 'Assign', 'Assign', 'For', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['AugAssign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'For', 'If', 'Return']), ('decorator_list', ['Name', 'Call'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Expr', 'Assign', 'If', 'Return']), ('decorator_list', ['Name', 'Call'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Return']), ('decorator_list', ['Name', 'Call'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'For', 'Return']), ('decorator_list', ['Name', 'Call'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Return']), ('decorator_list', ['Name', 'Call'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'Print', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'For', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'AugAssign', 'Return']), ('decorator_list', ['Name', 'Call'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'Assign', 'Assign', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'TryExcept']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'AugAssign', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'For', 'Return']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'While']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'For', 'For', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'If', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'If', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'If', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'If', 'If', 'If', 'If', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ClassDef', 'ClassDef', 'Expr', 'Expr', 'TryExcept', 'ClassDef', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'TryExcept', 'Assign', 'If', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Assign', 'Expr', 'Expr', 'If', 'If', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Expr', 'Expr', 'If', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'ImportFrom', 'Assign', 'Assign', 'Expr', 'ClassDef', 'Assign', 'Expr', 'Expr', 'ClassDef', 'Assign', 'Expr', 'Expr', 'ClassDef', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Raise']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Delete', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'Expr', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'For', 'For', 'Assign', 'For', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Print', 'Assign', 'Assign', 'Assign', 'Print', 'Print', 'Assign', 'Assign', 'Assign', 'Print', 'Print', 'Assign', 'Assign', 'Assign', 'Print', 'Print', 'Assign', 'Assign', 'Assign', 'Print', 'Print', 'Assign', 'Assign', 'Assign', 'Print']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'Raise']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Exec']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Expr', 'Assign', 'TryExcept']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assert', 'Assert', 'Assign', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'Assign', 'Expr', 'Expr', 'Assign', 'While', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'TryExcept', 'Assign', 'If', 'TryExcept', 'If', 'If', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'With']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'TryExcept', 'Assign', 'If', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If']), ('decorator_list', ['Call', 'Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Return']), ('decorator_list', ['Call', 'Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['For', 'Return']), ('decorator_list', ['Call', 'Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If']), ('decorator_list', ['Call', 'Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'If', 'Return']), ('decorator_list', ['Call', 'Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'TryExcept', 'Return']), ('decorator_list', ['Call'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'TryExcept', 'ImportFrom', 'Return']), ('decorator_list', ['Call'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Print', 'Assign', 'Assign', 'If', 'Import', 'Assign', 'For', 'Expr', 'Assign', 'Expr', 'Print', 'Assign', 'Assign', 'Return']), ('decorator_list', ['Call', 'Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'Import', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'TryExcept', 'If', 'ImportFrom', 'Return']), ('decorator_list', ['Call', 'Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['FunctionDef', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr']), ('decorator_list', ['Call'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'If', 'If', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'ImportFrom', 'FunctionDef', 'If', 'Assign', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Assign', 'Assert', 'Assign', 'Assign', 'Assert', 'Assert', 'Assert']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['With', 'Assign', 'Assert', 'Assert', 'Assert', 'Assert', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assert', 'Assign', 'Assign', 'Assert', 'Assert']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assert']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assert', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assert', 'Assign', 'Assert']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'For', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'FunctionDef', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'ImportFrom', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'ImportFrom', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Delete', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['While', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'If', 'If', 'Assign', 'If', 'If', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'If', 'If', 'If', 'If', 'Assign', 'If', 'Assign', 'If', 'If', 'Assign', 'Assign', 'If', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'If', 'Assign', 'If', 'If', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'If', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'If', 'If', 'Assign', 'Assign', 'If', 'FunctionDef', 'If', 'If', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['While', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'For', 'If', 'If', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'If', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'For', 'FunctionDef', 'Assign', 'Assign', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'For', 'If', 'If', 'Assign', 'For', 'For', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'If', 'Assign', 'Assign', 'While', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'Assign', 'If', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'If', 'Assign', 'TryExcept']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'Assign', 'Assign', 'Assign', 'If', 'If', 'Assign', 'Assign', 'Assign', 'While', 'Assign', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'If', 'Assign', 'Assign', 'If', 'If', 'Assign', 'Assign', 'Expr', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'Assign', 'For', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'If', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'If', 'If', 'Assign', 'Assign', 'Assign', 'If', 'If', 'If', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'Assign', 'If', 'If', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Assign', 'If', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Assign', 'If', 'If', 'If', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'If', 'Assign', 'If', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'If', 'If', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'For', 'FunctionDef', 'Assign', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'Assign', 'If', 'If', 'If', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'If', 'Assign', 'Assign', 'If', 'Assign', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'If', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Expr', 'Expr', 'Expr', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Expr', 'Expr', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'If', 'Assign', 'If', 'Assign', 'If', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'If', 'If', 'Assign', 'If', 'Assign', 'Assign', 'If', 'If', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['TryExcept', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assert', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'Assign', 'For', 'TryExcept']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'If', 'If', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'Assign', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'If', 'Assign', 'If', 'TryExcept', 'If', 'Assign', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'For', 'If', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'If', 'Expr', 'Assign', 'If', 'If', 'AugAssign', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'If', 'For', 'For', 'Expr', 'If', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'TryExcept', 'TryExcept', 'Assign', 'Assign', 'If', 'If', 'Assign', 'AugAssign', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'If', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'AugAssign', 'AugAssign', 'Expr', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'Expr', 'While', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'TryExcept']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'If', 'With', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'If', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'With', 'If', 'Expr', 'Expr', 'Print']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Assign', 'For', 'Print', 'Print', 'Print', 'Print', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'For', 'Assign', 'While', 'Print']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Assign', 'While', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'For', 'Assign', 'Assign', 'While', 'Print', 'Print', 'Print', 'Print']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'Assign', 'Assign', 'For', 'Expr', 'Expr', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'Import', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'If', 'TryExcept']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'For']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Expr', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'If', 'If', 'Expr', 'Assign', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'If', 'If', 'If', 'Assign', 'Assign', 'Assign', 'TryExcept', 'If', 'TryExcept']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'If', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'TryExcept', 'Assign', 'AugAssign', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'FunctionDef', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['FunctionDef', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', ['Call'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'If', 'If', 'Assign', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'Assign', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'FunctionDef', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'If', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'If', 'If', 'If', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'Expr', 'FunctionDef', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Expr', 'Delete']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'ImportFrom', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'For', 'Expr', 'If', 'If', 'If', 'If', 'If', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'If', 'If', 'Assign', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assert', 'Assign', 'Assign', 'Assign', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assert', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Expr', 'If', 'FunctionDef', 'Assign', 'If', 'Expr', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'Import', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ClassDef', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Assign', 'If', 'Assign', 'Assign', 'For', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'If', 'Expr', 'Assign', 'TryFinally', 'Expr', 'Expr', 'If', 'TryExcept', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['AugAssign', 'If', 'With', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['AugAssign', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'With', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'For', 'Assign', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'For', 'Expr', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'For', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'If', 'If', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'If', 'If', 'Raise']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'If', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assert', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assert', 'Expr', 'Assign', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'If', 'Raise']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'If', 'If', 'Assign', 'TryExcept']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'If', 'Assign', 'If', 'Assign', 'TryExcept']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'If', 'If', 'If', 'Raise']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'TryExcept', 'TryExcept', 'If', 'Assign', 'Assign', 'If', 'Assign', 'For', 'Assign', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['TryExcept', 'Assign', 'TryExcept', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['TryExcept', 'Assign', 'If', 'TryExcept', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'For', 'Assign', 'Assign', 'If', 'If', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Expr', 'If', 'If', 'Assign', 'Assign', 'For', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Print', 'Assign', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Print', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'Assign', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'AugAssign', 'TryFinally']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'TryFinally']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'TryExcept', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'TryExcept', 'TryExcept', 'Assign', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'TryExcept', 'If', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['TryExcept', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'If', 'TryExcept', 'Assign', 'If', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Expr', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'TryExcept', 'Assign', 'If', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'Assign', 'Assign', 'For', 'For', 'Assign', 'Assign', 'TryExcept']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Assign', 'For', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Global', 'Assign', 'Assign', 'Print', 'If', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Global', 'Assign', 'If', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Global', 'ImportFrom', 'ImportFrom', 'If', 'Assign', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Assign', 'For', 'Assign', 'Print', 'ImportFrom', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'ImportFrom', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Global', 'ImportFrom', 'Print', 'Assign', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Global', 'Print', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'If', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'For', 'Print', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Print']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Global', 'Assign', 'Assign', 'Print', 'Assign', 'Print', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Print', 'Import', 'Import', 'Assign', 'Assign', 'TryExcept']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'Expr', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'For', 'For', 'Assign', 'For', 'If', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Expr', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'If', 'If', 'Assign', 'If', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'If', 'Assign', 'Expr', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'For', 'For', 'Assign', 'Expr', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'Expr', 'Expr', 'If', 'If', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'For', 'AugAssign', 'Expr', 'Assign', 'Expr', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'For', 'Assign', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'Print', 'TryExcept', 'If', 'Assign', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Print', 'For', 'Print', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'TryFinally']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'FunctionDef', 'FunctionDef', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'For', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'For']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'If', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'If', 'If', 'Assign', 'Assign', 'For', 'If']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'For', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'If', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'If', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'For', 'For']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'If', 'Raise']), ('decorator_list', ['Name', 'Call'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'TryExcept', 'TryExcept', 'If', 'If', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'For', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'If', 'Assign', 'Assign', 'If', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'Expr', 'Expr', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'TryExcept', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'TryExcept', 'If', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'Assign', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'Assign', 'Assign', 'If', 'Expr', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'If', 'If', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Global', 'Assign', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Expr', 'For', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Expr', 'If', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'For', 'Assign', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'For', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'TryExcept']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'TryExcept', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Assign', 'If', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Import', 'If', 'Assign', 'Assign', 'Return']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assert', 'ImportFrom', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assert', 'ImportFrom', 'Expr', 'Expr', 'Assign', 'Assign', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Return']), ('decorator_list', ['Attribute'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'If', 'If', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'TryExcept', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Global', 'Assign', 'If', 'If', 'Expr', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Expr', 'Print', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'For', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'Assign', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'For', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Global', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Global', 'Assign', 'For', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Import', 'Import', 'FunctionDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Global', 'If', 'Assign', 'For', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'For', 'Expr', 'Assign', 'If', 'Assign', 'Assign', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'ClassDef', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'While', 'If', 'Assign', 'Assign', 'Assign', 'While', 'If', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'AugAssign', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'For', 'AugAssign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Global', 'Global', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', ['Call'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'For', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'ImportFrom', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr']), ('decorator_list', ['Call'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr']), ('decorator_list', ['Call'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['FunctionDef', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'If', 'Global', 'Assign', 'Assign', 'Assign', 'Global', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Global', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'For', 'Expr', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Global', 'Assign', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Global', 'Global', 'Assign', 'If', 'Assign', 'If', 'Global', 'Assign', 'For', 'If', 'Assign', 'Global', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'AugAssign', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'If', 'AugAssign', 'Assign', 'Expr', 'Assign', 'If', 'Assign', 'If', 'Assign', 'If', 'Assign', 'If', 'Assign', 'Assign', 'While', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Global', 'Assign', 'If', 'If', 'If', 'Expr', 'Assign', 'If', 'Assign', 'If', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'If', 'Expr', 'For', 'For', 'Expr', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'For', 'If', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'For', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'Assign', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'Assign', 'If', 'Assign', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'TryExcept']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'TryExcept', 'TryExcept', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Return']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assert', 'Expr', 'For', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'If', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'Assign', 'For', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'Assign', 'If', 'Assign', 'Assign', 'For', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'TryExcept', 'Expr', 'TryExcept', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'TryExcept', 'Expr', 'Expr', 'TryExcept', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'TryExcept', 'TryExcept', 'TryExcept', 'TryExcept', 'TryExcept']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'TryExcept', 'TryExcept', 'TryExcept', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'TryExcept', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'TryExcept', 'TryExcept', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Expr', 'TryExcept']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'TryExcept', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'TryExcept', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'TryExcept', 'Assign', 'Expr', 'TryExcept', 'Expr', 'Expr', 'Expr', 'Expr', 'TryExcept', 'Assign', 'Expr', 'TryExcept', 'Expr', 'Expr', 'Expr', 'Expr', 'TryExcept', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'TryExcept', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'TryExcept', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'TryExcept', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'TryExcept', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'TryExcept', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'TryExcept', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'TryExcept', 'Assign', 'Expr', 'TryExcept', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'TryExcept', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'TryExcept', 'Expr', 'TryExcept', 'Expr', 'Expr', 'TryExcept']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'TryExcept', 'Assign', 'Assign', 'If', 'If', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'TryExcept', 'TryExcept', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Print', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'FunctionDef', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Expr', 'Expr', 'Assign', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'ClassDef', 'TryExcept']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['TryExcept', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Expr', 'If', 'Expr', 'Expr', 'Assign', 'Assign', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['TryExcept', 'Assign', 'For', 'Delete', 'Assign', 'If', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Expr', 'TryFinally', 'Assign', 'Expr', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Expr', 'Expr', 'Assign', 'Return']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'Assign', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['TryExcept', 'Assign', 'Assign', 'If', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'If', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'Assign', 'If', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'If', 'If', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['TryExcept', 'If', 'TryExcept', 'TryExcept', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'ImportFrom', 'If', 'Expr', 'Expr', 'TryFinally', 'Assign', 'For', 'For', 'Assign', 'TryFinally', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Expr', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'While', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'Assign', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'While', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'TryExcept', 'Assign', 'TryExcept', 'TryExcept']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'TryExcept', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assert', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'Assert', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assert', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assert', 'Return']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'If', 'Assert', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Expr', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Import', 'Assign', 'Assign', 'Assign', 'If', 'If', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'Expr', 'Return']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Assert', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'Expr', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'Import', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'ImportFrom', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Import', 'Assign', 'Assign', 'For', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'Assert', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Import', 'Assign', 'Assign', 'Assign', 'For', 'If', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'If', 'Return']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assert', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'Assign', 'Assign', 'For', 'Expr', 'Assign', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'Assign', 'Assert', 'Assign', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'Expr', 'If', 'Assign', 'For', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'Assign', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'For', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'TryExcept', 'If', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'TryExcept', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['TryExcept', 'Return']), ('decorator_list', ['Attribute'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'If', 'If', 'If', 'Assign', 'Return']), ('decorator_list', ['Attribute'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'TryExcept', 'If', 'Assign', 'Return']), ('decorator_list', ['Attribute'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', ['Attribute'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If']), ('decorator_list', ['Attribute'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If']), ('decorator_list', ['Attribute'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', ['Attribute'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'For', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['TryExcept', 'Assign', 'While', 'Return']), ('decorator_list', ['Call'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Return']), ('decorator_list', ['Attribute'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'If', 'Raise']), ('decorator_list', ['Call'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Return']), ('decorator_list', ['Call'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['TryExcept', 'Return']), ('decorator_list', ['Call'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'If', 'Assign', 'Global', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'If', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'If', 'Assign', 'If', 'Assign', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'If', 'TryExcept', 'Global', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Print', 'Expr', 'Print', 'Print', 'Print', 'Assign', 'Print', 'Assign', 'Print', 'Expr', 'Assign', 'Print', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'If', 'If', 'Print', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Print', 'Expr', 'Expr', 'Expr', 'Print', 'Expr', 'AugAssign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Expr', 'AugAssign', 'Expr', 'AugAssign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'If', 'For', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'If', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'For', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'If', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ClassDef', 'Assign', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'FunctionDef', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'Assign', 'If', 'ImportFrom', 'Return']), ('decorator_list', ['Call'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'TryExcept', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'TryFinally', 'Print']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'While', 'Assert', 'Print']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'While', 'Print']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'If', 'Assign', 'TryExcept', 'Assign', 'Expr', 'TryFinally', 'Print']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Print', 'Assign', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'TryFinally']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'Print', 'Print', 'Print', 'Print', 'For', 'Print', 'Print', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'For', 'Assign', 'For', 'If', 'If', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'For', 'For', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'If', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'AugAssign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['FunctionDef', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['FunctionDef', 'FunctionDef', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Expr', 'Assign', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assert', 'Assert', 'Assert']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assert', 'Assert', 'Assert']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assert']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assert', 'Assert']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assert', 'Assign', 'Assert']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assert', 'Assert', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'For', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assert', 'Assert', 'Assert', 'Assert']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assert', 'Assert']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'Assign', 'Assert', 'Expr', 'Expr', 'Expr', 'Assert']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Assert', 'Expr', 'Expr', 'Expr', 'Assert']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assert', 'Assert', 'Assert', 'Assert', 'Assert', 'Assert']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assert', 'Assert', 'Assign', 'Assign', 'Assert', 'Assign', 'Assign', 'Assert']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assert']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'If', 'Assign', 'Assign', 'If', 'AugAssign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'For', 'While', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'If', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'While', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Print', 'Expr', 'Assign', 'Print']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'For', 'Assign', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'For', 'Assign', 'While', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'For', 'Expr', 'For', 'Assign', 'For', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['TryExcept', 'Assign', 'If', 'Assign', 'Assign', 'TryExcept', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Expr', 'Assign', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'TryExcept']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'For', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'Assign', 'While', 'While', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'FunctionDef', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'FunctionDef', 'Expr', 'FunctionDef', 'Expr', 'FunctionDef', 'Expr', 'Expr', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'ClassDef', 'Assign', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'Assign', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Expr', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'ImportFrom', 'Assign', 'ImportFrom', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Delete']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['FunctionDef', 'Assign', 'Assign', 'Assign', 'Assign', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Assign', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'For', 'Raise']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Print', 'If', 'Assign', 'AugAssign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'Expr', 'If', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assert']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'ImportFrom', 'Expr', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ClassDef', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Assign', 'Assign', 'Expr', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'For', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'ClassDef', 'Assign', 'Assign', 'Assert', 'Assign', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'Assign', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ClassDef', 'ClassDef', 'Import', 'Assign', 'Assign', 'Assign', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'TryExcept', 'If', 'For', 'For', 'Assign', 'Assign', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'For', 'Assign', 'Expr', 'Assign', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Assign', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'TryExcept', 'Assign', 'Assign', 'Assign', 'TryExcept']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Delete']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ClassDef', 'ClassDef', 'ClassDef', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ClassDef', 'ClassDef', 'ClassDef', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'ClassDef', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Expr', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['FunctionDef', 'FunctionDef', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'TryFinally', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'TryExcept', 'Expr', 'Assign', 'TryExcept', 'If', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'TryExcept', 'TryExcept', 'Return']), ('decorator_list', ['Call'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'Print', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Print', 'Assign', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Global', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Print', 'Assign', 'If', 'For', 'Assign', 'For', 'Print', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Print', 'Assign', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assert', 'Assert', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'Assign', 'Assign', 'Assert', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['TryExcept', 'Import', 'Assign', 'Assign', 'Assign', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['TryExcept', 'Assign', 'Assign', 'Assign', 'Expr', 'For', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Expr', 'If', 'For', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'If', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'Assign', 'For', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'If', 'Assign', 'Assign', 'Assign', 'ClassDef', 'Assign', 'TryExcept', 'Return']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'If', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'Expr', 'Assign', 'Return']), ('decorator_list', ['Name', 'Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'ImportFrom', 'Expr', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'Return']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assert', 'If', 'TryExcept', 'Assign', 'If', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'Return']), ('decorator_list', ['Name', 'Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'Expr', 'Assign', 'If', 'Expr', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'TryExcept', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'TryExcept', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'Assign', 'Assign', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assert', 'Assign', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'If', 'Assign', 'TryFinally']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ClassDef', 'If', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'TryFinally', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Expr', 'Assign']), ('decorator_list', ['Attribute'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['TryExcept', 'TryFinally']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'With', 'With', 'With']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['TryExcept', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'If', 'ClassDef', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['With', 'ImportFrom', 'ClassDef', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'ClassDef', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Delete', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'With', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Assign', 'FunctionDef', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Assign', 'FunctionDef', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Assign', 'Assign', 'Expr', 'Delete', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'If', 'Expr', 'Assign', 'Expr', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assert', 'Expr', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'If', 'FunctionDef', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assert', 'Assign', 'Expr', 'Assign', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'FunctionDef', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'If', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assert', 'If', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'Expr', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'If', 'For', 'For', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['For', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assert', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'For', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'For', 'If', 'If', 'If', 'Expr', 'Expr', 'Expr', 'Expr', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'If', 'If', 'If', 'Expr', 'Assign', 'Assign', 'For', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Expr', 'Expr', 'If', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'FunctionDef', 'Expr', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Expr', 'Assign', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Expr', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'Expr', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'For', 'Assign', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Pass', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Print', 'Pass']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'ImportFrom', 'Import', 'Assign', 'For', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'ImportFrom', 'Global', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Expr', 'Expr', 'Assign', 'For', 'Expr', 'TryExcept', 'If', 'For', 'For', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'Expr', 'For', 'Expr', 'Expr', 'Expr', 'For', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['TryExcept', 'If', 'Assign', 'Assign', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If']), ('decorator_list', ['Call'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If']), ('decorator_list', ['Call'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'While', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'If', 'If', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'For', 'If', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'If', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'Assign', 'Print', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'For', 'Assign', 'For', 'For']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'With']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assert', 'Assign', 'Assert', 'Assert', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Expr']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['With']), ('decorator_list', ['Attribute'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Print', 'If', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'While']), ('decorator_list', ['Attribute'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Assign', 'For', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'TryExcept']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'If', 'Assign', 'TryExcept']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'If', 'For', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Assign', 'Assign', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Print', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Assign', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'AugAssign', 'Assign', 'Assign', 'Expr', 'If', 'Assign', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'AugAssign', 'Assign', 'Assign', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'For', 'If', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'FunctionDef', 'For', 'If', 'FunctionDef', 'For', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'FunctionDef', 'FunctionDef', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'If', 'For', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['For', 'For', 'Assign', 'Assign', 'If', 'If', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'If', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'For', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['For', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Assign', 'Assert', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'For', 'If', 'Assign', 'Expr', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'If', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'If', 'Expr', 'Assign', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'For', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'For', 'Expr', 'If', 'Expr', 'Expr', 'Expr', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'For', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assert', 'Assign', 'Assign', 'Assert', 'Assign', 'If', 'Delete', 'For', 'For', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'If', 'Assign', 'FunctionDef', 'TryExcept', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'Expr', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Expr', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Import', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'While', 'If', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'For', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'If', 'If', 'Expr', 'Assign', 'Expr', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'If', 'If', 'If', 'Expr', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'Expr', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'Assign', 'Assign', 'Expr', 'If', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'If', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'For', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'For', 'Expr', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'If', 'If', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'For', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'If', 'Expr', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Expr', 'If', 'Expr', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'With', 'Assign', 'Assign', 'AugAssign', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'With', 'Assign', 'Assign', 'AugAssign', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef', 'TryExcept', 'Assign', 'Assign', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'While', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'For', 'For', 'Assign', 'Assign', 'Assert', 'Assign', 'Assign', 'For', 'Assign', 'Expr', 'Assign', 'While', 'Expr', 'Print']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assert', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'While']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'Assign', 'If', 'TryExcept', 'Assign', 'If', 'TryExcept', 'TryExcept', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'TryExcept', 'Assign', 'If', 'Assign', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'TryFinally', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Print', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Print', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['TryExcept', 'Assign', 'Expr', 'If', 'Assign', 'Assign', 'While', 'Raise']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr']), ('decorator_list', ['Attribute'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'For', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'TryExcept', 'Expr', 'Assign', 'Assign', 'Assign', 'TryFinally', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'TryExcept']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'If', 'AugAssign', 'Expr', 'Assign', 'Assign', 'Expr', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Global', 'Assign', 'If', 'Return']), ('decorator_list', ['Attribute'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'For', 'Assign', 'For', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'ImportFrom', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Global', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Global', 'Assign', 'Assign', 'If', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'AugAssign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'Expr', 'Assign', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'TryExcept', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'For', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'For', 'Assign', 'Assign', 'For', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'If', 'If', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'Assign', 'For', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'TryExcept']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'For', 'Assign', 'Assign', 'Assign', 'AugAssign', 'AugAssign', 'AugAssign', 'AugAssign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'For', 'If', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'TryExcept', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'If', 'Assign', 'Assign', 'If', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'If', 'Assign', 'Assign', 'If', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'If', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Assign', 'For', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'FunctionDef', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'If', 'TryExcept', 'Assign', 'If', 'TryExcept', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'Assign', 'Assign', 'Expr']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'If', 'Expr', 'Expr', 'Expr']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'If', 'Expr', 'Assign']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'If', 'TryExcept', 'If']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'If', 'Expr']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'If', 'If', 'Assign', 'TryExcept']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'If', 'Assign', 'TryExcept']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'If', 'Expr', 'Assign', 'If', 'Assign', 'If']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'For', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'While', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'While', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'While', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'TryExcept', 'TryExcept', 'TryExcept', 'Assign', 'Assign', 'Assign', 'If', 'If', 'If', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Import', 'Import', 'Assign', 'Expr', 'Assign', 'Assert']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assert', 'Assign', 'Assign', 'Assert']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'TryExcept', 'Expr', 'If', 'Assign', 'If', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'If', 'Expr', 'Expr', 'For', 'If', 'Assign', 'Assign', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'If', 'Assign', 'If', 'Expr', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'TryExcept', 'Assign', 'If', 'Assign', 'Assign', 'If', 'Assign', 'If', 'If', 'Expr', 'Expr', 'For', 'Assign', 'Assign', 'Assign', 'Expr', 'If', 'Assign', 'Assign', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'If', 'Assign', 'Expr', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'If', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'If', 'Assign', 'Assign', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'If', 'Assign', 'If', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'If', 'If', 'Assign', 'Assign', 'If', 'Assign', 'If', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'If', 'Assign', 'If', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'ImportFrom', 'If', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Pass']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'Assign', 'Print', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'For', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'If', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'ImportFrom', 'If', 'If', 'Assign', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'ImportFrom', 'If', 'Assign', 'Assign', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'ImportFrom', 'Assign', 'If', 'Assign', 'Delete', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['TryExcept', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'Expr', 'Assign', 'Assign', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'TryExcept']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'If', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'If', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'If', 'Assign', 'TryExcept', 'Assign', 'TryExcept', 'Return']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'If', 'Return']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'TryExcept', 'Assign', 'For', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'If', 'Assign', 'Assign', 'If', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'Import', 'If', 'Assign', 'Assign', 'For', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'If', 'Assign', 'Assign', 'For', 'Assign', 'If', 'If', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ClassDef', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'TryExcept', 'Assert', 'Assign', 'Expr', 'Assign', 'For', 'Return']), ('decorator_list', ['Attribute'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assert', 'FunctionDef', 'Assign', 'Assign', 'For', 'Expr', 'Return']), ('decorator_list', ['Attribute'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assert', 'Assert', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'For', 'Expr']), ('decorator_list', ['Attribute'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assert', 'Assert', 'Assign', 'Assign', 'If', 'Assign', 'For', 'Expr']), ('decorator_list', ['Attribute'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'If', 'TryExcept', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Print', 'If', 'Assign', 'If', 'Assign', 'If', 'Print', 'If', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Print', 'Assign', 'Assign', 'For', 'Print', 'Assign', 'Assign', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Return']), ('decorator_list', ['Call', 'Call'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Print', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assert', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assert', 'Assign', 'If', 'Assign', 'Assign', 'Expr', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'If', 'Assign', 'Assign', 'Expr', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assert', 'Return']), ('decorator_list', ['Call'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Return']), ('decorator_list', ['Call'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Return']), ('decorator_list', ['Call'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assert', 'Assign', 'Assert', 'Return']), ('decorator_list', ['Call'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assert', 'Return']), ('decorator_list', ['Call'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'Return']), ('decorator_list', ['Call'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Assign', 'Return']), ('decorator_list', ['Call'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'Expr', 'Assign', 'Return']), ('decorator_list', ['Call'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assert', 'Return']), ('decorator_list', ['Call'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If']), ('decorator_list', ['Call'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assert', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'If', 'Return']), ('decorator_list', ['Call'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'If', 'Return']), ('decorator_list', ['Call'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'If', 'If', 'Return']), ('decorator_list', ['Call'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', ['Call'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Return']), ('decorator_list', ['Call'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'ImportFrom', 'Expr', 'Return']), ('decorator_list', ['Call'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'Return']), ('decorator_list', ['Call'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assert', 'Assign', 'Assign', 'Return']), ('decorator_list', ['Call'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'Assert', 'Return']), ('decorator_list', ['Call'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'Return']), ('decorator_list', ['Call'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Return']), ('decorator_list', ['Call'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'For', 'AugAssign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'Assign']), ('decorator_list', ['Call'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'If', 'If', 'Expr', 'If', 'Expr']), ('decorator_list', ['Attribute'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'TryExcept', 'If', 'If', 'If', 'If', 'Assign', 'TryExcept']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'If', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'If', 'If', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'TryExcept', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['TryExcept', 'Expr', 'Expr', 'For', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'For', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['With', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'Print', 'Assign', 'With', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'For', 'Assert', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'Assign', 'For', 'With', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'Assign', 'With', 'Expr', 'Print']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'TryExcept', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'Assign', 'If', 'If', 'Assign', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'If', 'If', 'If', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Print', 'FunctionDef', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Print', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Print', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Print', 'Assign', 'For', 'Assign', 'For', 'For', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Print', 'For', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Print', 'Assign', 'Assign', 'Assign', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'Expr', 'If', 'Return']), ('decorator_list', ['Call', 'Name', 'Call'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Return']), ('decorator_list', ['Call', 'Name', 'Call'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Return']), ('decorator_list', ['Call', 'Name', 'Call'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Return']), ('decorator_list', ['Call', 'Name', 'Call'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Return']), ('decorator_list', ['Call', 'Name', 'Call'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Expr', 'Print', 'If']), ('decorator_list', ['Call', 'Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Expr', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'If', 'Assign', 'Expr', 'Expr', 'If', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'For', 'Expr', 'Assign', 'Assign', 'Expr', 'For', 'Expr', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Expr', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'For', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'TryExcept', 'Assign', 'Assign', 'For', 'If', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'If', 'Assign', 'If', 'Assign', 'Assign', 'If', 'Assign', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'Expr', 'Expr', 'Assign', 'For', 'Expr']), ('decorator_list', ['Name', 'Name', 'Name', 'Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'If', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'For', 'Expr', 'Expr']), ('decorator_list', ['Name', 'Name', 'Name', 'Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'If', 'Expr', 'Assign', 'For', 'Expr', 'For', 'Expr', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'If', 'Expr', 'If', 'Expr', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Expr', 'Expr', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'For', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'If', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'Assign', 'Print', 'Assign', 'Assign', 'Expr', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Print', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'If', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'If', 'ImportFrom', 'If', 'If', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Assign', 'With', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'With', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Import', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assert', 'AugAssign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assert', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assert', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assert', 'AugAssign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assert', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assert', 'ImportFrom', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assert', 'Expr', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assert', 'Assert', 'Expr', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assert', 'Assign', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assert', 'ImportFrom', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assert', 'If', 'Import', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assert', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Expr', 'Assign', 'Assign', 'For', 'For', 'Assign', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Assign', 'Assign', 'If', 'If', 'If', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['FunctionDef', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Delete', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'Assign', 'If', 'Assign', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Import', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'For', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'If', 'Assign', 'Expr', 'Assign', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'TryExcept', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'TryExcept', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'TryExcept', 'Expr', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'For', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'While']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Expr', 'For', 'If', 'Assign', 'If', 'Expr', 'For', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'If', 'Expr', 'For', 'If', 'If', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'If', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'If', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'If', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'Assign', 'If', 'If', 'Assign', 'Assign', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'TryExcept', 'Assign', 'TryExcept']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['With', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'For', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'For', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'For', 'Assign', 'For', 'Expr', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assert', 'Assign', 'Assert', 'Assert', 'Assign', 'Assert', 'Assert']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'TryExcept', 'Assign', 'Assign', 'TryExcept', 'Assign', 'Assign', 'FunctionDef', 'Assign', 'FunctionDef', 'Assign', 'FunctionDef', 'TryExcept', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'If', 'TryExcept', 'Assign', 'Expr', 'Assign', 'Assign', 'If', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'TryExcept', 'Assign', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'TryExcept', 'Assign', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'TryExcept', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'TryExcept', 'Assign', 'Assign', 'TryExcept', 'Assign', 'Assign', 'Expr', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'TryExcept', 'Assign', 'Expr', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'TryExcept', 'Assign', 'Assign', 'For', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Global', 'Assign', 'TryExcept', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'TryExcept']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assert', 'If', 'Assign', 'If', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'For', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'Assign', 'Assign', 'TryExcept', 'If', 'Assign', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'TryExcept', 'Assign', 'TryExcept', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Global', 'Assign', 'Print', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['AugAssign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'If', 'For', 'Assign', 'Delete', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Print', 'Assign', 'If', 'Expr', 'Expr', 'Expr', 'If', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'For', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'For', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['For', 'For', 'Delete', 'For', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Delete']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'If', 'If', 'If', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'For', 'For', 'AugAssign', 'Assign', 'Assign', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'While']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'For', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'FunctionDef', 'FunctionDef', 'Expr', 'Expr', 'For', 'If', 'If', 'Return', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'For', 'Expr', 'Expr', 'If', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'FunctionDef', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'If', 'Return', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'For', 'For', 'If', 'If', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'For', 'Expr', 'If', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'For', 'For', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['FunctionDef', 'Expr', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'Assign', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'If', 'If', 'Assign', 'Assign', 'For', 'Assign', 'If', 'AugAssign', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Return', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'If', 'Assign', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'For', 'Expr', 'Assign', 'Expr', 'Expr', 'For', 'For', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'If', 'If', 'If', 'Expr', 'Assign', 'For', 'For', 'For', 'Assign', 'Assign', 'While', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assert']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'TryExcept', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Raise', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'If', 'If', 'If', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'If', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Return', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'Assign', 'Assign', 'Return', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'If', 'Assign', 'For', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'If', 'Assign', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'TryExcept', 'If', 'Assign', 'FunctionDef', 'Assign', 'Assign', 'If', 'If', 'If', 'Expr', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'If', 'Assign', 'If', 'If', 'Expr', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'For', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'TryExcept', 'TryExcept', 'Assign', 'If', 'Assign', 'Expr', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'If', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'While', 'While']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'While', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Expr', 'While']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'While']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'AugAssign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ClassDef', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'ClassDef', 'Assign', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'ClassDef', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Expr', 'For', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'Assign', 'TryFinally', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'Expr', 'Assign', 'If', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'If', 'TryExcept']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assert', 'Assert', 'Assign', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assert', 'If', 'Import', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assert', 'If', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assert', 'Assert', 'Import', 'Assign', 'Assign', 'If', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Import', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Global', 'Assign', 'FunctionDef', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Global', 'Assign', 'Expr', 'Print', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Global', 'Assign', 'Assign', 'Assign', 'Assign']), ('decorator_list', ['Name', 'Attribute'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'If', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'If', 'If', 'Assign', 'Assign', 'If', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'For', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'For', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'Assign', 'If', 'Assign', 'If', 'If', 'If', 'If', 'Assign', 'Assign', 'If', 'If', 'Assign', 'If', 'Assign', 'If']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'For', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'For', 'For', 'Assign', 'Assign', 'For', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'If', 'If', 'If', 'Assign', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Import', 'If', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'TryExcept', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'TryExcept', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'For', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Print', 'For', 'Expr', 'For', 'Assign', 'For', 'Print']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'While', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assert', 'While']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If']), ('decorator_list', ['Attribute'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'If', 'Assign', 'Assign', 'If', 'ImportFrom', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'While', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'TryExcept', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'If', 'If', 'Return']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'For', 'Assign', 'Assign', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'For', 'Assign', 'For', 'Assign', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['TryExcept', 'Assign', 'Expr', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ClassDef', 'ClassDef', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'TryExcept', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'TryExcept', 'Assign', 'TryExcept', 'TryExcept', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Pass']), ('decorator_list', ['Name', 'Call'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If']), ('decorator_list', ['Name', 'Call'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'TryExcept', 'If', 'If', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'If', 'Assign', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['TryExcept']), ('decorator_list', ['Name', 'Call', 'Call'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'Assign', 'If']), ('decorator_list', ['Name', 'Name', 'Call', 'Call'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'TryExcept', 'If', 'Assign', 'Return']), ('decorator_list', ['Name', 'Name', 'Call', 'Call'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'If', 'If', 'If', 'For', 'If', 'Assign', 'If', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Pass']), ('decorator_list', ['Call'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'TryExcept', 'If', 'Assign', 'Assign', 'Assign', 'TryExcept', 'If', 'If', 'Assign', 'If', 'Expr', 'Expr', 'Expr', 'Return']), ('decorator_list', ['Name', 'Name', 'Call', 'Call'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'TryExcept', 'If', 'If', 'If', 'For', 'Expr', 'Return']), ('decorator_list', ['Name', 'Name', 'Call', 'Call'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'TryExcept', 'If', 'TryExcept', 'Assign', 'Assign', 'TryExcept', 'Assign', 'Expr', 'Assign', 'If']), ('decorator_list', ['Name', 'Name', 'Call', 'Call'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'TryExcept', 'If', 'For', 'Expr', 'Return']), ('decorator_list', ['Name', 'Name', 'Call', 'Call'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'TryExcept', 'If', 'TryExcept', 'Assign', 'Assign', 'Assign', 'Expr', 'Return']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'TryExcept', 'If', 'TryExcept', 'TryExcept', 'Assign', 'Assign', 'Assign', 'Expr', 'Return']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['TryExcept', 'Assign', 'Assign', 'Assign', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['TryExcept', 'Assign', 'Assign', 'Expr', 'If', 'Assert', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'TryExcept']), ('decorator_list', ['Name', 'Call'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If']), ('decorator_list', ['Name', 'Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['TryExcept', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'TryExcept', 'If', 'Assign', 'Assign', 'If', 'TryExcept', 'Assign', 'TryExcept', 'Assign', 'If', 'Expr', 'If', 'Return']), ('decorator_list', ['Name', 'Name', 'Call', 'Call'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['TryExcept', 'Return']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['TryExcept']), ('decorator_list', ['Name', 'Call'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['TryExcept', 'If', 'Assign', 'Assign', 'Expr', 'Return']), ('decorator_list', ['Name', 'Name', 'Call', 'Call'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['TryExcept', 'If', 'Assign', 'If', 'Return']), ('decorator_list', ['Name', 'Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Pass']), ('decorator_list', ['Name', 'Call', 'Call'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'TryExcept', 'If', 'Assign', 'TryExcept', 'Expr', 'Return']), ('decorator_list', ['Name', 'Name', 'Call', 'Call'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'TryExcept', 'If', 'Expr', 'Return']), ('decorator_list', ['Name', 'Name', 'Call'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'Assign', 'If', 'Return']), ('decorator_list', ['Name', 'Name', 'Call', 'Call'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'TryExcept', 'If', 'If', 'For', 'Expr', 'Return']), ('decorator_list', ['Name', 'Name', 'Call', 'Call'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'If', 'Assign', 'Assign', 'If', 'Expr', 'Return']), ('decorator_list', ['Name', 'Name', 'Call', 'Call'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'TryExcept', 'TryExcept']), ('decorator_list', ['Name', 'Name', 'Call'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'TryExcept', 'Assign', 'Assign', 'If', 'If', 'Assign', 'If', 'Expr', 'Return']), ('decorator_list', ['Name', 'Name', 'Call', 'Call'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'TryExcept', 'If', 'For', 'If', 'If', 'Expr', 'Return']), ('decorator_list', ['Name', 'Name', 'Call', 'Call'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'TryExcept', 'If', 'If', 'Return']), ('decorator_list', ['Name', 'Name', 'Call'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'TryExcept', 'If', 'Assign', 'Assign', 'If', 'TryExcept', 'Return']), ('decorator_list', ['Name', 'Name', 'Call', 'Call'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'TryExcept', 'If', 'TryExcept', 'Assign', 'Expr', 'Return']), ('decorator_list', ['Name', 'Name', 'Call', 'Call'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['TryExcept', 'TryExcept', 'Expr', 'Expr', 'Expr', 'Return']), ('decorator_list', ['Name', 'Name', 'Call'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Pass']), ('decorator_list', ['Name', 'Name', 'Call'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Pass']), ('decorator_list', ['Name', 'Name', 'Call'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'TryExcept', 'If', 'If', 'If', 'Return']), ('decorator_list', ['Name', 'Name', 'Call', 'Call'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'Return']), ('decorator_list', ['Name', 'Name', 'Call'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'TryExcept', 'TryExcept', 'Assign', 'Assign', 'For', 'If', 'If', 'If', 'Return']), ('decorator_list', ['Name', 'Name', 'Call'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'TryExcept', 'If', 'TryExcept', 'Assign', 'If', 'Expr', 'Expr', 'Expr', 'Return']), ('decorator_list', ['Name', 'Name', 'Call'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'TryExcept', 'If', 'TryExcept', 'Assign', 'Expr', 'If', 'Expr', 'Expr', 'Expr', 'Return']), ('decorator_list', ['Name', 'Name', 'Call', 'Call'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'TryExcept', 'If', 'If', 'If', 'For', 'Expr', 'Expr', 'Return']), ('decorator_list', ['Name', 'Name', 'Call', 'Call'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'TryExcept', 'Assign', 'If', 'Assign', 'If']), ('decorator_list', ['Name', 'Name', 'Call', 'Call'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'TryExcept', 'Return']), ('decorator_list', ['Name', 'Name', 'Call', 'Call'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'For', 'Expr', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'TryExcept', 'If', 'Return']), ('decorator_list', ['Name', 'Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'For', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['TryExcept', 'If', 'Return']), ('decorator_list', ['Name', 'Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'TryExcept', 'If', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'If', 'Return']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'If', 'If', 'TryExcept']), ('decorator_list', ['Name', 'Name', 'Call', 'Call'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'If', 'If', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'If', 'Return']), ('decorator_list', ['Name', 'Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', ['Name', 'Call', 'Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'If', 'Return']), ('decorator_list', ['Name', 'Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assert', 'If', 'If', 'Assign', 'Expr', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Expr', 'Assign', 'If', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Print', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Import', 'If', 'If', 'If', 'ImportFrom', 'Assign', 'Assign', 'If', 'Assign', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'If', 'Raise']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'TryExcept', 'Assign', 'Expr', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assert', 'Assign', 'AugAssign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'If', 'Expr', 'TryFinally', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'For', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'TryFinally']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'If', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'While', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Expr', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'If', 'Expr', 'Assign', 'Expr', 'Return']), ('decorator_list', ['Call'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'Assign', 'For', 'Return']), ('decorator_list', ['Call'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'Expr', 'While']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'Expr', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Import', 'Import', 'Import', 'ImportFrom', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'ImportFrom', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'AugAssign', 'Assign', 'AugAssign', 'Assign', 'AugAssign', 'Assign', 'AugAssign', 'Assign', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'AugAssign', 'Import', 'Import', 'Import', 'ImportFrom', 'Assign', 'Assign', 'If', 'AugAssign', 'Import', 'Import', 'Import', 'ImportFrom', 'Assign', 'AugAssign', 'Import', 'Import', 'Import', 'ImportFrom', 'Assign', 'AugAssign', 'Assign', 'AugAssign', 'Assign', 'Assign', 'Assign', 'If', 'AugAssign', 'Assign', 'AugAssign', 'Assign', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('decorator_list', ['Call'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'For', 'Return']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign']), ('decorator_list', ['Call'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'With', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'Expr', 'With']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'FunctionDef', 'TryFinally']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'FunctionDef', 'Assign', 'Assign', 'FunctionDef', 'TryFinally']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'Assign', 'TryFinally', 'Assign', 'Expr', 'With']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'With', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['FunctionDef', 'ClassDef', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['FunctionDef', 'ClassDef', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assert', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assert', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'FunctionDef', 'Return']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['TryExcept', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Return']), ('decorator_list', ['Name', 'Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'TryExcept', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'FunctionDef', 'If', 'Expr', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assert', 'Assert', 'Assert']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'AugAssign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'If', 'Assign', 'Assign', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'Assign', 'If', 'Assign', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'TryExcept', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'FunctionDef', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Raise']), ('decorator_list', ['Call'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Expr', 'FunctionDef', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Import', 'Expr', 'ClassDef', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['TryExcept', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'For', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['TryExcept', 'TryExcept']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['For', 'Expr', 'For', 'For', 'Assert']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Assign', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'For', 'For', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'ImportFrom', 'Assign', 'For', 'Expr', 'Assign', 'Assign', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'ImportFrom', 'Assign', 'For', 'Expr', 'Assign', 'Assign', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'ImportFrom', 'For', 'For', 'Expr', 'Assign', 'Assign', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'Assign', 'FunctionDef', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'ImportFrom', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'Assign', 'Assign', 'FunctionDef', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'ClassDef', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'ClassDef', 'Expr', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'If', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'For', 'If', 'Assign', 'Assign', 'For', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Return']), ('decorator_list', ['Call'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Return']), ('decorator_list', ['Call'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'If', 'Assign', 'Assign', 'Return']), ('decorator_list', ['Call'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'ImportFrom', 'ImportFrom', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', ['Call'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'For', 'Assign', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', ['Call'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'If', 'Assign', 'Assign', 'Return']), ('decorator_list', ['Call'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'If', 'Assign', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'FunctionDef', 'Assign', 'Return']), ('decorator_list', ['Call'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Return']), ('decorator_list', ['Name', 'Call'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'Assign', 'Expr', 'For', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'For', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'If', 'If', 'Expr', 'For', 'If', 'Expr', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'Assign', 'For', 'Assign', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'If', 'If', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assert', 'If', 'Assign', 'Assign', 'If', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'Assign', 'If', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'If', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'If', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'Assign', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'TryFinally', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'For', 'Assign', 'For', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'Import', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'If', 'Assign', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'If', 'For', 'Assign', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'For', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'If', 'If', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Print']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'Assign', 'Expr', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'TryExcept']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'TryExcept', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'If', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'If', 'If', 'Expr', 'Expr', 'Assign', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'If', 'Assign', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'TryExcept', 'For', 'If', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'Assign', 'Expr', 'Assign', 'For', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'Assign', 'Expr', 'TryFinally']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'TryExcept', 'For', 'If', 'If', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'TryExcept', 'Assign', 'For', 'Assign', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Assign', 'If', 'Assign', 'FunctionDef', 'TryExcept', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'If', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'If', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Expr', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Assign', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'If', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'Assign', 'If', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'For', 'Expr', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'Expr', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'If', 'Expr', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'Print', 'Assign', 'Expr', 'For', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'For', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Print', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'With']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'For', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Expr', 'Expr', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'TryExcept']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'AugAssign', 'For', 'Assign', 'If', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'If', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'Assign', 'Expr', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'TryFinally']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'Assign', 'Return']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'If']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'If', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Assign', 'For', 'Return']), ('decorator_list', ['Call'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'For', 'Return']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'If', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'For', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'TryExcept', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Import', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'If', 'If', 'If', 'If', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'Assign', 'For', 'FunctionDef', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'AugAssign', 'If', 'AugAssign', 'Assign', 'Assign', 'Assign', 'For', 'If', 'AugAssign', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'AugAssign', 'AugAssign', 'Assign', 'For', 'If', 'AugAssign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'AugAssign', 'AugAssign', 'Assign', 'Assign', 'Assign', 'For', 'AugAssign', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'If', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'If', 'Assign', 'If', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'For', 'Assign', 'Expr', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'Assign', 'Expr', 'Expr', 'Assign', 'If', 'Assign', 'Assign', 'If', 'If', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'If', 'If', 'Assign', 'While']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'If', 'Assign', 'For', 'Assign', 'Assign', 'For', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Assign', 'For', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'If', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'For', 'Expr', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'TryExcept', 'Assign', 'If', 'Assign', 'TryFinally']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'TryExcept', 'TryFinally']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Import', 'Assign', 'TryExcept', 'Expr', 'Expr', 'Import', 'Assign', 'Assign', 'Expr', 'Assign', 'If', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'If', 'TryExcept', 'If', 'If', 'TryExcept', 'If', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'TryExcept', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'Assign', 'TryExcept', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'If', 'Assign', 'Assign', 'Assign', 'Expr', 'For', 'Assign', 'Assign', 'If', 'Expr', 'If', 'If', 'Expr', 'If', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'Assign', 'If', 'If', 'If', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'If', 'Assign', 'Assign', 'If', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'TryExcept', 'TryExcept', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'ImportFrom', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'If', 'Assign', 'TryExcept', 'If', 'Assign', 'If', 'If', 'If', 'Assign', 'Expr', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'For', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'Assign', 'If', 'Assign', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'If', 'If', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'Assign', 'If', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'If', 'If', 'If', 'Assign', 'Assign', 'If', 'Assign', 'AugAssign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['FunctionDef', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Print', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Print', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Delete', 'If', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'FunctionDef', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'Assign', 'For', 'If', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'For', 'Return']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'TryExcept', 'If', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'If', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'If', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'Assign', 'Assign', 'If', 'Assign', 'For', 'Assign', 'If', 'For', 'Assign', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'If', 'Assign', 'TryExcept', 'If', 'Expr', 'Assign', 'Expr', 'Expr', 'AugAssign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'Expr', 'If', 'Assign', 'If', 'Assign', 'If', 'Assign', 'While', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'TryExcept', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'TryExcept', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'If', 'If', 'Assign', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Assign', 'Expr', 'If', 'For', 'Assign', 'Assign', 'If', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'Import', 'Assign', 'TryExcept', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'Assign', 'TryExcept', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'TryExcept', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'Expr', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['AugAssign', 'If', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'If', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'Assign', 'Assign', 'Assign', 'For', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Global', 'Global', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'For', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Import', 'Assign', 'If', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'ImportFrom', 'If', 'ImportFrom', 'Assign', 'If', 'If', 'If', 'Assign', 'Assign', 'If', 'Assign', 'If', 'Assign', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'If', 'If', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'Assign', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Print', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Import', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'For', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Expr', 'Expr', 'Expr', 'If', 'If', 'If', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'Assign', 'If', 'Expr', 'Expr']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assert', 'Assert', 'Assert', 'Import', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'For', 'If', 'For', 'If', 'For', 'For', 'If', 'If']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Import', 'Assign', 'Assign', 'If', 'Assert', 'Assign', 'For', 'Expr']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'Expr', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'If', 'Expr', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'For', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'For', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'Assign', 'Assert', 'For', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Expr', 'Expr', 'Assign', 'Expr']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Import', 'For', 'For', 'For', 'Assign', 'For', 'For', 'Expr', 'Expr', 'Expr']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Print', 'Assign', 'TryExcept', 'Assign', 'Print']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'TryExcept', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'If', 'If', 'If', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'If', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'Assign', 'If', 'Assign', 'If', 'Assign', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'If', 'If', 'Assign', 'If', 'Assign', 'If', 'If', 'If', 'If', 'If', 'Assign', 'Assign', 'If', 'If', 'Expr', 'If', 'If', 'Expr', 'Expr', 'Assign', 'If', 'Assign', 'Expr', 'Expr', 'Assign', 'If', 'If', 'If', 'If', 'If', 'For', 'If', 'Expr', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'Expr', 'Expr', 'If', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Global', 'Assign', 'Assign', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'If', 'Assign', 'If', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'ClassDef', 'Assign', 'If', 'Assign', 'For', 'Assign', 'For', 'If', 'If', 'If', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'TryExcept', 'Assign', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ClassDef', 'If', 'Assign', 'TryExcept', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'For', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'If', 'If', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['FunctionDef', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'FunctionDef', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'FunctionDef', 'FunctionDef', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'ImportFrom', 'Assign', 'FunctionDef', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ClassDef', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ClassDef', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'Assign', 'ClassDef', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Assign', 'ClassDef', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'FunctionDef', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Expr', 'FunctionDef', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Expr', 'FunctionDef', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'FunctionDef', 'FunctionDef', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'FunctionDef', 'FunctionDef', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'FunctionDef', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'FunctionDef', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'Assign', 'Assign', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'ClassDef', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ClassDef', 'Assign', 'ClassDef', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'FunctionDef', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Assign', 'ClassDef', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'ClassDef', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ClassDef', 'Assign', 'FunctionDef', 'Expr', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ClassDef', 'ClassDef', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'FunctionDef', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'ClassDef', 'Expr', 'Expr', 'FunctionDef', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ClassDef', 'ClassDef', 'FunctionDef', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'ImportFrom', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Expr', 'FunctionDef', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Expr', 'Expr', 'TryFinally', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Expr', 'Assign', 'ImportFrom', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['FunctionDef', 'FunctionDef', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ClassDef', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['FunctionDef', 'FunctionDef', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'FunctionDef', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'FunctionDef', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'ImportFrom', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['FunctionDef', 'Assign', 'Assign', 'Expr', 'TryExcept']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ClassDef', 'Assign', 'Assign', 'Assign', 'Expr', 'TryExcept']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'ClassDef', 'Assign', 'Assign', 'Expr', 'TryExcept']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'FunctionDef', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'ClassDef', 'FunctionDef', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['FunctionDef', 'FunctionDef', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'ClassDef', 'FunctionDef', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'ClassDef', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['FunctionDef', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'FunctionDef', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'ClassDef', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'ClassDef', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'ClassDef', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'ImportFrom', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'ImportFrom', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'TryExcept']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'ImportFrom', 'FunctionDef', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'TryExcept']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Assign', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'Assign', 'TryExcept']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'FunctionDef', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'Assign', 'TryExcept']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'FunctionDef', 'FunctionDef', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'ClassDef', 'ClassDef', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'ClassDef', 'ClassDef', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'ClassDef', 'FunctionDef', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'FunctionDef', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'FunctionDef', 'Expr', 'FunctionDef', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'FunctionDef', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'ImportFrom', 'Assign', 'FunctionDef', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'FunctionDef', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Assign', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'ImportFrom', 'Assign', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'FunctionDef', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Delete', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['FunctionDef', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ClassDef', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ClassDef', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['FunctionDef', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['FunctionDef', 'Assign', 'FunctionDef', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ClassDef', 'ClassDef', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Delete', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Global', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Global', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'FunctionDef', 'Assign', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Global', 'Assign', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Global', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Global', 'Assign', 'Expr', 'Assign', 'If', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'For', 'Assign', 'If', 'Assign', 'TryExcept', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'If', 'Expr', 'Expr', 'Delete', 'Assign', 'Assign', 'Assign', 'If', 'Expr', 'Expr', 'Assign', 'Assign', 'While', 'Expr', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'Assign', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Return', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'If']), ('decorator_list', ['Attribute'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If']), ('decorator_list', ['Attribute'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['While', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Expr', 'Assign', 'TryExcept']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'Assign', 'Assign', 'TryFinally']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'Assign', 'Assign', 'Assign', 'For', 'If', 'For', 'If', 'Assign', 'Assign', 'For', 'Expr', 'If', 'Assign', 'Assign', 'AugAssign', 'AugAssign', 'Assign', 'Import', 'Assign', 'For', 'Assert', 'TryFinally', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'If', 'Assign', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'If', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['For']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'For', 'If', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assert', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'For', 'TryExcept', 'For', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'For', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'For', 'Expr', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'Expr', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Import', 'Expr', 'Import', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'FunctionDef', 'For', 'Assign', 'Assign', 'For', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['FunctionDef', 'Assign', 'Assign', 'For', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'If', 'If', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'If', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'For', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'TryExcept', 'Expr', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'Assign', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'If', 'If', 'Assign', 'Assign', 'For', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'If', 'If', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'If', 'If', 'Expr', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'For', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'If', 'Assign', 'If', 'Assign', 'If', 'Assign', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'If', 'If', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'For', 'Assign', 'Assign', 'Assign', 'For', 'For', 'Expr', 'Assign', 'Expr', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Expr', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Print', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Print']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Expr', 'Expr', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'While', 'Expr', 'Assign', 'Expr', 'If', 'Return']), ('decorator_list', ['Call'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'TryExcept']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'While', 'Expr', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr']), ('decorator_list', ['Call'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'ImportFrom', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'Expr', 'Expr']), ('decorator_list', ['Attribute'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', ['Attribute'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', ['Call'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Expr', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr']), ('decorator_list', ['Attribute'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr']), ('decorator_list', ['Attribute'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', ['Call'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr']), ('decorator_list', ['Call'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Return']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'If', 'Assign', 'If', 'Assign', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'If', 'Assign', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'For', 'If', 'Assign', 'If', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'Assign', 'If', 'Assign', 'Assign', 'Expr', 'ImportFrom', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'Assign', 'If', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'If', 'Assign', 'Expr', 'If', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'If', 'Assign', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'For', 'Assign', 'Expr', 'Assign', 'For', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'FunctionDef', 'Assign', 'Assign', 'If', 'Assign', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['TryExcept', 'If', 'TryExcept', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assert', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'If', 'Assign', 'Assert', 'Assert', 'If', 'Assign', 'If', 'If', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'If', 'If', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'If', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'If', 'If', 'Assign', 'If', 'For', 'Raise']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'While', 'Assign', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'Expr', 'Assign', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'FunctionDef', 'Assign', 'If', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['TryExcept', 'If', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'If', 'Assign', 'TryFinally']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['AugAssign', 'Expr', 'AugAssign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assert', 'Import', 'Assign', 'Assign', 'Assign', 'Assert', 'Assign', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'For', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'Assign', 'If', 'Assign', 'For', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'For', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'For', 'Expr', 'Assign', 'Assign', 'Assign', 'For', 'If', 'For', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'For', 'Return']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'For', 'If', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'If', 'Assign', 'If', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'For', 'Print', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'TryExcept', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'TryExcept', 'If', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['AugAssign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'AugAssign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'For', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'TryExcept', 'Assign', 'If', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'If', 'Assign', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', ['Call'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', ['Call'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'AugAssign', 'Return']), ('decorator_list', ['Attribute'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Return']), ('decorator_list', ['Call'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'For', 'For', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'TryExcept', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'For', 'Assign', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'If', 'Assign', 'Assign', 'If', 'If', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'If', 'If', 'If', 'If', 'Assign', 'If', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'If', 'If', 'If', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'If', 'Assign', 'Assign', 'Expr', 'If', 'If', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'If', 'If', 'TryExcept']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'If', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'ImportFrom', 'If', 'If', 'Assign', 'If', 'If', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'If', 'Assign', 'Assign', 'If', 'If', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'If', 'Return']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'If', 'If', 'FunctionDef', 'FunctionDef', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'For', 'For', 'If', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'For', 'For', 'If', 'Expr', 'Expr', 'Expr', 'If', 'If', 'Expr', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'Expr', 'For', 'For', 'For', 'Assign', 'Expr', 'If', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'For', 'For', 'For', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Assign', 'Assign', 'FunctionDef', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'FunctionDef', 'FunctionDef', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'FunctionDef', 'FunctionDef', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'FunctionDef', 'FunctionDef', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'FunctionDef', 'FunctionDef', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'For', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'For', 'Assign', 'Assign', 'Assign', 'Expr', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'TryExcept', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'TryExcept', 'Return']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'Assign', 'If', 'If', 'Assign', 'If', 'If', 'If', 'If', 'Assign', 'TryExcept', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'If', 'If', 'Assign', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'If', 'If', 'Assign', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'For', 'Assign', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['TryExcept', 'Assign', 'If', 'Assign', 'Assign', 'Expr', 'Assign', 'If', 'If', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'If', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'If', 'If', 'If', 'Assign', 'Expr', 'Return']), ('decorator_list', ['Attribute', 'Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'For', 'Assign', 'For', 'Expr', 'Return']), ('decorator_list', ['Attribute', 'Call'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'For', 'Return']), ('decorator_list', ['Attribute', 'Call'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'FunctionDef', 'FunctionDef', 'Assign', 'Assign', 'If', 'Assign', 'If', 'Return']), ('decorator_list', ['Attribute', 'Call'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Return']), ('decorator_list', ['Call'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Return']), ('decorator_list', ['Attribute'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Return']), ('decorator_list', ['Attribute'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'Assign', 'Assign', 'For']), ('decorator_list', ['Attribute'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'Assign', 'Assign', 'If', 'If', 'Assign', 'Assign', 'If', 'Return']), ('decorator_list', ['Attribute'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Return']), ('decorator_list', ['Attribute', 'Call'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'If', 'Return']), ('decorator_list', ['Call'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Return']), ('decorator_list', ['Attribute', 'Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'If', 'Assign', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'If', 'If', 'Assign', 'For', 'If', 'If', 'Assign', 'For', 'If', 'If', 'Assign', 'For', 'If', 'If', 'Expr', 'Assign', 'Assign', 'Assign', 'For', 'Expr', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Assign', 'TryExcept']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'ClassDef', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'TryExcept', 'Assign', 'TryExcept']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'TryExcept', 'Assign', 'Assign', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'TryExcept', 'Expr', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'TryExcept', 'TryExcept', 'If', 'Assign', 'Assign', 'Assign', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'TryExcept', 'If', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'For', 'Assign', 'Assign', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Expr', 'Expr', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['TryExcept', 'Assign', 'TryExcept']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Expr', 'TryExcept']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'TryExcept', 'Expr', 'ImportFrom', 'If', 'Expr', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'ImportFrom', 'If', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'If', 'If', 'Expr', 'Assign', 'Assign', 'If', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Assign', 'Print', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'While', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'If', 'If', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'TryExcept', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'If', 'Assign', 'If', 'If', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'With', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'For', 'If', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'With']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'For', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'If', 'If', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'For', 'Assign', 'If', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'Assign', 'Assign', 'For', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'If', 'Assign', 'While', 'Assign', 'While', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assert', 'Assign', 'Assert', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Global', 'If', 'Expr', 'TryExcept', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Global', 'If', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'If', 'If', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'If', 'Print', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'TryExcept', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'Assign', 'Assign', 'If', 'If', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'For', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'If', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'For', 'Assign', 'Assign', 'For', 'If', 'Assign', 'Assign', 'For', 'If', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Assign', 'Assign', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'If', 'Assert', 'If', 'Assign', 'If', 'If', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'If', 'For', 'Assign', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'If', 'If', 'If', 'Assign', 'If', 'Assert', 'Assign', 'If', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assert', 'If', 'If', 'If', 'Assign', 'If', 'Assert', 'Assign', 'If', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'For', 'Assign', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'If', 'Expr', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'ImportFrom', 'Assign', 'Expr', 'Assign', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'If', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['For', 'For', 'Assign', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Assign', 'AugAssign', 'Expr', 'For', 'AugAssign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'TryExcept', 'Expr', 'If', 'If', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'TryExcept', 'Expr', 'If', 'Assign', 'Assign', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'If', 'If', 'For', 'If', 'Assign', 'If', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Import', 'FunctionDef', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'ImportFrom', 'Assign', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Import', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'ImportFrom', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'ImportFrom', 'Assign', 'Assign', 'For', 'Assign', 'Delete', 'Delete', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'ImportFrom', 'ImportFrom', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'For', 'Expr', 'Expr', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Import', 'Expr', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'ImportFrom', 'ImportFrom', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'For', 'Expr', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Print', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'Assign', 'If', 'Expr', 'Assign', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'For', 'For', 'For', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Expr', 'If', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'If', 'Expr', 'Assign', 'If', 'Assign', 'Assign', 'If', 'Assign', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Expr', 'Assign', 'TryExcept', 'If', 'Assign', 'If', 'Assign', 'Assign', 'If', 'Assign', 'For', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'TryExcept', 'Expr', 'Assign', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'If', 'Assign', 'If', 'Expr', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'TryExcept', 'Expr', 'Assign', 'If', 'Assign', 'Assign', 'If', 'Assign', 'If', 'For', 'Assign', 'If', 'If', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Expr', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Expr', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Expr', 'Assign', 'If', 'Assign', 'Expr', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'For', 'If', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'For', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'If', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'If', 'Assign', 'If', 'Expr', 'Assign', 'Assign', 'If', 'Assign', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'If', 'Assign', 'If', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'For', 'For', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Print', 'Assign', 'Assign', 'Assign', 'Assign', 'AugAssign', 'Assign', 'AugAssign', 'Assign', 'AugAssign', 'For', 'For', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'Assign', 'If', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'Assign', 'If', 'Return']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'Assign', 'Assign', 'If', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Delete', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'Assign', 'If', 'If', 'Assign', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'FunctionDef', 'FunctionDef', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'For', 'Assign', 'Assign', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Import', 'Expr', 'Expr', 'Expr', 'If', 'Assign', 'Assign', 'If', 'FunctionDef', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['FunctionDef', 'Expr', 'Expr', 'TryFinally']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Assign', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Assign', 'If', 'If', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Print', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Print', 'Print', 'Print', 'If', 'Print', 'If', 'Print', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Print', 'Assign', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'For', 'Assign', 'For', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Print', 'Print', 'Expr']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Print']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'For', 'Print']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'TryExcept']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'If', 'If', 'If', 'If', 'If', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'Assign', 'If', 'If', 'If', 'Assign', 'TryExcept', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['TryExcept', 'If', 'Assign', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'TryFinally']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'AugAssign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['While', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'If', 'Assign', 'While', 'Assign', 'While', 'Expr', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'FunctionDef', 'If', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'While', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'If', 'Assign', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'If', 'TryExcept', 'Assign', 'TryExcept', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'TryExcept']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['FunctionDef', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'ClassDef', 'Assign', 'Assign', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'If', 'Assign', 'Assign', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'TryExcept', 'TryExcept']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['TryExcept', 'Expr', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['TryExcept', 'Expr', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'For', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'AugAssign', 'Assign', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'AugAssign', 'Assign', 'Assign', 'If', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'Assign', 'If', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'If', 'If', 'If', 'Assign', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'If', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'If', 'If', 'If', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'If', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'If', 'Expr', 'Expr', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'If', 'Assign', 'AugAssign', 'If', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'ClassDef', 'Assign', 'ClassDef', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'If', 'Expr', 'If', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Print', 'For', 'Expr', 'Print', 'ClassDef', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'ImportFrom', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'ImportFrom', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Print', 'Assign', 'For', 'Print']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Delete', 'Delete', 'Assign', 'Assign', 'Delete', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'For', 'Assign', 'Expr', 'Assign', 'Expr', 'For', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Import', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Import', 'Print', 'TryFinally', 'Print', 'TryFinally']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'TryFinally']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Import', 'FunctionDef', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'Expr', 'Expr', 'Expr', 'Print', 'Assign', 'Expr', 'Expr', 'Expr', 'Print']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'For', 'Expr', 'Expr', 'Print', 'Print']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'If', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'If', 'If', 'Assign', 'Assign', 'If', 'If', 'Assign', 'Assign', 'For', 'Expr', 'For', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'TryExcept', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'Assign', 'If', 'If', 'For', 'Assign', 'Assign', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'If', 'Assign', 'If', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assert', 'Assert']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assert', 'Assert', 'Assert', 'Assign', 'Assign', 'Assign', 'Assert', 'Assign', 'Assign', 'Assert', 'Assert', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Assert', 'Assert', 'Assert']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assert', 'Assert', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assert', 'Assert', 'Assert', 'Assert', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assert', 'Assign', 'If', 'Assert', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assert', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assert', 'Assert', 'Assign', 'Expr', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Global', 'If', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'If', 'TryExcept', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'If', 'If', 'Assign', 'Assign', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'If', 'Assign', 'Expr', 'Expr', 'If', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'AugAssign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'TryFinally']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Expr', 'Assign', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'Assert', 'Assert', 'Assign', 'Assert']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assert', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assert']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assert', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assert', 'Assert', 'Assert']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assert']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Print', 'Assign', 'Assert', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assert', 'Assert', 'Assert']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assert', 'Assert', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assert', 'Assert']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assert', 'Expr', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assert', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assert', 'Assert', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assert']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assert', 'Assign', 'Assert', 'Assert', 'Assert', 'Assert', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assert', 'Expr', 'Assign', 'Assert', 'Assert', 'Assert', 'Assign', 'Assert']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assert', 'Assign', 'Assert', 'Assign', 'Assign', 'Assign', 'Assert', 'Expr', 'Assign', 'Assign', 'Assign', 'Assert', 'Assign', 'Assert', 'Assign', 'Assign', 'Assert', 'Expr', 'Assert']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'For', 'Assign']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assert', 'Assert', 'Assign', 'Assign', 'Assign', 'Assert', 'Assign', 'Assert']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assert', 'Assert', 'Assert', 'Assert']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assert', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assert', 'Assert']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assert', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assert', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assert', 'Assert', 'Assert']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'FunctionDef', 'Assign', 'Assign', 'TryExcept']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Return', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'Assign', 'TryExcept']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'Assign', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['TryExcept', 'Assign', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assert', 'Assign', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assert', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Import', 'If', 'Assign', 'If', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'ImportFrom', 'For', 'For', 'Assign', 'Assign', 'Return']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'AugAssign', 'AugAssign', 'AugAssign', 'AugAssign', 'AugAssign', 'AugAssign', 'AugAssign', 'AugAssign', 'AugAssign', 'Assign', 'AugAssign', 'AugAssign', 'AugAssign', 'AugAssign', 'AugAssign', 'AugAssign', 'AugAssign', 'AugAssign', 'AugAssign', 'Print', 'Print', 'Print', 'Print', 'Print', 'Print', 'Assign', 'Assign', 'If', 'If', 'If', 'If', 'Assign', 'Print', 'Assign', 'Print', 'Print', 'Print', 'Assign', 'AugAssign', 'AugAssign', 'AugAssign', 'AugAssign', 'AugAssign', 'AugAssign', 'AugAssign', 'AugAssign', 'AugAssign', 'Assign', 'AugAssign', 'AugAssign', 'AugAssign', 'AugAssign', 'AugAssign', 'AugAssign', 'AugAssign', 'AugAssign', 'AugAssign', 'Print', 'Assign', 'Print', 'Print']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Import', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ClassDef', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'FunctionDef', 'Assign', 'For']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For']), ('decorator_list', ['Name', 'Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'If', 'Assign', 'Expr', 'Expr', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Import', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Expr']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'For']), ('decorator_list', ['Name', 'Name', 'Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['For', 'For', 'Delete', 'For', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'If', 'If', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'For', 'For', 'AugAssign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'FunctionDef', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'If', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'For', 'Expr', 'Assign', 'Expr', 'Expr', 'For', 'For', 'Expr', 'Assign', 'Assign', 'Expr', 'If', 'If', 'Expr', 'For', 'For', 'For', 'Assign', 'Assign', 'While', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Expr', 'If', 'Assign', 'Expr', 'Return']), ('decorator_list', ['Call'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'If', 'Expr', 'Assign', 'If', 'Assign', 'Assign', 'If', 'Assign', 'If', 'If', 'If', 'TryExcept', 'If', 'ImportFrom', 'Assign', 'Return']), ('decorator_list', ['Call', 'Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'TryExcept', 'Assign', 'Delete', 'Return']), ('decorator_list', ['Call', 'Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'If', 'FunctionDef', 'TryExcept', 'If', 'ImportFrom', 'Import', 'Assign', 'Assign', 'Assign', 'Expr', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'TryExcept', 'Return']), ('decorator_list', ['Call', 'Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'If', 'Assign', 'Assign', 'Return']), ('decorator_list', ['Call'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['With', 'Return']), ('decorator_list', ['Call'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'With', 'Return']), ('decorator_list', ['Call'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'TryExcept', 'Assign', 'For', 'Expr', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'For', 'Assign', 'Assign', 'If', 'Return']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'If', 'If', 'Assign', 'If', 'Assign', 'If', 'Assign', 'If', 'If', 'Return']), ('decorator_list', ['Name', 'Attribute'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'If', 'Return']), ('decorator_list', ['Name', 'Attribute'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'Return']), ('decorator_list', ['Name', 'Attribute'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'If', 'Return']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'Assign', 'Return']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Expr', 'Return']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'If', 'Return']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'TryExcept', 'TryExcept', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'Assign', 'TryExcept', 'TryExcept', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'Expr', 'Return']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'For', 'Assign', 'Assign', 'If', 'If', 'Return']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'Assign', 'Expr', 'Expr', 'Return']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'Assign', 'If', 'If', 'Return']), ('decorator_list', ['Name', 'Attribute'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'If', 'Return']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'Assign', 'If', 'Assign', 'For', 'For', 'Assign', 'Return']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'While', 'Assign', 'For', 'Return']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'If', 'Expr']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'If', 'If', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'If', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'Expr']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Assign', 'Expr']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'TryExcept', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'For', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Import', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'If', 'Expr', 'If', 'Assign', 'If', 'Assign', 'If', 'For', 'Assign', 'Assign', 'If', 'Assign', 'For', 'If', 'Expr', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'If', 'If', 'If', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'If', 'Assign', 'If', 'For', 'If', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assert', 'If', 'If', 'If', 'If', 'Assign', 'Assign', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assert', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'TryExcept']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'For', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'Assign', 'For', 'For', 'Assign', 'Assign', 'For', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'TryExcept', 'TryExcept', 'For', 'TryExcept', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'For', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'For', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assert', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'If', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assert', 'Assign', 'Assign', 'Assert', 'Assert', 'Assert', 'Assert', 'Assert', 'If', 'If', 'Assign', 'Assert', 'Assign', 'Assert', 'Assign', 'Assert', 'For', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assert', 'Assign', 'Assert', 'Assign', 'Assign', 'Assert', 'Assert', 'Assert', 'Assert', 'Assert', 'If', 'If', 'Assign', 'Assert', 'Assign', 'Assert', 'Assign', 'Assert', 'Assign', 'Assert', 'Assign', 'Assert', 'Assert', 'Assert']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assert', 'Assign', 'Assign', 'Assert', 'Assert', 'Assert', 'Assert', 'Assert', 'If', 'If', 'Assign', 'Assert', 'Assign', 'Assert', 'Assign', 'Assert', 'Assert', 'Assert', 'Assert']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assert', 'Assign', 'Assign', 'Assert', 'Assert', 'Assert', 'Assert', 'Assert', 'If', 'If', 'Assign', 'Assert', 'Assign', 'Assert', 'Assign', 'Assert', 'Assert', 'Assert', 'Assert']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assert', 'Assign', 'Assign', 'Assert', 'Assert', 'Assert', 'Assert', 'Assert', 'If', 'If', 'Assign', 'Assert', 'Assign', 'Assert', 'Assign', 'Assert', 'Assert', 'Assert', 'Assert']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assert', 'Assign', 'Assign', 'ImportFrom', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assert', 'Assign', 'Assign', 'Assert', 'Assert', 'Assert', 'Assert', 'Assert', 'If', 'If', 'Assign', 'Assert', 'Assert', 'Assign', 'Assert', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'For', 'Assert', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assert', 'Assign', 'Assert', 'Assert', 'Assert', 'If', 'If', 'Assign', 'Assert', 'Assign', 'Assert']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Expr', 'Assign', 'Assign', 'Assert', 'Assign', 'Assert', 'Assert', 'Assert', 'If', 'If', 'Assign', 'Assert']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assert', 'Assign', 'Assert', 'Assert', 'Assert', 'Assert', 'If', 'If', 'Assign', 'Assert']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assert', 'Assign', 'Assert', 'Assert', 'Assert', 'Assert', 'If', 'If', 'Assign', 'Assert']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assert', 'Assign', 'Assert', 'Assert', 'Assert', 'Assert', 'If', 'If', 'Assign', 'Assert']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assert', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assert', 'Assign', 'Assign', 'Assert', 'Assert', 'Assert', 'Assert', 'Assert', 'If', 'If', 'Assign', 'Assert', 'Assign', 'Assert', 'Assign', 'Assert', 'Assert', 'Assert']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assert', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assert', 'Assign', 'Assign', 'Assert', 'Assert', 'Assert', 'Assert', 'Assert', 'If', 'If', 'Assign', 'Assert', 'Assign', 'Assert', 'Assign', 'Assert', 'Assert', 'Assert']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assert', 'Assign', 'Assign', 'Assert', 'Assign', 'Assign', 'Assert', 'Assert', 'Assert', 'Assert', 'If', 'If', 'Assign', 'Assert']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assert', 'Assert']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assert', 'Assert', 'Assert']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assert', 'Assert', 'Assert', 'Assign', 'Assign', 'Assert', 'Assert', 'Assert']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assert', 'Assign', 'Assert', 'Assign', 'Assign', 'Assert', 'Assert', 'Assert', 'Assert', 'Assert', 'If', 'If', 'Assign', 'Assert', 'Assign', 'Assert', 'Assign', 'Assert', 'Assign', 'Assert', 'Assign', 'Assert', 'Assert', 'Assert']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'Assert', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assert', 'Assign', 'Assert', 'Assign', 'Assign', 'Assert', 'Assert', 'Assert', 'Assert', 'Assert', 'If', 'If', 'Assign', 'Assert', 'Assign', 'Assert', 'Assign', 'Assert', 'Assign', 'Assert', 'Assign', 'Assert', 'Assert', 'Assert']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'For', 'Assert', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'Assert', 'Assign', 'Assign', 'Delete', 'Assign', 'Assign', 'Assign', 'Assign', 'Assert', 'Assign', 'Assert', 'Assign', 'Assign', 'Assert', 'Assert', 'Assert', 'Assert', 'Assert', 'If', 'If', 'Assign', 'Assert', 'Assign', 'Assert', 'Assign', 'Assert', 'Assign', 'Assert', 'Assign', 'Assert', 'Assert', 'Assert']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'For', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Print', 'Print']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'For', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'With']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'If', 'Assign', 'If', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'TryExcept', 'If', 'Assign', 'Assign', 'Assign', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'If', 'If', 'Assign', 'Assign', 'TryExcept', 'If', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'AugAssign', 'For', 'Assign', 'Assign', 'Expr', 'Expr', 'FunctionDef', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'If', 'Assign', 'Assign', 'Expr', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'ImportFrom', 'ImportFrom', 'TryFinally', 'TryExcept', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'ImportFrom', 'If', 'If', 'Expr', 'If', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'ImportFrom', 'If', 'Assign', 'If', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Pass']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Import', 'ImportFrom', 'Assign', 'Assign', 'If', 'Assign', 'Expr', 'For', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'FunctionDef', 'Assign', 'For', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assert', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'TryFinally', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['TryExcept']), ('decorator_list', ['Call'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'For', 'Assign', 'Assign', 'Assert', 'If', 'Assert', 'Assign', 'Expr', 'Assign', 'Assert', 'Assign', 'For', 'Assert', 'Assign', 'Assign', 'For', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'TryFinally', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assert', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'Assign', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'For', 'If', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'For', 'Assign', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'TryExcept', 'Assign', 'Assign', 'Assign', 'If', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'Assign', 'Assign', 'If', 'Assign', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'Assign', 'If', 'TryExcept', 'Return']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'If', 'If', 'Assign', 'Assign', 'Assign', 'If', 'If', 'Assign', 'TryExcept', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'If', 'Assign', 'Assign', 'Assign', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'If', 'Assign', 'If', 'If', 'Assign', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['For', 'Assign', 'If', 'Assign', 'If', 'If', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Expr', 'Assign', 'While']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Print', 'Print', 'Print', 'Print', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If']), ('decorator_list', ['Attribute'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Return']), ('decorator_list', ['Attribute'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Return']), ('decorator_list', ['Attribute'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Return']), ('decorator_list', ['Call', 'Name', 'Call', 'Call'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'If', 'Assign', 'If', 'Return']), ('decorator_list', ['Call', 'Name', 'Call', 'Call'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Return']), ('decorator_list', ['Call', 'Name', 'Call'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'Return']), ('decorator_list', ['Call', 'Call', 'Name', 'Call', 'Call'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Return']), ('decorator_list', ['Call', 'Call'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Return']), ('decorator_list', ['Call', 'Call', 'Call'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Return']), ('decorator_list', ['Call', 'Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'If', 'If']), ('decorator_list', ['Call', 'Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'If', 'Assign', 'TryExcept', 'Assign', 'If', 'Assign', 'If', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Print', 'Assign', 'For', 'Print', 'Assign', 'Assign', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'Assign', 'Print', 'Print', 'Print', 'Assign', 'While', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Print', 'Print', 'Assign', 'Expr', 'Expr', 'If', 'Print', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'If', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'If', 'If', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Expr', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Import', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assert', 'Assign', 'If', 'Assign', 'Assign', 'Return']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assert', 'Assign', 'Expr', 'Expr', 'Assert', 'Assert', 'Assert', 'Assert', 'Assert', 'Assert', 'Assert', 'Assert', 'Assert', 'Assert', 'Assign', 'Assert', 'Assign', 'Assert', 'Assign', 'Assert', 'Assert', 'Assert', 'Assert', 'Assert', 'Assert', 'Assert']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assert', 'Assign', 'Assign', 'Assign', 'Assign', 'Assert', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assert']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assert']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assert', 'Assign', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assert', 'Return']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'If', 'Assign', 'Assign', 'Assign', 'If', 'Expr', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'If', 'Raise']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'Assign', 'If', 'If', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'If', 'Assign', 'Assign', 'For', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Assign', 'Assign', 'For', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'For', 'If', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'If', 'If', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'While', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Expr', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'If', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'If', 'If', 'If', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'If', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'If', 'If', 'If', 'If', 'If', 'If', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'If', 'If', 'If', 'If', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'If', 'Assign', 'Assign', 'Assign', 'For', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Expr', 'For', 'Expr', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'For', 'Expr', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Expr', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'If', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'For', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'ImportFrom', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'For', 'Assign', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'ImportFrom', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'ImportFrom', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'ImportFrom', 'Expr', 'Expr', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'Assign', 'For', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'If', 'Assign', 'If', 'If', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'ImportFrom', 'If', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'While', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'For', 'Expr', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['TryExcept', 'Assign', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['TryExcept', 'Assign', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'For']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'TryExcept', 'Assign', 'For', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'Assign', 'For', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'For', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'For', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['AugAssign', 'Assign', 'AugAssign', 'Assign', 'AugAssign', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', ['Call'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Print', 'Assign', 'Assign', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'FunctionDef', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assert', 'FunctionDef', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assert', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'FunctionDef', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'FunctionDef', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assert', 'Assign', 'Assign', 'For', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'FunctionDef', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Print', 'FunctionDef', 'FunctionDef', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Expr', 'Expr', 'Assign', 'If', 'If', 'If', 'Expr', 'Assign', 'Assign', 'If', 'If', 'If', 'Assign', 'Expr', 'Assign', 'Print']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Global', 'TryExcept', 'Expr', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Expr', 'Assign', 'Assign', 'If', 'Assign', 'If', 'Expr', 'Assign', 'If', 'If', 'If', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'ImportFrom', 'Assign', 'Expr', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'TryExcept', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Expr']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'Expr']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'Expr']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'If', 'Expr', 'Expr', 'Assign', 'For', 'Assign', 'Assign', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Global', 'Assign', 'While']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'If', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Assign', 'If', 'Expr', 'For', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'TryExcept', 'For', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'Assign', 'If', 'Assign', 'Assign', 'Expr', 'While']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'TryExcept', 'For', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'If', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'TryExcept', 'Assign', 'For', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'If', 'Assign', 'Expr', 'While']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'TryExcept', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Expr', 'Assign', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'If', 'If', 'Assign', 'Expr', 'Assign', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'ImportFrom', 'Expr', 'ImportFrom', 'Expr', 'ImportFrom', 'If', 'ImportFrom', 'If', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'If', 'Expr', 'ImportFrom', 'Expr', 'ImportFrom', 'Expr', 'Expr', 'Expr', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Expr', 'Expr', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'TryExcept']), ('decorator_list', ['Attribute'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Return']), ('decorator_list', ['Call'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Return']), ('decorator_list', ['Call'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Return']), ('decorator_list', ['Call'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'TryExcept']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'TryExcept', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'TryExcept', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'TryExcept', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'If', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'If', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'TryExcept', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'If', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'TryExcept', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'TryExcept', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'TryExcept', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'TryExcept', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'TryExcept', 'Expr', 'If', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'ImportFrom', 'TryExcept', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'TryExcept', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'TryExcept', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'ImportFrom', 'ClassDef', 'Assign', 'Assign', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ClassDef', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['AugAssign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Pass']), ('decorator_list', ['Attribute'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Pass']), ('decorator_list', ['Attribute', 'Attribute'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Import', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'ImportFrom', 'TryExcept', 'If', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Expr', 'Expr', 'Expr', 'AugAssign', 'Expr', 'Expr', 'Expr', 'AugAssign', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'For', 'Assign', 'AugAssign', 'Expr', 'Expr', 'AugAssign', 'For', 'Assign', 'AugAssign', 'Expr', 'Expr', 'Expr', 'AugAssign', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'TryExcept']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'If', 'If', 'Assign', 'Assign', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'While']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'While', 'Assign', 'Expr', 'Print', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'For', 'While']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assert', 'Assign', 'Assign', 'TryExcept', 'Expr', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'If', 'Print']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Print', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['FunctionDef', 'Global', 'Expr', 'FunctionDef', 'If', 'Expr', 'If', 'TryExcept']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'If', 'TryExcept']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Global', 'If', 'TryExcept', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Global', 'Assign', 'Assign', 'If', 'Assign', 'If', 'If', 'If', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'TryExcept']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'For', 'TryExcept']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'While', 'Assign', 'While', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'FunctionDef', 'FunctionDef', 'FunctionDef']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'If', 'If', 'If', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'For', 'If', 'If', 'Assign', 'If', 'Assign', 'For', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assert', 'Assert', 'If', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assert', 'If', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Assign', 'AugAssign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'If', 'Assign', 'Expr', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Delete', 'Delete', 'Delete', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Expr', 'If', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'If', 'Expr', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'While', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'If', 'Return']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assert', 'Assert', 'Assign', 'Assign', 'Delete', 'If', 'Assign', 'If', 'If', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assert', 'If', 'AugAssign', 'TryFinally', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assert', 'Assign', 'If', 'Assign', 'Assign', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assert', 'If', 'Assign', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assert', 'Assert', 'If', 'Assert', 'If', 'Assign', 'Assign', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'If', 'If', 'Expr', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assert', 'Assign', 'Assign', 'Assign', 'If', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'TryFinally']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'If', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'AugAssign', 'TryFinally', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'If', 'Assign', 'Return']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assert', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'While']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'AugAssign', 'For', 'Assign', 'If', 'If', 'For', 'AugAssign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'AugAssign', 'TryFinally', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'For', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'For', 'Expr', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'If', 'For', 'If', 'Assign', 'If', 'Assign', 'If', 'Assign', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Expr', 'AugAssign', 'Assign', 'TryFinally']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Expr', 'For', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'If', 'For', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Expr', 'Assign', 'Expr', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'Assign', 'While']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'Assign', 'Expr', 'TryExcept']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assert', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'For', 'Assign', 'Assign', 'For', 'For', 'Assign', 'For', 'If', 'For', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'TryExcept', 'Assign', 'TryExcept', 'Assign', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'Assign', 'For', 'If', 'Assign', 'For', 'Assign', 'If', 'Assign', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'Assign', 'If', 'Expr', 'Expr', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'If', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'FunctionDef', 'Assign', 'If', 'If', 'Assign', 'If', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Print', 'Print', 'Print', 'Print', 'Print', 'If', 'If', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'If', 'Assign', 'If', 'Expr', 'Assign', 'If', 'Assign', 'If', 'If', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'If', 'Assign', 'If', 'Expr', 'If', 'If', 'Assign', 'If', 'If', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'TryExcept', 'With']), ('decorator_list', ['Name', 'Call'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Return']), ('decorator_list', ['Call', 'Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assert', 'Expr', 'Assign', 'Return']), ('decorator_list', ['Call', 'Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'FunctionDef', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['FunctionDef', 'FunctionDef', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'If', 'Return']), ('decorator_list', ['Call', 'Name', 'Call'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Return']), ('decorator_list', ['Call'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'Return']), ('decorator_list', ['Call'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'ImportFrom', 'Return']), ('decorator_list', ['Call'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Expr', 'Return']), ('decorator_list', ['Call'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'ImportFrom', 'Return']), ('decorator_list', ['Call'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'If', 'ImportFrom', 'Return']), ('decorator_list', ['Call'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'ImportFrom', 'Return']), ('decorator_list', ['Call'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Expr', 'If', 'If', 'Expr', 'If', 'Expr', 'Assign', 'If', 'Expr', 'Return']), ('decorator_list', ['Call'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'ImportFrom', 'Assign', 'Assign', 'Expr', 'Assign', 'If', 'If', 'If', 'Assign', 'Assign', 'Assign', 'Expr', 'Return']), ('decorator_list', ['Call'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Expr', 'ImportFrom', 'Assign', 'Return']), ('decorator_list', ['Call'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'If', 'Expr', 'Assign', 'For', 'For', 'Return']), ('decorator_list', ['Call'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If']), ('decorator_list', ['Call'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If']), ('decorator_list', ['Call'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'If', 'Expr', 'Return']), ('decorator_list', ['Call'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'For', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'If', 'Assign', 'If', 'Assign', 'If']), ('decorator_list', ['Call'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'Assign', 'If', 'TryExcept', 'ImportFrom', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Global', 'Assign', 'Assign', 'For', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Return']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'If', 'If', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'If', 'If', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'If', 'If', 'Expr', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'TryFinally', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'If']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'TryExcept', 'AugAssign', 'If', 'If', 'If', 'While', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'Return']), ('decorator_list', ['Call'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'If', 'Assign', 'Assign', 'If', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'AugAssign', 'AugAssign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'Assign', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'If', 'Assign', 'Assign', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'Import', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'Expr', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Expr', 'Import']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'TryExcept']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Print', 'Assign', 'Assign', 'Print', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Print', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Print', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'For', 'Assign', 'Assign', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'FunctionDef', 'Assign', 'Assign', 'FunctionDef', 'Assign', 'Expr', 'Assign', 'Assign', 'For', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'If', 'Assign', 'Assign', 'For', 'Assign', 'Expr', 'For', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assert', 'If', 'Assign', 'If', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'Expr', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'Expr', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'If', 'Expr', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assert', 'Assert', 'Assign', 'If', 'If', 'Assign', 'Assign', 'For', 'Assign', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assert', 'AugAssign', 'TryExcept', 'AugAssign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assert', 'AugAssign', 'Expr', 'AugAssign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'If', 'Assign', 'AugAssign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'For', 'For', 'Expr', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'While']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'If', 'Assert', 'If', 'Expr', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assert', 'AugAssign', 'Expr', 'AugAssign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Print', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'AugAssign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'TryExcept', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'If', 'Assign', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'Assign', 'Expr', 'Expr', 'TryExcept', 'Assign', 'Assign', 'Expr', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'Assign', 'If', 'Assign', 'Expr', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Print', 'TryExcept', 'If', 'Assign', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'TryFinally', 'Expr', 'Expr', 'Expr', 'Print', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'TryExcept', 'If', 'If', 'Expr', 'Assign', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Print']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Assign', 'For', 'Expr', 'If', 'Global', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'Assign', 'Assign', 'For', 'Expr', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'If', 'Assign', 'If', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'For', 'Return']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['TryExcept', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Return']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['TryExcept', 'Expr', 'Return']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['TryExcept', 'Assign', 'Assign', 'For', 'Return']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['TryExcept', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Return']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['TryExcept', 'Assign', 'Expr', 'Expr', 'Return']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['TryExcept', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Return']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'TryExcept', 'Return']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['TryExcept', 'Assign', 'Assign', 'Assign', 'If', 'Expr', 'Expr', 'Expr', 'Return']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'TryExcept', 'Assign', 'Assign', 'TryExcept', 'Expr', 'Return']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'TryExcept', 'Assign', 'FunctionDef', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'TryExcept', 'Raise']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'Assign', 'Assign', 'If', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'If', 'If', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Expr', 'Expr', 'Delete', 'Delete']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Delete', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'TryExcept', 'While', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'If', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'While', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'If', 'If', 'Expr', 'Assign', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'If', 'If', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['For', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'Assign', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'ClassDef', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['For', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'If', 'Expr', 'Expr', 'Expr', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Assign', 'Expr', 'If', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'For', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'Assign', 'For', 'Assign', 'Assign', 'For', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Assign', 'If', 'Assign', 'Assign', 'For', 'Expr', 'Expr', 'Expr', 'Expr', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'FunctionDef', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'For', 'For', 'For', 'Expr', 'Assign', 'For', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'Assign', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'For', 'Assign', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Print', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'FunctionDef', 'Assign', 'Assign', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Print', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'If', 'Print', 'Assign']), ('decorator_list', ['Name', 'Attribute'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'If', 'Print', 'Assign', 'Assign', 'Assign', 'If', 'If', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Print', 'Print', 'Print', 'Assign']), ('decorator_list', ['Name', 'Attribute'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'If', 'Expr', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'TryExcept', 'If', 'If', 'Expr', 'For', 'Assign', 'Assign', 'Assign', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'TryExcept', 'If', 'Assign', 'Assign', 'Assign', 'If', 'If', 'If', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'TryExcept', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'ImportFrom', 'Assign', 'Assign', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'ImportFrom', 'ImportFrom', 'TryExcept', 'If', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Print', 'TryExcept', 'Assign', 'Assign', 'For', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Import', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'If', 'If', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'If', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'If', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'For', 'Assign', 'Assign', 'Assign', 'Assign', 'While']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'Assign', 'If', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'If', 'If', 'Assign', 'Assign', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'For', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Print', 'Print', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'With', 'Assign', 'Assign', 'Assign', 'With', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'With', 'Assign', 'Assign', 'Assign', 'If', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'With', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'For', 'Assign', 'For', 'Expr', 'If', 'Expr', 'Expr', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'ImportFrom', 'If', 'Assign', 'Assign', 'Assign', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Import', 'Expr', 'Assign', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Import', 'Expr', 'ImportFrom', 'ImportFrom', 'Assign', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Import', 'Expr', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'Assign', 'If', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'If', 'Assign', 'Assign', 'For', 'Delete', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Import', 'Expr', 'Assign', 'Assign', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'ImportFrom', 'Assign', 'If', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'ImportFrom', 'ImportFrom', 'For', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'TryExcept', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Assign', 'If', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'If', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'For', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'Expr', 'If', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['TryExcept', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Assign', 'For', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'For', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'If', 'Assign', 'FunctionDef', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['FunctionDef', 'Assign', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['FunctionDef', 'FunctionDef', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'Assign', 'If', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'Assign', 'Expr', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'ClassDef', 'Assign', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['FunctionDef', 'Import', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'For', 'If', 'If', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'With']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'With']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Print', 'Assign', 'Assign', 'Expr', 'Assign', 'Print', 'Print', 'For', 'Print', 'Print', 'Print', 'Assign', 'Expr', 'Print', 'Print', 'If', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'Assign', 'Assign', 'If', 'TryExcept', 'Print']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Expr', 'If', 'If', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['TryExcept', 'Assign', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'For', 'Print']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'For', 'Print']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'For', 'Assign', 'For', 'Expr', 'Expr', 'Print']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assert', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Print']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assert', 'Assign', 'Assign', 'Assign', 'Expr', 'For', 'Print']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assert', 'Assign', 'Assign', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assert', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'For', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'If', 'Expr', 'Assign', 'For', 'Print', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Print', 'Assign', 'Assign', 'Print', 'Assign', 'Assign', 'Print', 'Assign', 'Assign', 'Print', 'Assign', 'Expr', 'Expr', 'Assign', 'While', 'Print', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'TryExcept', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['TryExcept', 'TryExcept', 'Assign', 'Assign', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Assign', 'Assign', 'If', 'Expr', 'Assign', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'If', 'TryExcept', 'If', 'Expr', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'If', 'Assign', 'Assign', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'If', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'If', 'For', 'Raise']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'TryExcept']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'For', 'If', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Expr', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'If', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'If', 'Expr', 'If', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'TryExcept', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'While']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'For', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['For', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Expr', 'Expr', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'For']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'If', 'Expr', 'Expr', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assert', 'Expr']), ('decorator_list', ['Attribute'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr']), ('decorator_list', ['Attribute'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Expr']), ('decorator_list', ['Attribute'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr']), ('decorator_list', ['Attribute'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['For', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', ['Attribute'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['FunctionDef', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Assign', 'Expr', 'Expr']), ('decorator_list', ['Attribute'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['TryExcept', 'Expr']), ('decorator_list', ['Attribute'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['TryExcept', 'Expr', 'Expr', 'Expr']), ('decorator_list', ['Attribute'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['FunctionDef', 'TryExcept', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Expr']), ('decorator_list', ['Attribute'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'FunctionDef', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', ['Attribute'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', ['Name', 'Attribute'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', ['Name', 'Attribute'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'TryExcept']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['FunctionDef', 'FunctionDef', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['With', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'TryExcept']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'ClassDef', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'For', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'For', 'For', 'For', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'For', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['With', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'For', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'TryExcept', 'TryExcept', 'If', 'Assign', 'If', 'If', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'Assign', 'TryExcept', 'TryExcept', 'TryExcept', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'TryExcept', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Print', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'TryExcept', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Expr', 'Assign', 'For', 'Assign', 'Assign', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Print', 'Assign', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'For', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Global', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Assign', 'Assign', 'If', 'For', 'Assign', 'Assign', 'Assign', 'For', 'Expr', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'Return']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Print', 'Print', 'Print', 'Print']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assert', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Assign', 'Pass']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Assign', 'Assign', 'Assert', 'Assign', 'Assign', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assert', 'Assign', 'Assign', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'Assert', 'Assign', 'Assign', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assert', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Expr', 'Expr', 'Assign', 'With']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'TryExcept', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'TryExcept', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign']), ('decorator_list', ['Attribute'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'If', 'Return']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Assign', 'If', 'If', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Assign', 'Assign', 'If', 'If', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'If', 'ClassDef', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'If', 'For', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'TryExcept', 'If', 'If', 'If', 'Assign', 'If', 'Assign', 'Return']), ('decorator_list', ['Attribute'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Assign', 'If', 'If', 'Assign', 'For', 'If', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'If', 'Assign', 'If', 'Assign', 'Assign', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'For', 'If', 'Assign', 'For', 'AugAssign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'Assign', 'For', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'If', 'Expr']), ('decorator_list', ['Attribute'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'If', 'Assign', 'If', 'Assign', 'Assign', 'Expr', 'Assign', 'If', 'Expr', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'FunctionDef', 'Assign', 'If', 'If', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Return']), ('decorator_list', ['Attribute'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'If', 'Assign', 'Assign', 'If', 'For', 'For', 'For', 'Return']), ('decorator_list', ['Attribute'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'ImportFrom', 'Assign', 'If', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'ImportFrom', 'ImportFrom', 'For', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'Assign', 'TryFinally']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'For', 'Expr']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'For', 'Assign', 'For', 'Expr', 'Expr']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'For']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assert', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'If', 'Expr', 'Assign', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'ClassDef', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'For', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'If', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'FunctionDef', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Delete', 'Delete', 'Expr', 'If', 'Expr', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'ClassDef', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'TryExcept', 'TryExcept', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'If', 'While', 'For', 'For', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'If', 'If', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Global', 'Assign', 'Assign', 'Assign', 'If', 'If', 'For', 'Return', 'Raise']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'For', 'Assign', 'Assign', 'Assign', 'If', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Expr', 'If', 'If', 'If', 'If', 'If', 'If', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'AugAssign', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If']), ('decorator_list', ['Call', 'Name', 'Call'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'For']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'If', 'Assign', 'Return']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'AugAssign', 'While', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['AugAssign', 'AugAssign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Return']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign']), ('decorator_list', ['Call'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr']), ('decorator_list', ['Call'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Global', 'Global', 'FunctionDef', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'Assign', 'Assign', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'If', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'For', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'If', 'If', 'FunctionDef', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Print', 'TryExcept', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'ImportFrom', 'ImportFrom', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'Assign', 'Import', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'Assign', 'Import', 'Assign', 'Assign', 'With']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'Assign', 'Import', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Import', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Import', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Import', 'Assign', 'Import', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Import', 'Assign', 'Import', 'Assign', 'Assign', 'With']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Import', 'Assign', 'Import', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'Import', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Import', 'Expr', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Import', 'Expr', 'Assign', 'With']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'With']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assert']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'Return']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Expr', 'If', 'Assign', 'If', 'Assign', 'Assign', 'If', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Print']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'For', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'Expr', 'With']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['For', 'Assign', 'If', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'If', 'TryExcept', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'If', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'TryExcept', 'Assign', 'Assign', 'If', 'Assign', 'For', 'Assign', 'Assign', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'Assign', 'For', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'If', 'TryExcept', 'If', 'Assign', 'If', 'If', 'Raise']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'If', 'Assign', 'If', 'Assign', 'Assign', 'Assert', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'Raise']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'Assign', 'Expr', 'Assign', 'If', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'Assign', 'TryExcept', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'If', 'If', 'Global', 'Assign', 'Global', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'If', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'FunctionDef', 'Expr', 'Assign', 'Expr', 'Delete', 'Expr', 'Expr', 'Expr', 'ClassDef', 'Assign', 'Assign', 'Expr', 'Delete', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Delete', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'Assign', 'FunctionDef', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assert', 'Assign', 'Assign', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'If', 'TryExcept', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'If', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Expr', 'Expr', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'TryExcept', 'Expr', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assert', 'Assert', 'Assert', 'Assert', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'If', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['AugAssign', 'Return']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Expr', 'For', 'For', 'For', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'If', 'Assign', 'Expr', 'Expr', 'If', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'FunctionDef', 'Assign', 'Assign', 'Expr', 'Assign', 'If', 'Assign', 'If', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'If', 'Expr', 'Expr', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'If', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'For', 'If', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'TryExcept', 'If', 'TryExcept', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'For', 'Assign', 'For', 'Assign', 'For', 'Assign', 'For', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'If', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'For', 'Assign', 'TryExcept', 'Assign', 'Assign', 'For', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'TryExcept', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'FunctionDef', 'Return']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'If', 'Assign', 'If', 'FunctionDef', 'Return']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'If', 'Return']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'Assign', 'Raise']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'Return']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'Assign', 'Assign', 'Expr', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'FunctionDef', 'FunctionDef', 'Assign', 'Assign', 'Return']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Raise']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'If', 'Return']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'If', 'TryExcept', 'Assign', 'If', 'If', 'If', 'Assign', 'If', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'If', 'Expr', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'If', 'If', 'Assign', 'If', 'Assign', 'If', 'If', 'If', 'Assign', 'Assign', 'Expr', 'Assign', 'If', 'Assign', 'Expr', 'Expr', 'FunctionDef', 'If', 'If', 'If', 'If', 'Expr']), ('decorator_list', ['Name', 'Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'If', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'FunctionDef', 'Assign', 'Assign', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'If', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'FunctionDef', 'Assign', 'Assign', 'Expr']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'If', 'Expr']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['TryExcept', 'For', 'Raise']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'If', 'If', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assert', 'Assert', 'Assert', 'Assert', 'If', 'Assign', 'Expr', 'Assign', 'Assign', 'Assert', 'If', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assert', 'Assign', 'Assert', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Assign', 'If', 'If', 'Expr', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'If', 'Assign', 'For', 'Assign', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Import', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'Expr', 'TryExcept', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'TryExcept', 'If', 'TryExcept', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'Assign', 'If', 'TryExcept']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'For', 'Assign', 'Assign', 'Expr', 'Assign', 'If', 'TryExcept']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'For', 'Assign', 'Expr', 'TryExcept', 'Assign', 'If', 'TryExcept']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Import', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'TryExcept', 'Assign', 'Assign', 'FunctionDef', 'Assign', 'Assign', 'Return']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'TryExcept', 'Assign', 'Assign', 'FunctionDef', 'Assign', 'Assign', 'Return']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'For', 'Assign', 'For', 'For', 'For', 'Assign', 'Expr', 'If', 'Print']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'Expr', 'Import', 'TryExcept']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Print', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'TryExcept', 'TryExcept', 'If', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'TryExcept', 'Expr', 'Assign', 'If', 'If', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['TryExcept', 'Assign', 'If', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'ImportFrom', 'Assign', 'If', 'Return']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'ImportFrom', 'Assign', 'Expr', 'Assign', 'Return']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'For', 'Assign', 'Expr', 'For', 'Assign', 'Expr', 'Assign', 'Return']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'If', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'If', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['For', 'Assign', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'For', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'If', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Return']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'If', 'If', 'If', 'Return']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Expr', 'Return']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'If', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Expr', 'Assign', 'If', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'If', 'Assign', 'If', 'If', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'TryExcept', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'Assign', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'If', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'ImportFrom', 'Assign', 'If', 'If', 'If', 'Assign', 'Assign', 'If', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'TryExcept']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'If', 'If', 'Assign', 'If', 'If', 'Assign', 'If', 'If', 'Assign', 'If', 'AugAssign', 'Assign', 'Assign', 'If', 'TryExcept', 'Assign', 'Expr', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Assign', 'If', 'Assign', 'If', 'If', 'Assign', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'If', 'Expr', 'Expr', 'Return', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'If', 'TryFinally']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'AugAssign', 'Assign', 'If', 'If', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'If', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'TryExcept', 'TryExcept', 'If', 'If', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'If', 'If', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'TryExcept', 'If', 'If', 'Assign', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'Print', 'TryExcept', 'If', 'Assign', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Assign', 'If', 'If', 'TryExcept', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Assign', 'If', 'If', 'FunctionDef', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Expr', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'TryExcept', 'Assign', 'Assign', 'TryExcept', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['TryExcept', 'Assign', 'If', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'While', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'For', 'Assign', 'Expr', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'TryExcept', 'Assign', 'Assign', 'If', 'FunctionDef', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'FunctionDef', 'TryExcept']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['FunctionDef', 'If', 'Assign', 'Assign', 'Expr']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'Return']), ('decorator_list', ['Call'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'TryExcept', 'Return']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'If', 'Assign', 'Assign', 'Assign', 'If', 'If', 'Assign', 'If', 'If', 'If', 'If', 'Assign', 'TryExcept', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'If', 'If', 'Assign', 'Assign', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'FunctionDef', 'Assign', 'Expr', 'Assign', 'Assign', 'Assert', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'AugAssign', 'Assign', 'Assign', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'If', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'If', 'For', 'For', 'For', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'TryExcept', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'Assign', 'If', 'Assign', 'If', 'If', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'TryExcept']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Print', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'If', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['TryExcept', 'Assign', 'If', 'Print', 'Assign', 'For', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ClassDef', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'FunctionDef', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'TryExcept', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'For', 'If', 'If', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'For', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'For', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'For', 'Expr', 'Expr', 'Expr', 'Assign', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'If', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'If', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'If', 'Assign', 'Assign', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'ImportFrom', 'Assign', 'For', 'Assign', 'Expr', 'Assign', 'TryExcept', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'If', 'TryExcept', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'TryExcept', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'For', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'For', 'For', 'If', 'If', 'Assign', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Print', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Expr', 'Assign', 'If', 'If', 'If', 'Expr', 'Expr', 'If', 'If', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'For', 'If', 'If', 'For', 'For', 'For', 'If', 'If', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Assign', 'For', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Print', 'If', 'If', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'If', 'If', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Print', 'Assign', 'If', 'If', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'Assign', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'Expr', 'If', 'If', 'If', 'If', 'If', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'Print', 'Assign', 'For', 'For', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'For', 'If', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'If', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'TryExcept', 'If', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Print', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'If', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'TryExcept', 'If', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Print', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'If', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'If', 'Assign', 'If', 'Assign', 'If', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'If', 'If', 'If', 'Assign', 'Assign', 'If', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'If', 'Assign', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'If', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Print', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'If']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'If', 'Assign', 'Assign', 'If', 'If', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Return', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'If', 'If', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assert', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Import', 'Assign', 'Assert', 'Assign', 'Assign', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'TryExcept', 'If', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'If', 'If', 'If', 'Expr', 'TryFinally', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Global', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'If', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'Assign', 'For', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Print', 'TryExcept', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'If', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['FunctionDef', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'For', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'For', 'Expr', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'FunctionDef', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'For', 'Expr', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['FunctionDef', 'If', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'If', 'Assign', 'If', 'If', 'AugAssign', 'Assign', 'If', 'Expr', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'For', 'Expr', 'Print']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'For', 'For', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'For', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'If', 'Expr', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'If', 'Assign', 'Assign', 'For', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'Assign', 'ImportFrom', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'For', 'TryExcept']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Expr', 'TryFinally']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'ImportFrom', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'For', 'Assign', 'For', 'Expr', 'If', 'Expr', 'Expr', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'If', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'Assign', 'Assign', 'Expr', 'TryExcept', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Expr', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'Expr', 'Expr', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Expr', 'Import', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Expr', 'Import', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Print', 'For', 'Assign', 'For', 'Print', 'For', 'Print', 'For', 'Print', 'For', 'Print', 'For', 'Assign', 'Print', 'Assign', 'While', 'Print', 'For', 'Print', 'For', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'ImportFrom', 'Expr', 'Assign', 'Expr']), ('decorator_list', ['Call'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'ImportFrom', 'Expr', 'Assign', 'With', 'Return']), ('decorator_list', ['Call'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'If', 'If', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'If', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'TryExcept', 'If', 'Assign', 'Assign', 'Assign', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'If', 'Expr']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'TryExcept', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'TryExcept', 'Expr', 'Assign', 'Assign', 'Assign', 'If', 'If', 'Expr']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'TryExcept', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ClassDef', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ClassDef', 'Assign', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ClassDef', 'ClassDef', 'Assign', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ClassDef', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Return', 'Import']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'If', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'FunctionDef', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'For', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'For', 'Expr', 'TryFinally']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'TryFinally']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['FunctionDef', 'Expr', 'Return']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'If', 'If', 'Assign', 'Assign', 'Assign', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'For', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'FunctionDef', 'Expr', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'With', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'For', 'Raise']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'Assign', 'AugAssign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'TryExcept', 'Expr', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'For', 'If', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'Assign', 'For', 'If', 'Assign', 'For', 'Import', 'With', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'Assign', 'For', 'Assign', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'While', 'For', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'Assign', 'Assign', 'If', 'Assign', 'If', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Delete', 'Delete', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'Print', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Print', 'TryExcept', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'If', 'Assign', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'TryFinally']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Assign', 'Assign', 'Delete', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'ImportFrom', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Assign', 'If', 'If', 'If', 'If', 'If', 'Assign', 'For', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assert', 'If', 'If', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Assign', 'If', 'If', 'If', 'If', 'If', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'If', 'While', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'TryExcept']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'TryExcept', 'Assign', 'If', 'If', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'TryExcept', 'Assign', 'Assign', 'TryExcept', 'TryExcept']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'TryExcept', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'For', 'Raise']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'For', 'Assign', 'Expr', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'Assign', 'If', 'Assign', 'If', 'Return']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'TryExcept', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'FunctionDef', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'If', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'ImportFrom', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'FunctionDef', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Import', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'ClassDef', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'Assign', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Expr', 'FunctionDef', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Import', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Import', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Import', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Import', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'With', 'Expr', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Import', 'With', 'Expr', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Delete', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Import', 'Assign', 'ClassDef', 'Assign', 'TryExcept']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'If', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'TryFinally']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'Assign', 'Expr', 'Expr', 'TryExcept']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'FunctionDef', 'TryFinally']), ('decorator_list', ['Call'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'FunctionDef', 'FunctionDef', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Expr', 'Expr', 'TryExcept']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'FunctionDef', 'FunctionDef', 'Expr', 'Expr', 'TryExcept']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'If', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Expr', 'ClassDef', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'FunctionDef', 'FunctionDef', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'ClassDef', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Import', 'Assign', 'Assign', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'If', 'Assign', 'Expr', 'Expr', 'Expr', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'For', 'For', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'For', 'Expr', 'For', 'Assign', 'Assign', 'Expr', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'FunctionDef', 'FunctionDef', 'For', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['While', 'Print']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'If', 'Assign', 'If', 'For', 'If', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assert', 'If', 'If', 'If', 'If', 'Assign', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'If', 'Assign', 'For', 'For', 'Assign', 'Expr', 'Assign', 'Return']), ('decorator_list', ['Call'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', ['Call'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'For', 'Expr', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['TryExcept', 'Assign', 'Assign', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['TryExcept', 'Assign', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Print', 'Print', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Global', 'Assign', 'For', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'For', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Assign', 'For', 'Print', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'Assign', 'While', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'For', 'Assign', 'Assign', 'For', 'Assign', 'Assign', 'For', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'For', 'Assign', 'Assign', 'For', 'Assign', 'Assign', 'For', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'Assign', 'Assign', 'If', 'If', 'If', 'If', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'For', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'FunctionDef', 'FunctionDef', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'If', 'If', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Global', 'Assign', 'Assign', 'If', 'AugAssign', 'Assign', 'Assign', 'While', 'Raise']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'Expr', 'Print']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'If', 'If', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'FunctionDef', 'Expr', 'ClassDef', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Import', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Import', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'Import', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Import', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'Import', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'FunctionDef', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Import', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'If', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'ImportFrom', 'ImportFrom', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'FunctionDef', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'ClassDef', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'ImportFrom', 'FunctionDef', 'Expr', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ClassDef', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'ImportFrom', 'Import', 'Assign', 'Assign', 'FunctionDef', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'Assign', 'Assign', 'Assign', 'ImportFrom', 'Import', 'Assign', 'Assign', 'FunctionDef', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'AugAssign', 'Assign', 'While', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'While', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'TryExcept', 'Expr', 'Assign', 'Assign', 'TryExcept', 'TryExcept', 'Expr', 'Expr', 'Expr', 'TryExcept', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assert', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'While', 'Assign', 'Assign', 'Expr', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'Assign', 'Assign', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'TryExcept', 'Assign', 'For', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'For', 'Expr', 'Expr', 'For', 'For', 'Expr', 'Expr', 'For', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Print', 'For', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'For', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', ['Call'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'Assign', 'If', 'Assign', 'If', 'If', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'For']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'Assign', 'Assign', 'Assign', 'Assign', 'ClassDef', 'Assign', 'ClassDef', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'Assign', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'FunctionDef', 'Assign', 'Assign', 'If', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Pass']), ('decorator_list', ['Call'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'If', 'Assign', 'If', 'TryFinally']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'For', 'Delete']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Return']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'If', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'For', 'For']), ('decorator_list', ['Name', 'Name', 'Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'If', 'Assign', 'For']), ('decorator_list', ['Name', 'Name', 'Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assert', 'Assign', 'Assign', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'For']), ('decorator_list', ['Name', 'Name', 'Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assert', 'For', 'For', 'Assign', 'For', 'Assign', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'If', 'Assign', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Expr', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'If', 'If', 'Assign', 'For', 'Assign', 'If']), ('decorator_list', ['Name', 'Name', 'Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'AugAssign', 'Assign', 'Assign', 'Assign', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['For']), ('decorator_list', ['Name', 'Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Delete', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'FunctionDef', 'Assign', 'Assign', 'For', 'Expr', 'Expr', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'FunctionDef', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'FunctionDef', 'Expr', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['FunctionDef', 'Global', 'Assign', 'Return']), ('decorator_list', ['Call'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Global', 'Assign', 'TryFinally']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'Assign', 'While', 'Return']), ('decorator_list', ['Call'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Global', 'Assign', 'Assign', 'Assign', 'Assign', 'While', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'TryExcept', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'Assign', 'If', 'If', 'If', 'If', 'Assign', 'If', 'If', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'TryExcept', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'If', 'Import', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'If', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'If', 'Assign', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'Assign', 'If', 'Assign', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'For', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'For', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'If', 'For', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'If', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'TryExcept', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'Assign', 'If', 'TryExcept', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'If', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'If', 'If', 'Assign', 'Expr', 'Expr', 'Assign', 'While', 'For', 'Expr', 'Expr', 'Expr', 'If', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['For', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'If', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Return', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'If', 'Expr', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'If', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'If', 'Assign', 'If', 'Assign', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'For', 'If', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'TryExcept', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'For', 'Assign', 'If', 'If', 'Expr', 'Assign', 'Assign', 'Expr', 'For', 'Assign', 'If', 'Expr', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['TryExcept', 'Assign', 'If', 'Assign', 'If', 'If', 'Assign', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'TryExcept', 'TryExcept', 'Expr', 'TryExcept', 'If']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'If', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['TryExcept', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'If', 'Assign', 'Expr', 'Expr', 'If', 'Expr']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'TryExcept', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'If', 'Assign', 'If', 'TryExcept']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'If', 'Assign', 'If', 'Assign', 'If', 'For', 'For', 'Assign', 'For', 'Assign', 'For', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'For', 'Expr', 'Assign', 'If', 'Assign', 'Assign', 'Expr', 'Return']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'If', 'Return']), ('decorator_list', ['Name', 'Call'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'If', 'Return']), ('decorator_list', ['Name', 'Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'If', 'Assign', 'Return']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'If', 'Assign', 'Return']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Return']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Expr', 'Return']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Expr', 'Assign', 'Return']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'Assign', 'If', 'Assign', 'Return']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'Assign', 'If', 'Assign', 'If', 'Return']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Expr', 'Assign', 'Return']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Return']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'Assign', 'Assign', 'If']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'Assign', 'Assign', 'Return']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'If', 'If', 'If', 'Import', 'Assign', 'Assign', 'Assign', 'TryExcept', 'Assign', 'If', 'TryExcept', 'If', 'Expr', 'Assign', 'Return']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'Assign', 'Assign', 'If', 'Assign', 'Expr', 'Return']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'FunctionDef', 'Assign', 'Assign', 'TryExcept', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'TryExcept', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'Assign', 'Assign', 'TryExcept', 'Assign', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'TryExcept', 'Assign', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'TryExcept']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'TryExcept', 'TryExcept']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'TryExcept', 'Assign', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'ClassDef', 'TryExcept']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'ImportFrom', 'Assign', 'For', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'ImportFrom', 'Assign', 'For', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'If', 'If', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'AugAssign', 'Assign', 'Assign', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'TryExcept', 'If', 'If', 'Expr', 'Expr', 'Assign', 'Print', 'If', 'Print']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'If', 'Print', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'Print', 'While', 'Assign', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'If', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'TryExcept', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'TryExcept', 'AugAssign', 'TryExcept', 'Assign', 'Assign', 'Assign', 'TryExcept', 'Assign', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'Assign', 'FunctionDef', 'TryExcept', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'TryExcept', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'TryExcept', 'Assign', 'Assign', 'TryExcept', 'Assign', 'Assign', 'Expr', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'Assign', 'TryExcept', 'If', 'Assign', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'While']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'While', 'Assign', 'For', 'If', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['TryExcept', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Global', 'Global', 'Assign', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['FunctionDef', 'Assign', 'Assign', 'If', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'If', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'Assign', 'If', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'For', 'For', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'TryExcept', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'For', 'If', 'For', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'If']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'If', 'If', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'Assign', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'TryExcept', 'If', 'FunctionDef', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'If', 'FunctionDef', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'Assign', 'If', 'FunctionDef', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'Assign', 'Assign', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'If', 'If', 'Return']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'FunctionDef', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Global', 'If', 'For', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Global', 'For', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ClassDef', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['FunctionDef', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'FunctionDef', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'For', 'Expr', 'Expr', 'TryExcept', 'Assign', 'Assign', 'Assign', 'Print', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Print', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'For', 'Expr', 'Expr', 'Assign', 'For', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'If', 'TryExcept', 'Assign', 'AugAssign', 'AugAssign', 'TryExcept']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Assign', 'Assign', 'TryExcept', 'If']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'FunctionDef', 'TryExcept', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Assign', 'If', 'If', 'Expr', 'TryExcept', 'TryExcept']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'For', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'Expr']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'Expr', 'Expr']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'If', 'Expr', 'If', 'If', 'Assign', 'Assign', 'If', 'Expr', 'If', 'Expr', 'If', 'If']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Assign', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'If', 'Assign', 'Assign', 'For', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'Assign', 'Expr', 'Return']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'If', 'Assign', 'If', 'For']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'If', 'Assign', 'TryExcept', 'If', 'If', 'If', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'If', 'For']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'Assign', 'Expr']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Expr']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'While', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'If', 'Assign', 'For', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'ClassDef', 'ClassDef', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Expr', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Print', 'Assign', 'While', 'Print']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Global', 'Expr', 'If', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'While', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Print', 'Print', 'Print', 'Print', 'Print', 'Print', 'Print', 'Print', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Print']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Assign', 'Expr', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Assert']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assert', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Assert']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Print', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assert']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assert', 'Assert', 'Assert', 'Assert', 'Assert', 'Assert']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assert', 'Assert', 'Assign', 'Assert', 'Assert', 'Assert', 'Assert', 'Assert', 'Assert', 'Assert', 'Assert', 'Assert', 'Assign', 'Assign', 'Assign', 'Assert', 'Assert', 'Assert', 'Assign', 'Assign', 'Assign', 'Assert', 'Assert', 'Assert']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assert', 'Assert', 'Assign', 'Assert', 'Expr', 'Assert', 'Assign', 'Expr', 'Assert', 'Expr', 'Expr', 'Expr', 'Expr', 'Assert', 'Expr', 'Assert']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assert', 'Assert', 'Assert', 'Assign', 'Assign', 'Assign', 'Expr', 'Assert', 'Assign', 'Assign', 'Assign', 'Assign', 'Assert', 'Assert', 'Assign', 'Assign', 'Assign', 'Assert', 'Assert', 'Assert', 'Assert', 'Assert']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assert', 'Assign', 'Assign', 'Assign', 'Assign', 'Assert', 'Assign', 'Assign', 'Assign', 'Assert', 'Assert', 'Assert', 'Assign', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assert', 'Assert', 'Assign', 'Assert', 'Assert', 'Assert', 'Assign', 'Assign', 'Assert']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assert', 'Assert', 'Assign', 'Assert', 'Assert', 'Assert', 'Assert']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assert', 'Assign', 'For', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assert', 'Assert', 'Assign', 'Assert', 'Assert', 'Assert', 'Assert', 'Assert', 'Assert', 'Assert', 'Assert']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assert', 'Assert', 'Assign', 'Assert', 'Assert', 'Assert', 'Assert', 'Assert', 'Assert', 'Assert', 'Assert', 'Assert', 'Assert', 'Assign', 'Assign', 'Assign', 'Assert', 'Assert', 'Assign', 'Assert', 'Assert', 'Assert', 'Assert', 'Assign', 'Assign', 'Assign', 'Assert', 'Assert', 'Assign', 'Assert', 'Assert', 'Assert', 'Assert', 'Assign', 'Assign', 'Assign', 'Assert']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assert', 'Assert', 'Assert', 'Assert', 'Assert', 'Assert', 'Assert', 'Assert', 'Assert']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assert', 'Assert', 'Assign', 'Assert', 'Assert', 'Assert', 'Assert', 'Assert', 'Assert', 'Assign', 'Assign', 'Assign', 'Expr', 'Assert']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assert', 'Assert', 'Assign', 'Assert', 'Assert']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assert', 'Assert', 'Assign', 'Assert']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assert', 'Assert', 'Assert', 'Assign', 'Assign', 'Assign', 'Assert', 'Assert', 'Assert']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assert', 'Assert']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assert', 'Assert']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assert', 'Assign', 'Assign', 'Assign', 'Assert', 'Assert']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assert', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assert']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assert', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assert']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assert', 'Assign', 'Assign', 'Assign', 'Expr', 'Assert']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assert']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assert']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assert', 'Assign', 'Assert', 'Assign', 'Assert', 'Assign', 'Assert', 'Assign', 'Assert']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assert', 'Assign', 'Assert', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assert', 'Assert']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Assert']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'If', 'If', 'Assign', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assert', 'Assign', 'Assign', 'Assert', 'Assign', 'Assign', 'Assert', 'Assign', 'Assign', 'Assert', 'Assert']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assert', 'Assign', 'Assign', 'Assert']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assert', 'Assert', 'Assert']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assert', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assert', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assert']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assert', 'Assert', 'Assert', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assert', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assert', 'Assert', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assert', 'Assert', 'Expr', 'Assign', 'Assign', 'Assign', 'Assert', 'Assert']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'Assert', 'Assign', 'Assert', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'FunctionDef', 'Assign', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'For', 'AugAssign', 'Assign', 'Assign', 'If', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'FunctionDef', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assign', 'Assign', 'Assign', 'For', 'For', 'Expr', 'Expr', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'If', 'Assign', 'If']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'If', 'Assign', 'If', 'If']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'If', 'If', 'If']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'If', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'For', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'For', 'TryFinally']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'For', 'TryFinally']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['FunctionDef', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assert', 'If', 'Assign', 'Assign', 'If', 'Assign', 'Expr', 'If', 'Expr', 'Expr', 'TryFinally']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'Assign', 'Assign', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'If', 'If', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Expr', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'For', 'Assign', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assert', 'Assign', 'For', 'Return']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Assign', 'If', 'For', 'Raise']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'TryExcept', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'If', 'For', 'For', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'If', 'Assign', 'Expr', 'Expr', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'For', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Assign', 'For', 'Expr', 'Assign', 'Assign', 'For', 'For', 'For', 'For', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'For', 'If', 'Return']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['For', 'Return']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'If', 'Assign', 'For', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'For', 'If']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr']), ('decorator_list', ['Name', 'Name', 'Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr']), ('decorator_list', ['Name', 'Name', 'Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assert', 'If', 'If', 'Assign', 'Expr', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'For', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'For']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'If', 'If', 'Assign', 'Expr', 'Expr', 'Assign', 'If', 'TryExcept', 'Expr', 'Assign', 'If', 'Assign', 'If', 'Expr']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'Assign', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'For']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'If', 'If', 'Return']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'For']), ('decorator_list', ['Name', 'Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'For', 'Assign', 'For', 'Return']), ('decorator_list', ['Name', 'Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['For', 'For']), ('decorator_list', ['Name', 'Name', 'Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Assign', 'While', 'Assign', 'Assign', 'For', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Expr', 'While']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'For', 'Assign', 'Import', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'For', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'For', 'Assign', 'For', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Assert', 'Return']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'ImportFrom', 'Assert', 'Assign', 'FunctionDef', 'Assign', 'For', 'Assign', 'For', 'Assign']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'ImportFrom', 'If', 'Assign', 'If', 'Assert', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Import', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Import', 'ImportFrom', 'If', 'Assign', 'If', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assert', 'If', 'ImportFrom', 'Assign', 'Assign', 'If', 'If', 'If', 'Assign', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'ImportFrom', 'Assign', 'For', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'For', 'For', 'Assign', 'Assign', 'Return']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Expr', 'For', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'If', 'Assign', 'If', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'Assign', 'Assign', 'If']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'Import', 'Import', 'Assert', 'If', 'TryExcept']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'Import', 'If', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'Expr', 'TryFinally']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Import', 'If', 'Import', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'TryExcept', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Print', 'Print', 'Print', 'Print', 'Print', 'Print', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Print', 'Assign', 'Assign', 'Assign', 'Print', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'With']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'If']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Print', 'Print', 'Print']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'With']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'With', 'Assign', 'If', 'Expr', 'If', 'If', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'With', 'Return']), ('decorator_list', ['Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'With', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', ['Name', 'Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'With', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'If', 'With', 'Expr', 'With', 'Return']), ('decorator_list', ['Name', 'Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'For', 'Expr', 'Expr']), ('decorator_list', ['Name', 'Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'If', 'For', 'With', 'Expr', 'Return']), ('decorator_list', ['Name', 'Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'With', 'Expr']), ('decorator_list', ['Name', 'Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'If']), ('decorator_list', ['Name', 'Name'])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Print', 'While']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Print', 'Expr', 'Assign', 'For', 'Expr', 'Print']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Global', 'If', 'Assign', 'Assign', 'Print', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Global', 'Print', 'Assign', 'TryExcept', 'Print', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Print', 'Assign', 'Expr', 'For', 'Print', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Global', 'Global', 'Print', 'If', 'Assign', 'Print', 'Assign', 'Assign', 'TryExcept', 'Print', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Global', 'Global', 'Print', 'If', 'Assign', 'Assign', 'Print', 'Assign', 'TryExcept', 'Print', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'If', 'If', 'If', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Assign', 'Return', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'For', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['For', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assert', 'Assert', 'Assign', 'Assert', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'If', 'Expr', 'If', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'ImportFrom', 'Assign', 'Expr', 'Expr', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'For', 'Assign', 'Assign', 'Assign', 'Assign', 'Return']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'Expr', 'Assign', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'If']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['If', 'For', 'Raise']), ('decorator_list', [])]", "FunctionDef -> [('name', 'str'), ('args', 'arguments'), ('body', ['ImportFrom', 'TryExcept', 'If', 'If', 'Assign', 'If', 'TryExcept']), ('decorator_list', [])]"], "Delete": ["Delete -> [('targets', ['Subscript'])]", "Delete -> [('targets', ['Attribute'])]", "Delete -> [('targets', ['Name'])]", "Delete -> [('targets', ['Name', 'Name', 'Name'])]", "Delete -> [('targets', ['Subscript', 'Subscript'])]"], "Load": ["Load -> <NULL>"], "ExtSlice": ["ExtSlice -> [('dims', ['Slice', 'Slice'])]", "ExtSlice -> [('dims', ['Index', 'Slice'])]", "ExtSlice -> [('dims', ['Slice', 'Index'])]", "ExtSlice -> [('dims', ['Slice', 'Slice', 'Slice'])]", "ExtSlice -> [('dims', ['Slice', 'Slice', 'Index'])]", "ExtSlice -> [('dims', ['Index', 'Slice', 'Slice'])]"], "Compare": ["Compare -> [('left', 'Attribute'), ('ops', ['Eq']), ('comparators', ['Num'])]", "Compare -> [('left', 'Attribute'), ('ops', ['Eq']), ('comparators', ['Call'])]", "Compare -> [('left', 'Name'), ('ops', ['Eq']), ('comparators', ['Num'])]", "Compare -> [('left', 'Name'), ('ops', ['Eq']), ('comparators', ['Call'])]", "Compare -> [('left', 'Name'), ('ops', ['IsNot']), ('comparators', ['Name'])]", "Compare -> [('left', 'Attribute'), ('ops', ['IsNot']), ('comparators', ['Name'])]", "Compare -> [('left', 'Name'), ('ops', ['In']), ('comparators', ['Name'])]", "Compare -> [('left', 'Name'), ('ops', ['Is']), ('comparators', ['Name'])]", "Compare -> [('left', 'BinOp'), ('ops', ['Eq']), ('comparators', ['Num'])]", "Compare -> [('left', 'Name'), ('ops', ['Eq']), ('comparators', ['Attribute'])]", "Compare -> [('left', 'Name'), ('ops', ['NotEq']), ('comparators', ['Attribute'])]", "Compare -> [('left', 'Name'), ('ops', ['Lt']), ('comparators', ['Num'])]", "Compare -> [('left', 'Name'), ('ops', ['LtE']), ('comparators', ['Name'])]", "Compare -> [('left', 'Call'), ('ops', ['Eq']), ('comparators', ['Num'])]", "Compare -> [('left', 'Name'), ('ops', ['NotEq']), ('comparators', ['Name'])]", "Compare -> [('left', 'Name'), ('ops', ['Eq']), ('comparators', ['Name'])]", "Compare -> [('left', 'Name'), ('ops', ['Lt']), ('comparators', ['Name'])]", "Compare -> [('left', 'Name'), ('ops', ['Gt']), ('comparators', ['Num'])]", "Compare -> [('left', 'Call'), ('ops', ['Gt']), ('comparators', ['Num'])]", "Compare -> [('left', 'Attribute'), ('ops', ['In']), ('comparators', ['Name'])]", "Compare -> [('left', 'Call'), ('ops', ['Lt']), ('comparators', ['Num'])]", "Compare -> [('left', 'BinOp'), ('ops', ['Gt']), ('comparators', ['BinOp'])]", "Compare -> [('left', 'Name'), ('ops', ['Gt']), ('comparators', ['Call'])]", "Compare -> [('left', 'Call'), ('ops', ['Eq']), ('comparators', ['Name'])]", "Compare -> [('left', 'Subscript'), ('ops', ['Eq']), ('comparators', ['Name'])]", "Compare -> [('left', 'Name'), ('ops', ['Eq']), ('comparators', ['Str'])]", "Compare -> [('left', 'Attribute'), ('ops', ['Eq']), ('comparators', ['Name'])]", "Compare -> [('left', 'Subscript'), ('ops', ['NotEq']), ('comparators', ['Name'])]", "Compare -> [('left', 'Attribute'), ('ops', ['Eq']), ('comparators', ['Str'])]", "Compare -> [('left', 'Name'), ('ops', ['In']), ('comparators', ['List'])]", "Compare -> [('left', 'Name'), ('ops', ['GtE']), ('comparators', ['Num'])]", "Compare -> [('left', 'Subscript'), ('ops', ['NotEq']), ('comparators', ['Str'])]", "Compare -> [('left', 'Str'), ('ops', ['In']), ('comparators', ['Name'])]", "Compare -> [('left', 'Name'), ('ops', ['LtE']), ('comparators', ['Num'])]", "Compare -> [('left', 'Name'), ('ops', ['GtE']), ('comparators', ['Name'])]", "Compare -> [('left', 'Call'), ('ops', ['NotEq']), ('comparators', ['Num'])]", "Compare -> [('left', 'Attribute'), ('ops', ['NotIn']), ('comparators', ['Tuple'])]", "Compare -> [('left', 'Attribute'), ('ops', ['NotIn']), ('comparators', ['Call'])]", "Compare -> [('left', 'Attribute'), ('ops', ['Eq']), ('comparators', ['Attribute'])]", "Compare -> [('left', 'Name'), ('ops', ['NotIn']), ('comparators', ['Attribute'])]", "Compare -> [('left', 'Attribute'), ('ops', ['Gt']), ('comparators', ['Num'])]", "Compare -> [('left', 'Attribute'), ('ops', ['NotEq']), ('comparators', ['Attribute'])]", "Compare -> [('left', 'Name'), ('ops', ['NotEq']), ('comparators', ['Str'])]", "Compare -> [('left', 'Str'), ('ops', ['In']), ('comparators', ['Attribute'])]", "Compare -> [('left', 'Str'), ('ops', ['NotIn']), ('comparators', ['Attribute'])]", "Compare -> [('left', 'Attribute'), ('ops', ['Is']), ('comparators', ['Name'])]", "Compare -> [('left', 'Subscript'), ('ops', ['Eq']), ('comparators', ['Str'])]", "Compare -> [('left', 'Name'), ('ops', ['Gt']), ('comparators', ['Name'])]", "Compare -> [('left', 'Name'), ('ops', ['Gt']), ('comparators', ['BinOp'])]", "Compare -> [('left', 'Call'), ('ops', ['In']), ('comparators', ['List'])]", "Compare -> [('left', 'Call'), ('ops', ['In']), ('comparators', ['Name'])]", "Compare -> [('left', 'Call'), ('ops', ['Is']), ('comparators', ['Name'])]", "Compare -> [('left', 'Call'), ('ops', ['Eq']), ('comparators', ['Call'])]", "Compare -> [('left', 'Call'), ('ops', ['Eq']), ('comparators', ['List'])]", "Compare -> [('left', 'Attribute'), ('ops', ['Eq']), ('comparators', ['List'])]", "Compare -> [('left', 'Attribute'), ('ops', ['In']), ('comparators', ['List'])]", "Compare -> [('left', 'Attribute'), ('ops', ['NotEq']), ('comparators', ['Name'])]", "Compare -> [('left', 'Attribute'), ('ops', ['NotIn']), ('comparators', ['List'])]", "Compare -> [('left', 'Name'), ('ops', ['Lt']), ('comparators', ['BinOp'])]", "Compare -> [('left', 'Name'), ('ops', ['Eq']), ('comparators', ['Subscript'])]", "Compare -> [('left', 'Call'), ('ops', ['LtE']), ('comparators', ['Num'])]", "Compare -> [('left', 'Name'), ('ops', ['In']), ('comparators', ['Attribute'])]", "Compare -> [('left', 'Attribute'), ('ops', ['Lt']), ('comparators', ['Tuple'])]", "Compare -> [('left', 'Call'), ('ops', ['In']), ('comparators', ['Attribute'])]", "Compare -> [('left', 'Call'), ('ops', ['Eq']), ('comparators', ['Str'])]", "Compare -> [('left', 'Str'), ('ops', ['NotIn']), ('comparators', ['Name'])]", "Compare -> [('left', 'Call'), ('ops', ['In']), ('comparators', ['Tuple'])]", "Compare -> [('left', 'Attribute'), ('ops', ['In']), ('comparators', ['Attribute'])]", "Compare -> [('left', 'Attribute'), ('ops', ['NotIn']), ('comparators', ['Name'])]", "Compare -> [('left', 'Subscript'), ('ops', ['In']), ('comparators', ['Tuple'])]", "Compare -> [('left', 'Name'), ('ops', ['In']), ('comparators', ['Subscript'])]", "Compare -> [('left', 'Subscript'), ('ops', ['In']), ('comparators', ['Call'])]", "Compare -> [('left', 'Name'), ('ops', ['In']), ('comparators', ['Tuple'])]", "Compare -> [('left', 'Call'), ('ops', ['IsNot']), ('comparators', ['Name'])]", "Compare -> [('left', 'Tuple'), ('ops', ['In']), ('comparators', ['Attribute'])]", "Compare -> [('left', 'Attribute'), ('ops', ['Lt']), ('comparators', ['Name'])]", "Compare -> [('left', 'Attribute'), ('ops', ['GtE']), ('comparators', ['Name'])]", "Compare -> [('left', 'Attribute'), ('ops', ['GtE']), ('comparators', ['Tuple'])]", "Compare -> [('left', 'Attribute'), ('ops', ['Gt']), ('comparators', ['Name'])]", "Compare -> [('left', 'Num'), ('ops', ['LtE', 'Lt']), ('comparators', ['Name', 'Name'])]", "Compare -> [('left', 'Name'), ('ops', ['NotIn']), ('comparators', ['Name'])]", "Compare -> [('left', 'Call'), ('ops', ['NotIn']), ('comparators', ['Name'])]", "Compare -> [('left', 'Call'), ('ops', ['Eq']), ('comparators', ['Attribute'])]", "Compare -> [('left', 'Str'), ('ops', ['In']), ('comparators', ['Subscript'])]", "Compare -> [('left', 'Call'), ('ops', ['NotEq']), ('comparators', ['Name'])]", "Compare -> [('left', 'Attribute'), ('ops', ['LtE']), ('comparators', ['Name'])]", "Compare -> [('left', 'Name'), ('ops', ['Gt']), ('comparators', ['Attribute'])]", "Compare -> [('left', 'Name'), ('ops', ['NotEq']), ('comparators', ['Num'])]", "Compare -> [('left', 'Name'), ('ops', ['NotEq']), ('comparators', ['Dict'])]", "Compare -> [('left', 'Attribute'), ('ops', ['Lt']), ('comparators', ['Num'])]", "Compare -> [('left', 'Name'), ('ops', ['Lt']), ('comparators', ['Call'])]", "Compare -> [('left', 'Attribute'), ('ops', ['NotEq']), ('comparators', ['Str'])]", "Compare -> [('left', 'Name'), ('ops', ['Is']), ('comparators', ['Attribute'])]", "Compare -> [('left', 'BinOp'), ('ops', ['In']), ('comparators', ['Name'])]", "Compare -> [('left', 'Subscript'), ('ops', ['In']), ('comparators', ['Name'])]", "Compare -> [('left', 'Name'), ('ops', ['Eq', 'Eq']), ('comparators', ['Name', 'Name'])]", "Compare -> [('left', 'Subscript'), ('ops', ['LtE']), ('comparators', ['Num'])]", "Compare -> [('left', 'Subscript'), ('ops', ['Lt']), ('comparators', ['Subscript'])]", "Compare -> [('left', 'Subscript'), ('ops', ['Gt']), ('comparators', ['Subscript'])]", "Compare -> [('left', 'BinOp'), ('ops', ['NotEq']), ('comparators', ['Num'])]", "Compare -> [('left', 'Attribute'), ('ops', ['GtE']), ('comparators', ['Num'])]", "Compare -> [('left', 'Call'), ('ops', ['Eq']), ('comparators', ['Subscript'])]", "Compare -> [('left', 'Attribute'), ('ops', ['Gt']), ('comparators', ['Attribute'])]", "Compare -> [('left', 'Attribute'), ('ops', ['Lt']), ('comparators', ['Attribute'])]", "Compare -> [('left', 'Name'), ('ops', ['NotEq']), ('comparators', ['Call'])]", "Compare -> [('left', 'Name'), ('ops', ['NotEq']), ('comparators', ['BoolOp'])]", "Compare -> [('left', 'Subscript'), ('ops', ['Gt']), ('comparators', ['Name'])]", "Compare -> [('left', 'Subscript'), ('ops', ['Lt']), ('comparators', ['Num'])]", "Compare -> [('left', 'BinOp'), ('ops', ['Gt']), ('comparators', ['Subscript'])]", "Compare -> [('left', 'BinOp'), ('ops', ['GtE']), ('comparators', ['Name'])]", "Compare -> [('left', 'BinOp'), ('ops', ['LtE']), ('comparators', ['Num'])]", "Compare -> [('left', 'Subscript'), ('ops', ['Gt']), ('comparators', ['Num'])]", "Compare -> [('left', 'BinOp'), ('ops', ['Lt']), ('comparators', ['BinOp'])]", "Compare -> [('left', 'Attribute'), ('ops', ['Gt']), ('comparators', ['BinOp'])]", "Compare -> [('left', 'Call'), ('ops', ['NotEq']), ('comparators', ['Call'])]", "Compare -> [('left', 'Attribute'), ('ops', ['LtE']), ('comparators', ['Num'])]", "Compare -> [('left', 'Name'), ('ops', ['IsNot']), ('comparators', ['Attribute'])]", "Compare -> [('left', 'Attribute'), ('ops', ['Is']), ('comparators', ['Attribute'])]", "Compare -> [('left', 'Call'), ('ops', ['Eq']), ('comparators', ['BinOp'])]", "Compare -> [('left', 'Call'), ('ops', ['Eq']), ('comparators', ['Tuple'])]", "Compare -> [('left', 'Num'), ('ops', ['LtE']), ('comparators', ['Subscript'])]", "Compare -> [('left', 'Subscript'), ('ops', ['LtE']), ('comparators', ['Name'])]", "Compare -> [('left', 'Num'), ('ops', ['LtE']), ('comparators', ['Name'])]", "Compare -> [('left', 'BinOp'), ('ops', ['Lt']), ('comparators', ['Num'])]", "Compare -> [('left', 'Name'), ('ops', ['LtE']), ('comparators', ['Subscript'])]", "Compare -> [('left', 'Name'), ('ops', ['Eq']), ('comparators', ['Tuple'])]", "Compare -> [('left', 'BinOp'), ('ops', ['Eq']), ('comparators', ['Name'])]", "Compare -> [('left', 'Name'), ('ops', ['Eq']), ('comparators', ['BinOp'])]", "Compare -> [('left', 'Str'), ('ops', ['In']), ('comparators', ['Call'])]", "Compare -> [('left', 'Subscript'), ('ops', ['Eq']), ('comparators', ['BinOp'])]", "Compare -> [('left', 'Subscript'), ('ops', ['Eq']), ('comparators', ['Num'])]", "Compare -> [('left', 'Name'), ('ops', ['LtE']), ('comparators', ['BinOp'])]", "Compare -> [('left', 'Subscript'), ('ops', ['Eq']), ('comparators', ['Tuple'])]", "Compare -> [('left', 'Subscript'), ('ops', ['NotEq']), ('comparators', ['Num'])]", "Compare -> [('left', 'Name'), ('ops', ['GtE']), ('comparators', ['BinOp'])]", "Compare -> [('left', 'Tuple'), ('ops', ['NotIn']), ('comparators', ['Attribute'])]", "Compare -> [('left', 'Subscript'), ('ops', ['LtE']), ('comparators', ['Attribute'])]", "Compare -> [('left', 'Attribute'), ('ops', ['NotEq']), ('comparators', ['Num'])]", "Compare -> [('left', 'Call'), ('ops', ['NotEq']), ('comparators', ['Str'])]", "Compare -> [('left', 'Subscript'), ('ops', ['Eq']), ('comparators', ['Attribute'])]", "Compare -> [('left', 'Call'), ('ops', ['Gt']), ('comparators', ['Attribute'])]", "Compare -> [('left', 'Subscript'), ('ops', ['NotEq']), ('comparators', ['Attribute'])]", "Compare -> [('left', 'Subscript'), ('ops', ['Lt']), ('comparators', ['Str'])]", "Compare -> [('left', 'Subscript'), ('ops', ['GtE']), ('comparators', ['Tuple'])]", "Compare -> [('left', 'Tuple'), ('ops', ['In']), ('comparators', ['Call'])]", "Compare -> [('left', 'Call'), ('ops', ['Lt']), ('comparators', ['Name'])]", "Compare -> [('left', 'Name'), ('ops', ['NotEq']), ('comparators', ['Subscript'])]", "Compare -> [('left', 'Subscript'), ('ops', ['Is']), ('comparators', ['Name'])]", "Compare -> [('left', 'Name'), ('ops', ['NotIn']), ('comparators', ['ListComp'])]", "Compare -> [('left', 'Call'), ('ops', ['GtE']), ('comparators', ['Num'])]", "Compare -> [('left', 'Num'), ('ops', ['LtE', 'LtE']), ('comparators', ['Name', 'Num'])]", "Compare -> [('left', 'Subscript'), ('ops', ['NotIn']), ('comparators', ['Str'])]", "Compare -> [('left', 'Subscript'), ('ops', ['In']), ('comparators', ['Str'])]", "Compare -> [('left', 'Call'), ('ops', ['In']), ('comparators', ['Str'])]", "Compare -> [('left', 'Call'), ('ops', ['Gt']), ('comparators', ['Call'])]", "Compare -> [('left', 'Call'), ('ops', ['Lt']), ('comparators', ['Call'])]", "Compare -> [('left', 'BinOp'), ('ops', ['Lt']), ('comparators', ['Call'])]", "Compare -> [('left', 'Name'), ('ops', ['GtE']), ('comparators', ['Attribute'])]", "Compare -> [('left', 'Name'), ('ops', ['Lt']), ('comparators', ['Subscript'])]", "Compare -> [('left', 'Name'), ('ops', ['GtE']), ('comparators', ['Subscript'])]", "Compare -> [('left', 'BinOp'), ('ops', ['Eq']), ('comparators', ['Call'])]", "Compare -> [('left', 'Call'), ('ops', ['LtE']), ('comparators', ['Call'])]", "Compare -> [('left', 'Call'), ('ops', ['Gt']), ('comparators', ['Name'])]", "Compare -> [('left', 'Call'), ('ops', ['GtE']), ('comparators', ['Call'])]", "Compare -> [('left', 'Call'), ('ops', ['GtE']), ('comparators', ['Name'])]", "Compare -> [('left', 'Subscript'), ('ops', ['NotEq']), ('comparators', ['Call'])]", "Compare -> [('left', 'Name'), ('ops', ['NotIn']), ('comparators', ['Call'])]", "Compare -> [('left', 'BinOp'), ('ops', ['NotEq']), ('comparators', ['Name'])]", "Compare -> [('left', 'Name'), ('ops', ['In']), ('comparators', ['Call'])]", "Compare -> [('left', 'Subscript'), ('ops', ['In']), ('comparators', ['Attribute'])]", "Compare -> [('left', 'Subscript'), ('ops', ['NotIn']), ('comparators', ['Attribute'])]", "Compare -> [('left', 'Subscript'), ('ops', ['Is']), ('comparators', ['Attribute'])]", "Compare -> [('left', 'Call'), ('ops', ['Lt']), ('comparators', ['BinOp'])]", "Compare -> [('left', 'Subscript'), ('ops', ['GtE']), ('comparators', ['Num'])]", "Compare -> [('left', 'Call'), ('ops', ['NotIn']), ('comparators', ['Tuple'])]", "Compare -> [('left', 'Attribute'), ('ops', ['NotIn']), ('comparators', ['ListComp'])]", "Compare -> [('left', 'Str'), ('ops', ['NotIn']), ('comparators', ['Subscript'])]", "Compare -> [('left', 'Str'), ('ops', ['NotIn']), ('comparators', ['Call'])]", "Compare -> [('left', 'BinOp'), ('ops', ['LtE']), ('comparators', ['Call'])]", "Compare -> [('left', 'Tuple'), ('ops', ['In']), ('comparators', ['Name'])]", "Compare -> [('left', 'BinOp'), ('ops', ['Lt']), ('comparators', ['Name'])]", "Compare -> [('left', 'Name'), ('ops', ['Eq']), ('comparators', ['List'])]", "Compare -> [('left', 'Subscript'), ('ops', ['IsNot']), ('comparators', ['Name'])]", "Compare -> [('left', 'Call'), ('ops', ['NotIn']), ('comparators', ['Call'])]", "Compare -> [('left', 'Call'), ('ops', ['Gt']), ('comparators', ['BinOp'])]", "Compare -> [('left', 'Name'), ('ops', ['In']), ('comparators', ['Str'])]", "Compare -> [('left', 'Name'), ('ops', ['GtE']), ('comparators', ['Tuple'])]", "Compare -> [('left', 'Name'), ('ops', ['Lt']), ('comparators', ['Tuple'])]", "Compare -> [('left', 'Subscript'), ('ops', ['NotIn']), ('comparators', ['Tuple'])]", "Compare -> [('left', 'Attribute'), ('ops', ['In']), ('comparators', ['Tuple'])]", "Compare -> [('left', 'List'), ('ops', ['In']), ('comparators', ['Attribute'])]", "Compare -> [('left', 'Subscript'), ('ops', ['Eq']), ('comparators', ['Subscript'])]", "Compare -> [('left', 'Name'), ('ops', ['In']), ('comparators', ['ListComp'])]", "Compare -> [('left', 'Name'), ('ops', ['NotIn']), ('comparators', ['Tuple'])]", "Compare -> [('left', 'Subscript'), ('ops', ['NotIn']), ('comparators', ['Name'])]", "Compare -> [('left', 'Num'), ('ops', ['Lt']), ('comparators', ['Name'])]", "Compare -> [('left', 'Subscript'), ('ops', ['Gt']), ('comparators', ['Call'])]", "Compare -> [('left', 'Call'), ('ops', ['Is']), ('comparators', ['Attribute'])]", "Compare -> [('left', 'Attribute'), ('ops', ['In']), ('comparators', ['Subscript'])]", "Compare -> [('left', 'Subscript'), ('ops', ['Eq']), ('comparators', ['List'])]", "Compare -> [('left', 'Attribute'), ('ops', ['Eq']), ('comparators', ['Dict'])]", "Compare -> [('left', 'Attribute'), ('ops', ['NotEq']), ('comparators', ['List'])]", "Compare -> [('left', 'Attribute'), ('ops', ['IsNot']), ('comparators', ['Num'])]", "Compare -> [('left', 'Attribute'), ('ops', ['Eq']), ('comparators', ['Subscript'])]", "Compare -> [('left', 'Name'), ('ops', ['In']), ('comparators', ['BinOp'])]", "Compare -> [('left', 'Attribute'), ('ops', ['NotEq']), ('comparators', ['Call'])]", "Compare -> [('left', 'Call'), ('ops', ['GtE']), ('comparators', ['Attribute'])]", "Compare -> [('left', 'Name'), ('ops', ['GtE']), ('comparators', ['Call'])]", "Compare -> [('left', 'Name'), ('ops', ['LtE']), ('comparators', ['Call'])]", "Compare -> [('left', 'BinOp'), ('ops', ['GtE']), ('comparators', ['Num'])]", "Compare -> [('left', 'Attribute'), ('ops', ['NotIn']), ('comparators', ['Attribute'])]", "Compare -> [('left', 'Name'), ('ops', ['NotIn']), ('comparators', ['BinOp'])]", "Compare -> [('left', 'Num'), ('ops', ['LtE', 'Lt']), ('comparators', ['Name', 'Num'])]", "Compare -> [('left', 'BinOp'), ('ops', ['Gt']), ('comparators', ['Name'])]", "Compare -> [('left', 'Call'), ('ops', ['NotEq']), ('comparators', ['Attribute'])]", "Compare -> [('left', 'Name'), ('ops', ['NotIn']), ('comparators', ['List'])]", "Compare -> [('left', 'Attribute'), ('ops', ['In']), ('comparators', ['Call'])]", "Compare -> [('left', 'Attribute'), ('ops', ['IsNot']), ('comparators', ['Attribute'])]", "Compare -> [('left', 'Name'), ('ops', ['IsNot']), ('comparators', ['Call'])]", "Compare -> [('left', 'Attribute'), ('ops', ['Is']), ('comparators', ['Call'])]", "Compare -> [('left', 'Attribute'), ('ops', ['Lt']), ('comparators', ['BinOp'])]", "Compare -> [('left', 'BinOp'), ('ops', ['LtE']), ('comparators', ['BinOp'])]", "Compare -> [('left', 'BinOp'), ('ops', ['LtE']), ('comparators', ['Name'])]", "Compare -> [('left', 'Subscript'), ('ops', ['LtE']), ('comparators', ['Subscript'])]", "Compare -> [('left', 'Name'), ('ops', ['Lt']), ('comparators', ['Attribute'])]", "Compare -> [('left', 'Num'), ('ops', ['Lt', 'LtE']), ('comparators', ['Name', 'Num'])]", "Compare -> [('left', 'Name'), ('ops', ['Is']), ('comparators', ['Num'])]", "Compare -> [('left', 'Name'), ('ops', ['NotIn']), ('comparators', ['Subscript'])]", "Compare -> [('left', 'Call'), ('ops', ['GtE']), ('comparators', ['Tuple'])]", "Compare -> [('left', 'Attribute'), ('ops', ['LtE', 'LtE']), ('comparators', ['Name', 'Attribute'])]", "Compare -> [('left', 'Attribute'), ('ops', ['GtE']), ('comparators', ['Attribute'])]", "Compare -> [('left', 'Attribute'), ('ops', ['Lt']), ('comparators', ['Call'])]", "Compare -> [('left', 'Subscript'), ('ops', ['Eq']), ('comparators', ['Call'])]", "Compare -> [('left', 'Attribute'), ('ops', ['Lt', 'Lt']), ('comparators', ['Call', 'Attribute'])]", "Compare -> [('left', 'Name'), ('ops', ['LtE']), ('comparators', ['Attribute'])]", "Compare -> [('left', 'Num'), ('ops', ['Eq']), ('comparators', ['Num'])]", "Compare -> [('left', 'Attribute'), ('ops', ['NotEq']), ('comparators', ['Subscript'])]", "Compare -> [('left', 'Num'), ('ops', ['Eq']), ('comparators', ['Name'])]", "Compare -> [('left', 'Num'), ('ops', ['Eq']), ('comparators', ['Call'])]", "Compare -> [('left', 'Str'), ('ops', ['Eq']), ('comparators', ['Attribute'])]", "Compare -> [('left', 'Str'), ('ops', ['Eq']), ('comparators', ['Name'])]", "Compare -> [('left', 'Name'), ('ops', ['In']), ('comparators', ['BoolOp'])]", "Compare -> [('left', 'Attribute'), ('ops', ['GtE']), ('comparators', ['Call'])]", "Compare -> [('left', 'Attribute'), ('ops', ['Eq', 'Eq']), ('comparators', ['Attribute', 'Str'])]", "Compare -> [('left', 'Attribute'), ('ops', ['Is']), ('comparators', ['Str'])]", "Compare -> [('left', 'Attribute'), ('ops', ['Is', 'Is']), ('comparators', ['Name', 'Name'])]", "Compare -> [('left', 'Str'), ('ops', ['In']), ('comparators', ['ListComp'])]", "Compare -> [('left', 'Attribute'), ('ops', ['In']), ('comparators', ['ListComp'])]", "Compare -> [('left', 'Subscript'), ('ops', ['In']), ('comparators', ['List'])]", "Compare -> [('left', 'Call'), ('ops', ['Eq', 'Eq']), ('comparators', ['Call', 'Num'])]", "Compare -> [('left', 'BinOp'), ('ops', ['Gt', 'Gt']), ('comparators', ['Name', 'BinOp'])]", "Compare -> [('left', 'Subscript'), ('ops', ['Lt']), ('comparators', ['Name'])]", "Compare -> [('left', 'Call'), ('ops', ['In']), ('comparators', ['Call'])]", "Compare -> [('left', 'Call'), ('ops', ['In']), ('comparators', ['Subscript'])]", "Compare -> [('left', 'Attribute'), ('ops', ['IsNot']), ('comparators', ['Str'])]", "Compare -> [('left', 'Subscript'), ('ops', ['In']), ('comparators', ['Subscript'])]", "Compare -> [('left', 'Name'), ('ops', ['Lt']), ('comparators', ['UnaryOp'])]", "Compare -> [('left', 'Name'), ('ops', ['Gt']), ('comparators', ['Subscript'])]", "Compare -> [('left', 'Subscript'), ('ops', ['NotEq']), ('comparators', ['Subscript'])]", "Compare -> [('left', 'Subscript'), ('ops', ['GtE']), ('comparators', ['Attribute'])]", "Compare -> [('left', 'Call'), ('ops', ['LtE']), ('comparators', ['BinOp'])]", "Compare -> [('left', 'Call'), ('ops', ['LtE']), ('comparators', ['Attribute'])]", "Compare -> [('left', 'Num'), ('ops', ['Lt', 'LtE']), ('comparators', ['Call', 'Num'])]", "Compare -> [('left', 'BoolOp'), ('ops', ['In']), ('comparators', ['Name'])]", "Compare -> [('left', 'Str'), ('ops', ['Eq']), ('comparators', ['Call'])]", "Compare -> [('left', 'Str'), ('ops', ['Eq']), ('comparators', ['Subscript'])]", "Compare -> [('left', 'Str'), ('ops', ['NotEq']), ('comparators', ['Subscript'])]", "Compare -> [('left', 'Call'), ('ops', ['LtE']), ('comparators', ['Name'])]", "Compare -> [('left', 'Call'), ('ops', ['Is']), ('comparators', ['Num'])]", "Compare -> [('left', 'Attribute'), ('ops', ['NotEq']), ('comparators', ['Tuple'])]", "Compare -> [('left', 'Call'), ('ops', ['Lt']), ('comparators', ['Attribute'])]", "Compare -> [('left', 'Name'), ('ops', ['NotEq']), ('comparators', ['BinOp'])]", "Compare -> [('left', 'Subscript'), ('ops', ['Gt']), ('comparators', ['BinOp'])]", "Compare -> [('left', 'Call'), ('ops', ['Is']), ('comparators', ['Call'])]", "Compare -> [('left', 'Call'), ('ops', ['IsNot']), ('comparators', ['Call'])]", "Compare -> [('left', 'Num'), ('ops', ['Gt', 'Gt']), ('comparators', ['Attribute', 'Num'])]", "Compare -> [('left', 'BinOp'), ('ops', ['In']), ('comparators', ['Subscript'])]", "Compare -> [('left', 'BinOp'), ('ops', ['NotEq']), ('comparators', ['Attribute'])]", "Compare -> [('left', 'Attribute'), ('ops', ['LtE']), ('comparators', ['Attribute'])]", "Compare -> [('left', 'BinOp'), ('ops', ['NotIn']), ('comparators', ['Name'])]", "Compare -> [('left', 'Str'), ('ops', ['Is']), ('comparators', ['Name'])]", "Compare -> [('left', 'Subscript'), ('ops', ['GtE']), ('comparators', ['Str'])]", "Compare -> [('left', 'Call'), ('ops', ['GtE']), ('comparators', ['BinOp'])]", "Compare -> [('left', 'Name'), ('ops', ['Is']), ('comparators', ['Str'])]", "Compare -> [('left', 'Attribute'), ('ops', ['Gt']), ('comparators', ['Call'])]", "Compare -> [('left', 'Subscript'), ('ops', ['In']), ('comparators', ['ListComp'])]", "Compare -> [('left', 'BinOp'), ('ops', ['NotEq']), ('comparators', ['Str'])]", "Compare -> [('left', 'Tuple'), ('ops', ['Eq']), ('comparators', ['Tuple'])]", "Compare -> [('left', 'Num'), ('ops', ['LtE', 'LtE']), ('comparators', ['Name', 'Call'])]", "Compare -> [('left', 'Subscript'), ('ops', ['Lt']), ('comparators', ['BinOp'])]", "Compare -> [('left', 'Name'), ('ops', ['Eq']), ('comparators', ['UnaryOp'])]", "Compare -> [('left', 'Subscript'), ('ops', ['NotIn']), ('comparators', ['List'])]", "Compare -> [('left', 'Num'), ('ops', ['In']), ('comparators', ['Name'])]", "Compare -> [('left', 'BinOp'), ('ops', ['Gt']), ('comparators', ['Attribute'])]", "Compare -> [('left', 'BinOp'), ('ops', ['GtE']), ('comparators', ['Attribute'])]", "Compare -> [('left', 'Call'), ('ops', ['NotIn']), ('comparators', ['Attribute'])]", "Compare -> [('left', 'Call'), ('ops', ['NotEq']), ('comparators', ['Subscript'])]", "Compare -> [('left', 'Attribute'), ('ops', ['Eq']), ('comparators', ['BinOp'])]", "Compare -> [('left', 'Attribute'), ('ops', ['GtE']), ('comparators', ['Subscript'])]", "Compare -> [('left', 'BinOp'), ('ops', ['In']), ('comparators', ['Attribute'])]", "Compare -> [('left', 'Attribute'), ('ops', ['NotEq']), ('comparators', ['BinOp'])]", "Compare -> [('left', 'BinOp'), ('ops', ['Lt']), ('comparators', ['Subscript'])]", "Compare -> [('left', 'Subscript'), ('ops', ['NotIn']), ('comparators', ['Subscript'])]", "Compare -> [('left', 'Name'), ('ops', ['Is']), ('comparators', ['Subscript'])]", "Compare -> [('left', 'Name'), ('ops', ['Eq']), ('comparators', ['Dict'])]", "Compare -> [('left', 'Subscript'), ('ops', ['Eq', 'Eq']), ('comparators', ['Subscript', 'Str'])]", "Compare -> [('left', 'ListComp'), ('ops', ['Eq']), ('comparators', ['Call'])]"], "Gt": ["Gt -> <NULL>"], "keyword": ["keyword -> [('arg', 'str'), ('value', 'Name')]", "keyword -> [('arg', 'str'), ('value', 'Call')]", "keyword -> [('arg', 'str'), ('value', 'Dict')]", "keyword -> [('arg', 'str'), ('value', 'Num')]", "keyword -> [('arg', 'str'), ('value', 'Str')]", "keyword -> [('arg', 'str'), ('value', 'BinOp')]", "keyword -> [('arg', 'str'), ('value', 'List')]", "keyword -> [('arg', 'str'), ('value', 'Subscript')]", "keyword -> [('arg', 'str'), ('value', 'Attribute')]", "keyword -> [('arg', 'str'), ('value', 'Tuple')]", "keyword -> [('arg', 'str'), ('value', 'Lambda')]", "keyword -> [('arg', 'str'), ('value', 'BoolOp')]", "keyword -> [('arg', 'str'), ('value', 'UnaryOp')]", "keyword -> [('arg', 'str'), ('value', 'GeneratorExp')]", "keyword -> [('arg', 'str'), ('value', 'ListComp')]", "keyword -> [('arg', 'str'), ('value', 'Compare')]", "keyword -> [('arg', 'str'), ('value', 'IfExp')]"], "NotEq": ["NotEq -> <NULL>"], "Attribute": ["Attribute -> [('value', 'Name'), ('attr', 'str'), ('ctx', 'Load')]", "Attribute -> [('value', 'Call'), ('attr', 'str'), ('ctx', 'Load')]", "Attribute -> [('value', 'Attribute'), ('attr', 'str'), ('ctx', 'Load')]", "Attribute -> [('value', 'Subscript'), ('attr', 'str'), ('ctx', 'Load')]", "Attribute -> [('value', 'Name'), ('attr', 'str'), ('ctx', 'Store')]", "Attribute -> [('value', 'Str'), ('attr', 'str'), ('ctx', 'Load')]", "Attribute -> [('value', 'BinOp'), ('attr', 'str'), ('ctx', 'Load')]", "Attribute -> [('value', 'Attribute'), ('attr', 'str'), ('ctx', 'Store')]", "Attribute -> [('value', 'Subscript'), ('attr', 'str'), ('ctx', 'Store')]", "Attribute -> [('value', 'Name'), ('attr', 'str'), ('ctx', 'Del')]", "Attribute -> [('value', 'Dict'), ('attr', 'str'), ('ctx', 'Load')]", "Attribute -> [('value', 'Call'), ('attr', 'str'), ('ctx', 'Store')]", "Attribute -> [('value', 'Compare'), ('attr', 'str'), ('ctx', 'Load')]", "Attribute -> [('value', 'Attribute'), ('attr', 'str'), ('ctx', 'Del')]", "Attribute -> [('value', 'BoolOp'), ('attr', 'str'), ('ctx', 'Load')]", "Attribute -> [('value', 'ListComp'), ('attr', 'str'), ('ctx', 'Load')]"], "Is": ["Is -> <NULL>"], "Global": ["Global -> [('names', ['str'])]", "Global -> [('names', ['str', 'str'])]", "Global -> [('names', ['str', 'str', 'str', 'str', 'str'])]", "Global -> [('names', ['str', 'str', 'str'])]", "Global -> [('names', ['str', 'str', 'str', 'str', 'str', 'str', 'str', 'str', 'str', 'str', 'str', 'str', 'str', 'str', 'str', 'str', 'str', 'str', 'str'])]", "Global -> [('names', ['str', 'str', 'str', 'str'])]"], "While": ["While -> [('test', 'Attribute'), ('body', ['Assign', 'For', 'While']), ('orelse', [])]", "While -> [('test', 'UnaryOp'), ('body', ['Expr']), ('orelse', [])]", "While -> [('test', 'Compare'), ('body', ['AugAssign']), ('orelse', [])]", "While -> [('test', 'UnaryOp'), ('body', ['Expr', 'Expr', 'Assign', 'If', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'For', 'For', 'Pass']), ('orelse', [])]", "While -> [('test', 'BoolOp'), ('body', ['AugAssign', 'If', 'For']), ('orelse', [])]", "While -> [('test', 'BoolOp'), ('body', ['If', 'For']), ('orelse', [])]", "While -> [('test', 'Name'), ('body', ['If', 'Assign', 'TryExcept', 'Expr']), ('orelse', [])]", "While -> [('test', 'Num'), ('body', ['Assign', 'If', 'AugAssign', 'If', 'If', 'Expr']), ('orelse', [])]", "While -> [('test', 'Compare'), ('body', ['Expr', 'Assign']), ('orelse', [])]", "While -> [('test', 'Compare'), ('body', ['If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign']), ('orelse', [])]", "While -> [('test', 'Name'), ('body', ['AugAssign', 'Assign', 'If', 'AugAssign']), ('orelse', [])]", "While -> [('test', 'UnaryOp'), ('body', ['Assign', 'For', 'Expr']), ('orelse', [])]", "While -> [('test', 'Name'), ('body', ['Assign', 'If', 'Expr']), ('orelse', [])]", "While -> [('test', 'Compare'), ('body', ['Assign', 'If', 'If', 'AugAssign']), ('orelse', [])]", "While -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'AugAssign', 'If', 'If']), ('orelse', [])]", "While -> [('test', 'Num'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'AugAssign']), ('orelse', [])]", "While -> [('test', 'Name'), ('body', ['Assign', 'TryExcept', 'If', 'Expr', 'Assign', 'Expr', 'AugAssign', 'If']), ('orelse', [])]", "While -> [('test', 'Name'), ('body', ['If', 'Assign', 'Assign', 'TryExcept', 'Assign', 'Expr', 'Break']), ('orelse', [])]", "While -> [('test', 'Name'), ('body', ['Expr', 'Assign']), ('orelse', [])]", "While -> [('test', 'Name'), ('body', ['Assign', 'Expr', 'If']), ('orelse', [])]", "While -> [('test', 'Num'), ('body', ['Assign', 'Assign', 'If']), ('orelse', [])]", "While -> [('test', 'Name'), ('body', ['Assign', 'Print', 'If', 'If', 'Print', 'Expr']), ('orelse', [])]", "While -> [('test', 'Name'), ('body', ['Assign', 'Expr']), ('orelse', [])]", "While -> [('test', 'Name'), ('body', ['If', 'Assign', 'If']), ('orelse', [])]", "While -> [('test', 'BoolOp'), ('body', ['Assign']), ('orelse', [])]", "While -> [('test', 'UnaryOp'), ('body', ['Assign', 'Assign', 'Assign']), ('orelse', [])]", "While -> [('test', 'Name'), ('body', ['Assign', 'Assign', 'Assign', 'Print', 'If', 'If', 'If', 'Expr']), ('orelse', [])]", "While -> [('test', 'Name'), ('body', ['Expr', 'Assign', 'Expr']), ('orelse', [])]", "While -> [('test', 'BoolOp'), ('body', ['If', 'Assign']), ('orelse', [])]", "While -> [('test', 'Num'), ('body', ['TryExcept']), ('orelse', [])]", "While -> [('test', 'Num'), ('body', ['TryExcept', 'Expr']), ('orelse', [])]", "While -> [('test', 'Num'), ('body', ['Expr', 'Assign', 'If']), ('orelse', [])]", "While -> [('test', 'Name'), ('body', ['If', 'Assign', 'Assign', 'For', 'If', 'AugAssign']), ('orelse', [])]", "While -> [('test', 'Compare'), ('body', ['Assign']), ('orelse', [])]", "While -> [('test', 'Num'), ('body', ['If', 'Assign', 'Assign', 'Assign', 'If']), ('orelse', [])]", "While -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign']), ('orelse', [])]", "While -> [('test', 'Compare'), ('body', ['Expr']), ('orelse', [])]", "While -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'If', 'Assign', 'Assign']), ('orelse', [])]", "While -> [('test', 'BinOp'), ('body', ['Expr']), ('orelse', [])]", "While -> [('test', 'Name'), ('body', ['Assign', 'For', 'Expr', 'If', 'Expr']), ('orelse', [])]", "While -> [('test', 'BoolOp'), ('body', ['Expr', 'Expr', 'Assign']), ('orelse', [])]", "While -> [('test', 'Call'), ('body', ['Assign', 'Assert', 'Expr', 'Assign']), ('orelse', [])]", "While -> [('test', 'Call'), ('body', ['Assign', 'Assign']), ('orelse', [])]", "While -> [('test', 'Name'), ('body', ['Assign', 'If', 'Assert', 'Assign', 'Assert', 'For']), ('orelse', [])]", "While -> [('test', 'Compare'), ('body', ['Assign', 'Assign']), ('orelse', [])]", "While -> [('test', 'Name'), ('body', ['Assign', 'If', 'If', 'Assign', 'While', 'If']), ('orelse', [])]", "While -> [('test', 'BoolOp'), ('body', ['If', 'If']), ('orelse', [])]", "While -> [('test', 'Name'), ('body', ['Assign', 'If', 'Expr', 'Assign']), ('orelse', [])]", "While -> [('test', 'BoolOp'), ('body', ['Assign', 'If']), ('orelse', [])]", "While -> [('test', 'Num'), ('body', ['Assign', 'Assign', 'If', 'If', 'Assign', 'If', 'If', 'Expr']), ('orelse', [])]", "While -> [('test', 'UnaryOp'), ('body', ['Assign']), ('orelse', [])]", "While -> [('test', 'BoolOp'), ('body', ['Expr', 'Expr']), ('orelse', [])]", "While -> [('test', 'Name'), ('body', ['Assign', 'Expr', 'For']), ('orelse', [])]", "While -> [('test', 'Name'), ('body', ['Assign', 'For']), ('orelse', [])]", "While -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'If']), ('orelse', [])]", "While -> [('test', 'Compare'), ('body', ['AugAssign', 'TryExcept', 'Expr']), ('orelse', [])]", "While -> [('test', 'Call'), ('body', ['If', 'If']), ('orelse', [])]", "While -> [('test', 'Name'), ('body', ['If', 'Assign', 'If', 'Assign']), ('orelse', [])]", "While -> [('test', 'Name'), ('body', ['Assign', 'Assign']), ('orelse', [])]", "While -> [('test', 'Name'), ('body', ['Assign', 'TryExcept']), ('orelse', [])]", "While -> [('test', 'UnaryOp'), ('body', ['Assign', 'If']), ('orelse', [])]", "While -> [('test', 'Name'), ('body', ['Assign', 'If', 'AugAssign', 'If', 'If', 'Expr']), ('orelse', [])]", "While -> [('test', 'Name'), ('body', ['Assign', 'Assign', 'TryExcept']), ('orelse', [])]", "While -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'If', 'Assign']), ('orelse', [])]", "While -> [('test', 'Call'), ('body', ['If', 'Expr']), ('orelse', [])]", "While -> [('test', 'Call'), ('body', ['Assign']), ('orelse', [])]", "While -> [('test', 'Name'), ('body', ['If']), ('orelse', [])]", "While -> [('test', 'Call'), ('body', ['If', 'Expr', 'Assign']), ('orelse', [])]", "While -> [('test', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'Assign']), ('orelse', [])]", "While -> [('test', 'Name'), ('body', ['TryExcept', 'Assign', 'Assign', 'If', 'If', 'Break']), ('orelse', [])]", "While -> [('test', 'Name'), ('body', ['Assign', 'If']), ('orelse', [])]", "While -> [('test', 'Compare'), ('body', ['Assign', 'If', 'Assign', 'If']), ('orelse', [])]", "While -> [('test', 'UnaryOp'), ('body', ['Assign', 'Expr']), ('orelse', [])]", "While -> [('test', 'Num'), ('body', ['AugAssign', 'Assign', 'Assign', 'TryExcept', 'If', 'If']), ('orelse', [])]", "While -> [('test', 'Name'), ('body', ['Expr']), ('orelse', [])]", "While -> [('test', 'Name'), ('body', ['Assign', 'If', 'If', 'Assign']), ('orelse', [])]", "While -> [('test', 'Attribute'), ('body', ['Assign', 'If']), ('orelse', [])]", "While -> [('test', 'Name'), ('body', ['Assign', 'Assign', 'If']), ('orelse', [])]", "While -> [('test', 'Name'), ('body', ['Assign', 'Expr', 'AugAssign']), ('orelse', [])]", "While -> [('test', 'UnaryOp'), ('body', ['TryExcept']), ('orelse', [])]", "While -> [('test', 'Call'), ('body', ['AugAssign', 'Assign']), ('orelse', [])]", "While -> [('test', 'Name'), ('body', ['TryExcept']), ('orelse', [])]", "While -> [('test', 'Name'), ('body', ['Expr', 'Assign', 'If']), ('orelse', [])]", "While -> [('test', 'Num'), ('body', ['Assign', 'Expr', 'For', 'If']), ('orelse', [])]", "While -> [('test', 'Num'), ('body', ['Assign', 'For', 'If']), ('orelse', [])]", "While -> [('test', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'For']), ('orelse', [])]", "While -> [('test', 'Name'), ('body', ['Assign', 'AugAssign', 'Assign', 'If']), ('orelse', [])]", "While -> [('test', 'BoolOp'), ('body', ['If', 'If', 'Expr']), ('orelse', [])]", "While -> [('test', 'BoolOp'), ('body', ['If', 'Expr']), ('orelse', [])]", "While -> [('test', 'BoolOp'), ('body', ['Expr']), ('orelse', [])]", "While -> [('test', 'Num'), ('body', ['Expr', 'Assign']), ('orelse', [])]", "While -> [('test', 'Name'), ('body', ['Assign', 'If', 'TryExcept']), ('orelse', [])]", "While -> [('test', 'Name'), ('body', ['If', 'Assign', 'Assign']), ('orelse', [])]", "While -> [('test', 'UnaryOp'), ('body', ['Assign', 'Assign', 'Assign', 'While', 'If']), ('orelse', [])]", "While -> [('test', 'Name'), ('body', ['Assign', 'Assign', 'While', 'If', 'Assign']), ('orelse', [])]", "While -> [('test', 'Name'), ('body', ['Assign', 'Assign', 'For', 'If']), ('orelse', [])]", "While -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Expr', 'AugAssign']), ('orelse', [])]", "While -> [('test', 'UnaryOp'), ('body', ['Assign', 'For']), ('orelse', [])]", "While -> [('test', 'Compare'), ('body', ['Print', 'Assign', 'Expr', 'Expr', 'AugAssign']), ('orelse', [])]", "While -> [('test', 'Compare'), ('body', ['Print', 'Assign', 'For', 'Expr', 'Print', 'AugAssign', 'AugAssign']), ('orelse', [])]", "While -> [('test', 'Name'), ('body', ['TryExcept', 'If', 'AugAssign', 'While']), ('orelse', [])]", "While -> [('test', 'Compare'), ('body', ['Assign', 'If', 'Assign']), ('orelse', [])]", "While -> [('test', 'Name'), ('body', ['While', 'Expr']), ('orelse', [])]", "While -> [('test', 'UnaryOp'), ('body', ['Expr', 'Expr']), ('orelse', [])]", "While -> [('test', 'UnaryOp'), ('body', ['For', 'Assign', 'Assign', 'Expr', 'Expr', 'If', 'Expr', 'Expr']), ('orelse', [])]", "While -> [('test', 'Name'), ('body', ['TryExcept', 'Assign', 'If', 'AugAssign', 'Assign']), ('orelse', [])]", "While -> [('test', 'Compare'), ('body', ['Assign', 'Expr', 'Assign', 'Assign', 'If']), ('orelse', [])]", "While -> [('test', 'Compare'), ('body', ['Assign', 'If']), ('orelse', [])]", "While -> [('test', 'BoolOp'), ('body', ['Assign', 'If', 'For', 'Assign', 'AugAssign']), ('orelse', [])]", "While -> [('test', 'Name'), ('body', ['Assign', 'For', 'AugAssign']), ('orelse', [])]", "While -> [('test', 'Call'), ('body', ['Assign', 'Expr', 'Assign', 'Expr']), ('orelse', [])]", "While -> [('test', 'Name'), ('body', ['Assign', 'Assign', 'If', 'Expr', 'Assign']), ('orelse', [])]", "While -> [('test', 'Name'), ('body', ['Assign', 'Expr', 'Expr', 'Assign']), ('orelse', [])]", "While -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'If', 'AugAssign']), ('orelse', [])]", "While -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'While', 'AugAssign', 'Expr']), ('orelse', [])]", "While -> [('test', 'Name'), ('body', ['Assign', 'If', 'Assign', 'If', 'Expr', 'AugAssign']), ('orelse', [])]", "While -> [('test', 'Name'), ('body', ['Assign', 'Assign', 'Assign', 'For', 'Assign']), ('orelse', [])]", "While -> [('test', 'Num'), ('body', ['If', 'Assign']), ('orelse', [])]", "While -> [('test', 'Attribute'), ('body', ['Expr']), ('orelse', [])]", "While -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'If', 'Assign', 'Assign', 'If']), ('orelse', [])]", "While -> [('test', 'Name'), ('body', ['Assign', 'If', 'Assign', 'If', 'If', 'Return']), ('orelse', [])]", "While -> [('test', 'Call'), ('body', ['If', 'Assign']), ('orelse', [])]", "While -> [('test', 'Call'), ('body', ['Expr', 'Assign']), ('orelse', [])]", "While -> [('test', 'Attribute'), ('body', ['Assign']), ('orelse', [])]", "While -> [('test', 'Num'), ('body', ['Assign', 'For']), ('orelse', [])]", "While -> [('test', 'UnaryOp'), ('body', ['For', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('orelse', [])]", "While -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'While', 'If', 'AugAssign']), ('orelse', [])]", "While -> [('test', 'BoolOp'), ('body', ['AugAssign', 'AugAssign', 'AugAssign']), ('orelse', [])]", "While -> [('test', 'Compare'), ('body', ['If', 'Assign']), ('orelse', [])]", "While -> [('test', 'Compare'), ('body', ['Expr', 'AugAssign']), ('orelse', [])]", "While -> [('test', 'BoolOp'), ('body', ['AugAssign']), ('orelse', [])]", "While -> [('test', 'Compare'), ('body', ['AugAssign', 'Assign']), ('orelse', [])]", "While -> [('test', 'Name'), ('body', ['Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'TryExcept', 'Expr', 'Expr', 'If']), ('orelse', [])]", "While -> [('test', 'Call'), ('body', ['TryExcept']), ('orelse', [])]", "While -> [('test', 'Name'), ('body', ['Expr', 'Expr']), ('orelse', [])]", "While -> [('test', 'Name'), ('body', ['Assign', 'If', 'Assign', 'Assign', 'AugAssign', 'TryExcept', 'If', 'Expr']), ('orelse', [])]", "While -> [('test', 'BoolOp'), ('body', ['Expr', 'Assign', 'Assert', 'If']), ('orelse', [])]", "While -> [('test', 'Num'), ('body', ['If', 'Assign', 'Assign', 'If']), ('orelse', [])]", "While -> [('test', 'Compare'), ('body', ['TryExcept', 'Assign']), ('orelse', [])]", "While -> [('test', 'Name'), ('body', ['Assign', 'If', 'Assign', 'If']), ('orelse', [])]", "While -> [('test', 'Name'), ('body', ['AugAssign', 'Assign', 'If']), ('orelse', [])]", "While -> [('test', 'Name'), ('body', ['TryExcept', 'Delete']), ('orelse', [])]", "While -> [('test', 'Name'), ('body', ['TryExcept', 'If']), ('orelse', [])]", "While -> [('test', 'Num'), ('body', ['Assign', 'Assign', 'For', 'If', 'If', 'Expr']), ('orelse', [])]", "While -> [('test', 'Name'), ('body', ['If', 'Assign']), ('orelse', [])]", "While -> [('test', 'BoolOp'), ('body', ['If', 'AugAssign']), ('orelse', [])]", "While -> [('test', 'Name'), ('body', ['Assign', 'For', 'If', 'AugAssign']), ('orelse', [])]", "While -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'AugAssign', 'Assign', 'Expr', 'Assign', 'AugAssign']), ('orelse', [])]", "While -> [('test', 'Compare'), ('body', ['AugAssign', 'AugAssign', 'Assign']), ('orelse', [])]", "While -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign']), ('orelse', [])]", "While -> [('test', 'Name'), ('body', ['Assign', 'For', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'If']), ('orelse', [])]", "While -> [('test', 'Num'), ('body', ['Expr', 'Print', 'Expr']), ('orelse', [])]", "While -> [('test', 'Compare'), ('body', ['Assign', 'Expr', 'Assign']), ('orelse', [])]", "While -> [('test', 'Compare'), ('body', ['Assign', 'While', 'If', 'AugAssign']), ('orelse', [])]", "While -> [('test', 'Num'), ('body', ['Assign', 'If']), ('orelse', [])]", "While -> [('test', 'Name'), ('body', ['Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'If', 'If']), ('orelse', [])]", "While -> [('test', 'Num'), ('body', ['Assign', 'Print', 'Assign', 'Assign', 'If']), ('orelse', [])]", "While -> [('test', 'Num'), ('body', ['Pass']), ('orelse', [])]", "While -> [('test', 'Name'), ('body', ['AugAssign', 'If']), ('orelse', [])]", "While -> [('test', 'Compare'), ('body', ['Assign', 'Expr', 'Assign', 'AugAssign']), ('orelse', [])]", "While -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'If']), ('orelse', [])]", "While -> [('test', 'BoolOp'), ('body', ['If', 'Assign', 'If', 'If', 'If']), ('orelse', [])]", "While -> [('test', 'BoolOp'), ('body', ['If', 'Assign', 'If', 'If', 'AugAssign', 'TryFinally']), ('orelse', [])]", "While -> [('test', 'BoolOp'), ('body', ['For', 'Assign', 'For', 'Expr', 'Expr', 'Expr']), ('orelse', [])]", "While -> [('test', 'Compare'), ('body', ['If']), ('orelse', [])]", "While -> [('test', 'Compare'), ('body', ['Assign', 'AugAssign', 'AugAssign', 'If', 'Assign']), ('orelse', [])]", "While -> [('test', 'Name'), ('body', ['Assign', 'If', 'TryExcept', 'Expr']), ('orelse', [])]", "While -> [('test', 'Compare'), ('body', ['Assign', 'AugAssign', 'Expr']), ('orelse', [])]", "While -> [('test', 'BoolOp'), ('body', ['Assign', 'AugAssign', 'Expr']), ('orelse', [])]", "While -> [('test', 'BoolOp'), ('body', ['Expr', 'AugAssign', 'AugAssign']), ('orelse', [])]", "While -> [('test', 'Name'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'If', 'For']), ('orelse', [])]", "While -> [('test', 'Name'), ('body', ['Assign', 'TryExcept', 'Assign', 'Assign', 'Return']), ('orelse', [])]", "While -> [('test', 'Compare'), ('body', ['Assign', 'While', 'Assign']), ('orelse', [])]", "While -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Print', 'Assign', 'If', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign']), ('orelse', [])]", "While -> [('test', 'Compare'), ('body', ['Print', 'Expr', 'Assign']), ('orelse', [])]", "While -> [('test', 'Call'), ('body', ['Assign', 'Assign', 'Expr']), ('orelse', [])]", "While -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'For', 'If', 'If', 'Assign', 'Expr']), ('orelse', [])]", "While -> [('test', 'Compare'), ('body', ['AugAssign', 'If', 'Assign', 'If', 'If', 'Assign', 'For', 'If', 'If', 'If', 'Assign', 'Expr', 'AugAssign', 'AugAssign']), ('orelse', [])]", "While -> [('test', 'Name'), ('body', ['Assign', 'If', 'Assign', 'TryExcept']), ('orelse', [])]", "While -> [('test', 'UnaryOp'), ('body', ['If', 'TryExcept', 'TryExcept']), ('orelse', [])]", "While -> [('test', 'Name'), ('body', ['Expr', 'Assign', 'Assign', 'If', 'AugAssign', 'If']), ('orelse', [])]", "While -> [('test', 'BoolOp'), ('body', ['AugAssign', 'If', 'Assign']), ('orelse', [])]", "While -> [('test', 'Name'), ('body', ['Assign', 'If', 'Assign', 'Expr', 'Expr']), ('orelse', [])]", "While -> [('test', 'Call'), ('body', ['Expr', 'Expr', 'AugAssign']), ('orelse', [])]", "While -> [('test', 'Call'), ('body', ['Expr']), ('orelse', [])]", "While -> [('test', 'Num'), ('body', ['Assign', 'If', 'Expr']), ('orelse', [])]", "While -> [('test', 'Compare'), ('body', ['Assign', 'AugAssign']), ('orelse', [])]", "While -> [('test', 'Name'), ('body', ['Assign', 'Assign', 'Expr']), ('orelse', [])]", "While -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'AugAssign', 'AugAssign']), ('orelse', [])]", "While -> [('test', 'Call'), ('body', ['If', 'AugAssign']), ('orelse', [])]", "While -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Expr', 'Expr', 'AugAssign']), ('orelse', [])]", "While -> [('test', 'Name'), ('body', ['Print', 'AugAssign', 'Assign', 'Assign', 'AugAssign', 'Assign', 'Assign', 'For', 'For', 'If']), ('orelse', [])]", "While -> [('test', 'Compare'), ('body', ['AugAssign', 'Expr']), ('orelse', [])]", "While -> [('test', 'Call'), ('body', ['Pass']), ('orelse', [])]", "While -> [('test', 'Name'), ('body', ['If', 'While', 'If', 'If']), ('orelse', [])]", "While -> [('test', 'Name'), ('body', ['Assign', 'While', 'If', 'Assign', 'If']), ('orelse', [])]", "While -> [('test', 'BoolOp'), ('body', ['Assign', 'Expr']), ('orelse', [])]", "While -> [('test', 'Attribute'), ('body', ['Assign', 'For']), ('orelse', [])]", "While -> [('test', 'Compare'), ('body', ['AugAssign', 'TryExcept', 'If']), ('orelse', [])]", "While -> [('test', 'UnaryOp'), ('body', ['Assign', 'Assign', 'If']), ('orelse', [])]", "While -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'AugAssign']), ('orelse', [])]", "While -> [('test', 'Name'), ('body', ['TryExcept', 'TryExcept', 'Assign', 'TryExcept', 'Print', 'Print', 'AugAssign']), ('orelse', [])]", "While -> [('test', 'Compare'), ('body', ['If', 'If']), ('orelse', [])]", "While -> [('test', 'Name'), ('body', ['Expr', 'TryExcept', 'Assign', 'If', 'Expr', 'Assign', 'TryExcept', 'Assign']), ('orelse', [])]", "While -> [('test', 'Name'), ('body', ['For', 'Expr']), ('orelse', [])]", "While -> [('test', 'Name'), ('body', ['Assign', 'Assign', 'For', 'If', 'If']), ('orelse', [])]", "While -> [('test', 'Name'), ('body', ['AugAssign', 'Assign', 'If', 'If']), ('orelse', [])]", "While -> [('test', 'Compare'), ('body', ['Expr', 'If', 'Assign']), ('orelse', [])]", "While -> [('test', 'Name'), ('body', ['Expr', 'If', 'Assign']), ('orelse', [])]", "While -> [('test', 'UnaryOp'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'For', 'If', 'Expr', 'Assign']), ('orelse', [])]", "While -> [('test', 'UnaryOp'), ('body', ['Assign', 'Assign', 'Expr', 'AugAssign', 'Assign']), ('orelse', [])]", "While -> [('test', 'Num'), ('body', ['Assign', 'If', 'If', 'Assign']), ('orelse', [])]", "While -> [('test', 'Call'), ('body', ['If']), ('orelse', [])]", "While -> [('test', 'Compare'), ('body', ['If', 'Assign', 'If']), ('orelse', [])]"], "Module": ["Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef'])]", "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'ClassDef'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'Assign', 'Assign'])]", "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'Import', 'Import', 'Import', 'Import', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]", "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'TryExcept', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'TryExcept', 'ClassDef', 'FunctionDef'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'ClassDef', 'FunctionDef'])]", "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'FunctionDef'])]", "Module -> [('body', ['Import', 'ImportFrom', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'FunctionDef', 'ClassDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'ClassDef', 'FunctionDef', 'Assign'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'Assign', 'ClassDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'With', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'Assign', 'If', 'ClassDef', 'Assign', 'ClassDef', 'Assign', 'Expr', 'FunctionDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'ImportFrom', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'FunctionDef', 'If'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'Import', 'ImportFrom', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'ClassDef', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'If'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'ClassDef', 'ClassDef', 'FunctionDef', 'FunctionDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import'])]", "Module -> [('body', ['Import', 'ImportFrom', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'Assign', 'ClassDef', 'ClassDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'If'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Expr', 'Assign', 'Expr', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'ImportFrom', 'Import', 'Import', 'ClassDef'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'ClassDef', 'Assign'])]", "Module -> [('body', ['Import', 'Import', 'Assign', 'Import', 'Expr', 'Assign', 'Expr', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Expr', 'Expr', 'ImportFrom', 'ImportFrom', 'Expr', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'TryExcept', 'TryExcept', 'TryExcept', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]", "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'ClassDef', 'FunctionDef'])]", "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'ClassDef'])]", "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'Import', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'ClassDef', 'ClassDef', 'Expr', 'Expr', 'ImportFrom', 'Expr', 'Assign', 'Assign'])]", "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'With', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'FunctionDef', 'ClassDef', 'ClassDef', 'ClassDef', 'FunctionDef'])]", "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'If', 'ClassDef', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'FunctionDef'])]", "Module -> [('body', ['Import', 'Expr', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom'])]", "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Import', 'ClassDef', 'ClassDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'Import', 'ImportFrom', 'If', 'FunctionDef', 'ClassDef', 'FunctionDef', 'Assign', 'ClassDef', 'ClassDef', 'Assign'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ClassDef', 'ClassDef', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'TryExcept', 'FunctionDef', 'If'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'FunctionDef', 'FunctionDef', 'Assign', 'Assign', 'Assign'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'Assign', 'Import', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]", "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]", "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'If'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'TryExcept', 'Assign', 'Assign', 'ClassDef'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]", "Module -> [('body', ['Expr', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ClassDef'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'ClassDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'FunctionDef', 'FunctionDef', 'If'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Expr', 'Assign', 'ClassDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'TryExcept', 'TryExcept', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'FunctionDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'FunctionDef', 'FunctionDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'ImportFrom', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'ClassDef', 'ClassDef', 'ClassDef', 'FunctionDef', 'FunctionDef', 'If'])]", "Module -> [('body', ['Import', 'Print', 'Print', 'Print', 'Assign', 'Print', 'Print', 'Print'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'TryExcept', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'FunctionDef', 'FunctionDef', 'ClassDef', 'ClassDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'ClassDef', 'ClassDef', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'ClassDef', 'FunctionDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'If'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'ClassDef', 'FunctionDef', 'Assign', 'Assign', 'Assign'])]", "Module -> [('body', ['Import', 'ImportFrom', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'FunctionDef', 'Expr', 'Assign', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'Assign', 'Expr', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'Import', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Expr', 'Assign', 'Assign', 'Assign', 'Print', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'While'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'Import', 'Import', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'FunctionDef', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'FunctionDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'Assign', 'FunctionDef', 'Assign', 'FunctionDef', 'Assign', 'FunctionDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'Assign'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'If'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'If'])]", "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'Assign', 'Assign', 'If', 'FunctionDef', 'Expr', 'FunctionDef', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'ClassDef', 'Assign', 'Assign', 'Expr'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign'])]", "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]", "Module -> [('body', ['Import', 'TryExcept', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'If', 'Assign', 'ClassDef', 'ClassDef', 'Assign', 'Assign', 'ClassDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'ClassDef', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]", "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'If'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'Expr', 'Expr', 'Expr', 'FunctionDef', 'ClassDef', 'FunctionDef', 'FunctionDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'Import', 'TryExcept', 'ImportFrom', 'ImportFrom', 'Assign', 'FunctionDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'Import', 'Assign', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'If'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'ImportFrom', 'TryExcept', 'TryExcept', 'Import', 'ClassDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'If'])]", "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'Import', 'Import', 'Import', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'FunctionDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'Import', 'Assign', 'FunctionDef', 'ClassDef', 'FunctionDef', 'FunctionDef', 'Import', 'Assign', 'Delete', 'ClassDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'If'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'ClassDef', 'FunctionDef'])]", "Module -> [('body', ['Import'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'Import', 'Import', 'Assign', 'ImportFrom', 'Expr', 'Delete', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'If'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ImportFrom', 'ClassDef'])]", "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'ClassDef', 'ClassDef', 'If'])]", "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'If', 'ClassDef'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'TryExcept', 'TryExcept', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'ImportFrom', 'ClassDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign'])]", "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'TryExcept', 'Import', 'ImportFrom', 'ImportFrom', 'Assign', 'TryExcept', 'Assign', 'ClassDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'ClassDef', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'If'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'TryExcept', 'TryExcept', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'ImportFrom', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'FunctionDef', 'If'])]", "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'TryExcept', 'Assign', 'FunctionDef', 'FunctionDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]", "Module -> [('body', ['Import', 'Assign', 'Expr', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'Import', 'Import', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'For', 'Expr', 'Assign', 'For', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Expr', 'Assign', 'Assign', 'Assign', 'While'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ClassDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ClassDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'ClassDef', 'FunctionDef', 'FunctionDef', 'If'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'Expr', 'ImportFrom', 'Import', 'Expr', 'ImportFrom', 'For', 'For'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'Assign', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'Assign', 'FunctionDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'TryExcept', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'Import', 'ImportFrom', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'FunctionDef', 'FunctionDef', 'If'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Expr', 'Import', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'ClassDef', 'Assign', 'FunctionDef', 'FunctionDef', 'ClassDef', 'Import', 'If', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'If', 'FunctionDef', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'If'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Assign', 'Expr', 'Expr', 'Import', 'ImportFrom', 'Import', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'Import', 'ClassDef', 'Import', 'If'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'ImportFrom', 'Import', 'ImportFrom', 'ImportFrom', 'Import', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'If'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'FunctionDef', 'Assign', 'FunctionDef', 'Assign', 'FunctionDef', 'Assign', 'FunctionDef', 'Assign', 'ClassDef', 'Expr'])]", "Module -> [('body', ['ImportFrom', 'Expr', 'Expr', 'Expr'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom'])]", "Module -> [('body', ['Import', 'ImportFrom', 'Import', 'ImportFrom', 'ImportFrom', 'Import', 'TryExcept', 'TryExcept', 'Assign', 'Assign', 'Expr', 'For'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'If'])]", "Module -> [('body', ['Import', 'ImportFrom', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'Assign', 'Expr', 'If'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'ClassDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]", "Module -> [('body', ['Import', 'Import', 'If', 'Import', 'If', 'If', 'Assign', 'FunctionDef', 'If'])]", "Module -> [('body', ['Import', 'Assign', 'Expr', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'Import', 'Import', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'For', 'Expr', 'Assign', 'Assign', 'Assign', 'While'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'Expr', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'Assign', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'FunctionDef', 'ClassDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'ClassDef', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]", "Module -> [('body', ['Import', 'If', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Expr', 'Expr', 'Assign', 'FunctionDef', 'Expr', 'ImportFrom', 'ClassDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'FunctionDef', 'If'])]", "Module -> [('body', ['Import', 'Assign', 'Expr', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'For', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'For', 'Assign', 'For', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Expr', 'Expr'])]", "Module -> [('body', ['Import', 'Expr', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'ImportFrom', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'ClassDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]", "Module -> [('body', ['Import', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'ImportFrom', 'TryExcept', 'Import', 'Import', 'Import', 'Import', 'TryExcept', 'FunctionDef', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'If', 'If', 'If', 'If', 'FunctionDef', 'If', 'If', 'If'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'ImportFrom', 'Import', 'Import', 'Import', 'Assign', 'ClassDef'])]", "Module -> [('body', ['Import', 'ImportFrom', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'TryExcept', 'Import', 'Import', 'Import', 'Import', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]", "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'FunctionDef'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'ClassDef', 'ClassDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'TryExcept', 'Assign', 'Assign', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'FunctionDef', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'TryExcept', 'ImportFrom', 'Expr', 'ClassDef'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'ClassDef', 'Expr', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'Assign', 'ClassDef', 'Assign', 'ClassDef', 'ClassDef', 'Assign', 'Assign', 'ClassDef', 'ClassDef', 'FunctionDef', 'Expr'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'TryExcept', 'Import', 'ImportFrom', 'Assign', 'ClassDef', 'ClassDef', 'FunctionDef', 'FunctionDef'])]", "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Expr', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'If'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef'])]", "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'FunctionDef', 'FunctionDef', 'If'])]", "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'FunctionDef', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'FunctionDef', 'FunctionDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'FunctionDef', 'ClassDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'Assign', 'Expr', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'If', 'For', 'Print', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Print', 'Print', 'Assign', 'Assign', 'Expr', 'For'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'ClassDef'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'FunctionDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'ClassDef', 'ClassDef', 'ClassDef', 'Assign'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'ImportFrom', 'Import', 'Assign', 'ImportFrom', 'Import', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'ImportFrom', 'Import', 'Import', 'Import', 'ImportFrom', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'TryExcept', 'ImportFrom', 'ClassDef', 'If'])]", "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'FunctionDef', 'Expr', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'TryExcept'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'FunctionDef', 'ClassDef', 'ClassDef', 'FunctionDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Expr', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'If'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ClassDef', 'FunctionDef', 'If'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Expr', 'Import', 'ClassDef', 'FunctionDef', 'If'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'ImportFrom', 'Expr', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'Assign'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'ClassDef', 'ClassDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'Import', 'Assign', 'FunctionDef', 'ClassDef', 'ClassDef', 'Assign', 'Assign', 'Assign', 'ClassDef', 'Assign'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'TryExcept', 'ImportFrom', 'ImportFrom', 'Assign', 'ClassDef'])]", "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'FunctionDef', 'Assign', 'Assign', 'ClassDef', 'Assign', 'FunctionDef', 'FunctionDef', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'ImportFrom', 'Import', 'Import', 'ImportFrom', 'Import', 'Import', 'Import', 'ClassDef'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'Assign', 'FunctionDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'TryExcept', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'ImportFrom', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'ImportFrom', 'ImportFrom', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'ClassDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'Expr', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'Import', 'Import', 'ClassDef'])]", "Module -> [('body', ['Import', 'ImportFrom', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'If'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'If', 'Print', 'Assign', 'Assign', 'Assign', 'Assign', 'Print', 'Print', 'Print', 'Print', 'Assign', 'If', 'Expr', 'Print', 'Print'])]", "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'Assign', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'Assign', 'ClassDef', 'ClassDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Assign', 'ClassDef'])]", "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'Expr', 'Expr', 'FunctionDef', 'ClassDef', 'FunctionDef'])]", "Module -> [('body', ['Import', 'ImportFrom', 'Import', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'Import', 'FunctionDef', 'ClassDef', 'ClassDef', 'ClassDef', 'FunctionDef', 'FunctionDef', 'ImportFrom', 'ClassDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ClassDef', 'If'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'ClassDef', 'ClassDef', 'FunctionDef', 'ClassDef', 'ClassDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]", "Module -> [('body', ['Import', 'Assign', 'Expr', 'ImportFrom', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'ImportFrom', 'ImportFrom', 'ClassDef'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'ClassDef'])]", "Module -> [('body', ['Import', 'Assign', 'Expr', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Expr', 'Expr', 'For', 'Expr', 'Expr', 'Expr', 'Assign', 'For', 'Expr'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'Expr', 'Import', 'ClassDef', 'FunctionDef', 'If'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'If', 'TryExcept', 'TryExcept', 'Assign', 'If', 'FunctionDef', 'FunctionDef', 'If', 'Assign', 'If', 'Assign', 'If', 'If', 'If', 'If', 'If', 'If', 'TryExcept', 'TryExcept', 'If', 'TryExcept', 'TryExcept', 'Import', 'If', 'If', 'FunctionDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]", "Module -> [('body', ['Expr', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'TryExcept', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]", "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]", "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'Import', 'Import', 'ImportFrom', 'Import', 'ImportFrom', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'Assign', 'ClassDef'])]", "Module -> [('body', ['Import', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'ImportFrom', 'Expr', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'TryExcept', 'TryExcept', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'ClassDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ClassDef', 'FunctionDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'If'])]", "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'ClassDef', 'ClassDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'Expr', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'FunctionDef', 'FunctionDef', 'ClassDef', 'ClassDef', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'If'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'ImportFrom', 'Import', 'ImportFrom', 'Import', 'ClassDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'Assign', 'FunctionDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Print', 'ImportFrom', 'For', 'Expr'])]", "Module -> [('body', ['Import', 'ImportFrom', 'Import', 'ImportFrom', 'Import', 'Import', 'ImportFrom', 'Import', 'ImportFrom', 'FunctionDef', 'ClassDef', 'Assign', 'Assign', 'ClassDef', 'If'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'FunctionDef', 'Assign', 'ClassDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'ClassDef'])]", "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'Expr', 'Assign', 'Assign', 'TryExcept', 'If', 'Assign', 'ImportFrom', 'Assign', 'Assign', 'For', 'Assign', 'For', 'Assign', 'For', 'FunctionDef', 'AugAssign'])]", "Module -> [('body', ['Import', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Expr', 'Print'])]", "Module -> [('body', ['Import', 'ImportFrom', 'Import', 'Import', 'Import', 'Import', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'If'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'If'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'ClassDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'Assign', 'Assign', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'Assign', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'Import', 'Expr', 'ImportFrom', 'Import', 'ImportFrom', 'Import', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'ClassDef', 'Assign'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'Expr'])]", "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'ClassDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'If'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'ClassDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'Import', 'Import', 'FunctionDef', 'If'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'Global', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'If'])]", "Module -> [('body', ['Import', 'Expr', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'ImportFrom', 'ImportFrom', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'ImportFrom', 'Import', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'Assign', 'ClassDef', 'ClassDef', 'ClassDef', 'Assign', 'ClassDef', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'ClassDef', 'If'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'FunctionDef'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'ClassDef', 'Assign', 'FunctionDef', 'ClassDef', 'ClassDef', 'Assign'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'ClassDef', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Expr', 'Expr'])]", "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'ClassDef', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'FunctionDef'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'Import', 'Import', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'ClassDef', 'ClassDef', 'FunctionDef', 'ClassDef', 'FunctionDef', 'FunctionDef', 'Assign', 'TryExcept', 'For', 'For', 'For', 'Expr', 'Assign', 'For', 'Assign', 'Expr', 'Expr'])]", "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'Assign', 'Assign', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'If'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'Import', 'Import', 'Import', 'Assign', 'Assign', 'ClassDef', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'FunctionDef'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Expr', 'Import', 'ClassDef', 'FunctionDef', 'If'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'ClassDef', 'ClassDef', 'ClassDef', 'FunctionDef', 'Expr', 'Expr', 'Expr', 'Expr'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'If'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'TryExcept', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'Assign', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'ClassDef'])]", "Module -> [('body', ['Import', 'Assign', 'Expr', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'For', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'For', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Print', 'Print', 'Expr', 'Expr', 'Expr', 'Expr'])]", "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'ImportFrom', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'ClassDef', 'ClassDef', 'Assign', 'FunctionDef', 'ClassDef', 'ClassDef', 'FunctionDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'ClassDef', 'Assign', 'FunctionDef', 'If'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'FunctionDef', 'ClassDef', 'If'])]", "Module -> [('body', ['Import', 'Expr', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'ClassDef', 'If'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'TryExcept', 'TryExcept', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]", "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'Assign', 'Assign', 'FunctionDef', 'Import', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]", "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'ImportFrom', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'ClassDef', 'ClassDef', 'FunctionDef'])]", "Module -> [('body', ['Import', 'TryExcept', 'TryExcept', 'TryExcept', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'FunctionDef', 'ClassDef', 'ClassDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'ClassDef', 'ClassDef', 'FunctionDef', 'ClassDef', 'Assign'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'ImportFrom', 'ImportFrom', 'Import', 'ImportFrom', 'Assign', 'Assign', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'FunctionDef', 'FunctionDef', 'ClassDef', 'FunctionDef', 'If'])]", "Module -> [('body', ['Import', 'ClassDef', 'Assign', 'Assign', 'Assign', 'For', 'Expr', 'Expr', 'Expr'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'Assign', 'If', 'Import', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'Assign', 'Assign', 'Assign', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'Assign', 'If'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'Import', 'Assign', 'ClassDef', 'ClassDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'Import', 'TryExcept', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'FunctionDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'If'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'ClassDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'ClassDef', 'FunctionDef', 'ClassDef', 'FunctionDef', 'ClassDef', 'FunctionDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'FunctionDef', 'Assign', 'For', 'For', 'If', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'For', 'For'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'Import', 'ClassDef', 'FunctionDef', 'ClassDef', 'ClassDef', 'ClassDef', 'FunctionDef'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'ImportFrom', 'TryExcept', 'Assign', 'FunctionDef', 'FunctionDef', 'Assign', 'Assign', 'Expr', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'If'])]", "Module -> [('body', ['Import', 'TryExcept', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'If'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'ImportFrom', 'FunctionDef', 'If'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'FunctionDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'Import', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Assign', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'ClassDef', 'If'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'Assign', 'ClassDef'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'ImportFrom', 'Assign', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'Assign', 'Expr', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'If'])]", "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'Import', 'ClassDef'])]", "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'FunctionDef', 'ClassDef', 'ClassDef', 'FunctionDef', 'ClassDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'ClassDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'Assign', 'FunctionDef', 'ClassDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef'])]", "Module -> [('body', ['Import', 'Assign', 'Expr', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Print', 'Assign', 'Assign', 'Print', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Assign', 'Assign', 'For', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'For', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Print', 'Print', 'Expr', 'Expr'])]", "Module -> [('body', ['Expr', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'ClassDef', 'FunctionDef', 'If'])]", "Module -> [('body', ['Import', 'ImportFrom', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'FunctionDef', 'ClassDef', 'ClassDef', 'ClassDef', 'FunctionDef', 'If'])]", "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'FunctionDef', 'If'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'ImportFrom', 'Import', 'ImportFrom', 'Import', 'Import', 'Import', 'Assign', 'Assign', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'If'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'If', 'ImportFrom', 'Import', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'If'])]", "Module -> [('body', ['Import', 'Import', 'Assign', 'Assign', 'Assign', 'Assign', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'If'])]", "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'Assign'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'Import', 'ImportFrom', 'If', 'FunctionDef', 'If', 'ClassDef', 'FunctionDef', 'Assign', 'ClassDef', 'ClassDef', 'Assign'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'ImportFrom', 'Import', 'Import', 'Import', 'ClassDef', 'If'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef'])]", "Module -> [('body', ['Import', 'Assign', 'Expr', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'For', 'Assign', 'Expr', 'Assign', 'For', 'Assign', 'For', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Expr', 'Expr'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'ImportFrom', 'ClassDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'FunctionDef'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'Expr', 'ClassDef'])]", "Module -> [('body', ['Import', 'Import', 'Expr', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef'])]", "Module -> [('body', ['Import', 'ImportFrom', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'ClassDef'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'FunctionDef', 'ClassDef', 'FunctionDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'TryExcept', 'TryExcept', 'TryExcept', 'ClassDef', 'FunctionDef'])]", "Module -> [('body', ['Import', 'Assign', 'Expr', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Print', 'Assign', 'Assign', 'Assign', 'Print', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Assign', 'Assign', 'For', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'For', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Print', 'Print', 'Expr', 'Expr', 'Expr', 'Expr'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'TryExcept', 'ClassDef', 'ClassDef', 'FunctionDef', 'ClassDef', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'ClassDef', 'ClassDef', 'ClassDef', 'Assign', 'ClassDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'TryExcept', 'Assign', 'Assign', 'Assign', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'FunctionDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'If'])]", "Module -> [('body', ['Import', 'Expr', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'Assign', 'Assign', 'Assign', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'FunctionDef', 'FunctionDef', 'ClassDef', 'Assign', 'Expr', 'Expr'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'AugAssign', 'If', 'Assign', 'AugAssign', 'AugAssign', 'AugAssign'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'ClassDef', 'ClassDef', 'If'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'If'])]", "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Expr', 'Assign', 'ClassDef', 'ClassDef', 'ClassDef', 'If'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'Import', 'ClassDef', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'If'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'FunctionDef', 'If'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'Import', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'ClassDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'TryExcept', 'Import', 'Assign', 'ClassDef', 'ClassDef', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'ClassDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'TryExcept', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'ClassDef', 'Assign', 'Assign', 'FunctionDef'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'Assign', 'Expr', 'Assign', 'Assign', 'AugAssign', 'AugAssign', 'AugAssign', 'AugAssign', 'Assign', 'For', 'If'])]", "Module -> [('body', ['Import', 'ImportFrom', 'TryExcept', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'FunctionDef'])]", "Module -> [('body', ['Import', 'ImportFrom', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'TryExcept', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'TryExcept', 'TryExcept', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'TryExcept', 'Assign', 'While'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'ClassDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'If'])]", "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Expr', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'If'])]", "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'Import', 'Expr', 'Expr', 'Expr', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'Assign', 'ClassDef', 'Assign', 'ClassDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'If'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'Expr', 'ImportFrom', 'ClassDef', 'ClassDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'ImportFrom', 'Import', 'ImportFrom', 'ImportFrom', 'Import', 'ClassDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'FunctionDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'ClassDef', 'If'])]", "Module -> [('body', ['Import', 'ImportFrom', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Assign'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'TryExcept', 'Assign', 'Assign', 'ClassDef'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'Assign', 'Assign', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'Expr', 'Expr'])]", "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'ClassDef', 'ClassDef', 'FunctionDef', 'If'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'ImportFrom', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Expr'])]", "Module -> [('body', ['Import', 'Assign', 'Assign', 'Expr', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'ClassDef', 'ClassDef', 'Assign', 'Assign', 'ClassDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Expr', 'Assign', 'Expr', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'TryExcept'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ImportFrom', 'FunctionDef', 'FunctionDef', 'Expr'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'Expr'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Assign', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'ClassDef', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'Assign', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'Expr', 'Expr', 'Expr', 'Expr', 'Import', 'Expr', 'Import', 'Expr'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'TryExcept', 'TryExcept', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'FunctionDef', 'Expr'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'ImportFrom', 'Import', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'ImportFrom', 'Assign', 'Assign', 'FunctionDef', 'ClassDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ClassDef', 'If'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'If'])]", "Module -> [('body', ['Import', 'ImportFrom', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'Import', 'FunctionDef', 'FunctionDef', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr'])]", "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'ClassDef', 'FunctionDef'])]", "Module -> [('body', ['Import', 'Expr', 'Import', 'ImportFrom', 'ImportFrom', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Expr', 'Assign', 'ClassDef', 'If'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'If'])]", "Module -> [('body', ['Import', 'ClassDef', 'FunctionDef', 'FunctionDef'])]", "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ClassDef'])]", "Module -> [('body', ['Import', 'ImportFrom', 'Import', 'Import', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef'])]", "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'FunctionDef', 'FunctionDef', 'If'])]", "Module -> [('body', ['Import', 'ImportFrom', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'Expr', 'Expr', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ImportFrom', 'ClassDef', 'FunctionDef', 'ImportFrom', 'FunctionDef'])]", "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'If'])]", "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'ClassDef', 'FunctionDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'TryExcept', 'Import', 'Import', 'Import', 'Import', 'Import', 'Global', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]", "Module -> [('body', ['Import', 'ImportFrom', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'Import', 'Assign', 'ClassDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Expr', 'ClassDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Assign', 'Assign', 'Assign', 'ClassDef', 'FunctionDef', 'Import', 'FunctionDef', 'Import', 'Import', 'If'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'ImportFrom', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'Assign', 'FunctionDef', 'Assign', 'ClassDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'If', 'ClassDef', 'ClassDef', 'If'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'FunctionDef', 'Assign', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'Assign', 'FunctionDef', 'Assign', 'FunctionDef', 'Assign', 'FunctionDef', 'Assign'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'Import', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'ClassDef', 'ClassDef', 'ClassDef', 'If'])]", "Module -> [('body', ['Import', 'Import', 'TryExcept', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'If', 'ClassDef', 'ImportFrom', 'ImportFrom', 'ImportFrom'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'If', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'Import', 'ImportFrom', 'ImportFrom', 'Import', 'FunctionDef'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'FunctionDef', 'ClassDef', 'ClassDef', 'ClassDef', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'ClassDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'ClassDef', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]", "Module -> [('body', ['Import', 'ImportFrom', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'FunctionDef'])]", "Module -> [('body', ['Import', 'ImportFrom', 'Import', 'Import', 'Import', 'TryExcept', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Expr', 'Expr', 'Expr', 'If', 'ClassDef'])]", "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'Assign', 'Assign', 'Assign', 'Assign', 'ClassDef', 'ClassDef', 'ClassDef', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]", "Module -> [('body', ['Import', 'Expr', 'Import', 'Import', 'Expr', 'ImportFrom', 'Expr', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Expr', 'Expr', 'Expr', 'ImportFrom', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Import', 'FunctionDef', 'FunctionDef', 'Expr'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'ClassDef', 'Assign', 'Assign', 'ClassDef', 'If'])]", "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'Import', 'Expr', 'Expr', 'Expr', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Expr', 'Assign', 'Assert', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'TryExcept', 'TryExcept', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'ClassDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Expr'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'ClassDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'FunctionDef', 'FunctionDef', 'Assign', 'Assign', 'Assign'])]", "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Expr', 'TryExcept', 'Assign', 'TryExcept', 'Assign', 'FunctionDef', 'FunctionDef', 'ClassDef', 'Expr', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'Assign', 'Assign'])]", "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr'])]", "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'ClassDef', 'ClassDef', 'Assign', 'ClassDef', 'ClassDef', 'Assign', 'ClassDef', 'Assign', 'ClassDef', 'Assign', 'ClassDef', 'Assign', 'ClassDef', 'Assign', 'ClassDef', 'Assign', 'ClassDef', 'Assign', 'ClassDef', 'Assign', 'ClassDef', 'Assign', 'ClassDef', 'ClassDef', 'Assign', 'ClassDef', 'Assign', 'ClassDef', 'Assign', 'ClassDef', 'Assign', 'ClassDef', 'Assign', 'ClassDef', 'Assign', 'ClassDef', 'Assign', 'ClassDef', 'Assign', 'ClassDef', 'Assign', 'ClassDef', 'ClassDef', 'Assign', 'ClassDef', 'ClassDef', 'Assign', 'ClassDef', 'Assign', 'ClassDef', 'ClassDef', 'Assign', 'ClassDef', 'Assign', 'ClassDef', 'Assign', 'ClassDef', 'ClassDef', 'Assign', 'ClassDef', 'Assign', 'ClassDef', 'Assign', 'ClassDef', 'ClassDef', 'Assign', 'ClassDef', 'Assign', 'ClassDef', 'Assign', 'ClassDef', 'Assign', 'ClassDef', 'Assign', 'ClassDef', 'Assign', 'ClassDef', 'Assign', 'ClassDef', 'Assign', 'ClassDef', 'Assign', 'ClassDef', 'Assign', 'ClassDef', 'Assign', 'Assign', 'ClassDef', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'TryExcept', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'ClassDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]", "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'FunctionDef', 'FunctionDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'ClassDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'ImportFrom', 'Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'TryExcept', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'ClassDef', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'FunctionDef', 'ClassDef', 'FunctionDef', 'FunctionDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'ImportFrom', 'If', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'ImportFrom', 'Import', 'ImportFrom', 'Import', 'Import', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'If', 'ClassDef', 'Assign', 'FunctionDef', 'FunctionDef', 'Assign'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'FunctionDef', 'FunctionDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'ImportFrom', 'TryExcept', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'TryExcept', 'Expr', 'Assign', 'ClassDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'ClassDef', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]", "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'If', 'ClassDef', 'ClassDef', 'ClassDef', 'Assign'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'For'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'Import', 'TryExcept', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'FunctionDef', 'ClassDef', 'ClassDef', 'Expr', 'Expr'])]", "Module -> [('body', ['Import', 'Assign', 'Expr', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Expr', 'Expr', 'Assign', 'For', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Print', 'Print', 'Expr', 'Expr'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'If', 'FunctionDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'Import', 'Import', 'ClassDef', 'ClassDef', 'FunctionDef', 'If'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'Assign', 'ClassDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]", "Module -> [('body', ['Import', 'Expr', 'Import', 'ImportFrom', 'ImportFrom', 'Import', 'ImportFrom', 'Expr', 'ImportFrom', 'Expr', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'For', 'ClassDef', 'Assign', 'Expr', 'Expr'])]", "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'ClassDef', 'ClassDef', 'If'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'ClassDef', 'ClassDef', 'FunctionDef', 'FunctionDef', 'Assign'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'FunctionDef', 'Assign', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'Assign', 'FunctionDef', 'Assign', 'FunctionDef', 'Assign', 'FunctionDef', 'Assign'])]", "Module -> [('body', ['Import', 'ImportFrom', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'TryExcept', 'Expr'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Assign', 'ClassDef', 'ClassDef', 'ClassDef', 'Assign', 'ClassDef'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'If'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'FunctionDef', 'FunctionDef'])]", "Module -> [('body', ['Import', 'Assign', 'ImportFrom', 'Expr', 'ImportFrom', 'ImportFrom', 'Assign', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'FunctionDef', 'Expr', 'Expr', 'Expr', 'Expr', 'ClassDef', 'Assign', 'Assign'])]", "Module -> [('body', ['Import', 'Expr', 'ImportFrom', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'TryExcept', 'ImportFrom', 'ClassDef', 'FunctionDef', 'If'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'Assign', 'Assign', 'Assign', 'ClassDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'TryExcept', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'FunctionDef', 'FunctionDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'ClassDef', 'ClassDef', 'Assign', 'Assign', 'FunctionDef', 'ClassDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'FunctionDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'TryExcept', 'TryExcept', 'Import', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'If', 'ClassDef', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'ClassDef', 'ClassDef', 'ClassDef', 'FunctionDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'FunctionDef', 'FunctionDef'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'FunctionDef', 'ClassDef', 'ClassDef', 'ClassDef', 'Assign', 'Assign', 'Assign', 'Assign', 'ClassDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'ImportFrom', 'Import', 'ImportFrom', 'Assign', 'Import', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'If'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Assign', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'Assign', 'Assign', 'Assign', 'ClassDef', 'FunctionDef', 'ClassDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'If'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'ClassDef', 'ClassDef', 'If'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'For', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'For', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'For', 'For', 'Assign', 'Expr', 'Expr', 'Expr'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'ImportFrom', 'If', 'ClassDef'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'FunctionDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'If'])]", "Module -> [('body', ['Import', 'Expr', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'If', 'Expr', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'ClassDef', 'Assign', 'ClassDef', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'FunctionDef', 'FunctionDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'FunctionDef', 'FunctionDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'ImportFrom', 'Import', 'ImportFrom', 'ClassDef', 'FunctionDef', 'If'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'ClassDef', 'ClassDef', 'FunctionDef', 'If'])]", "Module -> [('body', ['Import', 'Import', 'Assign', 'Assign', 'Assign', 'Assign', 'ClassDef', 'Import', 'Import', 'Import', 'Import', 'FunctionDef', 'If'])]", "Module -> [('body', ['Import', 'ImportFrom', 'Import', 'ClassDef', 'Assign', 'Assign', 'Assign', 'Assign'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'ImportFrom', 'Import', 'Assign', 'ClassDef', 'ClassDef', 'FunctionDef', 'If'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'ImportFrom', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'If', 'Assign', 'Assign', 'Assign', 'ClassDef', 'FunctionDef', 'ClassDef', 'Assign', 'Assign', 'Assign', 'Assign', 'ClassDef', 'Assign', 'ClassDef', 'Assign', 'Assign', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'Assign', 'Assign', 'For', 'FunctionDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'TryExcept', 'ClassDef'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'If', 'If', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'Import', 'ClassDef', 'If'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'FunctionDef', 'FunctionDef', 'Assign', 'Expr', 'Expr', 'Expr'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ImportFrom', 'ImportFrom', 'ClassDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'If', 'FunctionDef', 'Assign', 'Assign', 'FunctionDef', 'Assign', 'FunctionDef', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Expr', 'Assign', 'FunctionDef', 'Expr', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'ImportFrom', 'ImportFrom', 'ClassDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'Import', 'Import', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'ClassDef', 'ClassDef', 'FunctionDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'Import', 'ImportFrom', 'Import', 'ImportFrom', 'Import', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ImportFrom', 'ClassDef', 'ClassDef', 'ClassDef', 'If'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'TryExcept', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'FunctionDef', 'FunctionDef'])]", "Module -> [('body', ['Import', 'Assign', 'Expr', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'For', 'Assign', 'Expr', 'Expr', 'Assign', 'For', 'Assign', 'For', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Expr', 'Expr'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'ClassDef', 'ClassDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'Import', 'Expr', 'Assign', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'FunctionDef', 'Expr', 'Expr'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Assign', 'Assign', 'Assign', 'Assign', 'ClassDef', 'ClassDef', 'Assign', 'Assign', 'ClassDef', 'Assign', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'Assign', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'ImportFrom', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ClassDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'If'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ClassDef', 'ClassDef', 'FunctionDef', 'FunctionDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'ImportFrom', 'ClassDef'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'If', 'ImportFrom', 'ImportFrom', 'ClassDef'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'FunctionDef', 'FunctionDef', 'TryExcept', 'If'])]", "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'FunctionDef', 'If'])]", "Module -> [('body', ['Import', 'Expr', 'Import', 'ImportFrom', 'ImportFrom', 'Import', 'ImportFrom', 'ImportFrom', 'Expr', 'ImportFrom', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'For', 'Assign', 'Expr', 'Expr'])]", "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'TryExcept', 'TryExcept', 'Import', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'ClassDef', 'Assign', 'ClassDef', 'Assign', 'ClassDef', 'Assign', 'ClassDef', 'Assign'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'Import', 'ImportFrom', 'Import', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'For'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'ClassDef', 'FunctionDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'Assign', 'Delete', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]", "Module -> [('body', ['Import', 'ImportFrom', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'ClassDef', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ClassDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'TryExcept', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'FunctionDef', 'ClassDef', 'FunctionDef', 'Expr', 'Expr', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'FunctionDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'ClassDef', 'ClassDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import'])]", "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'If'])]", "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'If'])]", "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'TryExcept', 'TryExcept', 'Assign', 'ClassDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'Assign', 'Assign', 'Assign', 'ClassDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]", "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'TryExcept', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'TryExcept', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'FunctionDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'Assign', 'ImportFrom', 'Expr', 'Expr', 'Import', 'Import', 'Assign', 'ImportFrom', 'Expr', 'Expr', 'Import', 'Import', 'Import', 'Assign', 'Assign', 'Assign', 'Expr', 'Import', 'Import', 'Expr', 'Expr', 'Import', 'Import', 'Expr', 'Expr', 'Import', 'Import', 'Expr', 'Expr'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Assign', 'Assign', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'AugAssign', 'Assign', 'Expr', 'Import', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'While', 'Expr'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ClassDef'])]", "Module -> [('body', ['Import', 'Assign', 'TryExcept', 'Import', 'Import', 'Import', 'ImportFrom', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'Import', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'ClassDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'FunctionDef', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Expr', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'FunctionDef', 'Assign', 'TryExcept', 'TryExcept', 'TryExcept', 'TryExcept', 'TryExcept', 'TryExcept', 'FunctionDef', 'FunctionDef', 'Import', 'Assign', 'FunctionDef', 'ClassDef', 'ClassDef', 'FunctionDef', 'FunctionDef', 'If'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'FunctionDef', 'FunctionDef', 'If'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'TryExcept', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'If', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]", "Module -> [('body', ['Import', 'Assign', 'Expr', 'ImportFrom', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'ImportFrom', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'TryExcept', 'ImportFrom', 'ClassDef'])]", "Module -> [('body', ['Import', 'ImportFrom', 'Import', 'Import', 'ImportFrom', 'Import', 'Import', 'ClassDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'TryExcept', 'ImportFrom', 'Assign', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'If', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'If'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'Assign', 'Expr', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'Assign', 'For', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr'])]", "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'Import', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'If'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'ClassDef', 'FunctionDef', 'FunctionDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ClassDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'ClassDef', 'Expr'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'TryExcept', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'TryExcept', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'If'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'Import', 'Assign', 'ClassDef', 'ClassDef', 'FunctionDef', 'If'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]", "Module -> [('body', ['Import', 'Expr', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'FunctionDef', 'FunctionDef'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'FunctionDef', 'Assign', 'ClassDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'FunctionDef', 'Expr'])]", "Module -> [('body', ['Import', 'Expr', 'ImportFrom', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'FunctionDef', 'If'])]", "Module -> [('body', ['ImportFrom', 'Assign', 'Print', 'Assign', 'Assign', 'Print'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'FunctionDef', 'ClassDef', 'ClassDef', 'Assign', 'FunctionDef', 'If'])]", "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'FunctionDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'Assign', 'Assign', 'Assign', 'Assign', 'ClassDef', 'FunctionDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'FunctionDef', 'ClassDef', 'FunctionDef', 'ClassDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Expr', 'Expr'])]", "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'FunctionDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'ImportFrom', 'ImportFrom'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'Assign', 'ClassDef'])]", "Module -> [('body', ['Import', 'Assign', 'Expr', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Print', 'Assign', 'Assign', 'Assign', 'Print', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Assign', 'Assign', 'For', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'For', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Print', 'Print', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'FunctionDef', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'Assign', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'Assign', 'FunctionDef', 'Assign', 'FunctionDef', 'Assign', 'Expr', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'Assign', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'Assign', 'Assign', 'Assign', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'FunctionDef', 'FunctionDef'])]", "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'FunctionDef', 'If'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'ClassDef', 'ClassDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'Expr', 'ImportFrom', 'Expr', 'ImportFrom', 'Expr', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Expr', 'Expr', 'ImportFrom', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'ImportFrom', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'ImportFrom', 'Expr', 'Expr', 'Expr'])]", "Module -> [('body', ['Import', 'Assign', 'Expr', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Assign', 'Assign'])]", "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'If'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'ClassDef', 'ClassDef', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign'])]", "Module -> [('body', ['Import', 'ImportFrom', 'Import', 'Import', 'Import', 'ImportFrom', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'Import', 'Assign', 'ClassDef', 'ClassDef', 'FunctionDef', 'Expr'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'FunctionDef', 'Assign', 'FunctionDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'ClassDef', 'If'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Expr', 'FunctionDef', 'Expr', 'FunctionDef', 'Expr', 'FunctionDef', 'Expr', 'FunctionDef', 'Expr', 'FunctionDef', 'Expr'])]", "Module -> [('body', ['Import', 'TryExcept', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'ClassDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'FunctionDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'Import', 'Import', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'Assign', 'FunctionDef', 'If'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]", "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'FunctionDef', 'FunctionDef', 'Assign', 'If'])]", "Module -> [('body', ['Import', 'Import', 'Assign', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'ImportFrom', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'FunctionDef', 'ClassDef', 'If'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'ClassDef', 'ClassDef', 'ClassDef', 'FunctionDef', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'ClassDef', 'FunctionDef'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'ClassDef', 'ClassDef', 'If'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Expr', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'FunctionDef', 'ClassDef', 'If'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'ClassDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'TryExcept', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'If'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'ClassDef', 'If'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'TryExcept', 'TryExcept', 'TryExcept', 'ClassDef', 'ClassDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'Import', 'Assign', 'Assign', 'ClassDef'])]", "Module -> [('body', ['ImportFrom', 'Assign', 'Print', 'Assign', 'Assign', 'Assign', 'Assign', 'Print', 'Print'])]", "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'FunctionDef', 'FunctionDef', 'If'])]", "Module -> [('body', ['Import', 'Assign', 'Expr', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'FunctionDef', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'For', 'Expr'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'Assign'])]", "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]", "Module -> [('body', ['Import', 'Assign', 'Expr', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'For', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr'])]", "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'FunctionDef', 'FunctionDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'If'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'ClassDef', 'ClassDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'FunctionDef', 'FunctionDef', 'ClassDef', 'If'])]", "Module -> [('body', ['Import', 'TryExcept', 'Import', 'ImportFrom', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'Assign', 'Assign', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'Expr', 'If'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'TryExcept', 'Assign', 'FunctionDef', 'Assign', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Expr', 'ImportFrom', 'Expr', 'ClassDef', 'ClassDef', 'FunctionDef', 'If'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'If', 'Print', 'Print', 'Assign', 'Assign', 'If', 'For'])]", "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'FunctionDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'Import', 'Expr', 'ImportFrom', 'ImportFrom', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Assign', 'For', 'Assign', 'For', 'Assign', 'For', 'Assign', 'Assign', 'For'])]", "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'Import', 'ClassDef', 'ClassDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'If', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'FunctionDef', 'While'])]", "Module -> [('body', ['Import', 'Expr', 'Import', 'ImportFrom', 'Import', 'ImportFrom', 'Import', 'Import', 'ClassDef'])]", "Module -> [('body', ['Import', 'Assign', 'Expr', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'For', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'For', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Print', 'Print', 'Expr', 'Expr', 'Expr', 'Expr'])]", "Module -> [('body', ['Import', 'Import', 'Assign', 'If', 'For', 'If', 'ImportFrom', 'Expr', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'FunctionDef', 'ImportFrom', 'Expr', 'FunctionDef', 'FunctionDef', 'Assign', 'If'])]", "Module -> [('body', ['Import', 'Assign', 'Expr', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'Import', 'Import', 'FunctionDef', 'FunctionDef', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Expr', 'Assign', 'Assign', 'Assign', 'Print', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'While'])]", "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'ClassDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'Assign', 'If'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'Print'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'ClassDef', 'If'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'FunctionDef', 'FunctionDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'Assign', 'TryExcept', 'Assign', 'TryExcept', 'ClassDef', 'ClassDef', 'If'])]", "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'TryExcept', 'TryExcept', 'If', 'Assign', 'If', 'ClassDef'])]", "Module -> [('body', ['Import', 'Import', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'If'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'FunctionDef', 'FunctionDef', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Assign', 'ClassDef', 'ClassDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'If'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'Assign', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'If'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]", "Module -> [('body', ['Import', 'ImportFrom', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'ClassDef', 'ClassDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'If', 'ClassDef', 'ClassDef', 'ClassDef', 'TryExcept', 'ClassDef'])]", "Module -> [('body', ['Import', 'Assign', 'Expr', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'Import', 'Import', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'For', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'For', 'Expr', 'Assign', 'For', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Expr', 'Assign', 'Assign', 'Assign', 'While'])]", "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'Import', 'ImportFrom', 'ClassDef', 'If'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'ClassDef', 'Assign', 'ClassDef', 'ClassDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'ClassDef', 'ClassDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'ClassDef', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'ImportFrom', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ImportFrom', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]", "Module -> [('body', ['Import', 'ImportFrom', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Print', 'TryExcept', 'Expr'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'ClassDef', 'Assign', 'ClassDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'ClassDef', 'ClassDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'TryExcept', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Expr', 'Expr', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'ClassDef', 'FunctionDef', 'FunctionDef'])]", "Module -> [('body', ['Import', 'ImportFrom', 'Import', 'Import', 'Import', 'Import', 'Import', 'TryExcept', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'ClassDef', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'Import', 'Expr', 'FunctionDef', 'FunctionDef', 'If'])]", "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'ImportFrom', 'Import', 'ImportFrom', 'ClassDef', 'FunctionDef', 'If'])]", "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'If'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'ClassDef', 'Assign', 'ClassDef', 'Assign', 'ClassDef', 'Assign', 'ClassDef', 'Assign', 'ClassDef', 'Assign', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'Import', 'Import', 'FunctionDef', 'Assign', 'FunctionDef', 'ClassDef', 'ClassDef', 'FunctionDef', 'FunctionDef', 'Expr'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Assign', 'If', 'If', 'Assign', 'Assign', 'Assign', 'ClassDef', 'ClassDef', 'ClassDef', 'If'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'Expr', 'ClassDef', 'If'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'ClassDef', 'If'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'ImportFrom', 'Import', 'ClassDef', 'ClassDef', 'ClassDef', 'Assign', 'ClassDef', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'If'])]", "Module -> [('body', ['Import', 'Assign', 'FunctionDef', 'FunctionDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'ImportFrom', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'TryExcept', 'Assign', 'If', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'Assign'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'If', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'TryExcept', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'If', 'Assign', 'ClassDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'FunctionDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'If'])]", "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'Import', 'Import', 'FunctionDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'If'])]", "Module -> [('body', ['Import', 'Assign', 'Expr', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Print', 'For', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Print', 'Print', 'For', 'Expr', 'Expr'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'Import', 'Import', 'Assign', 'Assign', 'Assign', 'Assign', 'ClassDef', 'ClassDef', 'If'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef'])]", "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'If', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'If'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ClassDef', 'If'])]", "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'Import', 'ImportFrom', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'FunctionDef', 'FunctionDef', 'ClassDef', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'Assign', 'FunctionDef', 'ClassDef', 'ClassDef', 'ClassDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'ClassDef', 'ClassDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'If'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Expr'])]", "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'Assign', 'ClassDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Assign', 'Assign', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'FunctionDef', 'FunctionDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Assign', 'Assign', 'Print', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'TryExcept', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Print'])]", "Module -> [('body', ['Import', 'Expr', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'ClassDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'FunctionDef', 'ClassDef', 'FunctionDef', 'FunctionDef', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'ClassDef', 'ClassDef', 'If'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'TryExcept', 'Assign', 'ClassDef', 'ClassDef'])]", "Module -> [('body', ['Expr', 'Assign', 'Assign', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'Import', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'FunctionDef', 'FunctionDef', 'If'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ImportFrom'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'FunctionDef', 'If'])]", "Module -> [('body', ['Import', 'Assign', 'Expr', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'For', 'Assign', 'For', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Print', 'Print', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr'])]", "Module -> [('body', ['Import', 'ImportFrom', 'Import', 'Import', 'Import', 'Import', 'Assign', 'FunctionDef', 'FunctionDef', 'ClassDef', 'If'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'ClassDef', 'If'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'For', 'Assign'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'Assign', 'TryExcept', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]", "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'If', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'If'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Assign', 'ClassDef', 'FunctionDef', 'FunctionDef', 'If'])]", "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'TryExcept', 'Assign', 'Assign', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'FunctionDef', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'FunctionDef', 'FunctionDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'Expr'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'If'])]", "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'Assign', 'Assign', 'Assign', 'TryExcept', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'FunctionDef', 'If'])]", "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'ClassDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'If', 'ImportFrom', 'ImportFrom', 'Import', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'If'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'FunctionDef'])]", "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'Import', 'ImportFrom', 'ImportFrom', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'TryExcept', 'TryExcept', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'ClassDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Expr', 'Assign', 'Expr', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Expr', 'ImportFrom', 'ImportFrom', 'Expr', 'ImportFrom', 'Expr', 'ImportFrom', 'Expr', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'Import', 'Assign', 'Assign', 'FunctionDef', 'ClassDef', 'ClassDef', 'FunctionDef', 'FunctionDef'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'ImportFrom', 'Assign', 'ClassDef', 'Assign', 'FunctionDef', 'FunctionDef', 'Assign', 'Assign', 'Expr', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'If'])]", "Module -> [('body', ['Import', 'Assign', 'Expr', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'For', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr'])]", "Module -> [('body', ['Import', 'FunctionDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'If', 'Assign', 'Assign', 'If', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'ClassDef', 'FunctionDef'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'FunctionDef', 'FunctionDef'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'Import', 'Import', 'Import', 'ClassDef', 'If'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'Import', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'If'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'ClassDef'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'FunctionDef', 'FunctionDef'])]", "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'FunctionDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'Import', 'Assign', 'Assign', 'ClassDef', 'If'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'ClassDef', 'Assign', 'FunctionDef', 'Assign', 'FunctionDef', 'Assign', 'Assign', 'FunctionDef', 'ClassDef'])]", "Module -> [('body', ['Expr', 'Import', 'Import', 'Import', 'Import', 'Import', 'Assign', 'Assign', 'Assign', 'ClassDef', 'ClassDef', 'Assign', 'Assign', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'ClassDef', 'FunctionDef', 'ClassDef', 'FunctionDef', 'FunctionDef'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'ClassDef', 'ClassDef', 'FunctionDef', 'FunctionDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'TryExcept', 'ClassDef', 'TryExcept', 'If', 'If', 'FunctionDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Assign', 'Assign', 'Import', 'Assign', 'ClassDef', 'ClassDef', 'If'])]", "Module -> [('body', ['Import', 'Assign', 'Expr', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'For', 'Assign', 'Expr', 'Expr', 'Assign', 'For', 'Assign', 'For', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'For', 'Expr', 'Expr'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'If'])]", "Module -> [('body', ['Import', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]", "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ClassDef', 'FunctionDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'Import', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'Expr', 'FunctionDef', 'ClassDef', 'FunctionDef'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'Import', 'Assign', 'Assign', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'ClassDef', 'FunctionDef', 'ClassDef', 'FunctionDef', 'ClassDef', 'FunctionDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'ImportFrom', 'Expr', 'Import', 'Expr', 'ImportFrom', 'Import', 'Assign', 'For'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'ClassDef'])]", "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]", "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'ClassDef'])]", "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'Import', 'Import', 'FunctionDef', 'FunctionDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'ClassDef', 'ClassDef', 'FunctionDef', 'Assign', 'Assign', 'If'])]", "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'Import', 'Expr', 'ImportFrom', 'Expr', 'Expr', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Expr', 'Expr', 'Expr', 'Expr', 'Import', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Import', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign'])]", "Module -> [('body', ['Import', 'Print'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'FunctionDef', 'Assign', 'Assign', 'ClassDef', 'Assign', 'FunctionDef', 'FunctionDef', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'TryExcept', 'TryExcept', 'ImportFrom', 'FunctionDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'ClassDef', 'ClassDef', 'ClassDef', 'Assign'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'Assign', 'FunctionDef', 'FunctionDef', 'If'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'ImportFrom', 'ImportFrom', 'FunctionDef', 'ClassDef', 'If'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'ImportFrom', 'Import', 'ImportFrom', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'FunctionDef', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'TryExcept', 'TryExcept', 'TryExcept', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'If', 'Assign', 'Assign', 'Assign', 'ClassDef', 'ClassDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'ImportFrom', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'ImportFrom', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]", "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'Import', 'ClassDef', 'If'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'Expr'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'Import', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'TryExcept', 'Assign', 'ClassDef', 'FunctionDef', 'FunctionDef', 'Expr', 'Expr'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'ImportFrom', 'Import', 'Import', 'Import', 'Assign', 'ClassDef', 'ClassDef', 'ClassDef', 'Assign', 'ClassDef', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'ClassDef', 'If'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Print', 'Assign', 'Expr', 'Assign', 'Expr'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'For', 'Expr', 'For', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Print', 'For', 'Expr'])]", "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'FunctionDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Expr', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'ClassDef', 'If'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'If'])]", "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'TryExcept', 'TryExcept', 'ClassDef', 'ClassDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]", "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'TryExcept', 'Import', 'ImportFrom', 'ImportFrom', 'ClassDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'ClassDef', 'ClassDef', 'If'])]", "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'ClassDef', 'If'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'TryExcept', 'ImportFrom', 'TryExcept', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'FunctionDef', 'If'])]", "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'TryExcept', 'ImportFrom', 'ImportFrom', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'If', 'Assign', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'Assign', 'FunctionDef', 'TryExcept', 'FunctionDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef'])]", "Module -> [('body', ['Import', 'ImportFrom', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'ClassDef'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'ImportFrom', 'ImportFrom', 'Assign', 'ClassDef'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'Import', 'ClassDef'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'If', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef'])]", "Module -> [('body', ['Expr', 'Import', 'Import', 'Import', 'Import', 'Assign', 'Assert', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'FunctionDef', 'FunctionDef', 'If'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'ClassDef', 'ClassDef', 'FunctionDef'])]", "Module -> [('body', ['Import', 'ImportFrom', 'Import', 'Import', 'Import', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'ClassDef', 'If'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'ImportFrom', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'FunctionDef', 'FunctionDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'ImportFrom', 'Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'Import', 'ImportFrom', 'Import', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'ImportFrom', 'Import', 'Import', 'Import', 'Import', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'FunctionDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign'])]", "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'TryExcept', 'Assign', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Expr', 'Expr', 'Expr'])]", "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'Assign', 'ClassDef'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'If'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'ClassDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'FunctionDef', 'FunctionDef'])]", "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'Expr', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'ClassDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'ImportFrom', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'ImportFrom', 'TryExcept', 'ClassDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'TryExcept'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'ClassDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'FunctionDef', 'Assign', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'ClassDef', 'ClassDef', 'FunctionDef', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'ImportFrom', 'Import', 'Expr', 'Import', 'FunctionDef', 'ClassDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'ImportFrom', 'Import', 'Import', 'Import', 'ClassDef'])]", "Module -> [('body', ['Import', 'TryExcept', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'ImportFrom', 'ClassDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'Import', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'Assign', 'Assign'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ImportFrom', 'ClassDef', 'ClassDef', 'ImportFrom', 'ClassDef', 'ImportFrom', 'ClassDef', 'FunctionDef', 'ClassDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'ClassDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Assign', 'Assign', 'Assign', 'Print', 'Assign', 'Assign', 'Print', 'Assign', 'Assign', 'Expr', 'Expr', 'Print', 'Print', 'Assign', 'For', 'Print', 'Assign', 'Print', 'Print'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'ClassDef', 'If'])]", "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Expr', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'ClassDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'TryExcept', 'ClassDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'Import', 'ImportFrom', 'Import', 'FunctionDef', 'FunctionDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'Import', 'Assign', 'Expr', 'Expr', 'Assign', 'If', 'Expr', 'TryExcept', 'Assign', 'Print'])]", "Module -> [('body', ['Import', 'Assign', 'Expr', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'For', 'For', 'For', 'For', 'Assign', 'Expr', 'Assign', 'For', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Expr', 'Expr'])]", "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'FunctionDef', 'FunctionDef'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'AugAssign', 'AugAssign', 'AugAssign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'AugAssign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'If'])]", "Module -> [('body', ['Import', 'Assign', 'Expr', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Print', 'Print', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'ClassDef'])]", "Module -> [('body', ['Import', 'Expr', 'Import', 'Import', 'Expr', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Import', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Assert', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]", "Module -> [('body', ['Import', 'Import', 'TryExcept', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'ImportFrom', 'Import', 'If', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ImportFrom', 'ImportFrom', 'ImportFrom'])]", "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'If', 'Assign', 'If', 'Assign', 'If', 'ClassDef', 'ClassDef', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'TryExcept', 'Expr', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'FunctionDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'Import', 'Assign', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Expr', 'ClassDef'])]", "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'ClassDef', 'Expr'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'If'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'Import', 'ClassDef', 'ClassDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'TryExcept', 'ImportFrom', 'ImportFrom', 'Assign', 'ClassDef', 'ClassDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'ClassDef', 'ClassDef', 'Assign', 'Expr', 'Expr', 'Expr', 'If'])]", "Module -> [('body', ['Import', 'Import', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'Assign', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'If'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]", "Module -> [('body', ['Import', 'Expr', 'Expr', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Expr', 'Expr', 'Import', 'ClassDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'Import', 'ClassDef', 'FunctionDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'FunctionDef', 'ClassDef', 'ClassDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'ClassDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Expr', 'ImportFrom', 'ImportFrom', 'Expr', 'Import', 'ClassDef', 'Assign', 'Assign', 'For', 'ClassDef', 'Assign', 'TryExcept', 'Expr', 'While'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'ClassDef', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'ClassDef', 'FunctionDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'Assign', 'ClassDef', 'ClassDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ClassDef'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'ImportFrom', 'Import', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'Import', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'ClassDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'FunctionDef', 'FunctionDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'Import', 'ClassDef'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'ImportFrom', 'ClassDef', 'FunctionDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'ClassDef'])]", "Module -> [('body', ['Import', 'ImportFrom', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'Assign', 'ClassDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Expr', 'ClassDef', 'Expr'])]", "Module -> [('body', ['Import', 'ImportFrom', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'TryExcept', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'ImportFrom', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'If'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'ImportFrom', 'Assign', 'ClassDef'])]", "Module -> [('body', ['Import', 'FunctionDef', 'ImportFrom', 'FunctionDef', 'FunctionDef', 'If'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'ClassDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ImportFrom', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'If'])]", "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'TryExcept', 'Import', 'TryExcept', 'TryExcept', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'Assign'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'FunctionDef'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Expr', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'If'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'TryExcept', 'ImportFrom', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'ClassDef', 'ClassDef', 'FunctionDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'Assign', 'Assign', 'Assign', 'Assign', 'ClassDef', 'ClassDef', 'FunctionDef', 'FunctionDef', 'If'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'TryExcept', 'If', 'If', 'If', 'Assign', 'If', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Assign', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Delete', 'If'])]", "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'FunctionDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'Expr', 'ImportFrom', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'Import', 'ImportFrom', 'ImportFrom', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ClassDef'])]", "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef'])]", "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Delete', 'Assign', 'Assign', 'TryExcept', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'ClassDef', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'Assign', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'ClassDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'ImportFrom', 'Import', 'Import', 'Import', 'Import', 'Assign', 'TryExcept', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'ClassDef', 'ClassDef', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'If'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'TryExcept', 'ClassDef'])]", "Module -> [('body', ['Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'ClassDef', 'FunctionDef', 'If'])]", "Module -> [('body', ['Import', 'ImportFrom', 'Import', 'Import', 'Import', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Print', 'Print', 'Expr', 'Expr'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'FunctionDef', 'FunctionDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ImportFrom'])]", "Module -> [('body', ['Import', 'Import', 'Expr', 'Import', 'Import', 'ImportFrom', 'Import', 'ImportFrom', 'Import', 'ImportFrom', 'ClassDef', 'FunctionDef', 'If'])]", "Module -> [('body', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'Assign'])]", "Module -> [('body', ['Import', 'ImportFrom', 'Expr'])]", "Module -> [('body', ['Import', 'ImportFrom', 'Import', 'Import', 'Import', 'Import', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'FunctionDef'])]", "Module -> [('body', ['Import', 'Import', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'ClassDef'])]", "Module -> [('body', ['Import', 'ImportFrom', 'Import', 'Import', 'ImportFrom', 'ImportFrom', 'Import', 'ClassDef'])]", "Module -> [('body', ['Import', 'Import', 'TryExcept', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef'])]"], "alias": ["alias -> [('name', 'str'), ('asname', 'NoneType')]", "alias -> [('name', 'str'), ('asname', 'str')]"], "Num": ["Num -> [('n', 'float')]", "Num -> [('n', 'int')]", "Num -> [('n', 'long')]", "Num -> [('n', 'complex')]"], "LtE": ["LtE -> <NULL>"], "In": ["In -> <NULL>"], "GtE": ["GtE -> <NULL>"], "Call": ["Call -> [('func', 'Attribute'), ('args', []), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Call', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Str']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', []), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Call', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Call', 'Dict']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Num']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name']), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Num', 'Num', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['BoolOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Dict']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Str', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'List', 'Lambda']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Call', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Call', 'Call', 'Call', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Lambda']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', []), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Str', 'Str', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Str']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'List']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', []), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Call', 'List', 'Lambda']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Attribute', 'Call']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Attribute']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Subscript', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Subscript', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Subscript', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Num', 'Num', 'Num', 'Num', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Subscript']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Call', 'List']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['GeneratorExp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Call', 'List', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', []), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'List', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Num', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', []), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Attribute', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Attribute', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['List']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['ListComp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Subscript']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name', 'Name', 'Name']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'List', 'List', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Attribute', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Tuple']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Attribute', 'Attribute', 'Attribute', 'BinOp', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['ListComp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Attribute', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Tuple']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Call', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Tuple', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Subscript', 'Name', 'Tuple']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name']), ('keywords', []), ('starargs', 'Name'), ('kwargs', 'Name')]", "Call -> [('func', 'Name'), ('args', ['Name', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['List']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Subscript', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Str', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Attribute', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Attribute', 'Attribute', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Lambda', 'List']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['BoolOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Num', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name']), ('keywords', ['keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Call']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Tuple', 'Call', 'BinOp', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Call', 'Tuple']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Subscript']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Call', 'Call', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Call', 'Call', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'BinOp', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Tuple', 'Call', 'Call', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', []), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name', 'Str', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'Name')]", "Call -> [('func', 'Name'), ('args', ['Name', 'Name']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Subscript']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Str', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Attribute', 'Name', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name', 'Str', 'Dict']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Lambda']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Attribute', 'Attribute', 'Attribute', 'Attribute', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Str', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Str', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Call']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Str', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Call', 'Attribute', 'Attribute', 'Attribute', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name', 'Name', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', []), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'Name')]", "Call -> [('func', 'Attribute'), ('args', []), ('keywords', ['keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name', 'Tuple']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Attribute', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Attribute', 'Tuple']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Attribute', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Attribute', 'Str', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Call', 'Str', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Num', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Call', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Call', 'Call', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Subscript', 'Subscript', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name', 'Name', 'Name']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Name', 'Name', 'Name']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Name', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Name', 'Name', 'Name']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Attribute']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Str', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Num', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Subscript', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Call', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name']), ('keywords', []), ('starargs', 'Name'), ('kwargs', 'Name')]", "Call -> [('func', 'Attribute'), ('args', ['Name']), ('keywords', ['keyword']), ('starargs', 'Name'), ('kwargs', 'Name')]", "Call -> [('func', 'Attribute'), ('args', ['Dict']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Call']), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'Name'), ('kwargs', 'Name')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Call']), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'Name'), ('kwargs', 'Name')]", "Call -> [('func', 'Name'), ('args', ['Lambda', 'Name', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Str']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name']), ('keywords', ['keyword', 'keyword']), ('starargs', 'Name'), ('kwargs', 'Name')]", "Call -> [('func', 'Attribute'), ('args', ['Call']), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'Name'), ('kwargs', 'Name')]", "Call -> [('func', 'Name'), ('args', []), ('keywords', ['keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Call']), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Call']), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Call']), ('keywords', ['keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Name']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Attribute']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name']), ('keywords', ['keyword', 'keyword']), ('starargs', 'Name'), ('kwargs', 'Name')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name']), ('keywords', ['keyword']), ('starargs', 'Name'), ('kwargs', 'Name')]", "Call -> [('func', 'Attribute'), ('args', ['Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'Name')]", "Call -> [('func', 'Name'), ('args', []), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', []), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'Name')]", "Call -> [('func', 'Attribute'), ('args', ['Str', 'Name', 'Name', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Subscript', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Str']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Str', 'Attribute', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Str', 'Tuple']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', []), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Str', 'Call']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Str', 'Name']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name', 'BinOp', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Attribute']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['List']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Call'), ('args', ['Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'Name')]", "Call -> [('func', 'Attribute'), ('args', ['Str', 'BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name', 'Str']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Lambda', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Lambda', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name']), ('keywords', []), ('starargs', 'Name'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Tuple', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Attribute', 'Subscript']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Attribute', 'Dict']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['BinOp', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Str', 'Attribute']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Str', 'Attribute', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['BinOp', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', []), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'Name')]", "Call -> [('func', 'Name'), ('args', ['Attribute', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name', 'Dict']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'Call')]", "Call -> [('func', 'Attribute'), ('args', ['Str', 'Name', 'Name']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'Name')]", "Call -> [('func', 'Attribute'), ('args', ['Str', 'Call', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Str', 'Str', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Str', 'Str', 'Dict']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', []), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Str', 'Str', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Dict']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Lambda', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Str']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Call']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name', 'Name', 'Name', 'Str', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Call', 'Str', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Call', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Call', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Subscript']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Subscript', 'Subscript']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['BinOp', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'Name')]", "Call -> [('func', 'Attribute'), ('args', ['Name']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Str', 'Str']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Subscript']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Str']), ('keywords', ['keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Subscript', 'Subscript', 'Subscript', 'List']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Str', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Attribute']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Dict', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['BinOp', 'BinOp']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Subscript', 'Attribute']), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Subscript', 'Attribute']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Name', 'Name', 'Name', 'List']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Subscript', 'Attribute']), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Str', 'Attribute']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'List']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Attribute']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name', 'Str', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Str', 'List']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Str', 'Tuple', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', []), ('keywords', []), ('starargs', 'Call'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['BinOp']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name', 'Str', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['BinOp', 'Call']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Str']), ('keywords', []), ('starargs', 'Name'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name', 'Attribute']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Str', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'Name')]", "Call -> [('func', 'Name'), ('args', ['Attribute', 'BinOp', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Call']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', []), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'Call')]", "Call -> [('func', 'Name'), ('args', ['Attribute', 'Attribute', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Attribute', 'Attribute', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'Name')]", "Call -> [('func', 'Attribute'), ('args', []), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'Name')]", "Call -> [('func', 'Name'), ('args', []), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'Name')]", "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Name']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'Call')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', []), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'Call')]", "Call -> [('func', 'Name'), ('args', ['Name', 'Str', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Attribute', 'Str', 'List']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Subscript', 'Str', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Subscript', 'Name', 'Subscript']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', []), ('keywords', []), ('starargs', 'Name'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name', 'Name', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Tuple']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Str', 'Name', 'Call', 'Call', 'Call', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Str', 'Attribute']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Str', 'Call']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Str', 'Call', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Str', 'Name', 'Call', 'Call', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Str', 'Attribute', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Compare']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Compare', 'Compare']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name', 'Name']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Attribute']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name', 'Name']), ('keywords', ['keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', []), ('keywords', []), ('starargs', 'Name'), ('kwargs', 'Name')]", "Call -> [('func', 'Attribute'), ('args', ['Subscript', 'Tuple']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Tuple', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Dict']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Attribute', 'Name', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Attribute', 'Name', 'Tuple']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Call'), ('args', ['Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Call'), ('args', ['Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Str', 'Str', 'Str', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Str', 'Str', 'Str', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'Attribute')]", "Call -> [('func', 'Attribute'), ('args', ['Call', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Call', 'BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Tuple', 'Tuple']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Num', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Attribute', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Attribute', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Compare']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['BoolOp', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Num', 'Num']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Tuple', 'Tuple', 'Tuple']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Call', 'Call', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Tuple', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['BinOp', 'Subscript', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['BinOp', 'Subscript', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Attribute']), ('keywords', []), ('starargs', 'Name'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Num', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Num', 'Num', 'Num', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', []), ('keywords', []), ('starargs', 'Name'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Num', 'BinOp', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Call']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'Name')]", "Call -> [('func', 'Attribute'), ('args', ['Name']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'Name')]", "Call -> [('func', 'Attribute'), ('args', ['Attribute']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'Name')]", "Call -> [('func', 'Call'), ('args', []), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Tuple', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', []), ('keywords', []), ('starargs', 'Call'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name', 'Num', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Call', 'Subscript']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Call', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['GeneratorExp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Attribute', 'Name', 'BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'List', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Tuple']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Str', 'Str', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['List']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'Attribute')]", "Call -> [('func', 'Attribute'), ('args', []), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'Dict')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Name', 'BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Name', 'BinOp']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Attribute', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Name', 'BinOp']), ('keywords', ['keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', []), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Str', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Num', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Subscript', 'Str']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['BinOp', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['BinOp', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Num', 'BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name', 'BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name', 'Name', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Num', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Call']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name']), ('keywords', ['keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name', 'Attribute']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name', 'Num']), ('keywords', ['keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', []), ('keywords', []), ('starargs', 'Subscript'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name', 'Num', 'Str', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name']), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['UnaryOp']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Attribute', 'UnaryOp', 'Call', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', []), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['BinOp']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['BinOp']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Attribute', 'Num', 'Num', 'Num', 'Num', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Attribute', 'Num', 'Num', 'Num', 'Num', 'Num', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', []), ('keywords', []), ('starargs', 'Name'), ('kwargs', 'Name')]", "Call -> [('func', 'Attribute'), ('args', ['Call', 'Name', 'Name']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Call', 'Str']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Str', 'Str', 'Str', 'List']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name', 'Name', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Subscript', 'Tuple']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Lambda']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Lambda', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Num', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Str', 'Str']), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Subscript', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name', 'Str', 'BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Attribute', 'Dict', 'Dict', 'List']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name', 'Call', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name', 'Attribute', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Attribute', 'Str', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', []), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'Attribute')]", "Call -> [('func', 'Name'), ('args', []), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'Attribute')]", "Call -> [('func', 'Attribute'), ('args', ['BinOp', 'Str', 'Str', 'Str', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Call', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Str', 'Attribute', 'Attribute', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'Name')]", "Call -> [('func', 'Name'), ('args', ['Call', 'Attribute', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Call', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Subscript', 'Subscript']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name']), ('keywords', []), ('starargs', 'Name'), ('kwargs', 'Name')]", "Call -> [('func', 'Name'), ('args', ['Num', 'Name', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Subscript'), ('args', ['Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Subscript']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name', 'Name', 'Attribute', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['BoolOp', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Str']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Call', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name']), ('keywords', []), ('starargs', 'Name'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['UnaryOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Subscript', 'Attribute', 'Attribute', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Num']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name']), ('keywords', ['keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'List']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name']), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'BinOp']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Name']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Name']), ('keywords', ['keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Subscript']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Subscript']), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Attribute']), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'BinOp']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name', 'Attribute', 'Attribute', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Subscript', 'Subscript']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Num']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Num']), ('keywords', ['keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['List', 'Name', 'Name']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Subscript']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name']), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'BinOp']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name']), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['List', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name', 'BinOp', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name', 'BinOp', 'BinOp', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', []), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'BinOp']), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'List', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Attribute']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'BinOp']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', []), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', []), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['BinOp', 'List']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Str', 'Str', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Str', 'Str', 'BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Num', 'Call', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Str', 'Num', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Tuple', 'Attribute', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Num', 'Num', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Tuple', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'BinOp', 'BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['List', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Subscript', 'Num', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Tuple', 'Num', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Tuple', 'Name', 'Num', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Attribute', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Call', 'Num', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Attribute', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Attribute', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Tuple', 'Tuple', 'Tuple', 'Num', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Tuple', 'Num', 'Num', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['BinOp', 'BinOp', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Name', 'Num', 'Num', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Tuple', 'Num', 'Tuple', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Num', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Name', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Tuple', 'Name', 'Num', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['BinOp', 'Subscript']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Lambda']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Tuple', 'ListComp', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Call', 'Tuple']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'List', 'Tuple']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Call', 'Call', 'Name', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name', 'Name', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Call', 'Attribute', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Tuple', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Tuple', 'Tuple', 'Name', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Attribute', 'Num', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Name', 'Name', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Tuple', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Tuple', 'Num', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Tuple', 'Num', 'Num', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Num', 'Num', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Call', 'Num', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['List', 'List', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Tuple', 'Name', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Subscript', 'Name', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Tuple', 'Name', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Num', 'Num', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Num', 'BinOp', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Tuple', 'Name', 'Name', 'Num', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Call', 'Call', 'Attribute', 'Num', 'BinOp', 'Num', 'Num', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Name', 'Call', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Name', 'Num', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Name', 'Num', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Tuple', 'Tuple']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Tuple', 'Tuple', 'Num', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Num', 'BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['List', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Num', 'List']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Call', 'Name', 'List', 'Num', 'Num', 'Tuple', 'Tuple']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Call', 'Name', 'Num', 'Num', 'Num', 'Tuple', 'Tuple']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'List', 'Num', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Call', 'Name', 'Name', 'Name', 'Name', 'Tuple', 'Tuple']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Num', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Num', 'Name', 'Tuple', 'Num', 'Num', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Subscript', 'BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Num', 'Num', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Call', 'Num', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Num']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['BinOp', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Subscript', 'Subscript', 'Subscript', 'Subscript']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['BinOp', 'Attribute', 'BinOp', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Attribute', 'Name', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Call', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Call', 'Name', 'Tuple', 'Name', 'Attribute', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Tuple', 'Tuple', 'Num', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Num', 'Num', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Num', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Num', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Call', 'Attribute', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Subscript', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'ListComp', 'Call', 'Attribute', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['BinOp', 'Call', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Tuple', 'Num', 'Call', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Num', 'Num', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Call', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Num', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Tuple', 'Name', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['List', 'Attribute', 'List', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Call', 'Name', 'Name', 'Tuple', 'Tuple']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['List', 'List', 'List']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Call', 'Subscript']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['ListComp', 'List']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Call', 'Call', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Tuple', 'Attribute', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Num']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Name', 'Num', 'Num', 'Num']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Num', 'Call', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Call', 'Attribute', 'Num', 'BinOp', 'Num', 'Num', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Tuple', 'Tuple', 'Tuple']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Tuple', 'BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Tuple', 'Tuple', 'Tuple']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['BinOp', 'Num', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Name', 'Call', 'Name', 'Name', 'Call', 'Call']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Name', 'Num', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Call', 'Call', 'Tuple', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Subscript', 'Subscript', 'Name', 'Name', 'List', 'Tuple', 'Num', 'Name', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Subscript', 'Name', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Tuple', 'Tuple', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'BinOp', 'BinOp', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Num', 'Num', 'Num', 'Num', 'Attribute', 'BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Name', 'Name', 'Call', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Tuple', 'Tuple', 'Tuple']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Num', 'Num', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Num', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Num', 'Name', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['List', 'Attribute', 'Num', 'Num', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Call']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Attribute', 'Num', 'Num', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Str', 'Name', 'List']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Subscript', 'Subscript', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Tuple', 'Lambda']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Num', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Call', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Tuple', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Attribute', 'BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Subscript', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Call', 'Tuple']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Call', 'Tuple', 'Name', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Tuple', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'BinOp', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Dict']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Subscript'), ('args', ['Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['List']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Str', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['BinOp']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name', 'Str', 'Tuple']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Num', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Str', 'Str', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Num', 'Str', 'Tuple']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Num', 'Name', 'Tuple']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Num', 'BinOp', 'Tuple']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Num', 'Str', 'Tuple', 'Tuple']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Num', 'Str', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Num', 'Str', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Attribute']), ('keywords', ['keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Num', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Num', 'Str', 'Tuple']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Num']), ('keywords', ['keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Num', 'Attribute', 'Attribute', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Num']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Call', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Num', 'BinOp', 'Tuple']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Num']), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Num', 'BinOp', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Str', 'Str', 'BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Str', 'Call', 'Str', 'Str', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name', 'Num', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Str', 'BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['BoolOp']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Call', 'Name', 'Call', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Str', 'Name']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Tuple']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Str', 'Dict', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name', 'Name', 'Attribute', 'List']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['List', 'Attribute', 'Dict']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name', 'BinOp', 'BinOp', 'Num', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['BinOp', 'BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Attribute', 'Call', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Call', 'Attribute']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Attribute', 'Call', 'BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Attribute', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Name']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name', 'Attribute', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'Name')]", "Call -> [('func', 'Name'), ('args', ['Str', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Str']), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name']), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Str', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Str', 'Attribute', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Str', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Str', 'Attribute', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'Attribute')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Str', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Str', 'Str', 'Attribute', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['List', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name', 'Subscript']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name', 'Attribute', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['List', 'Attribute']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Subscript', 'BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Attribute', 'Num', 'Name', 'Attribute', 'Num', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Attribute', 'Name', 'Attribute', 'Name', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Compare', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Compare', 'BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['UnaryOp', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'BinOp', 'Num', 'Name', 'Attribute', 'Attribute', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'UnaryOp', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Num', 'Num', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Num', 'Name', 'Attribute', 'Num', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Num', 'Num', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Call', 'Name', 'Name', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Num', 'Name', 'Num', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'BinOp', 'BinOp', 'Num', 'Name', 'Name', 'Attribute', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Str', 'Str', 'Name', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Attribute', 'Name', 'Name', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Tuple', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Attribute', 'Name', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Attribute', 'Attribute', 'Name', 'Attribute', 'BinOp', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Num', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Call', 'Call', 'Name', 'Tuple']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Tuple', 'Tuple']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Str', 'Str', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Str', 'Str', 'Str', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Str', 'Str', 'Str', 'Str', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Str']), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Attribute', 'Attribute', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Attribute']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'Name')]", "Call -> [('func', 'Name'), ('args', ['Subscript', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'Attribute')]", "Call -> [('func', 'Attribute'), ('args', ['BinOp', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['BinOp']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'Name')]", "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Name', 'Name']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'Name')]", "Call -> [('func', 'Attribute'), ('args', ['Name']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'Name')]", "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Str']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'Name')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Str', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Str', 'BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name']), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Str', 'Lambda']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Str', 'Str', 'Str']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Num']), ('keywords', ['keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Str', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Str', 'Subscript']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Str', 'Str']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Str', 'BinOp']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Name', 'List']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name', 'Call', 'Call', 'List']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name']), ('keywords', []), ('starargs', 'Name'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Str', 'Str', 'Subscript', 'Str', 'Attribute', 'BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Str', 'Str']), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Str', 'Name', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Str', 'Lambda', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Str', 'Str', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['UnaryOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name', 'Call']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'Name')]", "Call -> [('func', 'Attribute'), ('args', ['Call', 'Call', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['List', 'List', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Tuple', 'Call', 'Tuple']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Name', 'Call']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['ListComp']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Str', 'Subscript']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['BinOp', 'Subscript']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name', 'Name']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'Name')]", "Call -> [('func', 'Name'), ('args', ['Subscript', 'Subscript']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name', 'Name']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'Name')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'Name')]", "Call -> [('func', 'Name'), ('args', ['Num', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Subscript', 'Name']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Subscript', 'Subscript', 'List']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['BinOp', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Subscript', 'Subscript', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['BinOp', 'BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name', 'Name', 'Name', 'UnaryOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Subscript', 'Subscript', 'UnaryOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Name', 'ListComp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Name', 'Name', 'Str']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Name', 'Name']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Name', 'Name']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Attribute', 'Attribute', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['ListComp', 'List']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Str', 'Name', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Str']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name', 'Str', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Subscript', 'Str', 'Lambda']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Lambda']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Str', 'Name']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Str', 'Str', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Str', 'Name']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['BinOp', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Compare', 'Compare', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Tuple', 'Name', 'BinOp', 'Name', 'Name', 'Name', 'Dict']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Tuple', 'Name', 'BinOp', 'Name', 'Name', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Attribute', 'Str', 'Name']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Name', 'Attribute', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Subscript', 'Subscript', 'Subscript']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Subscript', 'Name', 'BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Name', 'Dict']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['List', 'Dict']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['BinOp', 'Subscript', 'Subscript', 'Subscript', 'Name', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Str', 'Dict']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Call'), ('args', []), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'Name')]", "Call -> [('func', 'Name'), ('args', ['Str', 'Name', 'Name', 'Attribute', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'Name')]", "Call -> [('func', 'Name'), ('args', ['Name', 'Name', 'Name', 'Attribute', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name', 'Call', 'Name', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name', 'Call', 'Str', 'Str', 'Name', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name', 'Call', 'Name', 'Call', 'Name', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', []), ('keywords', []), ('starargs', 'Subscript'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Call', 'Lambda']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Attribute', 'Lambda', 'Name', 'Name', 'Subscript', 'Subscript', 'Subscript', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name', 'Call', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Attribute']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Str', 'Str', 'Str', 'Dict', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Num', 'Name', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['List', 'List']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', []), ('keywords', ['keyword', 'keyword']), ('starargs', 'Name'), ('kwargs', 'Name')]", "Call -> [('func', 'Attribute'), ('args', []), ('keywords', []), ('starargs', 'BinOp'), ('kwargs', 'Name')]", "Call -> [('func', 'Name'), ('args', ['Name', 'List']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['List', 'List', 'List', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Subscript', 'Subscript', 'Subscript', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Str', 'Num', 'Num', 'Num', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Call', 'Str', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Call', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Str', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', []), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Str', 'Num', 'Num', 'Name', 'Call', 'Call', 'List', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Str', 'Name', 'Str', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Str', 'Num', 'Num', 'Name', 'Call', 'Call', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Str', 'Num', 'Num', 'Name', 'Call', 'Call', 'Call', 'Call', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Str', 'Num', 'Num', 'Name', 'Call', 'Call', 'Call', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Str', 'Num', 'Num', 'Name', 'Call', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Dict', 'Call']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Call']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Str', 'Str']), ('keywords', ['keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Attribute', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Name', 'Name', 'Subscript']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name', 'Name', 'BinOp', 'BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name', 'Name', 'Name', 'BinOp', 'BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Str', 'Dict']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Str', 'Name', 'Str', 'List']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Str', 'Dict']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Subscript', 'Subscript', 'Subscript', 'Subscript', 'Subscript', 'Subscript']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Num', 'Num', 'Num', 'Num', 'Num', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Num', 'Call', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Subscript', 'List']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Str', 'Lambda']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['UnaryOp']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Str', 'Attribute']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Str', 'Attribute', 'Str', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Num', 'Lambda']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Tuple', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name', 'Name', 'Name', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name', 'Name', 'Name', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name', 'Name', 'Name', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Call', 'Call', 'Num', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Tuple', 'Tuple']), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Tuple']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name', 'Name', 'Tuple', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Str', 'Str', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name', 'Name', 'Attribute', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'Call')]", "Call -> [('func', 'Attribute'), ('args', []), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', []), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Call', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Attribute', 'BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Name', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name', 'Dict', 'Dict', 'Subscript']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['BinOp', 'Name', 'BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name', 'Call', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Subscript', 'Subscript', 'Name', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Call', 'Call', 'Call', 'Call', 'Call', 'Call']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Str', 'Name']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Str', 'List']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Str', 'List']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Call', 'Call', 'Call']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Call', 'Call']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['List']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'Dict')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Name']), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Str', 'Name', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Name', 'Attribute', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['BinOp', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Subscript', 'Subscript', 'UnaryOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Num', 'Num', 'Attribute', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Attribute', 'Name', 'ListComp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Attribute', 'Attribute', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Call', 'Name', 'BinOp', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Call', 'Name', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Attribute', 'ListComp', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Call', 'BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Attribute', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name', 'Dict']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name', 'Name', 'Name', 'Dict']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'Name')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Name', 'Subscript', 'Name']), ('keywords', []), ('starargs', 'Name'), ('kwargs', 'Name')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Attribute', 'Attribute', 'Attribute']), ('keywords', []), ('starargs', 'Name'), ('kwargs', 'Name')]", "Call -> [('func', 'Attribute'), ('args', ['Num', 'Tuple']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Name', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', []), ('keywords', ['keyword']), ('starargs', 'Name'), ('kwargs', 'Name')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Name', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Call', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Str', 'Str', 'Str', 'Str', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name']), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Tuple', 'Tuple', 'Call', 'Call', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Call', 'Call', 'Tuple', 'Call', 'Call', 'Call', 'Call', 'Call', 'Tuple', 'Call', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Call', 'Call', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Call', 'Call', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Call', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Call', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Call', 'Call', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Call', 'Call', 'Call', 'Call', 'Call', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Call', 'Tuple', 'Call', 'Tuple', 'Tuple', 'Call', 'Call', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Call', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Call', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Call', 'Call', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Call', 'Call', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Call', 'Call', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Call', 'Call', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Call', 'Call', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Call', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Call', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Call', 'Tuple', 'Call', 'Call', 'Tuple', 'Tuple', 'Tuple', 'Call', 'Call', 'Call', 'Tuple', 'Call', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Call', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Call', 'Call', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Call', 'Call', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Call', 'Call', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Call', 'Call', 'Call', 'Call', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Call', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Call', 'Tuple', 'Tuple', 'Tuple', 'Call', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Call', 'Call', 'Call', 'Tuple', 'Call', 'Tuple', 'Call', 'Call', 'Call', 'Tuple', 'Tuple', 'Call', 'Call', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Call', 'Call', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Call', 'Call', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Call', 'Call', 'Call', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Call', 'Call', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Subscript', 'Subscript']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Str', 'Str', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Call', 'Dict', 'Dict', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name', 'Subscript', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Call', 'Str', 'Attribute', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Tuple', 'List']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Str', 'Str', 'Attribute', 'Str', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Attribute', 'BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Str']), ('keywords', ['keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Str']), ('keywords', []), ('starargs', 'Attribute'), ('kwargs', 'Dict')]", "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Name', 'BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Call', 'Num', 'BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Lambda', 'BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Subscript', 'Subscript', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Call', 'Str', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Attribute', 'Attribute']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['List']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Str', 'Str', 'Str', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['BinOp', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Num', 'Name']), ('keywords', ['keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Call']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name', 'Name', 'Name']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'Name')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name']), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'Name')]", "Call -> [('func', 'Name'), ('args', ['Name', 'Name']), ('keywords', ['keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'Name')]", "Call -> [('func', 'Attribute'), ('args', ['Tuple', 'Call', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'Name')]", "Call -> [('func', 'Name'), ('args', ['Attribute', 'Attribute', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'Name')]", "Call -> [('func', 'Name'), ('args', ['Name', 'Subscript']), ('keywords', ['keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name', 'Attribute', 'Name']), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name', 'Attribute', 'Name']), ('keywords', ['keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Str']), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name', 'Name']), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['BinOp', 'Name', 'Name']), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', []), ('keywords', []), ('starargs', 'Attribute'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', []), ('keywords', []), ('starargs', 'Attribute'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Num', 'Name']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'List']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', []), ('keywords', []), ('starargs', 'ListComp'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['BinOp', 'BinOp', 'BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Num', 'Num', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Subscript', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Tuple', 'ListComp', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Name']), ('keywords', []), ('starargs', 'Name'), ('kwargs', 'Name')]", "Call -> [('func', 'Call'), ('args', ['Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Attribute']), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Attribute', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'Attribute')]", "Call -> [('func', 'Name'), ('args', ['Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'Name')]", "Call -> [('func', 'Name'), ('args', ['Lambda', 'Lambda']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Lambda', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Name']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'Name')]", "Call -> [('func', 'Name'), ('args', ['BinOp', 'Tuple', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Call'), ('args', []), ('keywords', []), ('starargs', 'Name'), ('kwargs', 'Name')]", "Call -> [('func', 'Name'), ('args', ['Str', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['BoolOp', 'Name']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Subscript'), ('args', []), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Str', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['List', 'Call', 'Name', 'List', 'Name', 'List']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name', 'Attribute', 'Name']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'BoolOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Str']), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name', 'Call', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Attribute', 'Name', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', []), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'Call')]", "Call -> [('func', 'Name'), ('args', ['Attribute', 'BoolOp', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', []), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'Call')]", "Call -> [('func', 'Attribute'), ('args', ['Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'Attribute')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'Attribute')]", "Call -> [('func', 'Name'), ('args', ['Name', 'ListComp', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Call', 'Name']), ('keywords', []), ('starargs', 'Name'), ('kwargs', 'Name')]", "Call -> [('func', 'Attribute'), ('args', ['Call', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'Name')]", "Call -> [('func', 'Name'), ('args', []), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'Call')]", "Call -> [('func', 'Name'), ('args', ['ListComp', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Attribute', 'Name', 'Tuple']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['List', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Attribute']), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Attribute', 'Call', 'Call', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Attribute', 'Call', 'Call', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Attribute', 'Num', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Dict']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Lambda', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['List', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Compare', 'Compare']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Compare', 'Compare', 'Compare']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['List']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Name', 'Name', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Compare']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['BinOp', 'Str', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['BinOp', 'Tuple']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Subscript'), ('args', ['BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Name', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Lambda', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'Name')]", "Call -> [('func', 'Name'), ('args', ['Call']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'Name')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Str']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Str', 'Str', 'Str', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Attribute', 'ListComp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Call', 'Call', 'Call', 'Call', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Call', 'Call', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name', 'Dict', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name', 'Name', 'Name', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', []), ('keywords', ['keyword', 'keyword', 'keyword']), ('starargs', 'Name'), ('kwargs', 'Name')]", "Call -> [('func', 'Name'), ('args', ['BinOp', 'Name']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['BinOp', 'Attribute', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['BinOp', 'UnaryOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Subscript', 'Subscript', 'Subscript', 'Subscript']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['UnaryOp', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Call', 'Name', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['UnaryOp', 'UnaryOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Str', 'Attribute', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Str', 'Name', 'Name', 'Num', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Subscript', 'Attribute', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Str', 'Name', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Attribute', 'Name', 'Name', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Attribute', 'Attribute', 'Name', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name', 'Name', 'Name', 'Name', 'Num', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Attribute', 'Attribute', 'Name', 'Name', 'Attribute', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name', 'Attribute', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Attribute', 'Name', 'Name', 'Name', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'BinOp'), ('args', []), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Name', 'Str', 'Tuple']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Str', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Subscript', 'Subscript']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name', 'List', 'Name']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Subscript'), ('args', ['Subscript']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name', 'Subscript', 'Name', 'Name', 'Subscript', 'Subscript', 'Name', 'Subscript']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Subscript', 'Subscript', 'Name']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Subscript', 'Name', 'Name', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Call', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Str', 'Call', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'Call')]", "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Attribute', 'Attribute']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Str', 'Str', 'Str', 'Str', 'Str', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'List', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Attribute', 'Tuple', 'Tuple']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Str', 'Attribute', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Name', 'Name']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Attribute']), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Attribute']), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Attribute']), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Compare', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Attribute']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Call', 'Name', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Name', 'Name', 'Attribute', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Name', 'Name', 'Call', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Attribute', 'Name', 'Name']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Str', 'Name', 'Name', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Str', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'List']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Str', 'Attribute']), ('keywords', ['keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Str', 'Attribute']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Str', 'Attribute']), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Name', 'Attribute']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Attribute', 'Str', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Call']), ('keywords', ['keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'List']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Str', 'Attribute', 'Str', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Str', 'Attribute', 'Str', 'Name', 'Name']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Attribute', 'Name', 'Name', 'List']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Attribute', 'Name', 'Name', 'List']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Num', 'Attribute', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Name', 'Str', 'Str', 'Name', 'UnaryOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Name', 'Str', 'Str', 'Name', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['BinOp', 'Name', 'Name', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'BinOp', 'Attribute', 'Name', 'Name', 'Name']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Name', 'Str', 'UnaryOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Name', 'Str', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Str', 'Attribute', 'Name', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Str', 'Attribute', 'Str', 'Name', 'List']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Attribute', 'Str', 'Name', 'List']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Name', 'Name']), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Tuple', 'BinOp', 'BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Attribute', 'BinOp', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['BinOp', 'Num', 'Num', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['UnaryOp', 'Attribute', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['UnaryOp', 'UnaryOp', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Attribute', 'UnaryOp', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Attribute', 'Attribute', 'UnaryOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['UnaryOp', 'Attribute', 'UnaryOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['UnaryOp', 'UnaryOp', 'UnaryOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Attribute', 'UnaryOp', 'UnaryOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Attribute', 'Num', 'Num', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Num', 'Num', 'Num', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Num', 'Attribute', 'Num', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Num', 'BinOp', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Num', 'BinOp', 'BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Name', 'Name', 'Name']), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Num', 'Attribute', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Call'), ('args', ['BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Subscript', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Str', 'BinOp', 'BinOp', 'Num', 'Num', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Str', 'Num', 'Num', 'Num', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Str', 'ListComp', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Str', 'Num', 'Num', 'Num', 'Num', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Str', 'BinOp', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Num']), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Str', 'Call', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Str', 'Call', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Str', 'Attribute', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Str', 'Attribute', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Str', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Attribute', 'Attribute', 'Attribute', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['List']), ('keywords', ['keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Num', 'Dict']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name', 'Name', 'Subscript']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Str', 'Attribute', 'Attribute']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name', 'Name', 'Str']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Compare']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Str', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Subscript'), ('args', ['Lambda']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Subscript', 'List']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Attribute', 'List']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Attribute']), ('keywords', []), ('starargs', 'Name'), ('kwargs', 'Name')]", "Call -> [('func', 'Name'), ('args', ['Str', 'Attribute']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Str', 'Str', 'Dict']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Str', 'Str', 'Dict']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['BinOp', 'Str', 'Dict']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['BinOp', 'Attribute', 'Dict']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['BinOp', 'Attribute']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['BinOp', 'Attribute']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['BinOp', 'Str', 'Dict']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Subscript', 'Str', 'List']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Lambda', 'GeneratorExp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Str'), ('args', ['Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Attribute']), ('keywords', ['keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Attribute', 'Str', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Attribute', 'Str', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Call'), ('args', ['Call', 'Name', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Call'), ('args', ['Attribute', 'Attribute', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Name', 'Name', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Attribute', 'Attribute', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name', 'BinOp', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', []), ('keywords', []), ('starargs', 'Subscript'), ('kwargs', 'Name')]", "Call -> [('func', 'Attribute'), ('args', ['Call', 'Attribute', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Tuple']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['List']), ('keywords', ['keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Str', 'Subscript']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', []), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Num', 'Num', 'BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', []), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'BinOp', 'Num', 'BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', []), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Num', 'Num', 'Attribute', 'Num', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Str', 'Name', 'Name', 'Name', 'Num', 'Num', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Attribute', 'Str', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Subscript', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Attribute', 'Num']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name', 'Attribute', 'Call', 'Attribute', 'Attribute', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Call', 'Attribute', 'BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Str', 'Call', 'Call', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Str', 'Name']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Str', 'Name', 'Call']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Subscript', 'Name', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Compare']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Attribute', 'BinOp', 'BinOp', 'BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name', 'Num', 'Num', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Compare', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name', 'BoolOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name', 'Name', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'Name')]", "Call -> [('func', 'Name'), ('args', ['Name', 'Tuple']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'BinOp', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name', 'List']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name', 'Str']), ('keywords', []), ('starargs', 'Attribute'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', []), ('keywords', []), ('starargs', 'ListComp'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Name', 'Str', 'List']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Str', 'Str', 'List']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Call', 'Tuple']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Str', 'List']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Call', 'Str', 'Str', 'Str', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Lambda', 'Subscript']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Call', 'Num']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Call', 'BinOp']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Attribute', 'Tuple', 'Dict']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['BinOp', 'Call', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Str', 'Repr', 'Repr']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Attribute', 'Name']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Attribute', 'Name', 'Name']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Str', 'Call', 'Name', 'Name', 'Name', 'Repr', 'Repr']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Call', 'Name', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Call', 'Call']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['BinOp', 'BinOp', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['BinOp', 'BinOp', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Str', 'Subscript', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Subscript', 'Name', 'Name', 'Name', 'Name', 'Name']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Call', 'Call', 'BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Call', 'Name', 'BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Lambda']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Lambda']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Num', 'Attribute', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Subscript', 'Num', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Num', 'Attribute', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Name', 'List']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'ListComp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Str', 'Name', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Attribute', 'Name']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Compare', 'Compare', 'Compare']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Str', 'Name', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name']), ('keywords', []), ('starargs', 'Call'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'BinOp', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Str', 'Name', 'Name', 'Str', 'BinOp']), ('keywords', ['keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Str', 'Name', 'Str', 'Str', 'Str']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Str', 'Name', 'Str', 'Str', 'Str']), ('keywords', ['keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Str', 'Call', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Str', 'Name', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Tuple', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Attribute']), ('keywords', []), ('starargs', 'Name'), ('kwargs', 'Name')]", "Call -> [('func', 'Attribute'), ('args', ['Num', 'Attribute', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Attribute', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'Name')]", "Call -> [('func', 'Attribute'), ('args', ['Tuple', 'Name']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Call'), ('args', []), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Attribute']), ('keywords', []), ('starargs', 'Name'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Call', 'Dict', 'Num', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Num', 'Str', 'Dict', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Str', 'Subscript', 'Name', 'Name', 'Str', 'Dict']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Str', 'Name', 'Call', 'Attribute', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Num', 'Str', 'Name', 'Str', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Tuple', 'Subscript']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Attribute', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name', 'Name', 'Dict']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Attribute', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Num', 'Str', 'Dict', 'Str', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name', 'Call', 'Name', 'Str', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Call', 'Num', 'Str', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name', 'Name', 'BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['List', 'ListComp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Str', 'Name', 'Name', 'Name', 'Str', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Str', 'Name', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['BinOp', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Call'), ('args', []), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', []), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'Dict')]", "Call -> [('func', 'Name'), ('args', ['BinOp', 'Num', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name', 'Dict']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Num', 'Str', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'Subscript')]", "Call -> [('func', 'Subscript'), ('args', []), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'Name')]", "Call -> [('func', 'Attribute'), ('args', ['Str', 'Str']), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Str', 'Str']), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Str', 'Str']), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Str', 'Str']), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Str', 'Str']), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['BinOp', 'Str']), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Str']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Str']), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Attribute', 'Str', 'Name']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Str', 'Str', 'Str']), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name', 'Name']), ('keywords', []), ('starargs', 'Name'), ('kwargs', 'Name')]", "Call -> [('func', 'Attribute'), ('args', ['Str', 'Name', 'Str']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Num', 'Str']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Num']), ('keywords', ['keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Str', 'Str', 'Str', 'Str', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Num', 'Str']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Name', 'Attribute']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Num', 'Str']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Num', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Name', 'Str']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Num']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Num', 'Attribute', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Num', 'BinOp', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Num', 'Attribute', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Num', 'BinOp', 'Num', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Num', 'Num', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Num', 'Num']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Subscript', 'Subscript', 'Subscript']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Attribute', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Subscript', 'Num', 'Subscript']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Num', 'Num']), ('keywords', ['keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', []), ('keywords', ['keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'Name')]", "Call -> [('func', 'Name'), ('args', []), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'Name')]", "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Name', 'Name', 'BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Attribute', 'BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name', 'Call', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Attribute']), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Name', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'List', 'Name', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Subscript', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Attribute', 'BinOp', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Str', 'Attribute', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Str', 'Attribute', 'Name']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Subscript'), ('args', ['Attribute']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Subscript'), ('args', ['Attribute']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Str', 'Subscript', 'Subscript']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Str', 'Tuple', 'Tuple']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Attribute']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'Name')]", "Call -> [('func', 'Name'), ('args', ['Str', 'Call', 'Tuple', 'Tuple', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Str', 'Str']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Str', 'List']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Num', 'Name', 'Name', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Call', 'Name']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['BinOp', 'BinOp', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Call', 'Name', 'Subscript', 'Subscript']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Subscript', 'Subscript']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Call', 'Name', 'BinOp', 'Name', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Call', 'Name', 'Num', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'Name')]", "Call -> [('func', 'Name'), ('args', ['Call', 'Name', 'Str', 'Tuple']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Call', 'Name', 'Num', 'BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Attribute', 'List']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['List', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Str', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Str', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Str', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple', 'Tuple']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Str', 'Tuple']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'Name')]", "Call -> [('func', 'Name'), ('args', ['Name', 'BinOp', 'Tuple']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name', 'Tuple', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name', 'Tuple', 'BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Tuple', 'Tuple', 'Name', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Name', 'Tuple']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name', 'Num', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Call', 'Call', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Call', 'Attribute', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Name', 'Attribute', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Num', 'BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['List', 'List']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Call', 'Name', 'Subscript']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name', 'Name', 'BinOp', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Call', 'Call', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Num']), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Num', 'Str', 'Tuple']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name', 'Call', 'Name', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Call', 'Call', 'Name', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Num', 'Name', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Name', 'Name', 'Attribute', 'Num', 'Num', 'Num', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Str', 'Num', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Name', 'Num', 'Name', 'Attribute', 'Num', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Str', 'Num', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Name', 'Num', 'Name', 'Attribute', 'Attribute', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Call'), ('args', ['Name', 'Dict']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Str', 'Str']), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Str']), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Num', 'Name', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Subscript', 'Call', 'Call', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Call', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'Name')]", "Call -> [('func', 'Attribute'), ('args', ['Dict', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name', 'Name', 'Name', 'Name']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Str', 'Name', 'Name', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Str', 'IfExp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['IfExp', 'BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['IfExp', 'BinOp', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'IfExp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Dict', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name']), ('keywords', []), ('starargs', 'Attribute'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name', 'Name', 'Name', 'Call', 'Call', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Attribute']), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Num', 'Name', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Num', 'Name', 'Num', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Num', 'Name', 'Num', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Str']), ('keywords', []), ('starargs', 'Name'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Str', 'List', 'Attribute']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'List', 'Attribute']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Call']), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Call', 'Call', 'Call', 'Call', 'Call', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Call', 'Str']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name']), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Subscript', 'Dict']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name']), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', []), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'Name')]", "Call -> [('func', 'Name'), ('args', []), ('keywords', ['keyword']), ('starargs', 'Name'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', []), ('keywords', ['keyword', 'keyword']), ('starargs', 'Call'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Tuple', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Subscript', 'Subscript', 'Subscript', 'Name']), ('keywords', ['keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name', 'Str', 'Name', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['ListComp', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Str', 'Name', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Str', 'Name', 'Num', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Str', 'Name', 'Num', 'Num', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Str', 'Name', 'Call', 'Num', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Str', 'Name', 'Call', 'Num', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Attribute']), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Dict', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Name', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Num', 'Num', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Call'), ('args', ['Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'Name')]", "Call -> [('func', 'Call'), ('args', ['Call']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name', 'Attribute', 'List']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name', 'Name', 'List']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name', 'Name', 'List']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Subscript', 'BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Attribute', 'Name', 'Name']), ('keywords', []), ('starargs', 'Name'), ('kwargs', 'Name')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Dict']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'List', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Attribute']), ('keywords', []), ('starargs', 'Name'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['UnaryOp', 'BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'UnaryOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'UnaryOp', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'UnaryOp', 'UnaryOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Num', 'Subscript', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'BinOp', 'Attribute', 'Name']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['ListComp']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'BinOp', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Call'), ('args', ['Attribute', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Call'), ('args', ['Attribute', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Str', 'Attribute', 'Attribute', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Str', 'Num']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Attribute', 'Str', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Str', 'Attribute', 'Name', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['BinOp', 'Dict']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name']), ('keywords', []), ('starargs', 'Call'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name', 'Call', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Name', 'BinOp', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Name', 'Call', 'Call', 'Num', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Str', 'Attribute', 'Num', 'Attribute', 'Name', 'Name', 'Name', 'Attribute', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Subscript', 'Subscript', 'Attribute', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Call', 'Name', 'Name', 'Call', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name', 'Name', 'Subscript', 'Name']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'Name')]", "Call -> [('func', 'Name'), ('args', ['Attribute', 'Attribute', 'Attribute', 'Num', 'Num', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Subscript', 'Subscript', 'Subscript', 'Subscript', 'Subscript', 'Subscript']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Call', 'Name', 'Name', 'Name', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Call', 'Name', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Call', 'BinOp', 'Name', 'Name', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Str', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Attribute', 'Attribute', 'Attribute', 'Num', 'BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Attribute', 'Attribute', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['BinOp', 'Str', 'Str', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Subscript', 'Num', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Num', 'Num', 'Num', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Num', 'Num', 'Num', 'Num', 'Num', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Dict']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'Attribute')]", "Call -> [('func', 'Attribute'), ('args', ['Name']), ('keywords', ['keyword', 'keyword', 'keyword']), ('starargs', 'Name'), ('kwargs', 'Name')]", "Call -> [('func', 'Name'), ('args', ['Attribute', 'Name']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name', 'Name', 'Attribute']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'ListComp', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Str', 'Subscript']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Call', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', []), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Call', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Name', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Str', 'Name', 'Name']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name']), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'Call')]", "Call -> [('func', 'Attribute'), ('args', ['Attribute']), ('keywords', ['keyword']), ('starargs', 'Name'), ('kwargs', 'Name')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Subscript', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', []), ('keywords', ['keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'Call')]", "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Name']), ('keywords', []), ('starargs', 'Name'), ('kwargs', 'Name')]", "Call -> [('func', 'Attribute'), ('args', ['List']), ('keywords', []), ('starargs', 'Name'), ('kwargs', 'Name')]", "Call -> [('func', 'Name'), ('args', ['Name', 'Lambda']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Attribute', 'Call', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Call'), ('args', ['Dict', 'Dict']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Attribute', 'Dict', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name', 'Name', 'Name', 'List']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Call']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'Name')]", "Call -> [('func', 'Attribute'), ('args', ['Num', 'Attribute']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Call', 'Call', 'Call', 'Num', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Attribute', 'Str']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['UnaryOp', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name', 'BinOp']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['ListComp', 'Lambda']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Str', 'Str', 'Call']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Attribute', 'Num', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Num', 'Attribute', 'BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Attribute', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'BinOp', 'Name', 'Name', 'Num', 'Attribute', 'Name', 'Name', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Num', 'Name']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Subscript', 'BinOp']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name', 'Subscript', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Call', 'Subscript']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', []), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Lambda']), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Attribute', 'Str', 'Dict']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Subscript', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name', 'Num', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Call', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name', 'Num', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Attribute', 'Name', 'Str']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Num', 'Str', 'Tuple']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Num', 'Call']), ('keywords', ['keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Attribute', 'Call', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Call', 'Attribute', 'Attribute', 'Attribute', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Call', 'Name']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['UnaryOp', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Compare', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Call', 'BinOp', 'Num', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Attribute', 'Str', 'Str', 'Name', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'Attribute')]", "Call -> [('func', 'Name'), ('args', ['Str', 'Name', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name', 'Attribute', 'Name', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Num', 'Call', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Num', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Attribute', 'Name', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Attribute', 'Attribute', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name', 'Attribute', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Attribute', 'Num', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Attribute', 'Num', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Num', 'Str', 'Num', 'Num', 'Num', 'Num', 'Num', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Subscript', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Num']), ('keywords', []), ('starargs', 'Name'), ('kwargs', 'Name')]", "Call -> [('func', 'Name'), ('args', ['Name', 'Name']), ('keywords', []), ('starargs', 'Name'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['BinOp', 'Name']), ('keywords', []), ('starargs', 'Name'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Str', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Str', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Attribute', 'Call', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Str', 'Attribute', 'Name', 'Name', 'UnaryOp', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Subscript'), ('args', ['Attribute', 'Name', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name', 'Str', 'Subscript']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['BoolOp', 'Str', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Str', 'List', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Str', 'Call', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name']), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Str', 'Str', 'Name', 'Str', 'BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Str', 'Name', 'Name']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Str', 'Str']), ('keywords', ['keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Num', 'UnaryOp', 'Num', 'BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Num', 'Num', 'Num', 'BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', []), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'Subscript')]", "Call -> [('func', 'Name'), ('args', ['Attribute', 'Attribute']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'Name')]", "Call -> [('func', 'Name'), ('args', ['BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'Dict')]", "Call -> [('func', 'Name'), ('args', ['Name', 'Name', 'Str', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Subscript']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Subscript']), ('keywords', ['keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'Name')]", "Call -> [('func', 'Name'), ('args', ['BinOp', 'Name', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Num', 'BinOp', 'Num', 'Name']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Subscript', 'Subscript', 'Subscript', 'Name']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name', 'List']), ('keywords', []), ('starargs', 'Name'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Num', 'Num', 'Num', 'Name']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Subscript', 'Subscript', 'Subscript', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Subscript', 'Subscript', 'Subscript', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'Name')]", "Call -> [('func', 'Name'), ('args', ['Subscript', 'Subscript', 'Subscript', 'BinOp', 'BinOp']), ('keywords', ['keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Call', 'Name']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name', 'Name']), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'Name'), ('kwargs', 'Name')]", "Call -> [('func', 'Name'), ('args', ['List', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['BinOp', 'Num', 'UnaryOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['BinOp', 'Num', 'BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['UnaryOp', 'Num', 'UnaryOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['UnaryOp', 'Num', 'BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['UnaryOp', 'Num', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Num', 'Num', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Num', 'Num', 'UnaryOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Attribute', 'Name', 'Str', 'Name', 'Name', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Tuple', 'Name']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Attribute', 'Name', 'Str', 'Name', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Tuple', 'Name']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Str', 'Num', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Str', 'Num', 'Str', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Str', 'Num']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Tuple', 'Name', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Str', 'Str']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Str', 'Str']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Str', 'Name', 'Str', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Subscript'), ('args', []), ('keywords', []), ('starargs', 'Name'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name', 'Attribute', 'Name']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Lambda', 'Tuple']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Num', 'Num', 'BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Call', 'Num', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Num', 'Attribute', 'Num', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Subscript', 'Subscript', 'Subscript', 'Attribute', 'Attribute', 'Attribute', 'Name', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'BinOp']), ('keywords', ['keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Name']), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Call', 'Str']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Call', 'BinOp', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Str', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Str', 'Str', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Call', 'Name', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Attribute', 'Name', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['List', 'Str', 'Dict']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Attribute', 'List']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Call', 'List']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Tuple', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Attribute', 'Attribute', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Name', 'Num', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Name', 'Name', 'BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name']), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'Name')]", "Call -> [('func', 'Attribute'), ('args', []), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Attribute', 'Attribute', 'Str']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Call']), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Call', 'BinOp']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Call', 'Call']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['BinOp', 'Name']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'BinOp', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Call', 'Num']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Subscript', 'Num']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['UnaryOp', 'Name', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Attribute', 'Attribute', 'BinOp', 'Attribute']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Call', 'Name', 'Num']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name', 'Name', 'Num']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Subscript', 'Subscript', 'Num', 'Num', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Subscript', 'Subscript', 'Num', 'Num', 'Attribute']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Subscript', 'Subscript', 'Num', 'Num', 'Attribute']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name', 'Name', 'Subscript', 'Subscript']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'Name')]", "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'Name')]", "Call -> [('func', 'Name'), ('args', ['Subscript', 'BoolOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Call', 'Attribute', 'Attribute', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name', 'Str', 'List']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Str', 'Name', 'Name', 'Num', 'Name', 'Name', 'Str', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name', 'Str', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Str', 'Name', 'Name', 'List']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Subscript', 'Subscript', 'Lambda']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'UnaryOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Str', 'Attribute', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Call', 'Name', 'Name', 'Tuple']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name', 'Name', 'Attribute', 'Name']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', []), ('keywords', []), ('starargs', 'BinOp'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['List']), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Call']), ('keywords', []), ('starargs', 'Name'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'Call')]", "Call -> [('func', 'Attribute'), ('args', ['Call', 'Str', 'Str', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Lambda', 'ListComp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Num', 'Call', 'List', 'Num', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Call'), ('args', ['Name', 'Name']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Compare']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Str', 'Name', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'BoolOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Call', 'Call', 'Call', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', []), ('keywords', []), ('starargs', 'GeneratorExp'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Str', 'Str', 'BoolOp', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Str', 'Attribute', 'Num', 'Tuple', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Num', 'Name', 'Num', 'Name', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Attribute', 'Attribute', 'Attribute']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name', 'Attribute', 'Attribute', 'Name', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Str', 'Name', 'Dict']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Attribute']), ('keywords', ['keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Attribute', 'Dict']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Str', 'BoolOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name']), ('keywords', ['keyword']), ('starargs', 'Name'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name', 'Name', 'Name', 'Attribute', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Str', 'List', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name', 'BinOp', 'Name']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name', 'Name', 'Name', 'BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Num', 'Num', 'Num']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Subscript', 'Attribute', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Attribute', 'Call', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Attribute', 'Num', 'List']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Attribute', 'Num', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Attribute', 'Num', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Attribute', 'Tuple']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Attribute', 'Num', 'Tuple']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Num', 'Attribute', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Attribute', 'Num']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Str', 'Name', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Dict']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Subscript', 'Str']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name', 'Num', 'Num', 'BinOp', 'Name']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Str', 'Name', 'Name', 'Name', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Str', 'Name', 'Call', 'Call', 'Call', 'Call', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Str', 'Name', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['List', 'List', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['BinOp', 'Num']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Name']), ('keywords', ['keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['BinOp', 'Subscript']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Name']), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Subscript', 'Subscript']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Call', 'List', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['BinOp', 'List', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Subscript', 'Call']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Num', 'Subscript']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name', 'Name', 'Name', 'Name', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Num', 'Str', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Call', 'BinOp', 'BinOp', 'Attribute', 'Name', 'Name']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Str', 'BoolOp', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Attribute', 'BinOp', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name', 'Attribute', 'Attribute', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['BoolOp']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Call'), ('args', ['Name']), ('keywords', []), ('starargs', 'Name'), ('kwargs', 'Name')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Dict']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'ListComp', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Call', 'Call', 'Call', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Call', 'Call', 'Tuple']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Str', 'Call', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Call', 'Attribute']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Str', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Subscript', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Subscript', 'UnaryOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Attribute', 'Attribute']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Str', 'Dict']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'Name')]", "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Str', 'Name', 'List']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'Name')]", "Call -> [('func', 'Name'), ('args', ['Name', 'Name', 'Subscript', 'Subscript']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'Name')]", "Call -> [('func', 'Name'), ('args', ['Name', 'BinOp', 'BinOp', 'BinOp', 'Name']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name', 'BinOp', 'BinOp', 'Num', 'Name']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name', 'Subscript', 'Name', 'Name', 'Subscript', 'Subscript', 'Name', 'BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['UnaryOp', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name', 'Subscript', 'Name', 'Name', 'Subscript', 'Subscript', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Subscript', 'Num', 'Name', 'Subscript']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name', 'Num', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name', 'Name', 'Name', 'Call', 'Name', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name']), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name', 'BinOp', 'Subscript']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Tuple', 'Name', 'Tuple']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['List', 'Subscript']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Subscript', 'Name', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['BinOp', 'Subscript', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Num', 'Num']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'Name')]", "Call -> [('func', 'Attribute'), ('args', ['Str']), ('keywords', []), ('starargs', 'Name'), ('kwargs', 'Dict')]", "Call -> [('func', 'Attribute'), ('args', ['List', 'Str']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['List', 'Str']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Attribute', 'List', 'Str']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['List', 'BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['List', 'BinOp']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Num', 'Attribute', 'Dict']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Num', 'Attribute', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Call', 'Str', 'Dict', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Call', 'Str', 'Dict', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Num', 'Tuple']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Tuple', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Call', 'Attribute', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name', 'Attribute', 'Attribute', 'Attribute', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Attribute', 'Tuple']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Num', 'Name', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Str', 'UnaryOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Str', 'Str', 'ListComp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Str', 'Str', 'ListComp']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Name']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'Name')]", "Call -> [('func', 'Name'), ('args', ['Num', 'Num', 'Num', 'Num', 'Num', 'Num']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['List', 'BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Num', 'BinOp']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Str', 'BinOp', 'BinOp', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Call'), ('args', []), ('keywords', []), ('starargs', 'Subscript'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Name', 'Dict']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['BinOp', 'Str']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Call', 'Num', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Attribute', 'IfExp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name', 'IfExp', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['ListComp', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Num', 'UnaryOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'List', 'BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Num', 'Name', 'Str']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Num', 'Tuple', 'Str']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Num', 'Tuple', 'Str']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Num', 'Str']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Num', 'Str', 'Name']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Num', 'Name', 'Name']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Num', 'Str', 'Name', 'Str', 'Str']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Subscript']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['BinOp']), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Str', 'Str', 'BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['BinOp']), ('keywords', ['keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name', 'Name']), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name', 'Name', 'Attribute', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Attribute', 'Name', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name', 'Attribute', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Attribute']), ('keywords', []), ('starargs', 'Name'), ('kwargs', 'Name')]", "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Name', 'Subscript']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Str', 'BinOp', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Attribute']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Attribute', 'Attribute', 'BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Call', 'List', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Num', 'Call', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name', 'Call', 'Name', 'Str', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['BinOp', 'Call', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Num', 'Name', 'Name', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['BoolOp']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'Name')]", "Call -> [('func', 'Attribute'), ('args', ['GeneratorExp', 'Str', 'Dict']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Num', 'Call', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Name', 'Attribute', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Name', 'Name', 'Name', 'Name', 'Attribute', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Num', 'Num', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Num', 'Subscript']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'Name')]", "Call -> [('func', 'Attribute'), ('args', ['Call', 'Name', 'Name', 'Call', 'IfExp']), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Subscript', 'Subscript', 'Str']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Subscript', 'Subscript', 'Str']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Subscript'), ('args', []), ('keywords', []), ('starargs', 'Name'), ('kwargs', 'Name')]", "Call -> [('func', 'Attribute'), ('args', []), ('keywords', ['keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'Name')]", "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Name', 'Attribute']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Lambda', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Call', 'Lambda']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'ListComp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Call', 'Subscript', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Num', 'Num', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Num', 'Num', 'BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name', 'Name', 'Name', 'Subscript', 'Subscript', 'Subscript']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Str', 'Call', 'Call', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Str', 'Attribute', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Str', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['BoolOp', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Attribute', 'Str']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Str', 'Name', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Str']), ('keywords', ['keyword']), ('starargs', 'Name'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'BinOp', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Yield'), ('args', []), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Yield']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Yield'), ('args', ['Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Yield'), ('args', ['Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Yield', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Num']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Yield', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Yield', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Yield'), ('args', []), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Yield'), ('args', ['Num', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Attribute', 'Str', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Attribute', 'Str', 'Num', 'Num', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Attribute', 'Str', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Attribute', 'Str', 'BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Tuple', 'Attribute', 'Str', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Tuple', 'Name', 'Name', 'BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Tuple', 'Attribute', 'BinOp', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Attribute', 'BinOp', 'BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Attribute', 'Name', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Attribute', 'Name', 'Num', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Attribute', 'Str', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Name', 'Name', 'Num', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Str', 'Num', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Attribute', 'Str', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Subscript'), ('args', ['Subscript', 'Subscript']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['List', 'Attribute']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name']), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name', 'Subscript']), ('keywords', []), ('starargs', 'Name'), ('kwargs', 'Name')]", "Call -> [('func', 'Subscript'), ('args', ['Name']), ('keywords', []), ('starargs', 'Name'), ('kwargs', 'Name')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Subscript', 'Subscript', 'Subscript', 'Subscript']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Subscript', 'Subscript', 'Subscript']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Subscript', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'ListComp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Str', 'Str', 'Str', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', []), ('keywords', []), ('starargs', 'BinOp'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['BinOp', 'List']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'BinOp', 'Name', 'Name', 'Attribute', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name', 'Subscript', 'Subscript']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'Name')]", "Call -> [('func', 'Name'), ('args', ['Tuple', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name', 'Str', 'Dict']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Num', 'Num', 'Call', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name', 'Name', 'ListComp', 'ListComp', 'Str', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name', 'Name', 'Name', 'Name', 'Str', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name', 'Name', 'Name', 'Call', 'Name', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Str', 'Name', 'Str']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Str', 'Name', 'Attribute', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name', 'Attribute', 'Str', 'Call', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name', 'Name', 'Attribute', 'Name']), ('keywords', ['keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'Name')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Name', 'Tuple']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name', 'Call', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Str', 'Str', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Attribute', 'Name', 'Name', 'UnaryOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Str', 'Name', 'BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', []), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', []), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Str', 'Name', 'BinOp', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Str', 'Name', 'Attribute', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', []), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', []), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Str', 'Name', 'Call', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', []), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', []), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'Attribute')]", "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'Attribute')]", "Call -> [('func', 'Name'), ('args', ['Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'Call')]", "Call -> [('func', 'Name'), ('args', ['Attribute', 'Call']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Str', 'Subscript', 'Subscript']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Attribute', 'Str', 'Call', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Tuple']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Call', 'Str']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Call'), ('args', ['Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name', 'Name', 'Subscript', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'Name')]", "Call -> [('func', 'Attribute'), ('args', ['Str', 'Call']), ('keywords', ['keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Str', 'Call']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Attribute', 'Str', 'Name', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['BinOp']), ('keywords', ['keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Str', 'Str', 'Dict', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Attribute', 'Name', 'Call', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Str', 'Str', 'Name']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Str', 'Str', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Lambda', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Dict']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'Name')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Attribute', 'Name']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Call', 'Name', 'Name', 'Name', 'Name', 'Call', 'Call', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Str', 'Call', 'Name', 'Call', 'Name']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Str', 'Str', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Attribute', 'Name', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name', 'Name', 'BinOp', 'Attribute', 'Name', 'Str', 'Str', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Call', 'Name', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name', 'Name', 'BinOp', 'Attribute', 'Attribute', 'Str', 'Str', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Call', 'Name', 'Name', 'Attribute', 'Attribute', 'ListComp', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Str', 'Call', 'Name', 'Name']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Call', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Str', 'Str', 'Str', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name', 'Name', 'Subscript', 'Name', 'Name', 'Name', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['BinOp', 'List', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Num', 'Num', 'Name', 'BinOp']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Num', 'Num', 'Call', 'BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Name', 'Name', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Attribute', 'BinOp', 'UnaryOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Call', 'Name', 'Name', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Str', 'Str', 'Name', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Name']), ('keywords', []), ('starargs', 'Name'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Attribute', 'Name', 'Name']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Attribute', 'Name', 'Call', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Str', 'Num', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Attribute', 'Name', 'Attribute', 'Attribute', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['BinOp', 'Name']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name', 'Attribute', 'Name', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Tuple', 'Name', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Call', 'Name', 'Str', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name', 'Name', 'Name', 'List']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Attribute', 'Attribute', 'Num', 'Num', 'Num', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Subscript'), ('args', ['Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'Name')]", "Call -> [('func', 'Name'), ('args', ['Name', 'Dict', 'Dict', 'List']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'Dict')]", "Call -> [('func', 'Subscript'), ('args', ['Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Name', 'Name', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Num', 'Name', 'Tuple', 'Dict']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Num', 'Name', 'Tuple', 'Dict', 'Tuple', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Num', 'Name', 'Tuple', 'Dict', 'Tuple', 'Str', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Num', 'Name', 'Tuple', 'Dict', 'Tuple']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name', 'Name', 'Tuple', 'Dict', 'Tuple']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Attribute', 'List']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name', 'Str', 'Dict']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['BinOp']), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['BinOp']), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Num', 'Name', 'Num', 'Name', 'Num', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name', 'Name', 'Tuple']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Lambda', 'Num', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Str', 'Name', 'Name', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['BinOp', 'BinOp']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', []), ('keywords', []), ('starargs', 'Subscript'), ('kwargs', 'Subscript')]", "Call -> [('func', 'Name'), ('args', ['Subscript', 'Subscript', 'Subscript', 'Subscript']), ('keywords', []), ('starargs', 'Name'), ('kwargs', 'Name')]", "Call -> [('func', 'Name'), ('args', ['Dict', 'Dict']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Str', 'Dict']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Lambda', 'Attribute', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Lambda', 'Attribute', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Call'), ('args', ['Subscript']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Num', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'List', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['List', 'Subscript', 'Subscript']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Str', 'Str', 'Call', 'Str', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['BinOp']), ('keywords', []), ('starargs', 'Subscript'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Subscript', 'Subscript', 'Subscript', 'Name']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['BinOp', 'BinOp', 'BinOp']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['BinOp']), ('keywords', []), ('starargs', 'Name'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Subscript'), ('args', ['Call', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Subscript'), ('args', ['Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Subscript'), ('args', []), ('keywords', []), ('starargs', 'GeneratorExp'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Tuple', 'Tuple', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Tuple', 'Num', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Name', 'Tuple', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Call', 'Name', 'Num', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Attribute', 'Tuple', 'Tuple', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Attribute', 'Tuple', 'Call', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Attribute', 'Tuple', 'Tuple', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Attribute', 'Name', 'Name', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Num', 'Num', 'Num', 'BinOp', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Str', 'Attribute', 'Name', 'Name', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Subscript', 'Str', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Name']), ('keywords', []), ('starargs', 'Name'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Attribute', 'Num', 'Num', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Name', 'Name', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Subscript', 'Str', 'Str', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Str', 'Name']), ('keywords', []), ('starargs', 'Name'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Str']), ('keywords', []), ('starargs', 'Name'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Str', 'Attribute', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name', 'Str', 'Str', 'Str', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Name', 'Name', 'Name', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Str', 'Str', 'Str', 'Str', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Str', 'Name', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name', 'Attribute', 'Attribute', 'Attribute', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name', 'Attribute', 'Name', 'Attribute', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name', 'Call', 'Call']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name', 'Call', 'BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name', 'Call', 'BinOp']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name', 'Subscript']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Call', 'Call', 'Call', 'Call']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['List']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'Name')]", "Call -> [('func', 'Attribute'), ('args', ['BinOp', 'BinOp']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', []), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Subscript'), ('args', ['Call', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Call'), ('args', ['Name', 'Name', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['BinOp', 'Tuple', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['BinOp', 'Tuple']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name', 'Name', 'Name']), ('keywords', []), ('starargs', 'Name'), ('kwargs', 'Name')]", "Call -> [('func', 'Name'), ('args', ['Name', 'Name', 'Name', 'Name']), ('keywords', []), ('starargs', 'Name'), ('kwargs', 'Name')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Attribute', 'Attribute', 'Attribute']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'BinOp', 'Tuple', 'Call', 'Tuple']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Attribute', 'Attribute', 'Num', 'Num', 'Num', 'Num', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Call', 'Dict']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name', 'Call', 'Dict', 'Dict']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Call'), ('args', ['Dict', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Attribute', 'Str', 'List']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name']), ('keywords', ['keyword']), ('starargs', 'Name'), ('kwargs', 'Name')]", "Call -> [('func', 'Name'), ('args', ['Subscript', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'Name')]", "Call -> [('func', 'Name'), ('args', ['Num', 'Num', 'Num', 'Name']), ('keywords', ['keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Attribute', 'List']), ('keywords', ['keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Call', 'Tuple', 'Name', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Num', 'Num', 'BinOp', 'Name']), ('keywords', ['keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Attribute', 'Str', 'Name', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Num', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name']), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Str', 'Name', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call', 'Call']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Str', 'Call']), ('keywords', ['keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', []), ('keywords', ['keyword', 'keyword', 'keyword', 'keyword', 'keyword']), ('starargs', 'NoneType'), ('kwargs', 'Name')]", "Call -> [('func', 'Name'), ('args', ['Compare']), ('keywords', []), ('starargs', 'Name'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Compare', 'Compare']), ('keywords', []), ('starargs', 'Name'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Compare', 'Compare', 'Compare']), ('keywords', []), ('starargs', 'Name'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name', 'Attribute', 'Attribute', 'BinOp', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Name', 'Attribute', 'Str', 'Name', 'Dict']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['Str', 'Call', 'Call', 'List', 'Num']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Name'), ('args', ['IfExp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['ListComp', 'Str']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Num', 'Name', 'Attribute', 'Name', 'Name']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]", "Call -> [('func', 'Attribute'), ('args', ['Str', 'Str', 'BinOp']), ('keywords', []), ('starargs', 'NoneType'), ('kwargs', 'NoneType')]"], "Mod": ["Mod -> <NULL>"], "Eq": ["Eq -> <NULL>"], "ListComp": ["ListComp -> [('elt', 'BinOp'), ('generators', ['comprehension'])]", "ListComp -> [('elt', 'Call'), ('generators', ['comprehension'])]", "ListComp -> [('elt', 'Compare'), ('generators', ['comprehension'])]", "ListComp -> [('elt', 'Subscript'), ('generators', ['comprehension'])]", "ListComp -> [('elt', 'Name'), ('generators', ['comprehension'])]", "ListComp -> [('elt', 'Attribute'), ('generators', ['comprehension'])]", "ListComp -> [('elt', 'Tuple'), ('generators', ['comprehension'])]", "ListComp -> [('elt', 'BoolOp'), ('generators', ['comprehension'])]", "ListComp -> [('elt', 'Dict'), ('generators', ['comprehension'])]", "ListComp -> [('elt', 'Num'), ('generators', ['comprehension'])]", "ListComp -> [('elt', 'Tuple'), ('generators', ['comprehension', 'comprehension'])]", "ListComp -> [('elt', 'Call'), ('generators', ['comprehension', 'comprehension'])]", "ListComp -> [('elt', 'ListComp'), ('generators', ['comprehension'])]", "ListComp -> [('elt', 'UnaryOp'), ('generators', ['comprehension'])]", "ListComp -> [('elt', 'Name'), ('generators', ['comprehension', 'comprehension'])]", "ListComp -> [('elt', 'List'), ('generators', ['comprehension'])]", "ListComp -> [('elt', 'Lambda'), ('generators', ['comprehension'])]", "ListComp -> [('elt', 'Str'), ('generators', ['comprehension'])]", "ListComp -> [('elt', 'IfExp'), ('generators', ['comprehension'])]"], "LShift": ["LShift -> <NULL>"], "If": ["If -> [('test', 'Call'), ('body', ['Expr']), ('orelse', ['Expr'])]", "If -> [('test', 'Name'), ('body', ['Return']), ('orelse', ['Return'])]", "If -> [('test', 'Name'), ('body', ['AugAssign']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign']), ('orelse', ['Assign'])]", "If -> [('test', 'Compare'), ('body', ['Expr', 'Return']), ('orelse', [])]", "If -> [('test', 'UnaryOp'), ('body', ['Expr', 'Return']), ('orelse', ['Expr', 'Return'])]", "If -> [('test', 'Compare'), ('body', ['Return']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Expr', 'Assign', 'Return']), ('orelse', [])]", "If -> [('test', 'Attribute'), ('body', ['Return']), ('orelse', ['Return'])]", "If -> [('test', 'Compare'), ('body', ['Expr']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['Assign']), ('orelse', [])]", "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign', 'Assign', 'Expr']), ('orelse', ['Pass'])]", "If -> [('test', 'UnaryOp'), ('body', ['Return']), ('orelse', [])]", "If -> [('test', 'BoolOp'), ('body', ['Raise']), ('orelse', ['Return'])]", "If -> [('test', 'Compare'), ('body', ['Assign']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Print', 'Raise']), ('orelse', [])]", "If -> [('test', 'BoolOp'), ('body', ['Raise']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['Expr']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Print', 'Assign', 'Assign', 'Assign', 'Assign']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['Print', 'Expr']), ('orelse', [])]", "If -> [('test', 'BoolOp'), ('body', ['Return']), ('orelse', ['Return'])]", "If -> [('test', 'Call'), ('body', ['Return']), ('orelse', ['Assign', 'Expr', 'Return'])]", "If -> [('test', 'UnaryOp'), ('body', ['Expr']), ('orelse', ['Assign', 'If', 'If'])]", "If -> [('test', 'UnaryOp'), ('body', ['Expr']), ('orelse', ['Expr'])]", "If -> [('test', 'Name'), ('body', ['Assign']), ('orelse', [])]", "If -> [('test', 'UnaryOp'), ('body', ['Assign']), ('orelse', [])]", "If -> [('test', 'Attribute'), ('body', ['For']), ('orelse', [])]", "If -> [('test', 'BoolOp'), ('body', ['Expr']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Raise']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['Return']), ('orelse', ['Return'])]", "If -> [('test', 'Compare'), ('body', ['If']), ('orelse', [])]", "If -> [('test', 'UnaryOp'), ('body', ['Expr']), ('orelse', ['If'])]", "If -> [('test', 'UnaryOp'), ('body', ['Expr']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Return']), ('orelse', ['Return'])]", "If -> [('test', 'Compare'), ('body', ['Expr', 'Expr', 'If']), ('orelse', ['If', 'Expr', 'Expr'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'If']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Expr', 'Expr']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['If', 'If']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Return']), ('orelse', ['AugAssign'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Expr']), ('orelse', ['If'])]", "If -> [('test', 'Compare'), ('body', ['Expr']), ('orelse', ['If'])]", "If -> [('test', 'Compare'), ('body', ['If']), ('orelse', ['If'])]", "If -> [('test', 'Compare'), ('body', ['Expr']), ('orelse', ['Expr'])]", "If -> [('test', 'Call'), ('body', ['TryExcept', 'If']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['TryExcept']), ('orelse', [])]", "If -> [('test', 'UnaryOp'), ('body', ['Continue']), ('orelse', [])]", "If -> [('test', 'Subscript'), ('body', ['Continue']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('orelse', ['If'])]", "If -> [('test', 'Call'), ('body', ['Assign', 'Assign', 'Assign']), ('orelse', ['Continue'])]", "If -> [('test', 'Compare'), ('body', ['Return']), ('orelse', ['If'])]", "If -> [('test', 'Compare'), ('body', ['Expr', 'If', 'TryExcept', 'Raise']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr']), ('orelse', [])]", "If -> [('test', 'Attribute'), ('body', ['Return']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Expr', 'Raise']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['Return']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['TryExcept']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['Assign', 'Assign', 'TryExcept', 'Assign', 'TryExcept', 'Assign', 'If']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Expr']), ('orelse', ['Assign'])]", "If -> [('test', 'BoolOp'), ('body', ['If']), ('orelse', [])]", "If -> [('test', 'Attribute'), ('body', ['If']), ('orelse', [])]", "If -> [('test', 'BoolOp'), ('body', ['Expr']), ('orelse', ['For'])]", "If -> [('test', 'BoolOp'), ('body', ['Expr']), ('orelse', ['If'])]", "If -> [('test', 'Attribute'), ('body', ['If', 'If', 'If', 'Assign', 'Assign', 'Assign', 'If']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['Continue']), ('orelse', [])]", "If -> [('test', 'UnaryOp'), ('body', ['For', 'For', 'For', 'For']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Expr', 'If']), ('orelse', [])]", "If -> [('test', 'Attribute'), ('body', ['Expr']), ('orelse', [])]", "If -> [('test', 'BoolOp'), ('body', ['Assign', 'If', 'Assign', 'For', 'If', 'Assign', 'If', 'If']), ('orelse', ['If'])]", "If -> [('test', 'Compare'), ('body', ['If', 'If']), ('orelse', ['If'])]", "If -> [('test', 'Compare'), ('body', ['AugAssign']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['Expr']), ('orelse', ['Assign'])]", "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'For', 'If']), ('orelse', [])]", "If -> [('test', 'BoolOp'), ('body', ['Assign']), ('orelse', ['If'])]", "If -> [('test', 'Compare'), ('body', ['For', 'For', 'For', 'For']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Continue']), ('orelse', [])]", "If -> [('test', 'BoolOp'), ('body', ['Continue']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['Expr']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['Assign', 'Expr']), ('orelse', [])]", "If -> [('test', 'BoolOp'), ('body', ['Return']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign']), ('orelse', ['If'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign']), ('orelse', ['Assign', 'Assign'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Expr']), ('orelse', ['If'])]", "If -> [('test', 'BoolOp'), ('body', ['TryExcept']), ('orelse', [])]", "If -> [('test', 'Attribute'), ('body', ['Assign']), ('orelse', ['Assign'])]", "If -> [('test', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'Assign']), ('orelse', [])]", "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Return']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'If', 'Assign', 'Assign']), ('orelse', ['Assign', 'Assign'])]", "If -> [('test', 'UnaryOp'), ('body', ['Raise']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign']), ('orelse', ['If'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign']), ('orelse', ['Raise'])]", "If -> [('test', 'Name'), ('body', ['Assign']), ('orelse', ['Assign'])]", "If -> [('test', 'Call'), ('body', ['Assign', 'Assign']), ('orelse', ['Assign'])]", "If -> [('test', 'BoolOp'), ('body', ['Assign']), ('orelse', ['Assign'])]", "If -> [('test', 'Compare'), ('body', ['Assign']), ('orelse', ['If', 'Assign'])]", "If -> [('test', 'UnaryOp'), ('body', ['If']), ('orelse', ['Expr', 'Expr', 'For'])]", "If -> [('test', 'Compare'), ('body', ['If', 'Assign', 'Assign', 'Assign', 'For', 'Assign']), ('orelse', [])]", "If -> [('test', 'BoolOp'), ('body', ['If']), ('orelse', ['If'])]", "If -> [('test', 'Name'), ('body', ['Assign']), ('orelse', ['If'])]", "If -> [('test', 'Name'), ('body', ['Assign']), ('orelse', ['Raise'])]", "If -> [('test', 'Call'), ('body', ['Assign', 'Expr', 'Expr']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['For']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign']), ('orelse', ['Assign', 'Assign', 'Expr'])]", "If -> [('test', 'Compare'), ('body', ['Assign']), ('orelse', ['If'])]", "If -> [('test', 'Attribute'), ('body', ['Assign']), ('orelse', ['Assign', 'If'])]", "If -> [('test', 'Name'), ('body', ['Assign', 'Assign']), ('orelse', ['Assign'])]", "If -> [('test', 'Attribute'), ('body', ['AugAssign']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['Assign', 'Assign']), ('orelse', ['If'])]", "If -> [('test', 'Name'), ('body', ['Assign', 'Assign']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['If', 'Return']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Break']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['Raise']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['Assign']), ('orelse', ['Assign'])]", "If -> [('test', 'Call'), ('body', ['If']), ('orelse', [])]", "If -> [('test', 'BoolOp'), ('body', ['Assign']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['ImportFrom', 'Assign']), ('orelse', [])]", "If -> [('test', 'BoolOp'), ('body', ['Continue']), ('orelse', ['If'])]", "If -> [('test', 'Compare'), ('body', ['If']), ('orelse', ['Expr'])]", "If -> [('test', 'Name'), ('body', ['Delete']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['FunctionDef']), ('orelse', ['FunctionDef'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'If']), ('orelse', ['Assign', 'TryExcept'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'Assign']), ('orelse', ['Assign', 'Assign', 'Assign'])]", "If -> [('test', 'Compare'), ('body', ['Assign']), ('orelse', ['Assign', 'Assign', 'Assign', 'For'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['Assign', 'If']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['Assign', 'If']), ('orelse', ['Expr'])]", "If -> [('test', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'Expr']), ('orelse', ['Expr'])]", "If -> [('test', 'Name'), ('body', ['Assign', 'Assign', 'Assign', 'Return']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'If', 'If']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['Print']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign']), ('orelse', [])]", "If -> [('test', 'Attribute'), ('body', ['Assign', 'Assign', 'If']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['TryExcept']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['Assign']), ('orelse', ['If'])]", "If -> [('test', 'Call'), ('body', ['Assign', 'Assign', 'Assign']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['Expr', 'Expr']), ('orelse', [])]", "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign']), ('orelse', [])]", "If -> [('test', 'UnaryOp'), ('body', ['If', 'If']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['If', 'If']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'Assign', 'If', 'Assign', 'Expr']), ('orelse', [])]", "If -> [('test', 'UnaryOp'), ('body', ['Print', 'Expr']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'If']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['For']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Expr']), ('orelse', [])]", "If -> [('test', 'BoolOp'), ('body', ['AugAssign']), ('orelse', [])]", "If -> [('test', 'UnaryOp'), ('body', ['Expr', 'Return']), ('orelse', [])]", "If -> [('test', 'BoolOp'), ('body', ['Expr', 'Expr']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Expr', 'Expr', 'Expr']), ('orelse', [])]", "If -> [('test', 'BoolOp'), ('body', ['Expr', 'Expr', 'Expr']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['Expr', 'Assign']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['Expr', 'If']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['If', 'Return']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['Expr']), ('orelse', ['Expr', 'Return'])]", "If -> [('test', 'Compare'), ('body', ['Expr', 'Expr', 'Expr']), ('orelse', ['Raise'])]", "If -> [('test', 'BoolOp'), ('body', ['Expr', 'Return']), ('orelse', ['If'])]", "If -> [('test', 'Call'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'If']), ('orelse', ['Pass'])]", "If -> [('test', 'Call'), ('body', ['Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'If', 'If']), ('orelse', ['Expr'])]", "If -> [('test', 'UnaryOp'), ('body', ['Return']), ('orelse', ['Expr', 'Assign', 'Assign', 'Assign', 'If'])]", "If -> [('test', 'Call'), ('body', ['Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'If', 'Expr', 'Assign', 'If', 'Return']), ('orelse', ['Expr', 'Return'])]", "If -> [('test', 'Compare'), ('body', ['Expr', 'Assign']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['Expr', 'Return']), ('orelse', ['If'])]", "If -> [('test', 'Compare'), ('body', ['Expr', 'Assign', 'Expr']), ('orelse', ['If'])]", "If -> [('test', 'Call'), ('body', ['Assign', 'If']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['Expr', 'Assign', 'Expr']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Expr']), ('orelse', ['For'])]", "If -> [('test', 'UnaryOp'), ('body', ['Raise', 'Return']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['Assign', 'Assign']), ('orelse', [])]", "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'Assign', 'Assign', 'Assign']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['If']), ('orelse', ['If'])]", "If -> [('test', 'BoolOp'), ('body', ['Delete']), ('orelse', [])]", "If -> [('test', 'Attribute'), ('body', ['Assign', 'Assign', 'Assign', 'Return']), ('orelse', [])]", "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'Expr', 'If']), ('orelse', [])]", "If -> [('test', 'BoolOp'), ('body', ['ImportFrom', 'Assign', 'TryExcept', 'Assign', 'Expr']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'If', 'Assign']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'Raise']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['Raise']), ('orelse', [])]", "If -> [('test', 'Attribute'), ('body', ['Assign', 'If']), ('orelse', [])]", "If -> [('test', 'UnaryOp'), ('body', ['If']), ('orelse', [])]", "If -> [('test', 'Attribute'), ('body', ['Continue']), ('orelse', ['If'])]", "If -> [('test', 'Attribute'), ('body', ['Assign']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['If', 'Assign', 'Assign', 'Raise']), ('orelse', [])]", "If -> [('test', 'UnaryOp'), ('body', ['Return']), ('orelse', ['Assign', 'Assign', 'Assign', 'Return'])]", "If -> [('test', 'UnaryOp'), ('body', ['Return']), ('orelse', ['Assign', 'Assign', 'Return'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'TryExcept']), ('orelse', ['Assign', 'Assign', 'Expr', 'Expr'])]", "If -> [('test', 'Call'), ('body', ['If', 'If', 'Assign', 'Return']), ('orelse', [])]", "If -> [('test', 'UnaryOp'), ('body', ['Return']), ('orelse', ['Expr', 'Assign'])]", "If -> [('test', 'Call'), ('body', ['Assign']), ('orelse', ['Assign', 'If'])]", "If -> [('test', 'Compare'), ('body', ['Raise']), ('orelse', ['If'])]", "If -> [('test', 'BoolOp'), ('body', ['TryExcept', 'TryExcept']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['Expr']), ('orelse', ['For'])]", "If -> [('test', 'UnaryOp'), ('body', ['TryExcept']), ('orelse', [])]", "If -> [('test', 'Attribute'), ('body', ['Continue']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['If', 'TryExcept', 'Expr']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['Delete', 'Delete']), ('orelse', [])]", "If -> [('test', 'BoolOp'), ('body', ['Expr', 'Continue']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['Expr', 'Continue']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['Return']), ('orelse', ['If', 'Assign', 'Return'])]", "If -> [('test', 'Name'), ('body', ['Assign', 'If']), ('orelse', ['Assign'])]", "If -> [('test', 'Name'), ('body', ['Assign', 'If', 'Assign']), ('orelse', ['Assign'])]", "If -> [('test', 'Name'), ('body', ['Assign', 'If', 'Assign']), ('orelse', ['Assign', 'Assign', 'Assign'])]", "If -> [('test', 'Compare'), ('body', ['Assign']), ('orelse', ['Return'])]", "If -> [('test', 'UnaryOp'), ('body', ['ImportFrom']), ('orelse', [])]", "If -> [('test', 'Attribute'), ('body', ['Expr', 'Expr', 'Expr', 'Expr']), ('orelse', [])]", "If -> [('test', 'BoolOp'), ('body', ['Expr', 'Return']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['Assign', 'For']), ('orelse', ['Assign', 'For'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'Assign']), ('orelse', ['Assign', 'Assign', 'Assign', 'Assign'])]", "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'Expr', 'Expr', 'Expr']), ('orelse', [])]", "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'Expr', 'Assign', 'For']), ('orelse', [])]", "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'Expr']), ('orelse', [])]", "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'Expr', 'Expr']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['Assign', 'Assign']), ('orelse', ['Assign', 'Assign'])]", "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign', 'Assign']), ('orelse', ['If'])]", "If -> [('test', 'Name'), ('body', ['Assign', 'Assign', 'Assign']), ('orelse', [])]", "If -> [('test', 'UnaryOp'), ('body', ['Expr', 'Expr', 'Expr']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['Expr']), ('orelse', ['Expr'])]", "If -> [('test', 'UnaryOp'), ('body', ['For']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['Pass']), ('orelse', ['Expr', 'If', 'Expr', 'Expr'])]", "If -> [('test', 'Call'), ('body', ['Assign', 'Assign']), ('orelse', ['Assign', 'Assign'])]", "If -> [('test', 'Call'), ('body', ['For', 'Return']), ('orelse', [])]", "If -> [('test', 'UnaryOp'), ('body', ['Return']), ('orelse', ['If'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'If']), ('orelse', ['Assign', 'Assert', 'Assign', 'Assign'])]", "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'Assign']), ('orelse', ['Assert', 'Assign', 'Assign'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'Return']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Expr', 'AugAssign', 'Break']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Break']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['Assign', 'Assign', 'For']), ('orelse', ['Assign', 'For'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Return']), ('orelse', ['Return'])]", "If -> [('test', 'Compare'), ('body', ['FunctionDef']), ('orelse', ['FunctionDef'])]", "If -> [('test', 'Name'), ('body', ['Assign', 'Assign', 'For', 'Return']), ('orelse', ['Assign', 'Assign', 'If', 'Return'])]", "If -> [('test', 'Name'), ('body', ['Assign', 'Return']), ('orelse', ['Assign', 'Assign', 'If', 'Return'])]", "If -> [('test', 'Attribute'), ('body', ['Expr']), ('orelse', ['Assign', 'If', 'If'])]", "If -> [('test', 'Call'), ('body', ['Expr', 'Continue']), ('orelse', [])]", "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'AugAssign']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['If']), ('orelse', ['Expr'])]", "If -> [('test', 'UnaryOp'), ('body', ['Break']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['If']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['Expr', 'AugAssign', 'For']), ('orelse', [])]", "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'Return']), ('orelse', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'If', 'Assign', 'Return'])]", "If -> [('test', 'Call'), ('body', ['Assign', 'Return']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['Expr', 'Expr', 'Expr', 'Expr', 'If', 'Expr', 'Raise']), ('orelse', [])]", "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'Assign', 'Assign', 'Return']), ('orelse', ['TryExcept', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr'])]", "If -> [('test', 'Call'), ('body', ['Assign', 'TryExcept', 'Assign', 'AugAssign', 'Assign', 'Return']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['Expr', 'Expr', 'Expr', 'Expr', 'If', 'Raise']), ('orelse', ['Assign', 'Assign', 'Assign', 'Assign', 'If'])]", "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'Return']), ('orelse', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'For', 'Assign', 'Assign', 'For', 'Expr', 'For', 'Expr', 'Expr', 'Return'])]", "If -> [('test', 'Call'), ('body', ['Assign', 'Expr', 'Assign', 'Assign', 'TryExcept']), ('orelse', ['Assign'])]", "If -> [('test', 'Compare'), ('body', ['If', 'Return']), ('orelse', ['If', 'Return'])]", "If -> [('test', 'UnaryOp'), ('body', ['Return']), ('orelse', ['Return'])]", "If -> [('test', 'Call'), ('body', ['Assign', 'Expr']), ('orelse', ['If'])]", "If -> [('test', 'Call'), ('body', ['Expr', 'Assign', 'Expr']), ('orelse', [])]", "If -> [('test', 'BoolOp'), ('body', ['ImportFrom', 'Assign', 'Assign', 'For']), ('orelse', [])]", "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign', 'If']), ('orelse', [])]", "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign']), ('orelse', [])]", "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign', 'Assign', 'Assign']), ('orelse', [])]", "If -> [('test', 'BoolOp'), ('body', ['Assign', 'If']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['Assign', 'Break']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['Assign', 'Continue']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['Expr', 'Expr', 'Expr']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Expr', 'Expr']), ('orelse', ['Expr'])]", "If -> [('test', 'Name'), ('body', ['FunctionDef', 'Assign', 'Expr', 'Expr', 'Expr']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['If', 'Assign', 'FunctionDef', 'Assign', 'Assign', 'Expr', 'Expr', 'For']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['TryExcept', 'FunctionDef', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'If', 'If', 'FunctionDef', 'Assign', 'Expr', 'Expr', 'Expr']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'If', 'If', 'FunctionDef', 'Assign', 'Expr', 'Expr', 'Expr']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'TryExcept']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['FunctionDef', 'Assign', 'Expr', 'Expr', 'Expr']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['FunctionDef', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['If', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'Assign', 'Expr', 'Expr', 'For']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['For', 'Expr']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['ImportFrom', 'Assign', 'FunctionDef', 'Expr']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['Assign']), ('orelse', ['If', 'If'])]", "If -> [('test', 'Attribute'), ('body', ['Expr', 'Assign', 'If']), ('orelse', ['Expr'])]", "If -> [('test', 'Attribute'), ('body', ['Expr']), ('orelse', ['Expr'])]", "If -> [('test', 'Compare'), ('body', ['Expr', 'Assign', 'Expr', 'Expr']), ('orelse', [])]", "If -> [('test', 'Attribute'), ('body', ['Assign', 'For', 'For', 'Assign', 'If', 'Assign', 'Assign', 'If']), ('orelse', ['Assign'])]", "If -> [('test', 'Call'), ('body', ['Delete']), ('orelse', [])]", "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'Assign']), ('orelse', [])]", "If -> [('test', 'Attribute'), ('body', ['Assign', 'Assign', 'Expr']), ('orelse', ['Assign'])]", "If -> [('test', 'Attribute'), ('body', ['Assign', 'Assign', 'Expr']), ('orelse', ['Assign', 'Expr'])]", "If -> [('test', 'BoolOp'), ('body', ['Expr', 'If']), ('orelse', ['Expr', 'Expr', 'If'])]", "If -> [('test', 'UnaryOp'), ('body', ['Assign']), ('orelse', ['Assign'])]", "If -> [('test', 'Name'), ('body', ['Return']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['Expr', 'Return']), ('orelse', [])]", "If -> [('test', 'BoolOp'), ('body', ['If']), ('orelse', ['Assign'])]", "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'If', 'Assign', 'Assign', 'If']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['For']), ('orelse', ['Expr'])]", "If -> [('test', 'UnaryOp'), ('body', ['Assign']), ('orelse', ['Expr'])]", "If -> [('test', 'Name'), ('body', ['Assign', 'Expr', 'Expr']), ('orelse', ['Expr'])]", "If -> [('test', 'Attribute'), ('body', ['Assign', 'Expr']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['Assign', 'Assign', 'If']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['If', 'Assign']), ('orelse', ['If'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'If', 'ImportFrom', 'Assign', 'Assign', 'Return']), ('orelse', ['If'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'For', 'Assign']), ('orelse', ['Assign'])]", "If -> [('test', 'Name'), ('body', ['Assert', 'Assign']), ('orelse', ['Assign'])]", "If -> [('test', 'Call'), ('body', ['Assert', 'Expr']), ('orelse', ['Assert', 'Expr'])]", "If -> [('test', 'Attribute'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'For']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign']), ('orelse', ['Assign', 'Expr', 'Expr'])]", "If -> [('test', 'Attribute'), ('body', ['Assign', 'Assign', 'If', 'For']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'AugAssign']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'For']), ('orelse', ['For'])]", "If -> [('test', 'Call'), ('body', ['Assign', 'AugAssign']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Expr', 'For']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Expr', 'For', 'If']), ('orelse', [])]", "If -> [('test', 'BoolOp'), ('body', ['For']), ('orelse', ['If'])]", "If -> [('test', 'BoolOp'), ('body', ['For']), ('orelse', ['Assign', 'Assign'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'If', 'Expr']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['For']), ('orelse', ['Assign', 'Assign', 'Expr'])]", "If -> [('test', 'Attribute'), ('body', ['Expr', 'If']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['For']), ('orelse', ['If'])]", "If -> [('test', 'Compare'), ('body', ['Assign']), ('orelse', ['Assign', 'Assign'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'If']), ('orelse', ['Assign'])]", "If -> [('test', 'Call'), ('body', ['Assign', 'If', 'Expr', 'If', 'Return']), ('orelse', [])]", "If -> [('test', 'UnaryOp'), ('body', ['Assign']), ('orelse', ['If'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Expr', 'Return']), ('orelse', ['Return'])]", "If -> [('test', 'Call'), ('body', ['Assign', 'If', 'Expr', 'Return']), ('orelse', [])]", "If -> [('test', 'BoolOp'), ('body', ['Assign', 'If']), ('orelse', ['Assign', 'Assign'])]", "If -> [('test', 'Call'), ('body', ['Expr', 'Return']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign']), ('orelse', ['Assign', 'Assign', 'If'])]", "If -> [('test', 'UnaryOp'), ('body', ['If', 'TryExcept', 'If', 'Assign']), ('orelse', [])]", "If -> [('test', 'Attribute'), ('body', ['Raise']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Return']), ('orelse', [])]", "If -> [('test', 'Attribute'), ('body', ['Expr', 'Return']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['Assign', 'TryExcept']), ('orelse', ['Assign'])]", "If -> [('test', 'UnaryOp'), ('body', ['ImportFrom', 'Assign']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['For']), ('orelse', ['Assign', 'Expr'])]", "If -> [('test', 'UnaryOp'), ('body', ['TryExcept']), ('orelse', ['Assign'])]", "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign']), ('orelse', ['Assign', 'Assign'])]", "If -> [('test', 'Call'), ('body', ['TryExcept']), ('orelse', ['Assign'])]", "If -> [('test', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'Assign']), ('orelse', ['Assign'])]", "If -> [('test', 'Compare'), ('body', ['Break']), ('orelse', ['Assign'])]", "If -> [('test', 'Compare'), ('body', ['AugAssign', 'Continue']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Expr', 'Continue']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['Break']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign']), ('orelse', ['Expr', 'Break'])]", "If -> [('test', 'Compare'), ('body', ['Expr']), ('orelse', ['Expr', 'AugAssign'])]", "If -> [('test', 'Subscript'), ('body', ['Assign']), ('orelse', [])]", "If -> [('test', 'Subscript'), ('body', ['Expr', 'Expr', 'Expr']), ('orelse', [])]", "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'Assign', 'Return']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Delete']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['Expr', 'AugAssign']), ('orelse', ['Expr', 'AugAssign'])]", "If -> [('test', 'Name'), ('body', ['Assign', 'Expr', 'Expr']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['If', 'If', 'If']), ('orelse', [])]", "If -> [('test', 'Num'), ('body', ['Assign', 'Assign', 'Assign', 'Assign']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Pass']), ('orelse', ['Raise'])]", "If -> [('test', 'BoolOp'), ('body', ['If', 'Expr']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['AugAssign']), ('orelse', ['AugAssign'])]", "If -> [('test', 'Call'), ('body', ['Assign', 'If']), ('orelse', ['Raise'])]", "If -> [('test', 'Call'), ('body', ['Delete', 'Assign']), ('orelse', [])]", "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'Expr', 'Return']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['AugAssign', 'If']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['AugAssign']), ('orelse', ['AugAssign'])]", "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'Assign', 'Expr', 'Assign']), ('orelse', [])]", "If -> [('test', 'Num'), ('body', ['Print', 'Print', 'For', 'Expr']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'For', 'Assign']), ('orelse', ['If'])]", "If -> [('test', 'Compare'), ('body', ['Assign']), ('orelse', ['Assert'])]", "If -> [('test', 'Num'), ('body', ['Expr']), ('orelse', [])]", "If -> [('test', 'Num'), ('body', ['Assign', 'Expr', 'Expr', 'Assign']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['Pass']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Return']), ('orelse', ['Assign', 'Assign', 'If'])]", "If -> [('test', 'Compare'), ('body', ['Return']), ('orelse', ['Assign', 'Assign', 'Assign', 'For', 'Return'])]", "If -> [('test', 'Compare'), ('body', ['Return']), ('orelse', ['Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'While', 'Return'])]", "If -> [('test', 'Num'), ('body', ['Assign', 'Expr', 'Expr', 'Expr']), ('orelse', ['Assign', 'Expr'])]", "If -> [('test', 'Num'), ('body', ['Assign', 'Assign', 'Expr', 'Print', 'Expr']), ('orelse', ['Assign', 'Print', 'Print', 'Expr'])]", "If -> [('test', 'Num'), ('body', ['Expr', 'Expr']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Expr', 'Expr']), ('orelse', ['Expr', 'Expr'])]", "If -> [('test', 'Compare'), ('body', ['Import', 'FunctionDef', 'FunctionDef', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'For', 'For', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'FunctionDef', 'Assign', 'Assign', 'For', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('orelse', ['Print'])]", "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'Assign', 'If']), ('orelse', [])]", "If -> [('test', 'UnaryOp'), ('body', ['Expr', 'Expr']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['Assign', 'Expr', 'FunctionDef', 'For', 'For', 'Expr', 'If']), ('orelse', [])]", "If -> [('test', 'Num'), ('body', ['Assign', 'Expr']), ('orelse', [])]", "If -> [('test', 'Num'), ('body', ['Assign', 'Assign', 'Assign', 'For', 'Expr']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'For']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'For']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Print', 'Expr', 'Expr']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Expr', 'Expr', 'Expr', 'If', 'Return']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Expr', 'Expr', 'Expr', 'Return']), ('orelse', [])]", "If -> [('test', 'Attribute'), ('body', ['If']), ('orelse', ['Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Return'])]", "If -> [('test', 'Compare'), ('body', ['Expr', 'Expr', 'Expr', 'Return']), ('orelse', ['Expr', 'Return'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'If', 'Expr', 'Expr', 'Expr']), ('orelse', ['If'])]", "If -> [('test', 'BoolOp'), ('body', ['Expr', 'Expr']), ('orelse', ['If'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'If']), ('orelse', ['Assign'])]", "If -> [('test', 'Name'), ('body', ['If', 'Expr']), ('orelse', [])]", "If -> [('test', 'Subscript'), ('body', ['Expr']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign']), ('orelse', ['Assign', 'If', 'If', 'Assign'])]", "If -> [('test', 'Compare'), ('body', ['Break']), ('orelse', ['If'])]", "If -> [('test', 'Compare'), ('body', ['Print', 'Assign']), ('orelse', ['If'])]", "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Expr', 'Expr']), ('orelse', ['Assign', 'Expr'])]", "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'Assign']), ('orelse', ['If'])]", "If -> [('test', 'Name'), ('body', ['Assign', 'Expr']), ('orelse', ['Assign', 'Expr', 'Expr', 'Expr'])]", "If -> [('test', 'Name'), ('body', ['Expr', 'Expr']), ('orelse', ['Assign', 'Expr'])]", "If -> [('test', 'Call'), ('body', ['AugAssign']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Import', 'Import']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Expr', 'Expr']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Expr', 'Expr']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'Expr']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Expr', 'For', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr']), ('orelse', [])]", "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Expr', 'Expr', 'Return']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'For', 'Expr', 'Expr', 'Assign', 'Expr']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'For', 'Expr', 'Expr', 'Assign', 'Expr', 'If']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Expr', 'Expr', 'Return']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Expr', 'Expr', 'Assign', 'Expr']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['Print', 'Expr']), ('orelse', ['Print'])]", "If -> [('test', 'Call'), ('body', ['Expr', 'AugAssign']), ('orelse', [])]", "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign', 'Expr', 'For']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Print', 'If']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Print', 'Expr']), ('orelse', ['If'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Print', 'Expr']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Expr', 'For']), ('orelse', [])]", "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'For']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['Assign', 'If', 'Assign']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['For']), ('orelse', [])]", "If -> [('test', 'Attribute'), ('body', ['Assign', 'If', 'Assign']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['Assign', 'If', 'Return']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['Assign', 'If', 'Assign', 'Assign', 'If', 'For']), ('orelse', [])]", "If -> [('test', 'Attribute'), ('body', ['Expr', 'Expr']), ('orelse', [])]", "If -> [('test', 'BoolOp'), ('body', ['If', 'Assign', 'TryExcept']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['Return']), ('orelse', ['If'])]", "If -> [('test', 'Call'), ('body', ['Assign', 'Assign', 'Return']), ('orelse', ['If'])]", "If -> [('test', 'Call'), ('body', ['Assign', 'If', 'If', 'Assign']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['ImportFrom']), ('orelse', ['ImportFrom'])]", "If -> [('test', 'Compare'), ('body', ['Print']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['Return']), ('orelse', ['If'])]", "If -> [('test', 'Call'), ('body', ['Expr', 'Delete']), ('orelse', [])]", "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign']), ('orelse', ['If'])]", "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign', 'Assign', 'Assign']), ('orelse', ['If'])]", "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign', 'Assign']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['If', 'Expr']), ('orelse', [])]", "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'If', 'If']), ('orelse', ['Print', 'Assign', 'If', 'If'])]", "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'If']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Expr', 'Assign', 'Expr']), ('orelse', [])]", "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Break']), ('orelse', [])]", "If -> [('test', 'BoolOp'), ('body', ['If', 'Return']), ('orelse', [])]", "If -> [('test', 'Attribute'), ('body', ['Assign', 'FunctionDef', 'While']), ('orelse', [])]", "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign', 'Return']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['Assign', 'Expr', 'Expr', 'Return']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'If']), ('orelse', ['Print', 'Return'])]", "If -> [('test', 'Name'), ('body', ['Assign', 'Expr']), ('orelse', ['Return'])]", "If -> [('test', 'Call'), ('body', ['Print']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign']), ('orelse', ['Assign'])]", "If -> [('test', 'Compare'), ('body', ['Assign']), ('orelse', ['TryExcept'])]", "If -> [('test', 'UnaryOp'), ('body', ['For', 'Return']), ('orelse', ['Return'])]", "If -> [('test', 'Name'), ('body', ['Expr', 'Expr', 'For', 'FunctionDef', 'Expr', 'Expr', 'Expr']), ('orelse', [])]", "If -> [('test', 'UnaryOp'), ('body', ['For']), ('orelse', ['Expr'])]", "If -> [('test', 'Compare'), ('body', ['For']), ('orelse', ['Assign'])]", "If -> [('test', 'Name'), ('body', ['Expr']), ('orelse', ['Assign', 'If'])]", "If -> [('test', 'Compare'), ('body', ['Expr']), ('orelse', ['Raise'])]", "If -> [('test', 'Compare'), ('body', ['Expr', 'If']), ('orelse', ['Raise'])]", "If -> [('test', 'Compare'), ('body', ['Expr', 'Expr']), ('orelse', ['Raise'])]", "If -> [('test', 'Call'), ('body', ['Assign', 'If', 'Assign', 'If']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['Assign', 'Break']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'If', 'If', 'Assign', 'If', 'If', 'If', 'If', 'Assign', 'For', 'Expr', 'If', 'Expr', 'Expr', 'Expr', 'Print', 'Assign', 'Print', 'Expr', 'Print']), ('orelse', ['Assign', 'Assign', 'For', 'Expr'])]", "If -> [('test', 'Call'), ('body', ['Assign', 'Expr', 'Assign', 'If', 'If', 'Assign', 'Expr', 'Expr', 'If', 'If', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'For', 'Expr', 'Expr', 'Print', 'Assign', 'Print', 'Expr', 'Print']), ('orelse', [])]", "If -> [('test', 'UnaryOp'), ('body', ['Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['If', 'Return']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['ImportFrom', 'Expr']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['Assert', 'Assert', 'Assert']), ('orelse', [])]", "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'Assign', 'Assign']), ('orelse', [])]", "If -> [('test', 'Attribute'), ('body', ['Assign']), ('orelse', ['Assign', 'Assign', 'Assign', 'Assign'])]", "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'Assign', 'Expr']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['Assert', 'For']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['If']), ('orelse', ['Assign'])]", "If -> [('test', 'Call'), ('body', ['Assign', 'If', 'Assign', 'If']), ('orelse', ['If'])]", "If -> [('test', 'UnaryOp'), ('body', ['Expr', 'Continue']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'If']), ('orelse', ['If'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'If']), ('orelse', ['Expr'])]", "If -> [('test', 'Call'), ('body', ['Continue']), ('orelse', ['Assign', 'Assign', 'Assign', 'If'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'If']), ('orelse', ['For'])]", "If -> [('test', 'BoolOp'), ('body', ['If', 'Assign']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Raise']), ('orelse', [])]", "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'If', 'Expr']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'If', 'Assign', 'If']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['Assign', 'If']), ('orelse', ['If'])]", "If -> [('test', 'Call'), ('body', ['Assign']), ('orelse', ['Assign', 'Assign'])]", "If -> [('test', 'Name'), ('body', ['Assign', 'If', 'Expr', 'Expr', 'Expr', 'Expr']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['Assign', 'Expr']), ('orelse', ['Assign'])]", "If -> [('test', 'BoolOp'), ('body', ['Expr']), ('orelse', ['Expr'])]", "If -> [('test', 'Name'), ('body', ['Assign', 'If', 'If', 'Assign', 'Expr']), ('orelse', [])]", "If -> [('test', 'UnaryOp'), ('body', ['Expr', 'Expr', 'Return']), ('orelse', [])]", "If -> [('test', 'BoolOp'), ('body', ['Expr', 'Expr', 'Expr', 'Expr']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['Assign', 'Assign', 'If', 'If']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['Expr', 'For']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['Assign', 'TryFinally']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['Assign', 'If', 'Expr']), ('orelse', [])]", "If -> [('test', 'Attribute'), ('body', ['If', 'Return']), ('orelse', [])]", "If -> [('test', 'UnaryOp'), ('body', ['If', 'Expr', 'Expr']), ('orelse', [])]", "If -> [('test', 'Attribute'), ('body', ['Assign', 'Assign', 'Expr']), ('orelse', [])]", "If -> [('test', 'UnaryOp'), ('body', ['Expr']), ('orelse', ['Assign', 'Assign', 'If', 'Assign', 'Assign', 'FunctionDef', 'If'])]", "If -> [('test', 'Name'), ('body', ['Assign', 'Expr']), ('orelse', ['Expr'])]", "If -> [('test', 'Name'), ('body', ['Assign', 'Return']), ('orelse', ['Raise'])]", "If -> [('test', 'Name'), ('body', ['Expr']), ('orelse', ['Raise'])]", "If -> [('test', 'Compare'), ('body', ['Assign']), ('orelse', ['Raise'])]", "If -> [('test', 'BoolOp'), ('body', ['Assign', 'If', 'If']), ('orelse', [])]", "If -> [('test', 'BoolOp'), ('body', ['Expr', 'Expr', 'Return']), ('orelse', [])]", "If -> [('test', 'BoolOp'), ('body', ['Break']), ('orelse', [])]", "If -> [('test', 'BoolOp'), ('body', ['If', 'Expr', 'Expr']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Expr']), ('orelse', ['If', 'Expr'])]", "If -> [('test', 'Attribute'), ('body', ['Assign']), ('orelse', ['Assign', 'Assign', 'Assign'])]", "If -> [('test', 'Compare'), ('body', ['If']), ('orelse', ['Assert'])]", "If -> [('test', 'Call'), ('body', ['Expr']), ('orelse', ['If'])]", "If -> [('test', 'Attribute'), ('body', ['Assign', 'Return']), ('orelse', ['Return'])]", "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign']), ('orelse', ['Assign'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign']), ('orelse', ['Break'])]", "If -> [('test', 'Attribute'), ('body', ['Pass']), ('orelse', ['If'])]", "If -> [('test', 'Subscript'), ('body', ['Assign']), ('orelse', ['Assign'])]", "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'For']), ('orelse', [])]", "If -> [('test', 'UnaryOp'), ('body', ['Assign']), ('orelse', ['Assign', 'For'])]", "If -> [('test', 'BoolOp'), ('body', ['Print']), ('orelse', ['Assign'])]", "If -> [('test', 'BoolOp'), ('body', ['Print']), ('orelse', ['Assign', 'Assign'])]", "If -> [('test', 'Call'), ('body', ['If', 'Assign']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['If']), ('orelse', ['If'])]", "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Expr', 'Assign', 'For', 'Expr']), ('orelse', ['Assign', 'Expr', 'Expr'])]", "If -> [('test', 'BoolOp'), ('body', ['Assign', 'For', 'Expr', 'Expr']), ('orelse', [])]", "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Continue']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['Assign', 'Assign']), ('orelse', ['Assign', 'Assign', 'Assign'])]", "If -> [('test', 'Compare'), ('body', ['Assign']), ('orelse', ['Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign'])]", "If -> [('test', 'Call'), ('body', ['Print', 'Raise']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign']), ('orelse', ['Expr'])]", "If -> [('test', 'BoolOp'), ('body', ['Print']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Return']), ('orelse', ['If'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Return']), ('orelse', ['If'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Print', 'Return']), ('orelse', ['Return'])]", "If -> [('test', 'Compare'), ('body', ['Pass']), ('orelse', ['If'])]", "If -> [('test', 'Compare'), ('body', ['Pass']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['Assign', 'For', 'Return']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['Assign', 'Assign', 'Pass']), ('orelse', ['Assign', 'Pass'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Expr']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['ImportFrom']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['If', 'Assign', 'Assign', 'Expr']), ('orelse', ['Expr'])]", "If -> [('test', 'Call'), ('body', ['Assign']), ('orelse', ['Expr', 'Assign'])]", "If -> [('test', 'Call'), ('body', ['With']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['Expr', 'Expr', 'Expr', 'If']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['Expr']), ('orelse', ['If'])]", "If -> [('test', 'UnaryOp'), ('body', ['Expr', 'Assign', 'If']), ('orelse', [])]", "If -> [('test', 'BoolOp'), ('body', ['For', 'Expr']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['For', 'Expr']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['Assign', 'For']), ('orelse', ['Assign'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'Assign']), ('orelse', ['Assign', 'Assign', 'Assign'])]", "If -> [('test', 'Name'), ('body', ['Assign', 'Assign', 'If', 'Assign']), ('orelse', ['If'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'While', 'Expr']), ('orelse', ['Assign'])]", "If -> [('test', 'Name'), ('body', ['Assign', 'For']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Continue']), ('orelse', ['Assign', 'AugAssign'])]", "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'Expr', 'Expr', 'Assign']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'While', 'If']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Expr', 'Break']), ('orelse', [])]", "If -> [('test', 'BoolOp'), ('body', ['Delete']), ('orelse', ['If'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'If']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['Assign', 'Assign', 'Assign', 'Assign']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'If', 'Assign', 'Assign', 'Assign']), ('orelse', ['Assign', 'Assign', 'Assign', 'Assign'])]", "If -> [('test', 'Compare'), ('body', ['FunctionDef', 'Assign', 'Assign', 'Assign', 'While']), ('orelse', ['If'])]", "If -> [('test', 'Compare'), ('body', ['Delete', 'If']), ('orelse', [])]", "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'TryExcept', 'Expr', 'Assign']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'If']), ('orelse', ['If'])]", "If -> [('test', 'BoolOp'), ('body', ['Assign']), ('orelse', ['Raise'])]", "If -> [('test', 'Name'), ('body', ['Assign', 'Assign', 'For']), ('orelse', ['Assign'])]", "If -> [('test', 'UnaryOp'), ('body', ['Raise']), ('orelse', ['If'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign']), ('orelse', [])]", "If -> [('test', 'UnaryOp'), ('body', ['Return']), ('orelse', ['FunctionDef', 'Return'])]", "If -> [('test', 'BoolOp'), ('body', ['Assign', 'If', 'If', 'If']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['Assign', 'Assign']), ('orelse', ['If'])]", "If -> [('test', 'Call'), ('body', ['Assign', 'Assign', 'If']), ('orelse', [])]", "If -> [('test', 'UnaryOp'), ('body', ['Assign']), ('orelse', ['Assign', 'If'])]", "If -> [('test', 'Attribute'), ('body', ['Assign', 'Assign']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['Expr']), ('orelse', ['Assign', 'Expr'])]", "If -> [('test', 'Call'), ('body', ['If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('orelse', ['If'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'For']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['Assign']), ('orelse', ['Continue'])]", "If -> [('test', 'Name'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'If', 'If', 'Return']), ('orelse', [])]", "If -> [('test', 'UnaryOp'), ('body', ['Raise']), ('orelse', ['Return'])]", "If -> [('test', 'Compare'), ('body', ['If', 'Expr']), ('orelse', ['If'])]", "If -> [('test', 'Compare'), ('body', ['If', 'For']), ('orelse', ['If'])]", "If -> [('test', 'Compare'), ('body', ['If']), ('orelse', ['Raise'])]", "If -> [('test', 'Compare'), ('body', ['If', 'Assign', 'Assign', 'If']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['Assign', 'Assign', 'Expr']), ('orelse', ['Expr'])]", "If -> [('test', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Return']), ('orelse', ['Expr'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Expr']), ('orelse', ['If'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'For', 'If', 'Expr']), ('orelse', ['Expr'])]", "If -> [('test', 'Compare'), ('body', ['If', 'Assign']), ('orelse', ['Assign'])]", "If -> [('test', 'Attribute'), ('body', ['TryExcept']), ('orelse', ['Assign'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Delete']), ('orelse', ['Assign'])]", "If -> [('test', 'Compare'), ('body', ['Return']), ('orelse', ['Assign', 'Return'])]", "If -> [('test', 'Call'), ('body', ['Print', 'Expr']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Print', 'Assign', 'Assign', 'Print', 'Assign', 'Print', 'Print', 'Assign', 'For', 'Assign', 'Print']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'If']), ('orelse', [])]", "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Expr']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['Assign']), ('orelse', ['If', 'Assign', 'TryExcept'])]", "If -> [('test', 'Call'), ('body', ['Assign', 'Return']), ('orelse', ['Return'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'Assign']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Expr']), ('orelse', ['Expr', 'Assign', 'Assign'])]", "If -> [('test', 'Compare'), ('body', ['ImportFrom', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Expr', 'Expr', 'Expr']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign']), ('orelse', ['Assign', 'If'])]", "If -> [('test', 'Attribute'), ('body', ['Assign']), ('orelse', ['If'])]", "If -> [('test', 'BoolOp'), ('body', ['Return']), ('orelse', ['If'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'If', 'AugAssign']), ('orelse', [])]", "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Break']), ('orelse', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr'])]", "If -> [('test', 'UnaryOp'), ('body', ['If', 'Assign', 'Assign']), ('orelse', [])]", "If -> [('test', 'Attribute'), ('body', ['If', 'AugAssign', 'Assign']), ('orelse', ['If'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Break']), ('orelse', ['AugAssign'])]", "If -> [('test', 'BoolOp'), ('body', ['Expr', 'Assign', 'Continue']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'For', 'Expr']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'Return']), ('orelse', ['Assign', 'Assign', 'Assign', 'Return'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Expr']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Return']), ('orelse', ['Assign'])]", "If -> [('test', 'Compare'), ('body', ['If', 'Assign', 'Assign', 'Expr']), ('orelse', ['Raise'])]", "If -> [('test', 'Compare'), ('body', ['If', 'Assign']), ('orelse', ['If', 'Assign'])]", "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign', 'Expr']), ('orelse', [])]", "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'If', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('orelse', [])]", "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Expr']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Print', 'Print', 'Print', 'With']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['Assign']), ('orelse', ['Assert', 'Assign'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Break']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assert', 'Assign']), ('orelse', ['Assign'])]", "If -> [('test', 'Compare'), ('body', ['Expr', 'Assign', 'If', 'Assign', 'Expr', 'If', 'AugAssign']), ('orelse', ['If'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Expr', 'Expr']), ('orelse', ['If'])]", "If -> [('test', 'Compare'), ('body', ['Expr']), ('orelse', ['Assign', 'Expr', 'Expr'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Expr', 'Expr', 'Expr']), ('orelse', ['Expr', 'Assign', 'Expr'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign']), ('orelse', ['Assign', 'Assign', 'Assign'])]", "If -> [('test', 'Subscript'), ('body', ['Assign', 'For']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Print', 'Expr', 'Import', 'Expr']), ('orelse', ['If'])]", "If -> [('test', 'Compare'), ('body', ['Print']), ('orelse', ['If'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Print']), ('orelse', ['If'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Print']), ('orelse', ['Expr'])]", "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'Raise']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Expr', 'If']), ('orelse', ['If'])]", "If -> [('test', 'Attribute'), ('body', ['Print']), ('orelse', [])]", "If -> [('test', 'BoolOp'), ('body', ['Expr', 'Expr', 'If']), ('orelse', ['If'])]", "If -> [('test', 'Compare'), ('body', ['Expr']), ('orelse', ['Print', 'Expr'])]", "If -> [('test', 'Compare'), ('body', ['Print', 'Return']), ('orelse', [])]", "If -> [('test', 'UnaryOp'), ('body', ['Print', 'ImportFrom', 'Expr', 'Print', 'Import', 'Expr']), ('orelse', ['Print'])]", "If -> [('test', 'UnaryOp'), ('body', ['Print', 'Return']), ('orelse', [])]", "If -> [('test', 'UnaryOp'), ('body', ['Import', 'Expr', 'Expr']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Expr']), ('orelse', ['Print'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'For']), ('orelse', ['Print'])]", "If -> [('test', 'UnaryOp'), ('body', ['Print', 'Assign', 'If']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Print', 'Assign']), ('orelse', ['Print', 'Return'])]", "If -> [('test', 'UnaryOp'), ('body', ['Expr']), ('orelse', ['Assign', 'If'])]", "If -> [('test', 'Compare'), ('body', ['Print', 'Expr']), ('orelse', [])]", "If -> [('test', 'BoolOp'), ('body', ['Assign']), ('orelse', ['For'])]", "If -> [('test', 'UnaryOp'), ('body', ['Print']), ('orelse', ['Assign', 'If'])]", "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'Print']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['If', 'Expr', 'Assign']), ('orelse', ['AugAssign'])]", "If -> [('test', 'Compare'), ('body', ['For', 'AugAssign']), ('orelse', ['For'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'For']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['With']), ('orelse', ['Expr'])]", "If -> [('test', 'Compare'), ('body', ['ImportFrom']), ('orelse', ['If'])]", "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Return']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['Assert', 'AugAssign']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['Return']), ('orelse', ['Raise'])]", "If -> [('test', 'Call'), ('body', ['Assign', 'Return']), ('orelse', ['Raise'])]", "If -> [('test', 'UnaryOp'), ('body', ['Expr']), ('orelse', ['Assign'])]", "If -> [('test', 'Compare'), ('body', ['Raise']), ('orelse', ['Return'])]", "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Expr']), ('orelse', ['Expr'])]", "If -> [('test', 'Compare'), ('body', ['ImportFrom', 'Assign']), ('orelse', ['ImportFrom', 'Assign'])]", "If -> [('test', 'Attribute'), ('body', ['If', 'If']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['Print', 'Print', 'Print']), ('orelse', [])]", "If -> [('test', 'Attribute'), ('body', ['If', 'Assign', 'Expr', 'Assign', 'Expr']), ('orelse', [])]", "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Expr', 'Assign', 'Expr']), ('orelse', [])]", "If -> [('test', 'BoolOp'), ('body', ['Expr', 'If', 'Expr']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['For', 'Expr', 'Expr']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['Assign', 'Assign', 'Expr', 'AugAssign', 'AugAssign']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['AugAssign']), ('orelse', ['AugAssign'])]", "If -> [('test', 'BinOp'), ('body', ['Expr']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'AugAssign']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['AugAssign']), ('orelse', ['If'])]", "If -> [('test', 'Call'), ('body', ['Expr', 'Expr', 'Assign', 'If', 'Expr', 'Expr']), ('orelse', ['If'])]", "If -> [('test', 'Attribute'), ('body', ['AugAssign']), ('orelse', ['AugAssign'])]", "If -> [('test', 'Call'), ('body', ['Assign', 'Expr', 'Expr', 'If', 'Expr', 'For']), ('orelse', [])]", "If -> [('test', 'UnaryOp'), ('body', ['AugAssign']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'If']), ('orelse', ['Assign', 'Assign'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'If', 'If']), ('orelse', ['Assign', 'Assign'])]", "If -> [('test', 'BoolOp'), ('body', ['Pass']), ('orelse', ['If'])]", "If -> [('test', 'Attribute'), ('body', ['If']), ('orelse', ['If'])]", "If -> [('test', 'BoolOp'), ('body', ['For', 'If']), ('orelse', [])]", "If -> [('test', 'Attribute'), ('body', ['Assign', 'Break']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['If', 'Assign']), ('orelse', ['If', 'Assign'])]", "If -> [('test', 'Name'), ('body', ['Assign', 'Assign', 'TryFinally']), ('orelse', [])]", "If -> [('test', 'Attribute'), ('body', ['Assign', 'Expr', 'Expr']), ('orelse', [])]", "If -> [('test', 'Attribute'), ('body', ['If', 'If', 'Expr']), ('orelse', ['If'])]", "If -> [('test', 'Call'), ('body', ['For']), ('orelse', ['Pass'])]", "If -> [('test', 'Attribute'), ('body', ['Assign', 'If', 'Expr', 'Expr']), ('orelse', [])]", "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'Break']), ('orelse', [])]", "If -> [('test', 'Attribute'), ('body', ['Expr', 'Expr', 'If']), ('orelse', ['Expr'])]", "If -> [('test', 'Call'), ('body', ['Assign', 'For', 'Assign']), ('orelse', [])]", "If -> [('test', 'Attribute'), ('body', ['For']), ('orelse', ['Pass'])]", "If -> [('test', 'Attribute'), ('body', ['Expr', 'If', 'Break']), ('orelse', [])]", "If -> [('test', 'Attribute'), ('body', ['Expr', 'Assign']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['For', 'Raise']), ('orelse', ['Return'])]", "If -> [('test', 'Call'), ('body', ['Expr', 'If']), ('orelse', [])]", "If -> [('test', 'UnaryOp'), ('body', ['Expr', 'If']), ('orelse', [])]", "If -> [('test', 'Attribute'), ('body', ['Expr', 'Assign', 'If', 'Raise']), ('orelse', ['Expr', 'If'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'AugAssign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'If']), ('orelse', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign'])]", "If -> [('test', 'BoolOp'), ('body', ['AugAssign', 'For', 'Assign']), ('orelse', [])]", "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign', 'Assign', 'AugAssign']), ('orelse', ['AugAssign'])]", "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'Return']), ('orelse', ['Assign', 'Assign', 'Expr', 'Return'])]", "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'Assign', 'Assign', 'Return']), ('orelse', ['Assign', 'TryExcept', 'If', 'If', 'Assign', 'Expr', 'Expr', 'Expr', 'Return'])]", "If -> [('test', 'Call'), ('body', ['Assign', 'Expr', 'Expr', 'Expr']), ('orelse', ['Assign'])]", "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'Return']), ('orelse', ['If', 'Assign', 'Expr', 'For', 'Assign', 'Expr', 'For', 'Return'])]", "If -> [('test', 'Call'), ('body', ['Assign', 'If', 'If', 'If', 'Raise']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['TryExcept', 'Expr']), ('orelse', ['Expr'])]", "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Return']), ('orelse', ['Assign', 'Assign', 'If', 'Expr', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr'])]", "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign', 'Assign']), ('orelse', ['Assign', 'Assign', 'Expr', 'Assign', 'Assign'])]", "If -> [('test', 'Compare'), ('body', ['Expr', 'Assign', 'Assign', 'AugAssign', 'AugAssign']), ('orelse', ['Assign', 'Assign', 'Assign', 'Assign', 'Break'])]", "If -> [('test', 'Compare'), ('body', ['AugAssign']), ('orelse', ['Assign', 'AugAssign'])]", "If -> [('test', 'Name'), ('body', ['Assign', 'Expr', 'Raise']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'For', 'For', 'Expr', 'Expr']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'ImportFrom', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Print', 'Expr', 'Import', 'If', 'If']), ('orelse', [])]", "If -> [('test', 'BoolOp'), ('body', ['Import', 'Expr', 'For', 'For', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'TryExcept']), ('orelse', ['Assign'])]", "If -> [('test', 'BoolOp'), ('body', ['TryExcept']), ('orelse', ['TryExcept'])]", "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Expr']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['Assign', 'If']), ('orelse', ['Assign', 'Assign'])]", "If -> [('test', 'Compare'), ('body', ['Assign']), ('orelse', ['Assign', 'Expr', 'Assign'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign']), ('orelse', ['Assign', 'Assign', 'Assign'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign']), ('orelse', ['Assign'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Expr', 'Assign']), ('orelse', [])]", "If -> [('test', 'Attribute'), ('body', ['If', 'If', 'Return']), ('orelse', ['Return'])]", "If -> [('test', 'Call'), ('body', ['If']), ('orelse', ['Assign'])]", "If -> [('test', 'Name'), ('body', ['If', 'Assign']), ('orelse', ['Assign'])]", "If -> [('test', 'Name'), ('body', ['Assign', 'Assign', 'Assign']), ('orelse', ['Raise'])]", "If -> [('test', 'Name'), ('body', ['Return']), ('orelse', ['Raise'])]", "If -> [('test', 'Compare'), ('body', ['If', 'Assign', 'Return']), ('orelse', ['If'])]", "If -> [('test', 'Compare'), ('body', ['If', 'Assign', 'If', 'Return']), ('orelse', ['If'])]", "If -> [('test', 'Call'), ('body', ['Assign', 'If', 'Assign', 'Assign', 'If', 'If', 'If']), ('orelse', ['Assign', 'Assign'])]", "If -> [('test', 'BoolOp'), ('body', ['If', 'If']), ('orelse', ['Assign'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Expr', 'Expr', 'Assign']), ('orelse', [])]", "If -> [('test', 'Attribute'), ('body', ['For']), ('orelse', ['If'])]", "If -> [('test', 'Attribute'), ('body', ['Expr', 'Expr', 'Expr']), ('orelse', [])]", "If -> [('test', 'Attribute'), ('body', ['Assign', 'Assign', 'Assign', 'If']), ('orelse', [])]", "If -> [('test', 'BoolOp'), ('body', ['Assign', 'If', 'Assign', 'Assign', 'If']), ('orelse', ['If'])]", "If -> [('test', 'BoolOp'), ('body', ['TryExcept', 'Assign', 'Expr']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['Assign', 'If', 'Assign', 'Assign', 'Assert', 'If']), ('orelse', ['If'])]", "If -> [('test', 'Attribute'), ('body', ['Assign', 'Assign', 'Expr', 'Assign', 'Assign']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'If', 'Assign', 'Assign', 'For', 'Assign']), ('orelse', [])]", "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'Return']), ('orelse', [])]", "If -> [('test', 'Attribute'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'For', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'For']), ('orelse', ['For'])]", "If -> [('test', 'Name'), ('body', ['Assign', 'Assign', 'Assign']), ('orelse', ['Assign', 'Assign', 'Assign'])]", "If -> [('test', 'BoolOp'), ('body', ['TryExcept', 'Expr', 'Expr', 'Expr', 'Expr', 'If', 'Expr']), ('orelse', [])]", "If -> [('test', 'UnaryOp'), ('body', ['If', 'Expr']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Expr', 'Expr', 'Assign', 'Assert', 'If']), ('orelse', [])]", "If -> [('test', 'Subscript'), ('body', ['TryExcept']), ('orelse', ['Assign', 'Break'])]", "If -> [('test', 'Compare'), ('body', ['Return']), ('orelse', ['Raise'])]", "If -> [('test', 'Call'), ('body', ['For']), ('orelse', ['Print'])]", "If -> [('test', 'Compare'), ('body', ['Assign']), ('orelse', ['Print'])]", "If -> [('test', 'Compare'), ('body', ['For']), ('orelse', ['Print'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'For', 'Expr']), ('orelse', ['Import', 'Assign', 'For', 'Expr'])]", "If -> [('test', 'Compare'), ('body', ['Import', 'If', 'Assign', 'If']), ('orelse', [])]", "If -> [('test', 'UnaryOp'), ('body', ['For', 'Assign']), ('orelse', ['If'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'AugAssign', 'For']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Print', 'Print']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Print', 'Print', 'Print', 'Print', 'Print', 'Print', 'Print', 'Print', 'Print', 'Print', 'Return']), ('orelse', ['Return'])]", "If -> [('test', 'Call'), ('body', ['Expr']), ('orelse', ['Expr', 'TryExcept'])]", "If -> [('test', 'Compare'), ('body', ['TryExcept']), ('orelse', ['Return'])]", "If -> [('test', 'Call'), ('body', ['Expr', 'Break']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['For']), ('orelse', ['For'])]", "If -> [('test', 'Compare'), ('body', ['Expr']), ('orelse', ['Assign', 'Expr'])]", "If -> [('test', 'Subscript'), ('body', ['Expr', 'Assign', 'Assign']), ('orelse', ['Expr', 'Expr'])]", "If -> [('test', 'Call'), ('body', ['Assign', 'Assign', 'Expr']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['Assign', 'Expr']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['Expr', 'Expr', 'Assign', 'Expr']), ('orelse', ['Expr', 'Assign', 'Assign', 'Assign', 'Expr'])]", "If -> [('test', 'Name'), ('body', ['If']), ('orelse', ['Assign', 'Expr'])]", "If -> [('test', 'UnaryOp'), ('body', ['FunctionDef', 'Assign']), ('orelse', ['Assign'])]", "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign', 'Expr']), ('orelse', ['Raise'])]", "If -> [('test', 'Name'), ('body', ['Assign', 'Assign', 'Expr', 'If']), ('orelse', [])]", "If -> [('test', 'BoolOp'), ('body', ['Assign', 'For']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'If', 'Return']), ('orelse', [])]", "If -> [('test', 'Subscript'), ('body', ['Expr', 'Expr']), ('orelse', [])]", "If -> [('test', 'UnaryOp'), ('body', ['Raise']), ('orelse', ['Assign'])]", "If -> [('test', 'UnaryOp'), ('body', ['Print', 'TryExcept']), ('orelse', ['Print', 'Print'])]", "If -> [('test', 'Name'), ('body', ['Continue']), ('orelse', [])]", "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Expr']), ('orelse', ['If'])]", "If -> [('test', 'BoolOp'), ('body', ['Pass']), ('orelse', ['Expr'])]", "If -> [('test', 'UnaryOp'), ('body', ['Print', 'Print', 'Expr']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Print']), ('orelse', ['Assign', 'Assign', 'Assign', 'Assign', 'If', 'TryExcept'])]", "If -> [('test', 'Attribute'), ('body', ['Assign', 'If']), ('orelse', ['Assign'])]", "If -> [('test', 'Compare'), ('body', ['Assign']), ('orelse', ['Print', 'Expr'])]", "If -> [('test', 'Compare'), ('body', ['Import', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'If', 'If', 'If', 'If', 'If', 'Assign', 'If', 'Expr']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Expr', 'Expr']), ('orelse', ['Expr'])]", "If -> [('test', 'Call'), ('body', ['Assign']), ('orelse', ['Expr'])]", "If -> [('test', 'BoolOp'), ('body', ['Assign']), ('orelse', ['Assign', 'For', 'If'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Expr']), ('orelse', ['Expr'])]", "If -> [('test', 'Call'), ('body', ['If', 'Expr']), ('orelse', ['Raise'])]", "If -> [('test', 'Num'), ('body', ['Assign']), ('orelse', ['Assign'])]", "If -> [('test', 'Num'), ('body', ['Assign', 'Return']), ('orelse', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Return'])]", "If -> [('test', 'Num'), ('body', ['For']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['ImportFrom', 'FunctionDef', 'FunctionDef', 'Assign', 'Print', 'Assign', 'Print', 'Print', 'Assign', 'Assign', 'Print', 'Print', 'For', 'Expr']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['Assign', 'If', 'Assign', 'Assign', 'If', 'Expr']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['Assign']), ('orelse', ['Print', 'Assign', 'Expr', 'Expr'])]", "If -> [('test', 'Name'), ('body', ['Return']), ('orelse', ['TryExcept'])]", "If -> [('test', 'BoolOp'), ('body', ['If', 'If', 'If']), ('orelse', ['Raise'])]", "If -> [('test', 'Call'), ('body', ['Assign', 'If', 'Assign']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['Expr', 'Expr']), ('orelse', ['Expr'])]", "If -> [('test', 'BoolOp'), ('body', ['ImportFrom']), ('orelse', ['Assign'])]", "If -> [('test', 'Attribute'), ('body', ['ImportFrom']), ('orelse', ['ImportFrom'])]", "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'Return']), ('orelse', ['Expr'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'If', 'Return']), ('orelse', ['If'])]", "If -> [('test', 'BoolOp'), ('body', ['Expr', 'Return']), ('orelse', ['Return'])]", "If -> [('test', 'Name'), ('body', ['Assign', 'Assign', 'Expr']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['If', 'Expr']), ('orelse', ['Assign'])]", "If -> [('test', 'BoolOp'), ('body', ['Expr', 'For']), ('orelse', ['If'])]", "If -> [('test', 'Attribute'), ('body', ['ImportFrom', 'Expr']), ('orelse', [])]", "If -> [('test', 'Attribute'), ('body', ['ImportFrom', 'ImportFrom', 'Assign', 'Assign']), ('orelse', ['Assign'])]", "If -> [('test', 'Call'), ('body', ['Break']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['If', 'Assign', 'If']), ('orelse', [])]", "If -> [('test', 'Attribute'), ('body', ['Assign', 'Print']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['Assert']), ('orelse', ['Assert'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'If', 'For']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'TryExcept', 'TryExcept', 'For', 'If']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['Delete', 'ImportFrom', 'Assign']), ('orelse', [])]", "If -> [('test', 'BoolOp'), ('body', ['Expr']), ('orelse', ['Delete', 'Raise'])]", "If -> [('test', 'BoolOp'), ('body', ['Assign', 'If', 'AugAssign', 'Assign', 'Assign', 'Assign', 'For']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['ImportFrom', 'AugAssign']), ('orelse', ['If'])]", "If -> [('test', 'Subscript'), ('body', ['AugAssign']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Expr']), ('orelse', ['Expr', 'Expr', 'Expr'])]", "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'Expr', 'Assign']), ('orelse', [])]", "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'Assign']), ('orelse', ['TryExcept'])]", "If -> [('test', 'Name'), ('body', ['ImportFrom', 'Expr']), ('orelse', ['Expr'])]", "If -> [('test', 'UnaryOp'), ('body', ['If', 'Assign']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['If', 'If']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['Expr', 'Expr', 'Expr', 'Return']), ('orelse', ['Expr'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Expr', 'Return']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign']), ('orelse', ['If', 'Assign', 'Assign'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'If', 'If', 'Print', 'If', 'Assign', 'Assign', 'Expr']), ('orelse', [])]", "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'If']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['Expr', 'Expr']), ('orelse', ['Expr'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'If', 'If', 'Assign', 'If', 'For', 'Assign', 'Expr']), ('orelse', ['Expr'])]", "If -> [('test', 'Name'), ('body', ['Assign', 'Raise']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['If']), ('orelse', ['If', 'Assign', 'If', 'If', 'If', 'Expr', 'Assign'])]", "If -> [('test', 'Compare'), ('body', ['Raise']), ('orelse', ['Expr'])]", "If -> [('test', 'UnaryOp'), ('body', ['Expr']), ('orelse', ['Raise'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'If']), ('orelse', ['Assign', 'If'])]", "If -> [('test', 'Compare'), ('body', ['Return']), ('orelse', ['Assign', 'Expr', 'Assign', 'Return'])]", "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'TryExcept', 'Break']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'If', 'Assign']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['For']), ('orelse', ['Expr'])]", "If -> [('test', 'Name'), ('body', ['Assign', 'Assign', 'If']), ('orelse', ['If'])]", "If -> [('test', 'UnaryOp'), ('body', ['Delete', 'Delete']), ('orelse', [])]", "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'Assign', 'Expr', 'For', 'Assign', 'Assign']), ('orelse', ['Assign', 'Assign', 'Assign'])]", "If -> [('test', 'Call'), ('body', ['Assign', 'If', 'Assign']), ('orelse', ['Assign', 'Assign'])]", "If -> [('test', 'Name'), ('body', ['Assign']), ('orelse', ['Assign', 'Assign'])]", "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'If']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['Assign']), ('orelse', ['Raise'])]", "If -> [('test', 'Name'), ('body', ['Assign', 'If', 'Assign', 'Assign']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'If']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['Assign', 'If', 'If']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'Assign', 'If', 'Assign']), ('orelse', ['Assign', 'Return'])]", "If -> [('test', 'Compare'), ('body', ['TryExcept']), ('orelse', ['Assign'])]", "If -> [('test', 'Compare'), ('body', ['If', 'If', 'Assign']), ('orelse', [])]", "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign', 'Assign']), ('orelse', ['Assign'])]", "If -> [('test', 'Name'), ('body', ['If']), ('orelse', ['Return'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'If', 'Return']), ('orelse', ['Return'])]", "If -> [('test', 'Compare'), ('body', ['Assign']), ('orelse', ['Assign', 'Assign', 'Assign'])]", "If -> [('test', 'Call'), ('body', ['If', 'Expr']), ('orelse', ['Expr'])]", "If -> [('test', 'Compare'), ('body', ['Expr', 'Expr']), ('orelse', ['If'])]", "If -> [('test', 'Name'), ('body', ['Expr', 'AugAssign', 'Expr']), ('orelse', [])]", "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign', 'Expr', 'If', 'Assign', 'Expr']), ('orelse', ['Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'If', 'If', 'Assign', 'Assign'])]", "If -> [('test', 'Call'), ('body', ['If', 'Return']), ('orelse', ['Return'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'ImportFrom', 'Import', 'Assign', 'Assign', 'TryExcept', 'Assign']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'If', 'ImportFrom', 'Import', 'Assign', 'Assign', 'If', 'Expr', 'Assign', 'Return']), ('orelse', ['Return'])]", "If -> [('test', 'Compare'), ('body', ['ImportFrom', 'Expr', 'Assign']), ('orelse', [])]", "If -> [('test', 'Attribute'), ('body', ['Assign', 'Expr', 'Assign']), ('orelse', ['Assign'])]", "If -> [('test', 'Attribute'), ('body', ['TryExcept', 'Assign']), ('orelse', [])]", "If -> [('test', 'BoolOp'), ('body', ['Raise']), ('orelse', ['If'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Raise']), ('orelse', ['Raise'])]", "If -> [('test', 'Compare'), ('body', ['Raise']), ('orelse', ['Raise'])]", "If -> [('test', 'Name'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'AugAssign', 'If', 'Assign', 'If', 'Return']), ('orelse', [])]", "If -> [('test', 'BoolOp'), ('body', ['Assign', 'AugAssign']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['Assign', 'FunctionDef', 'Return']), ('orelse', ['Return'])]", "If -> [('test', 'Compare'), ('body', ['Expr']), ('orelse', ['Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr'])]", "If -> [('test', 'BoolOp'), ('body', ['If']), ('orelse', ['Expr'])]", "If -> [('test', 'Compare'), ('body', ['Print', 'Assign', 'Print', 'Assign', 'Assign', 'Expr', 'Print', 'Print', 'Print', 'Assign', 'If']), ('orelse', ['If'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Print', 'Assign', 'Print', 'Assign', 'Expr', 'Assign', 'For', 'For', 'Print', 'Assign', 'Assign', 'For', 'Expr', 'Print', 'Assign', 'Assign', 'For', 'Print', 'Assign', 'Assign', 'For', 'Expr', 'Print', 'Assign', 'Assign', 'For', 'Expr', 'Expr', 'Expr']), ('orelse', ['If'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Expr', 'Print', 'Assign', 'Print', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'For', 'For', 'Print', 'Assign', 'Assign', 'For', 'Expr', 'Print', 'Assign', 'Assign', 'For', 'Print', 'Assign', 'Assign', 'For', 'Expr', 'Print', 'Assign', 'Assign', 'For', 'Expr', 'Expr', 'Expr']), ('orelse', ['Pass'])]", "If -> [('test', 'Compare'), ('body', ['Print', 'Assign', 'Print', 'Assign', 'Expr', 'Print', 'Print', 'Print', 'Assign', 'If']), ('orelse', ['If'])]", "If -> [('test', 'Compare'), ('body', ['Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Print', 'Assign', 'Print', 'Assign', 'Assign', 'For', 'Expr', 'For', 'Expr', 'Expr', 'Print', 'Assign', 'Assign', 'For', 'Expr', 'Print', 'Assign', 'Assign', 'For', 'Print', 'Assign', 'Assign', 'For', 'Expr', 'Print', 'Assign', 'Assign', 'For', 'Expr', 'Expr', 'Expr']), ('orelse', ['If'])]", "If -> [('test', 'Compare'), ('body', ['Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Print', 'Assign', 'Print', 'Assign', 'Assign', 'For', 'Expr', 'For', 'Expr', 'Expr', 'Print', 'Assign', 'Assign', 'For', 'Expr', 'Print', 'Assign', 'Assign', 'For', 'Expr', 'Print', 'Assign', 'Assign', 'Assign', 'For', 'Expr', 'Print', 'Assign', 'Assign', 'For', 'Expr', 'Expr', 'Expr']), ('orelse', ['Pass'])]", "If -> [('test', 'Compare'), ('body', ['Print', 'Assign', 'Print', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Print', 'Assign', 'Print', 'Assign', 'Expr', 'Assign', 'For', 'For', 'Expr', 'Expr', 'Print', 'Assign', 'Assign', 'For', 'Expr', 'Print', 'Assign', 'Assign', 'For', 'Expr', 'Print', 'Assign', 'Assign', 'For', 'Expr', 'Print', 'Assign', 'Assign', 'For', 'Expr', 'Expr', 'Expr']), ('orelse', ['Pass'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'For', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('orelse', [])]", "If -> [('test', 'BinOp'), ('body', ['Assign', 'If', 'Expr']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Expr', 'If', 'AugAssign', 'Expr']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['AugAssign', 'Expr']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'If', 'If']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'If']), ('orelse', [])]", "If -> [('test', 'Attribute'), ('body', ['Assign', 'If', 'Expr']), ('orelse', ['Assign', 'Expr'])]", "If -> [('test', 'BinOp'), ('body', ['Assign']), ('orelse', [])]", "If -> [('test', 'BinOp'), ('body', ['If']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['Assign']), ('orelse', ['TryExcept'])]", "If -> [('test', 'BoolOp'), ('body', ['Assign']), ('orelse', ['Expr'])]", "If -> [('test', 'Call'), ('body', ['Assign', 'Assign', 'If', 'Expr']), ('orelse', ['Raise'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Expr', 'For', 'Delete']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'TryExcept', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'TryExcept', 'Expr', 'Expr', 'Return']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'For', 'Expr']), ('orelse', ['If'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr']), ('orelse', [])]", "If -> [('test', 'UnaryOp'), ('body', ['TryExcept', 'For']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('orelse', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign'])]", "If -> [('test', 'Name'), ('body', ['ImportFrom', 'Assign', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'Assign', 'Assign']), ('orelse', ['Import', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'ImportFrom', 'FunctionDef', 'FunctionDef'])]", "If -> [('test', 'Name'), ('body', ['Import', 'Assign', 'FunctionDef', 'Delete']), ('orelse', ['FunctionDef', 'Expr'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'If', 'Delete']), ('orelse', ['If'])]", "If -> [('test', 'Name'), ('body', ['FunctionDef', 'FunctionDef', 'FunctionDef']), ('orelse', ['FunctionDef', 'FunctionDef', 'FunctionDef'])]", "If -> [('test', 'Name'), ('body', ['FunctionDef']), ('orelse', ['Assign'])]", "If -> [('test', 'Name'), ('body', ['ImportFrom']), ('orelse', ['ImportFrom'])]", "If -> [('test', 'Name'), ('body', ['ImportFrom', 'FunctionDef']), ('orelse', ['ImportFrom', 'FunctionDef'])]", "If -> [('test', 'Compare'), ('body', ['TryExcept', 'Break']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Import', 'Assign']), ('orelse', ['Assign'])]", "If -> [('test', 'Subscript'), ('body', ['TryExcept', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr']), ('orelse', ['Assign'])]", "If -> [('test', 'Compare'), ('body', ['Import', 'Assign', 'Assign']), ('orelse', ['Assign'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'While', 'Assign']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['Import', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'TryExcept']), ('orelse', ['Assign', 'Assign', 'If', 'Assign', 'If', 'Assign', 'Expr'])]", "If -> [('test', 'BoolOp'), ('body', ['Return']), ('orelse', ['Raise'])]", "If -> [('test', 'Call'), ('body', ['Assign', 'For', 'Return']), ('orelse', ['Assign'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'TryExcept', 'Assign', 'If']), ('orelse', ['Print'])]", "If -> [('test', 'Name'), ('body', ['Import', 'Expr']), ('orelse', [])]", "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign', 'Expr', 'Expr']), ('orelse', [])]", "If -> [('test', 'Attribute'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('orelse', ['Assign'])]", "If -> [('test', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'If', 'Return']), ('orelse', ['Expr', 'Return'])]", "If -> [('test', 'BoolOp'), ('body', ['If', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Return']), ('orelse', [])]", "If -> [('test', 'BoolOp'), ('body', ['Assign']), ('orelse', ['Return'])]", "If -> [('test', 'Compare'), ('body', ['If', 'Return']), ('orelse', ['If'])]", "If -> [('test', 'Compare'), ('body', ['Expr', 'Return']), ('orelse', ['If'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Return']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'Assign']), ('orelse', ['If'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign']), ('orelse', ['Return'])]", "If -> [('test', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'If']), ('orelse', ['If'])]", "If -> [('test', 'UnaryOp'), ('body', ['If', 'Return']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['Assert', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If']), ('orelse', ['If'])]", "If -> [('test', 'BoolOp'), ('body', ['If', 'Return']), ('orelse', ['Assign', 'If', 'Assign', 'Assign'])]", "If -> [('test', 'Attribute'), ('body', ['If', 'Assign', 'Assign', 'Assign', 'Assign']), ('orelse', ['If', 'Return'])]", "If -> [('test', 'Name'), ('body', ['Assign']), ('orelse', ['Expr', 'Return'])]", "If -> [('test', 'Name'), ('body', ['If', 'Assign']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign']), ('orelse', ['Assign', 'Assign', 'If', 'Assign', 'If', 'If'])]", "If -> [('test', 'Name'), ('body', ['Assign', 'If']), ('orelse', ['If'])]", "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'Assign']), ('orelse', ['Assign'])]", "If -> [('test', 'Name'), ('body', ['Assign', 'Expr', 'Assign', 'Assign']), ('orelse', ['Assign'])]", "If -> [('test', 'Attribute'), ('body', ['If']), ('orelse', ['Assign'])]", "If -> [('test', 'Attribute'), ('body', ['If', 'Assign', 'Return']), ('orelse', ['Assign', 'Expr', 'Assign', 'ClassDef', 'Return'])]", "If -> [('test', 'Name'), ('body', ['Assign', 'Assign']), ('orelse', ['Assign', 'Assign', 'If', 'If', 'Assign'])]", "If -> [('test', 'Call'), ('body', ['Assign']), ('orelse', ['Break'])]", "If -> [('test', 'BoolOp'), ('body', ['Assign', 'If', 'If', 'Return']), ('orelse', ['If'])]", "If -> [('test', 'UnaryOp'), ('body', ['If', 'If', 'If']), ('orelse', [])]", "If -> [('test', 'Attribute'), ('body', ['Return']), ('orelse', ['If'])]", "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign', 'Assign', 'If']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['Assign', 'Expr', 'Return']), ('orelse', ['Assign', 'Assign', 'Expr', 'Return'])]", "If -> [('test', 'Compare'), ('body', ['If', 'Expr']), ('orelse', ['Expr'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign']), ('orelse', ['Return'])]", "If -> [('test', 'Call'), ('body', ['If', 'If']), ('orelse', ['If'])]", "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign', 'If', 'If']), ('orelse', [])]", "If -> [('test', 'BoolOp'), ('body', ['Assign', 'For', 'Assign', 'For', 'If', 'If', 'Return']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['Expr', 'Expr']), ('orelse', ['If'])]", "If -> [('test', 'Call'), ('body', ['If', 'If', 'If', 'Expr']), ('orelse', ['Return'])]", "If -> [('test', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Expr', 'Assign']), ('orelse', ['Return'])]", "If -> [('test', 'Call'), ('body', ['Assign', 'If']), ('orelse', ['Assign', 'Assign', 'TryExcept'])]", "If -> [('test', 'Attribute'), ('body', ['Assign', 'If', 'Assign']), ('orelse', ['Assign'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'If', 'Return']), ('orelse', [])]", "If -> [('test', 'Attribute'), ('body', ['If', 'Assign', 'If', 'Assign', 'If', 'If']), ('orelse', ['If'])]", "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'If', 'If', 'If']), ('orelse', ['Return'])]", "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign', 'For', 'Assign', 'For', 'Return']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Expr', 'Return']), ('orelse', ['Assign', 'Assign', 'Assign', 'Return'])]", "If -> [('test', 'Attribute'), ('body', ['Assign', 'If', 'Assign', 'Assign']), ('orelse', ['If'])]", "If -> [('test', 'BoolOp'), ('body', ['Assign', 'If', 'Expr', 'Assign']), ('orelse', ['If'])]", "If -> [('test', 'Call'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'If', 'If']), ('orelse', ['If'])]", "If -> [('test', 'BoolOp'), ('body', ['Assign']), ('orelse', ['If', 'If', 'Assign'])]", "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign']), ('orelse', ['Return'])]", "If -> [('test', 'UnaryOp'), ('body', ['If', 'Assign']), ('orelse', ['If'])]", "If -> [('test', 'Attribute'), ('body', ['Assign']), ('orelse', ['Return'])]", "If -> [('test', 'BoolOp'), ('body', ['Assign', 'If', 'Assign']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Expr']), ('orelse', ['Assign'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'If']), ('orelse', ['If', 'Assign'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Break']), ('orelse', ['Assert'])]", "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign']), ('orelse', ['AugAssign'])]", "If -> [('test', 'Attribute'), ('body', ['AugAssign', 'If']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Expr', 'TryExcept', 'Return']), ('orelse', ['Return'])]", "If -> [('test', 'Attribute'), ('body', ['AugAssign', 'AugAssign', 'AugAssign', 'If']), ('orelse', ['AugAssign', 'AugAssign', 'AugAssign'])]", "If -> [('test', 'Name'), ('body', ['If', 'If', 'Return']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Expr', 'AugAssign']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['If']), ('orelse', ['AugAssign', 'AugAssign'])]", "If -> [('test', 'Compare'), ('body', ['AugAssign', 'AugAssign']), ('orelse', ['AugAssign', 'AugAssign'])]", "If -> [('test', 'BoolOp'), ('body', ['AugAssign', 'Assign', 'Assign', 'TryExcept']), ('orelse', [])]", "If -> [('test', 'BoolOp'), ('body', ['AugAssign', 'TryExcept', 'Assign']), ('orelse', ['Assign'])]", "If -> [('test', 'Compare'), ('body', ['AugAssign', 'If', 'Assign', 'TryExcept', 'Expr']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Return']), ('orelse', ['Expr'])]", "If -> [('test', 'Attribute'), ('body', ['Expr', 'Assign']), ('orelse', ['If'])]", "If -> [('test', 'Attribute'), ('body', ['Expr']), ('orelse', ['If'])]", "If -> [('test', 'Attribute'), ('body', ['Expr', 'Assign', 'Return']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign']), ('orelse', ['Continue'])]", "If -> [('test', 'Compare'), ('body', ['AugAssign', 'If']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign']), ('orelse', ['Assign', 'TryExcept'])]", "If -> [('test', 'Name'), ('body', ['Expr', 'Expr', 'Assign', 'Expr', 'Expr']), ('orelse', ['If'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Expr']), ('orelse', ['Expr'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr']), ('orelse', ['If'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'Expr']), ('orelse', ['Expr'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Print', 'Print', 'Print']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'If']), ('orelse', ['For'])]", "If -> [('test', 'Name'), ('body', ['Assign', 'For', 'Assign']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign']), ('orelse', ['Pass'])]", "If -> [('test', 'BoolOp'), ('body', ['Print', 'Return']), ('orelse', ['If'])]", "If -> [('test', 'BoolOp'), ('body', ['Print', 'Print', 'Print', 'Print', 'Print', 'Print', 'Return']), ('orelse', ['If'])]", "If -> [('test', 'Compare'), ('body', ['Expr', 'If']), ('orelse', ['Break'])]", "If -> [('test', 'Name'), ('body', ['Print', 'Assign']), ('orelse', [])]", "If -> [('test', 'BoolOp'), ('body', ['Expr']), ('orelse', ['Assign', 'If', 'Print'])]", "If -> [('test', 'Compare'), ('body', ['Assign']), ('orelse', ['Print', 'Assign'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'For', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Print', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'For', 'Assign', 'While', 'Print', 'Print']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Return']), ('orelse', ['Expr', 'Return'])]", "If -> [('test', 'BoolOp'), ('body', ['Import', 'Assign', 'Expr', 'Assign', 'Assign']), ('orelse', [])]", "If -> [('test', 'Attribute'), ('body', ['Assign', 'If', 'If']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'If', 'If']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['Assign', 'If', 'If', 'Expr', 'AugAssign']), ('orelse', [])]", "If -> [('test', 'UnaryOp'), ('body', ['Expr', 'Raise']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['Assign', 'Assign', 'Assign', 'Return']), ('orelse', ['Raise'])]", "If -> [('test', 'Name'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'AugAssign', 'If', 'Return']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['If', 'Raise']), ('orelse', [])]", "If -> [('test', 'Subscript'), ('body', ['Assign', 'If']), ('orelse', ['AugAssign'])]", "If -> [('test', 'Name'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'If', 'If']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['Assert', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'If']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign']), ('orelse', ['Assign', 'Assign', 'Assign', 'If', 'If', 'AugAssign', 'If', 'If'])]", "If -> [('test', 'Name'), ('body', ['Assign', 'Expr', 'If']), ('orelse', ['Expr'])]", "If -> [('test', 'Compare'), ('body', ['For', 'Assign']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['If', 'If', 'AugAssign', 'Return']), ('orelse', ['Return'])]", "If -> [('test', 'Call'), ('body', ['Assign', 'For']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'If', 'Break']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['Assert', 'Assign', 'If', 'Return']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['Assign', 'If', 'For']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['Raise']), ('orelse', ['Assign'])]", "If -> [('test', 'Call'), ('body', ['If', 'Return']), ('orelse', ['If'])]", "If -> [('test', 'Call'), ('body', ['Assign', 'If', 'Assign', 'If', 'If', 'If']), ('orelse', ['Assign', 'Assign'])]", "If -> [('test', 'Attribute'), ('body', ['Expr', 'Expr', 'Assign']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Raise']), ('orelse', ['Assign', 'Assign', 'TryExcept', 'Assign', 'Assign', 'If'])]", "If -> [('test', 'Name'), ('body', ['Assign', 'Assign', 'If']), ('orelse', ['Assign', 'Assign'])]", "If -> [('test', 'Attribute'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['If', 'Assign']), ('orelse', ['If'])]", "If -> [('test', 'Compare'), ('body', ['If', 'Assign', 'Assign']), ('orelse', ['If'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assert']), ('orelse', ['If'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'TryFinally', 'Expr']), ('orelse', ['If'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'If', 'If']), ('orelse', ['If'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign']), ('orelse', ['Assert'])]", "If -> [('test', 'Attribute'), ('body', ['FunctionDef']), ('orelse', ['FunctionDef'])]", "If -> [('test', 'Compare'), ('body', ['Expr', 'Expr']), ('orelse', ['Assert'])]", "If -> [('test', 'Name'), ('body', ['Expr', 'For', 'If', 'Expr', 'Expr', 'Assign']), ('orelse', ['Expr', 'For', 'If', 'Expr', 'Assign'])]", "If -> [('test', 'BoolOp'), ('body', ['Raise']), ('orelse', ['Assign'])]", "If -> [('test', 'Call'), ('body', ['Assign', 'If', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr']), ('orelse', ['Assign', 'Expr', 'Expr', 'Assign', 'If', 'Expr'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Return']), ('orelse', ['FunctionDef', 'Return'])]", "If -> [('test', 'Compare'), ('body', ['If', 'Expr', 'Assign', 'For', 'Expr', 'Assign', 'For', 'Expr', 'For', 'Expr']), ('orelse', ['If'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'Assign', 'For', 'Expr', 'Assign', 'Assign', 'For', 'Expr', 'Expr']), ('orelse', ['Assert'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Break']), ('orelse', ['Assign', 'If', 'AugAssign'])]", "If -> [('test', 'Attribute'), ('body', ['Import', 'While']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['Assign', 'AugAssign']), ('orelse', ['Assign', 'AugAssign'])]", "If -> [('test', 'BoolOp'), ('body', ['Assign', 'If', 'Expr']), ('orelse', ['Expr'])]", "If -> [('test', 'BoolOp'), ('body', ['For', 'Raise']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['For']), ('orelse', ['If'])]", "If -> [('test', 'BoolOp'), ('body', ['If', 'If', 'Return']), ('orelse', [])]", "If -> [('test', 'Attribute'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'Assign', 'For']), ('orelse', [])]", "If -> [('test', 'Attribute'), ('body', ['Assign', 'Assign']), ('orelse', ['Assign'])]", "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Expr', 'Return']), ('orelse', ['Return'])]", "If -> [('test', 'BoolOp'), ('body', ['Assign', 'If', 'Expr']), ('orelse', [])]", "If -> [('test', 'UnaryOp'), ('body', ['If', 'TryExcept']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['Assign']), ('orelse', ['TryExcept'])]", "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'Assign']), ('orelse', ['Assign', 'Assign'])]", "If -> [('test', 'BoolOp'), ('body', ['Expr']), ('orelse', ['TryExcept'])]", "If -> [('test', 'Name'), ('body', ['For', 'Expr', 'Return']), ('orelse', ['Assign', 'For', 'Return'])]", "If -> [('test', 'Call'), ('body', ['Expr', 'Expr', 'Expr']), ('orelse', [])]", "If -> [('test', 'UnaryOp'), ('body', ['Expr']), ('orelse', ['Expr', 'Return'])]", "If -> [('test', 'Attribute'), ('body', ['Assign']), ('orelse', ['Expr'])]", "If -> [('test', 'BoolOp'), ('body', ['Expr', 'Assign']), ('orelse', [])]", "If -> [('test', 'Attribute'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Return']), ('orelse', ['Expr', 'Expr'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'TryExcept', 'If']), ('orelse', [])]", "If -> [('test', 'BoolOp'), ('body', ['Assign', 'If']), ('orelse', ['Expr'])]", "If -> [('test', 'Compare'), ('body', ['Delete', 'Assign', 'Assign', 'Assign']), ('orelse', ['If'])]", "If -> [('test', 'Compare'), ('body', ['Continue']), ('orelse', ['Assign', 'Assign', 'Expr'])]", "If -> [('test', 'Compare'), ('body', ['If', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'If']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['ImportFrom', 'Assign', 'Assign', 'If', 'Expr', 'Expr', 'Expr']), ('orelse', [])]", "If -> [('test', 'UnaryOp'), ('body', ['Print', 'Continue']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Print', 'Assign']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Print', 'Return']), ('orelse', ['Print', 'ImportFrom', 'Assign', 'Expr', 'Assign', 'Print', 'Assign', 'Assign', 'If', 'Assign', 'Print', 'Expr', 'Expr', 'Expr'])]", "If -> [('test', 'UnaryOp'), ('body', ['Expr', 'AugAssign']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Return']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Print', 'If']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Expr']), ('orelse', ['Raise'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'For', 'If', 'If']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Expr', 'Expr', 'Return']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Expr', 'For']), ('orelse', ['If'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Expr', 'For']), ('orelse', ['Raise'])]", "If -> [('test', 'Compare'), ('body', ['If', 'If', 'If']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['AugAssign', 'AugAssign']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['Assign', 'Assign', 'Expr', 'Expr', 'Expr']), ('orelse', [])]", "If -> [('test', 'Attribute'), ('body', ['For', 'Print']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Raise']), ('orelse', [])]", "If -> [('test', 'BoolOp'), ('body', ['Assign']), ('orelse', ['Assign', 'Assign', 'Assign'])]", "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign', 'For']), ('orelse', ['Expr', 'Expr'])]", "If -> [('test', 'BoolOp'), ('body', ['Assign']), ('orelse', ['Assign', 'Assign'])]", "If -> [('test', 'BoolOp'), ('body', ['Expr', 'Expr']), ('orelse', ['Expr', 'If'])]", "If -> [('test', 'Name'), ('body', ['Assign', 'Assign', 'Assign', 'Assign']), ('orelse', ['Assign'])]", "If -> [('test', 'Name'), ('body', ['Expr']), ('orelse', ['Assign', 'If', 'Expr'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'If', 'Assign', 'Assign', 'Assign', 'If']), ('orelse', ['If'])]", "If -> [('test', 'Name'), ('body', ['Assign', 'Return']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'If']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If']), ('orelse', [])]", "If -> [('test', 'UnaryOp'), ('body', ['Expr', 'Assign']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['ImportFrom', 'Assign']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['Assign', 'Assign', 'Assign']), ('orelse', ['If'])]", "If -> [('test', 'Call'), ('body', ['If', 'Assign', 'If']), ('orelse', ['Assign', 'If'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'TryFinally']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['TryExcept', 'Assign', 'If', 'Assign', 'Assign', 'If']), ('orelse', [])]", "If -> [('test', 'UnaryOp'), ('body', ['Expr', 'TryFinally']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Expr', 'TryFinally']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'If', 'Assign', 'If', 'Assign', 'If', 'Assign', 'If']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'With', 'If', 'TryExcept']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['TryExcept']), ('orelse', ['Expr'])]", "If -> [('test', 'Name'), ('body', ['Assign', 'Expr', 'Assign', 'Assign']), ('orelse', ['Expr'])]", "If -> [('test', 'Compare'), ('body', ['Expr']), ('orelse', ['Expr', 'Assign', 'Expr', 'Expr'])]", "If -> [('test', 'Compare'), ('body', ['Expr']), ('orelse', ['If', 'If'])]", "If -> [('test', 'Compare'), ('body', ['Expr']), ('orelse', ['Expr', 'Expr'])]", "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign', 'For', 'AugAssign', 'Expr']), ('orelse', ['If'])]", "If -> [('test', 'Call'), ('body', ['Assign', 'Assign', 'If']), ('orelse', ['Expr', 'Expr'])]", "If -> [('test', 'BoolOp'), ('body', ['Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['Assign', 'Expr', 'If']), ('orelse', ['If', 'Expr'])]", "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign', 'For', 'AugAssign', 'If', 'Expr']), ('orelse', ['If'])]", "If -> [('test', 'BinOp'), ('body', ['Expr']), ('orelse', ['If'])]", "If -> [('test', 'BinOp'), ('body', ['Assign', 'Expr', 'Expr', 'Expr']), ('orelse', [])]", "If -> [('test', 'Subscript'), ('body', ['Return']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['If', 'Assign', 'Assign', 'Assign', 'Assign']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If']), ('orelse', [])]", "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('orelse', ['Assign'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'If']), ('orelse', ['Raise'])]", "If -> [('test', 'Compare'), ('body', ['Expr']), ('orelse', ['Break'])]", "If -> [('test', 'BoolOp'), ('body', ['If', 'While']), ('orelse', [])]", "If -> [('test', 'BinOp'), ('body', ['Assign', 'Print', 'Return']), ('orelse', [])]", "If -> [('test', 'BinOp'), ('body', ['Return']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['Expr', 'Assign', 'Assign', 'If', 'Expr', 'Assign', 'If', 'Expr']), ('orelse', ['Expr', 'Expr', 'Assign', 'If', 'If', 'Expr', 'Assign', 'If', 'Expr'])]", "If -> [('test', 'Attribute'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Expr']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['AugAssign', 'Print']), ('orelse', ['If'])]", "If -> [('test', 'Name'), ('body', ['Assign']), ('orelse', ['Assign', 'Expr', 'Assign'])]", "If -> [('test', 'Compare'), ('body', ['AugAssign', 'If', 'Return']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['Assign', 'Assign', 'While']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Expr', 'Expr', 'Expr', 'Expr']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['Assign', 'Assign', 'Assign', 'If']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['Assign', 'Expr', 'If']), ('orelse', ['Expr', 'Expr'])]", "If -> [('test', 'Name'), ('body', ['Expr', 'Expr']), ('orelse', ['Assign', 'Assign', 'Expr'])]", "If -> [('test', 'Call'), ('body', ['Expr', 'Assign', 'Assign', 'Expr']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['Assign', 'Assign', 'Return']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['Expr', 'For', 'Expr', 'Assign']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'If', 'Assign', 'For', 'Assign', 'Expr', 'Expr', 'Return']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Delete']), ('orelse', ['Assign'])]", "If -> [('test', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'TryExcept', 'Assign', 'Assign', 'Assign', 'Assert', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'For', 'Expr', 'Expr']), ('orelse', [])]", "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Return']), ('orelse', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'TryExcept', 'Assign', 'Assign', 'Assign', 'For', 'For', 'Expr', 'Expr'])]", "If -> [('test', 'BoolOp'), ('body', ['For']), ('orelse', ['Expr'])]", "If -> [('test', 'Attribute'), ('body', ['Break']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['Print', 'Return']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['Pass']), ('orelse', ['If'])]", "If -> [('test', 'Call'), ('body', ['Assign']), ('orelse', ['Print'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'While', 'Expr', 'Expr']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['Assign']), ('orelse', ['Exec', 'Assign'])]", "If -> [('test', 'Name'), ('body', ['Assign', 'Assign', 'Assign', 'Assign']), ('orelse', ['Assign', 'Assign', 'Assign', 'Assign'])]", "If -> [('test', 'Attribute'), ('body', ['Assign']), ('orelse', ['TryExcept'])]", "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'For']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['Assign', 'Assign', 'Expr', 'Expr', 'TryExcept', 'Expr', 'Expr', 'If', 'Return']), ('orelse', [])]", "If -> [('test', 'UnaryOp'), ('body', ['Return']), ('orelse', ['TryExcept'])]", "If -> [('test', 'Call'), ('body', ['Delete', 'Return']), ('orelse', ['Raise'])]", "If -> [('test', 'Call'), ('body', ['Assign', 'For', 'Expr']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['Expr', 'Expr']), ('orelse', ['Assign', 'TryFinally'])]", "If -> [('test', 'Attribute'), ('body', ['Assign', 'Raise']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['AugAssign', 'Assign']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Expr', 'Assign', 'Expr']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['Import', 'Assign']), ('orelse', ['Assign'])]", "If -> [('test', 'Call'), ('body', ['Expr', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['ClassDef', 'ClassDef', 'Assign', 'Assign', 'Assign', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Expr', 'Return']), ('orelse', ['If'])]", "If -> [('test', 'Name'), ('body', ['Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'TryExcept']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['Print', 'Return']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign']), ('orelse', ['Assign', 'If'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'If', 'If', 'Assign']), ('orelse', ['If'])]", "If -> [('test', 'Compare'), ('body', ['If', 'Expr', 'Expr']), ('orelse', ['Expr'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'FunctionDef', 'Expr', 'Assign', 'Expr', 'FunctionDef', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['Expr', 'Expr']), ('orelse', ['Raise'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'For', 'Print']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Global', 'Assign']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Print', 'Assign']), ('orelse', ['Assign', 'For'])]", "If -> [('test', 'Compare'), ('body', ['Expr', 'Expr', 'Import', 'Assign', 'ImportFrom', 'Assign', 'Expr', 'Print']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['Assign', 'Expr', 'AugAssign']), ('orelse', [])]", "If -> [('test', 'UnaryOp'), ('body', ['Expr', 'Break']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['If', 'Continue']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Delete', 'Continue']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Print', 'Assign', 'Expr']), ('orelse', [])]", "If -> [('test', 'BoolOp'), ('body', ['Print', 'Assign', 'Assign', 'Expr']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'While', 'If', 'Expr']), ('orelse', ['If'])]", "If -> [('test', 'Compare'), ('body', ['Expr', 'While', 'If']), ('orelse', ['If'])]", "If -> [('test', 'Compare'), ('body', ['Expr', 'While']), ('orelse', ['If'])]", "If -> [('test', 'Compare'), ('body', ['Expr', 'While', 'If', 'While']), ('orelse', ['If'])]", "If -> [('test', 'Compare'), ('body', ['Expr', 'If', 'If']), ('orelse', ['Expr'])]", "If -> [('test', 'BoolOp'), ('body', ['Expr', 'If']), ('orelse', [])]", "If -> [('test', 'BoolOp'), ('body', ['Expr', 'While']), ('orelse', [])]", "If -> [('test', 'BoolOp'), ('body', ['Expr', 'If', 'Assign']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['Assign', 'Assign', 'Return']), ('orelse', ['Assign', 'Return'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Print']), ('orelse', [])]", "If -> [('test', 'UnaryOp'), ('body', ['Assert', 'Assign']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Pass']), ('orelse', ['Assign'])]", "If -> [('test', 'Compare'), ('body', ['Print', 'If', 'Expr', 'Return']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'If', 'Expr']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Import', 'Assign', 'Assign']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['Assign']), ('orelse', ['Expr'])]", "If -> [('test', 'Attribute'), ('body', ['Import', 'Raise']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['Assign', 'TryExcept', 'Assign', 'Return']), ('orelse', ['If'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'Return']), ('orelse', ['Assign', 'Assign', 'Return'])]", "If -> [('test', 'Compare'), ('body', ['Expr', 'Expr', 'Expr']), ('orelse', ['Expr', 'Expr', 'Expr', 'Expr'])]", "If -> [('test', 'Compare'), ('body', ['Import']), ('orelse', ['Import'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'If']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['AugAssign']), ('orelse', ['If'])]", "If -> [('test', 'Compare'), ('body', ['Print', 'Continue']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr']), ('orelse', [])]", "If -> [('test', 'BoolOp'), ('body', ['TryExcept', 'AugAssign']), ('orelse', [])]", "If -> [('test', 'BoolOp'), ('body', ['TryExcept', 'If', 'Expr']), ('orelse', [])]", "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'Assign', 'If', 'TryExcept']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['Assign', 'Expr']), ('orelse', ['Assign', 'Expr'])]", "If -> [('test', 'UnaryOp'), ('body', ['ClassDef']), ('orelse', [])]", "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'For', 'Expr', 'Assign']), ('orelse', [])]", "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'If', 'If', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'If']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['ImportFrom', 'ClassDef', 'Expr']), ('orelse', ['If'])]", "If -> [('test', 'UnaryOp'), ('body', ['AugAssign', 'AugAssign']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['Assign', 'Assign', 'Return']), ('orelse', ['If', 'Return'])]", "If -> [('test', 'Compare'), ('body', ['Return']), ('orelse', ['Assign', 'Assign', 'Return'])]", "If -> [('test', 'Compare'), ('body', ['Return']), ('orelse', ['If', 'Return'])]", "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'If', 'Assign']), ('orelse', [])]", "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign', 'If', 'If']), ('orelse', ['If'])]", "If -> [('test', 'BoolOp'), ('body', ['For']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'TryExcept']), ('orelse', ['Assign', 'Expr'])]", "If -> [('test', 'BoolOp'), ('body', ['Pass']), ('orelse', ['Assign', 'Assign', 'If', 'If'])]", "If -> [('test', 'Name'), ('body', ['Expr', 'If']), ('orelse', ['Expr'])]", "If -> [('test', 'Call'), ('body', ['If', 'Expr', 'If', 'Return']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'If']), ('orelse', ['Return'])]", "If -> [('test', 'Name'), ('body', ['Return']), ('orelse', ['Assign', 'Return'])]", "If -> [('test', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Expr', 'Return']), ('orelse', [])]", "If -> [('test', 'Attribute'), ('body', ['Assign']), ('orelse', ['Assign', 'If', 'If', 'Assign'])]", "If -> [('test', 'Name'), ('body', ['ImportFrom', 'Assign', 'Assign', 'Expr', 'Assign']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Import', 'FunctionDef']), ('orelse', ['Assign'])]", "If -> [('test', 'Compare'), ('body', ['Expr', 'TryFinally']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Import', 'FunctionDef', 'Assign', 'Assign', 'Expr', 'For', 'Expr']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Expr']), ('orelse', ['Assert'])]", "If -> [('test', 'Name'), ('body', ['Assign', 'Assign', 'Expr', 'Expr']), ('orelse', [])]", "If -> [('test', 'Attribute'), ('body', ['Assign', 'Expr']), ('orelse', ['Expr'])]", "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'FunctionDef', 'FunctionDef', 'Expr']), ('orelse', [])]", "If -> [('test', 'Attribute'), ('body', ['Expr']), ('orelse', ['Expr', 'Expr'])]", "If -> [('test', 'Attribute'), ('body', ['Assign', 'TryExcept', 'If']), ('orelse', ['If'])]", "If -> [('test', 'UnaryOp'), ('body', ['Assign']), ('orelse', ['TryExcept'])]", "If -> [('test', 'Compare'), ('body', ['If', 'Assign']), ('orelse', [])]", "If -> [('test', 'Attribute'), ('body', ['Expr']), ('orelse', ['Assign'])]", "If -> [('test', 'Compare'), ('body', ['Assign']), ('orelse', ['Assign', 'Expr', 'Expr'])]", "If -> [('test', 'Call'), ('body', ['Assign', 'Assign', 'If']), ('orelse', ['Expr'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'For', 'Break']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['For', 'Expr', 'Expr']), ('orelse', ['Print'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign']), ('orelse', ['Expr'])]", "If -> [('test', 'BoolOp'), ('body', ['Assign', 'While', 'Expr', 'Assign']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['Print']), ('orelse', ['Print'])]", "If -> [('test', 'Call'), ('body', ['If']), ('orelse', ['Raise'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Return']), ('orelse', ['Assign', 'If', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Return'])]", "If -> [('test', 'Call'), ('body', ['If', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr']), ('orelse', ['Assign', 'Expr', 'Assign', 'Assign', 'Return'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'For', 'Assign', 'Assign', 'Assign']), ('orelse', ['Assign', 'Assign', 'Assign'])]", "If -> [('test', 'Compare'), ('body', ['If', 'Assign', 'Assign', 'Expr']), ('orelse', ['If'])]", "If -> [('test', 'Compare'), ('body', ['If', 'TryExcept', 'If', 'Expr', 'TryExcept', 'TryExcept', 'Expr', 'Expr']), ('orelse', [])]", "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign', 'Assign', 'For']), ('orelse', [])]", "If -> [('test', 'BoolOp'), ('body', ['If']), ('orelse', ['Return'])]", "If -> [('test', 'Call'), ('body', ['Assign', 'If', 'For']), ('orelse', ['If'])]", "If -> [('test', 'Name'), ('body', ['Assign', 'Expr']), ('orelse', ['Assign'])]", "If -> [('test', 'Call'), ('body', ['If', 'For']), ('orelse', ['If'])]", "If -> [('test', 'Compare'), ('body', ['Assign']), ('orelse', ['Assign', 'Expr'])]", "If -> [('test', 'Call'), ('body', ['Assign', 'For']), ('orelse', ['If'])]", "If -> [('test', 'Call'), ('body', ['If']), ('orelse', ['Assign', 'Assign', 'Assign', 'If', 'If'])]", "If -> [('test', 'Attribute'), ('body', ['Assign', 'For']), ('orelse', ['Assign', 'For'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'For', 'Return']), ('orelse', ['If'])]", "If -> [('test', 'BoolOp'), ('body', ['Return']), ('orelse', ['Assign', 'If'])]", "If -> [('test', 'Compare'), ('body', ['If']), ('orelse', ['Return'])]", "If -> [('test', 'Name'), ('body', ['Assign', 'Assign', 'TryExcept', 'Assign', 'Expr']), ('orelse', ['Raise'])]", "If -> [('test', 'Attribute'), ('body', ['Assign', 'Assign', 'Assign', 'TryExcept']), ('orelse', [])]", "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign', 'TryExcept', 'Expr']), ('orelse', ['Raise'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'While']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assert', 'If']), ('orelse', ['Assign', 'Assign'])]", "If -> [('test', 'Compare'), ('body', ['For']), ('orelse', ['Raise'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assert']), ('orelse', ['If'])]", "If -> [('test', 'Compare'), ('body', ['Expr', 'If', 'Assert']), ('orelse', ['If'])]", "If -> [('test', 'Call'), ('body', ['Assign', 'Assign', 'For', 'Expr', 'Expr', 'Expr']), ('orelse', ['Assign', 'Expr'])]", "If -> [('test', 'Call'), ('body', ['Expr', 'Expr']), ('orelse', ['Assign'])]", "If -> [('test', 'Name'), ('body', ['Expr', 'Assign']), ('orelse', ['Expr'])]", "If -> [('test', 'Subscript'), ('body', ['Assign']), ('orelse', ['Assign', 'Expr', 'If'])]", "If -> [('test', 'Name'), ('body', ['Expr', 'Assign']), ('orelse', ['Expr', 'Expr'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign']), ('orelse', ['If', 'Assign'])]", "If -> [('test', 'Compare'), ('body', ['AugAssign']), ('orelse', ['Assign'])]", "If -> [('test', 'Compare'), ('body', ['Expr', 'Assign', 'Assign', 'Expr']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['If', 'Assign', 'Expr', 'Assign']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['If', 'Raise']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['If', 'Expr', 'Continue']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['Assign', 'Expr', 'For']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['If']), ('orelse', ['Expr', 'If'])]", "If -> [('test', 'UnaryOp'), ('body', ['If', 'Expr', 'Continue']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Expr', 'Expr', 'Continue']), ('orelse', ['If'])]", "If -> [('test', 'Compare'), ('body', ['Expr', 'Expr', 'Continue']), ('orelse', ['For'])]", "If -> [('test', 'Attribute'), ('body', ['Assign', 'Assign', 'Break']), ('orelse', [])]", "If -> [('test', 'BoolOp'), ('body', ['Assign', 'If']), ('orelse', ['Assign'])]", "If -> [('test', 'Name'), ('body', ['Expr', 'Return']), ('orelse', ['Return'])]", "If -> [('test', 'BoolOp'), ('body', ['Expr', 'Return']), ('orelse', ['If', 'Return'])]", "If -> [('test', 'UnaryOp'), ('body', ['Expr', 'Delete']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['If', 'If', 'Return']), ('orelse', [])]", "If -> [('test', 'BoolOp'), ('body', ['Assign']), ('orelse', ['Expr', 'Assign'])]", "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign', 'For', 'If', 'Assign']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['If', 'Assign', 'If']), ('orelse', ['Expr'])]", "If -> [('test', 'Call'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign']), ('orelse', ['Expr'])]", "If -> [('test', 'Call'), ('body', ['Expr', 'Assign', 'If']), ('orelse', ['If'])]", "If -> [('test', 'Name'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'Expr', 'Return']), ('orelse', [])]", "If -> [('test', 'BoolOp'), ('body', ['For', 'If', 'If']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['Expr', 'Assign', 'If']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['If', 'Return']), ('orelse', ['Assert'])]", "If -> [('test', 'Compare'), ('body', ['For']), ('orelse', ['Expr'])]", "If -> [('test', 'Call'), ('body', ['Expr']), ('orelse', ['Assign'])]", "If -> [('test', 'Compare'), ('body', ['Expr']), ('orelse', ['Assign', 'If', 'If'])]", "If -> [('test', 'Attribute'), ('body', ['Assign', 'Return']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['If', 'Assign', 'Assign', 'Assign', 'Assign', 'Return']), ('orelse', ['If'])]", "If -> [('test', 'Name'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign']), ('orelse', [])]", "If -> [('test', 'BoolOp'), ('body', ['Assign', 'If', 'If', 'If', 'Assign', 'Delete', 'Assign', 'Break']), ('orelse', [])]", "If -> [('test', 'BoolOp'), ('body', ['Assign', 'For', 'If']), ('orelse', [])]", "If -> [('test', 'Attribute'), ('body', ['Assign', 'Expr', 'Expr', 'Expr']), ('orelse', [])]", "If -> [('test', 'Attribute'), ('body', ['Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('orelse', ['Expr', 'Expr'])]", "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'If', 'Assign', 'Assign']), ('orelse', [])]", "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Return']), ('orelse', ['If'])]", "If -> [('test', 'Call'), ('body', ['If', 'Assign', 'Assign', 'Return']), ('orelse', ['If'])]", "If -> [('test', 'Call'), ('body', ['Assign', 'Return']), ('orelse', ['Assign', 'Return'])]", "If -> [('test', 'Attribute'), ('body', ['Expr']), ('orelse', ['Assign', 'Return'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Return']), ('orelse', ['Assign', 'Assign', 'Expr', 'Assign', 'Return'])]", "If -> [('test', 'Attribute'), ('body', ['Return']), ('orelse', ['Expr', 'If', 'Return'])]", "If -> [('test', 'BoolOp'), ('body', ['If', 'Assign']), ('orelse', ['If'])]", "If -> [('test', 'UnaryOp'), ('body', ['Expr', 'If', 'Return']), ('orelse', [])]", "If -> [('test', 'Attribute'), ('body', ['If', 'Assign', 'Break']), ('orelse', [])]", "If -> [('test', 'Attribute'), ('body', ['For', 'Assign', 'Assign', 'Return']), ('orelse', [])]", "If -> [('test', 'BoolOp'), ('body', ['If', 'Assign', 'Assign']), ('orelse', [])]", "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'Assign', 'Assign', 'Return']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['Assert', 'Expr', 'Assign']), ('orelse', [])]", "If -> [('test', 'Attribute'), ('body', ['Assign', 'Assign', 'Return']), ('orelse', [])]", "If -> [('test', 'Attribute'), ('body', ['Return']), ('orelse', ['Expr', 'Return'])]", "If -> [('test', 'Call'), ('body', ['Pass']), ('orelse', ['Expr'])]", "If -> [('test', 'Compare'), ('body', ['If', 'Assign', 'Return']), ('orelse', ['If', 'If', 'Assign', 'Return'])]", "If -> [('test', 'Compare'), ('body', ['Expr']), ('orelse', ['Assign', 'If'])]", "If -> [('test', 'Compare'), ('body', ['Expr']), ('orelse', ['Assign', 'Assign'])]", "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Expr', 'Expr']), ('orelse', [])]", "If -> [('test', 'Attribute'), ('body', ['Assign', 'Assign']), ('orelse', ['If'])]", "If -> [('test', 'Attribute'), ('body', ['Assign', 'Assign']), ('orelse', ['Assign', 'Assign'])]", "If -> [('test', 'BoolOp'), ('body', ['Assign', 'If', 'AugAssign', 'AugAssign', 'AugAssign']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['Return']), ('orelse', ['Expr'])]", "If -> [('test', 'BoolOp'), ('body', ['Return']), ('orelse', ['Expr', 'Return'])]", "If -> [('test', 'Name'), ('body', ['Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr']), ('orelse', [])]", "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'Expr', 'Expr', 'Expr', 'Assign']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['AugAssign', 'Assign']), ('orelse', ['If'])]", "If -> [('test', 'Attribute'), ('body', ['Raise']), ('orelse', ['Raise'])]", "If -> [('test', 'Compare'), ('body', ['Assign']), ('orelse', ['Print', 'Break'])]", "If -> [('test', 'Compare'), ('body', ['If', 'Expr', 'Continue']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['Raise']), ('orelse', ['If'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Print', 'If', 'If', 'If']), ('orelse', ['If'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'Print', 'Print', 'Print']), ('orelse', ['If'])]", "If -> [('test', 'Compare'), ('body', ['Print', 'If']), ('orelse', ['If'])]", "If -> [('test', 'Compare'), ('body', ['Print']), ('orelse', ['Expr'])]", "If -> [('test', 'Name'), ('body', ['If', 'Assign', 'Expr']), ('orelse', [])]", "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Return']), ('orelse', [])]", "If -> [('test', 'UnaryOp'), ('body', ['Delete']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Print', 'Assign', 'Print', 'If', 'Assign', 'Print', 'Assign', 'Print']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Print', 'Print', 'Print', 'Print', 'Print', 'Print', 'Print']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Print']), ('orelse', ['Assign', 'Print', 'Expr'])]", "If -> [('test', 'Attribute'), ('body', ['Assign', 'Assign', 'AugAssign', 'If']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['AugAssign', 'For', 'Assign']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'If', 'If', 'If', 'If', 'If', 'Assign', 'Expr', 'TryFinally']), ('orelse', [])]", "If -> [('test', 'UnaryOp'), ('body', ['Print']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Expr', 'Assign']), ('orelse', ['AugAssign'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign']), ('orelse', ['AugAssign'])]", "If -> [('test', 'Compare'), ('body', ['For']), ('orelse', ['Expr', 'Expr', 'For'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'Assign']), ('orelse', ['Assign'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assert']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['Expr', 'Raise']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['Expr', 'Raise']), ('orelse', ['Return'])]", "If -> [('test', 'UnaryOp'), ('body', ['ImportFrom', 'Assign', 'For']), ('orelse', [])]", "If -> [('test', 'Attribute'), ('body', ['If', 'For']), ('orelse', [])]", "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign', 'Assign', 'For', 'If', 'Assign', 'If']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['Assign', 'Assign', 'For', 'Return']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign']), ('orelse', ['Expr', 'If'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'AugAssign', 'TryFinally']), ('orelse', [])]", "If -> [('test', 'Attribute'), ('body', ['ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Return']), ('orelse', ['Return'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign']), ('orelse', ['Assign', 'Assign'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'AugAssign', 'Assign', 'Assign', 'Expr', 'Assign', 'Return']), ('orelse', ['Return'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'If', 'If']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['Expr', 'Expr', 'Expr', 'Expr', 'Return']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Expr', 'Assign']), ('orelse', ['Assign'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'If', 'Expr', 'Return']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Expr', 'Return']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['TryExcept', 'Expr', 'Return']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['Assign']), ('orelse', ['Expr', 'Return'])]", "If -> [('test', 'UnaryOp'), ('body', ['Expr', 'Return']), ('orelse', ['Expr', 'Assign', 'If', 'If', 'Expr'])]", "If -> [('test', 'Call'), ('body', ['Assign', 'Expr', 'AugAssign', 'Assign', 'Expr']), ('orelse', ['Assign'])]", "If -> [('test', 'Compare'), ('body', ['Assign']), ('orelse', ['Expr', 'Return'])]", "If -> [('test', 'UnaryOp'), ('body', ['Expr', 'Assign', 'Assign', 'If', 'If', 'Assign', 'Assign']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['Expr', 'Expr', 'TryExcept']), ('orelse', [])]", "If -> [('test', 'UnaryOp'), ('body', ['If']), ('orelse', ['If'])]", "If -> [('test', 'UnaryOp'), ('body', ['TryExcept']), ('orelse', ['If'])]", "If -> [('test', 'UnaryOp'), ('body', ['Print', 'Print', 'Print', 'Return']), ('orelse', [])]", "If -> [('test', 'BoolOp'), ('body', ['Print', 'Return']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'For', 'Assign', 'Assign', 'Return']), ('orelse', ['If'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Return']), ('orelse', ['If'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Return']), ('orelse', ['Print', 'Return'])]", "If -> [('test', 'Name'), ('body', ['Assign', 'Return']), ('orelse', ['Return'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'For']), ('orelse', ['Assign'])]", "If -> [('test', 'Compare'), ('body', ['If']), ('orelse', ['FunctionDef'])]", "If -> [('test', 'Call'), ('body', ['Assign']), ('orelse', ['Assign', 'Assign', 'Assign', 'Assign'])]", "If -> [('test', 'Call'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'Assign', 'ImportFrom', 'For', 'Expr']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['TryExcept', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign']), ('orelse', [])]", "If -> [('test', 'Attribute'), ('body', ['AugAssign', 'Expr']), ('orelse', [])]", "If -> [('test', 'Attribute'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign']), ('orelse', ['If', 'Assign', 'If', 'Assign'])]", "If -> [('test', 'Name'), ('body', ['Print', 'Print', 'Print', 'Print', 'Print', 'Print', 'Break']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'For']), ('orelse', ['Assign', 'Print'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Print']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign']), ('orelse', ['Assign', 'For', 'If'])]", "If -> [('test', 'Compare'), ('body', ['Assign']), ('orelse', ['Assign', 'If', 'Assign'])]", "If -> [('test', 'Compare'), ('body', ['Assert']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'For', 'Print', 'Print']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Print']), ('orelse', ['Print'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('orelse', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign'])]", "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign', 'If', 'Expr', 'Assign', 'If', 'Expr']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign']), ('orelse', ['Continue'])]", "If -> [('test', 'BoolOp'), ('body', ['Assign', 'If', 'Assign', 'Expr']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['Print', 'If', 'Expr', 'If', 'Expr', 'Return']), ('orelse', ['If'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'If']), ('orelse', ['Assign', 'Assign', 'Assign', 'If'])]", "If -> [('test', 'BoolOp'), ('body', ['Pass']), ('orelse', ['Expr', 'Return'])]", "If -> [('test', 'Name'), ('body', ['Assign', 'Assign', 'For']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['While']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['Expr', 'Expr', 'Assign', 'Expr', 'If', 'If']), ('orelse', ['Expr', 'Expr'])]", "If -> [('test', 'Name'), ('body', ['If', 'For']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Expr']), ('orelse', ['Print', 'Raise'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Expr']), ('orelse', ['Assign', 'Expr'])]", "If -> [('test', 'BoolOp'), ('body', ['Expr', 'Expr', 'Expr', 'Return']), ('orelse', ['Expr', 'Expr', 'Expr', 'Expr'])]", "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'Assign', 'For', 'Assign', 'Expr', 'Assign']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Expr', 'Print']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['AugAssign', 'Assign']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Expr', 'Assign', 'Expr', 'Print', 'For']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['Print']), ('orelse', ['If'])]", "If -> [('test', 'Call'), ('body', ['Print']), ('orelse', ['Print', 'Print'])]", "If -> [('test', 'BoolOp'), ('body', ['Print', 'Print', 'Print', 'Expr']), ('orelse', [])]", "If -> [('test', 'BoolOp'), ('body', ['Assign', 'If', 'Expr']), ('orelse', ['ImportFrom', 'Assign', 'If', 'Assign', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'If', 'Expr'])]", "If -> [('test', 'BoolOp'), ('body', ['ImportFrom', 'Assign']), ('orelse', ['ImportFrom', 'Assign'])]", "If -> [('test', 'Compare'), ('body', ['Expr', 'Expr', 'ImportFrom', 'Expr', 'Expr', 'Expr']), ('orelse', [])]", "If -> [('test', 'Attribute'), ('body', ['ImportFrom', 'Return']), ('orelse', [])]", "If -> [('test', 'BoolOp'), ('body', ['Assign', 'If']), ('orelse', ['Assign', 'Raise'])]", "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('orelse', [])]", "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['ImportFrom', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef', 'ClassDef']), ('orelse', [])]", "If -> [('test', 'BoolOp'), ('body', ['Expr', 'Expr']), ('orelse', ['Expr', 'Expr'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'For', 'Assign', 'Assign']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['If', 'Expr']), ('orelse', ['Return'])]", "If -> [('test', 'Compare'), ('body', ['If', 'Expr']), ('orelse', ['Expr', 'Return'])]", "If -> [('test', 'Compare'), ('body', ['Expr', 'Return']), ('orelse', ['Assign', 'Expr', 'Expr'])]", "If -> [('test', 'Name'), ('body', ['Assign', 'Expr']), ('orelse', ['Expr', 'Return'])]", "If -> [('test', 'Name'), ('body', ['Expr', 'Expr', 'Return']), ('orelse', ['Expr', 'Return'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'TryExcept', 'Expr', 'Expr']), ('orelse', ['If'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'TryExcept', 'TryExcept', 'Expr', 'Expr']), ('orelse', ['Expr', 'Return'])]", "If -> [('test', 'Compare'), ('body', ['TryExcept', 'If']), ('orelse', ['If'])]", "If -> [('test', 'Name'), ('body', ['Assign', 'If', 'If']), ('orelse', ['Assign', 'If'])]", "If -> [('test', 'Compare'), ('body', ['Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Return']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['TryExcept', 'TryExcept', 'If']), ('orelse', ['Expr', 'Return'])]", "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'Return']), ('orelse', ['Return'])]", "If -> [('test', 'Compare'), ('body', ['Expr', 'Assign']), ('orelse', ['Expr'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'If', 'If']), ('orelse', [])]", "If -> [('test', 'UnaryOp'), ('body', ['Expr', 'AugAssign']), ('orelse', ['Assign'])]", "If -> [('test', 'Compare'), ('body', ['ImportFrom', 'Assign', 'For', 'Assign', 'Return']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['If', 'TryExcept']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['If', 'Return']), ('orelse', ['If'])]", "If -> [('test', 'BoolOp'), ('body', ['ImportFrom', 'ImportFrom', 'Print', 'Assign']), ('orelse', ['Assign', 'Assign', 'Import', 'Import', 'Print', 'If'])]", "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'Import', 'Expr', 'Import', 'Assign', 'Assign', 'Print', 'Assign']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['Assign', 'Assign', 'Assign', 'Assign']), ('orelse', ['Assign', 'Assign', 'If', 'If', 'Assign', 'Assign', 'Assign'])]", "If -> [('test', 'Call'), ('body', ['Expr']), ('orelse', ['Expr', 'Expr', 'Expr'])]", "If -> [('test', 'Name'), ('body', ['Assign', 'Print']), ('orelse', [])]", "If -> [('test', 'UnaryOp'), ('body', ['Assign']), ('orelse', ['Assign', 'Assign', 'If'])]", "If -> [('test', 'Compare'), ('body', ['Assign']), ('orelse', ['Assign', 'If', 'If'])]", "If -> [('test', 'Compare'), ('body', ['Expr', 'Expr', 'Expr']), ('orelse', ['Expr'])]", "If -> [('test', 'Name'), ('body', ['If', 'Assign', 'If']), ('orelse', ['Assign'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'If', 'If']), ('orelse', ['If', 'If', 'If'])]", "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Expr']), ('orelse', ['If', 'Expr'])]", "If -> [('test', 'Attribute'), ('body', ['For']), ('orelse', ['For'])]", "If -> [('test', 'Attribute'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['Assign', 'Return']), ('orelse', ['Assign', 'Return'])]", "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'Assign', 'If', 'If', 'Assign']), ('orelse', [])]", "If -> [('test', 'UnaryOp'), ('body', ['If', 'Assign', 'Assign']), ('orelse', ['Assign'])]", "If -> [('test', 'BinOp'), ('body', ['Assign']), ('orelse', ['Assign'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'AugAssign', 'Assign', 'Return']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['If']), ('orelse', ['Return'])]", "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign', 'Continue']), ('orelse', [])]", "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'AugAssign', 'If', 'Assign']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['AugAssign', 'Break']), ('orelse', [])]", "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'If', 'Expr', 'Assign', 'Delete']), ('orelse', ['If'])]", "If -> [('test', 'Compare'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'If', 'Expr', 'Assign', 'Delete']), ('orelse', ['Assign', 'Expr'])]", "If -> [('test', 'UnaryOp'), ('body', ['If', 'For']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Expr']), ('orelse', ['Assign', 'If'])]", "If -> [('test', 'Compare'), ('body', ['Expr']), ('orelse', ['For', 'Assign', 'Expr', 'If'])]", "If -> [('test', 'Compare'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Break']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['Assign', 'Expr', 'For']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['AugAssign', 'If', 'AugAssign']), ('orelse', ['AugAssign'])]", "If -> [('test', 'BinOp'), ('body', ['Continue']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['AugAssign', 'Assign', 'Assign', 'Assign', 'Break']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['Assign', 'For', 'If', 'Return', 'Assign', 'For', 'If', 'Return']), ('orelse', [])]", "If -> [('test', 'UnaryOp'), ('body', ['Return']), ('orelse', ['For'])]", "If -> [('test', 'Call'), ('body', ['Assign', 'Expr', 'Return']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['If', 'For']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['Assign', 'Assign']), ('orelse', ['Assign', 'Expr'])]", "If -> [('test', 'Call'), ('body', ['Expr', 'AugAssign', 'Assign', 'Break']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['Expr', 'Assign', 'Break']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'FunctionDef', 'FunctionDef', 'FunctionDef', 'Expr']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['If', 'Assign', 'Expr', 'Expr', 'Return']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['For', 'For', 'For']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['For', 'If']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['Print', 'For']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Expr', 'Return']), ('orelse', ['Return'])]", "If -> [('test', 'Name'), ('body', ['ImportFrom']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['Assign', 'Assign', 'If', 'Assign']), ('orelse', ['Assign'])]", "If -> [('test', 'Name'), ('body', ['Assign', 'Assign', 'If']), ('orelse', ['Assign'])]", "If -> [('test', 'Call'), ('body', ['Assign', 'Assign', 'Assign']), ('orelse', ['Assign'])]", "If -> [('test', 'Attribute'), ('body', ['If', 'If']), ('orelse', ['Assign'])]", "If -> [('test', 'Call'), ('body', ['TryExcept', 'Assign']), ('orelse', ['Assign'])]", "If -> [('test', 'Call'), ('body', ['Assign', 'If']), ('orelse', ['Assign'])]", "If -> [('test', 'Attribute'), ('body', ['Assign']), ('orelse', ['Assign', 'Assign', 'If'])]", "If -> [('test', 'Compare'), ('body', ['FunctionDef', 'Assign']), ('orelse', ['Assign'])]", "If -> [('test', 'Name'), ('body', ['FunctionDef', 'Assign']), ('orelse', ['Assign'])]", "If -> [('test', 'Name'), ('body', ['FunctionDef', 'Assign', 'Assign', 'Assign']), ('orelse', ['Assign', 'Assign'])]", "If -> [('test', 'Call'), ('body', ['Assign', 'Expr', 'Expr', 'Assign', 'If']), ('orelse', ['If'])]", "If -> [('test', 'BoolOp'), ('body', ['Assign']), ('orelse', ['Assign', 'If'])]", "If -> [('test', 'Call'), ('body', ['Assign']), ('orelse', ['Expr', 'Assign', 'Expr', 'Expr', 'Assign'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'If', 'If', 'Assign', 'Assign', 'Break']), ('orelse', [])]", "If -> [('test', 'BinOp'), ('body', ['Assign']), ('orelse', ['Assign', 'Assign'])]", "If -> [('test', 'Compare'), ('body', ['Expr', 'Return']), ('orelse', ['Raise'])]", "If -> [('test', 'Name'), ('body', ['ClassDef', 'ClassDef', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['Expr', 'Expr', 'Expr', 'Expr']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign']), ('orelse', ['Assign', 'Print'])]", "If -> [('test', 'UnaryOp'), ('body', ['For', 'Expr']), ('orelse', ['For', 'Expr'])]", "If -> [('test', 'Call'), ('body', ['Print', 'Print', 'Expr']), ('orelse', [])]", "If -> [('test', 'Attribute'), ('body', ['Print', 'Assign', 'Continue']), ('orelse', [])]", "If -> [('test', 'Attribute'), ('body', ['Assign', 'Expr', 'If']), ('orelse', ['Print', 'Expr'])]", "If -> [('test', 'Attribute'), ('body', ['Assign']), ('orelse', ['Global', 'If', 'Assign'])]", "If -> [('test', 'UnaryOp'), ('body', ['Expr']), ('orelse', ['Assign', 'For', 'Expr'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'For', 'If', 'For', 'Assign']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['Expr', 'If']), ('orelse', ['Expr', 'If'])]", "If -> [('test', 'Name'), ('body', ['If', 'Assign', 'If']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['Assign', 'Assign', 'If', 'If', 'Assign', 'If', 'Assign', 'If', 'If', 'Assign', 'If', 'AugAssign', 'TryExcept', 'Assign', 'Expr', 'If', 'Return']), ('orelse', ['If', 'Return'])]", "If -> [('test', 'UnaryOp'), ('body', ['ImportFrom']), ('orelse', ['Assign'])]", "If -> [('test', 'BoolOp'), ('body', ['For', 'Delete', 'Delete', 'If', 'Assign', 'Expr']), ('orelse', ['AugAssign'])]", "If -> [('test', 'Name'), ('body', ['ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['Pass']), ('orelse', ['Assign'])]", "If -> [('test', 'Name'), ('body', ['Assign', 'For', 'Return']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'If', 'If', 'Return']), ('orelse', ['If', 'Assign'])]", "If -> [('test', 'Compare'), ('body', ['Expr', 'If']), ('orelse', ['Expr'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'For', 'AugAssign', 'Return']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['ImportFrom', 'Assign', 'Assign', 'For']), ('orelse', [])]", "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign', 'Assign']), ('orelse', ['Assign', 'Assign', 'Assign'])]", "If -> [('test', 'Attribute'), ('body', ['Assign', 'Assign', 'Assign']), ('orelse', ['Assign'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'TryExcept', 'If', 'Assign']), ('orelse', [])]", "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'If', 'If', 'Return']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['Expr', 'Expr', 'Return']), ('orelse', ['Return'])]", "If -> [('test', 'Attribute'), ('body', ['Delete']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'For']), ('orelse', ['Pass'])]", "If -> [('test', 'Attribute'), ('body', ['TryExcept']), ('orelse', [])]", "If -> [('test', 'UnaryOp'), ('body', ['Expr']), ('orelse', ['Assign', 'Expr'])]", "If -> [('test', 'Name'), ('body', ['TryExcept']), ('orelse', ['Return'])]", "If -> [('test', 'Attribute'), ('body', ['Assign', 'If', 'Return']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['TryExcept', 'Assign', 'Expr']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Expr', 'For']), ('orelse', ['If'])]", "If -> [('test', 'Compare'), ('body', ['Expr', 'If', 'Expr']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['Assign', 'If', 'Assign']), ('orelse', ['If'])]", "If -> [('test', 'Call'), ('body', ['Assign', 'If']), ('orelse', ['Assert'])]", "If -> [('test', 'Name'), ('body', ['Assign', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'Assign', 'Assign', 'Return']), ('orelse', ['Return'])]", "If -> [('test', 'BoolOp'), ('body', ['If', 'TryExcept']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['TryExcept', 'If']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['If', 'TryExcept', 'TryExcept', 'Expr', 'Expr']), ('orelse', [])]", "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Delete']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['Expr', 'Expr']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['Expr', 'Expr', 'If']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['Import', 'Assign', 'Assign']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['Assign', 'Expr', 'Expr']), ('orelse', ['Expr', 'For'])]", "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'Assign', 'If', 'Assign']), ('orelse', ['Assign', 'Assign'])]", "If -> [('test', 'Compare'), ('body', ['TryExcept', 'Return']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Expr']), ('orelse', ['Import', 'Assign', 'Assign', 'Assign', 'Assign'])]", "If -> [('test', 'UnaryOp'), ('body', ['ImportFrom', 'If', 'TryExcept', 'TryExcept']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Return']), ('orelse', ['Assign', 'If', 'Return'])]", "If -> [('test', 'Subscript'), ('body', ['Return']), ('orelse', ['Return'])]", "If -> [('test', 'Attribute'), ('body', ['Assign', 'Assign', 'Raise']), ('orelse', [])]", "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign', 'If', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Return']), ('orelse', ['Return'])]", "If -> [('test', 'Attribute'), ('body', ['Expr']), ('orelse', ['For'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign']), ('orelse', ['Print', 'Assign'])]", "If -> [('test', 'Compare'), ('body', ['Assign']), ('orelse', ['Assert', 'Assign'])]", "If -> [('test', 'Compare'), ('body', ['Pass']), ('orelse', ['Pass'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Import', 'Assign']), ('orelse', ['If'])]", "If -> [('test', 'BinOp'), ('body', ['Assign']), ('orelse', ['If'])]", "If -> [('test', 'Call'), ('body', ['Assign', 'Assign', 'Return']), ('orelse', ['Raise'])]", "If -> [('test', 'Name'), ('body', ['Assign', 'Assign', 'Assign']), ('orelse', ['Assign'])]", "If -> [('test', 'Name'), ('body', ['Import']), ('orelse', ['Import'])]", "If -> [('test', 'Compare'), ('body', ['Print', 'Return']), ('orelse', ['If'])]", "If -> [('test', 'Compare'), ('body', ['Print', 'Return']), ('orelse', ['Return'])]", "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign', 'Return']), ('orelse', ['If'])]", "If -> [('test', 'Call'), ('body', ['With', 'Assign', 'Assign', 'For', 'Return']), ('orelse', ['Print', 'Return'])]", "If -> [('test', 'Attribute'), ('body', ['Assign', 'If', 'Assign', 'Assign', 'Assign', 'If']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['Expr', 'Assign', 'Return']), ('orelse', ['Assign', 'Assign', 'Return'])]", "If -> [('test', 'UnaryOp'), ('body', ['Assign']), ('orelse', ['Pass'])]", "If -> [('test', 'BoolOp'), ('body', ['AugAssign', 'Assign']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Return']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'If']), ('orelse', ['Return'])]", "If -> [('test', 'Compare'), ('body', ['Expr', 'Expr', 'Raise']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['If', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['Assign', 'For', 'Assign']), ('orelse', ['Assign'])]", "If -> [('test', 'Attribute'), ('body', ['Assign', 'Assign', 'Assign']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['ImportFrom', 'TryExcept', 'Raise']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['Assign', 'Assign']), ('orelse', ['Return'])]", "If -> [('test', 'Compare'), ('body', ['Expr', 'AugAssign', 'Expr']), ('orelse', ['If'])]", "If -> [('test', 'Compare'), ('body', ['Expr', 'Assign', 'Assign', 'If', 'Assign', 'Expr']), ('orelse', ['If'])]", "If -> [('test', 'Compare'), ('body', ['AugAssign', 'Assign']), ('orelse', ['Assign'])]", "If -> [('test', 'Compare'), ('body', ['AugAssign', 'Assign']), ('orelse', ['Assign', 'Assign', 'If'])]", "If -> [('test', 'Compare'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Expr']), ('orelse', ['If'])]", "If -> [('test', 'UnaryOp'), ('body', ['FunctionDef', 'Assign']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['If', 'For']), ('orelse', ['Assign', 'Expr', 'Expr'])]", "If -> [('test', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'Expr']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['If', 'Assign', 'Assign', 'If', 'If']), ('orelse', ['If', 'If'])]", "If -> [('test', 'Attribute'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'If']), ('orelse', [])]", "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'Return']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Expr', 'Assign']), ('orelse', ['If'])]", "If -> [('test', 'Name'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'Expr']), ('orelse', ['Expr'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'If']), ('orelse', ['If'])]", "If -> [('test', 'Compare'), ('body', ['Expr', 'Assign']), ('orelse', ['Expr', 'Assign'])]", "If -> [('test', 'Call'), ('body', ['Assign', 'If', 'Assign', 'Assign', 'Assign', 'Expr']), ('orelse', [])]", "If -> [('test', 'UnaryOp'), ('body', ['Expr']), ('orelse', ['Assign', 'Expr', 'For'])]", "If -> [('test', 'Compare'), ('body', ['Expr']), ('orelse', ['Assign', 'If', 'Expr'])]", "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Expr']), ('orelse', ['Assign', 'Expr', 'For'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Expr', 'If']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['Assign', 'Assign', 'Expr']), ('orelse', ['For'])]", "If -> [('test', 'Call'), ('body', ['If', 'Assign', 'Assign', 'Expr', 'Expr', 'Return']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Expr', 'Expr', 'For']), ('orelse', ['Assign', 'If', 'If', 'For'])]", "If -> [('test', 'Call'), ('body', ['TryExcept', 'Assign', 'If']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['Assign', 'Assign', 'If']), ('orelse', ['Expr', 'Assign', 'Expr', 'Assign', 'For'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'For', 'Expr', 'For', 'Return']), ('orelse', ['If'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'If', 'If', 'If', 'Print', 'If', 'Assign', 'Assign', 'Assign', 'Expr']), ('orelse', ['If'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign']), ('orelse', ['Assign', 'If'])]", "If -> [('test', 'BoolOp'), ('body', ['Expr', 'Print', 'Print', 'Print']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('orelse', ['If'])]", "If -> [('test', 'Compare'), ('body', ['Expr']), ('orelse', ['For'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'If']), ('orelse', ['Pass'])]", "If -> [('test', 'Call'), ('body', ['Assign', 'If']), ('orelse', ['Pass', 'Expr'])]", "If -> [('test', 'Compare'), ('body', ['Expr']), ('orelse', ['TryExcept'])]", "If -> [('test', 'UnaryOp'), ('body', ['FunctionDef', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr']), ('orelse', [])]", "If -> [('test', 'UnaryOp'), ('body', ['Expr', 'Expr']), ('orelse', ['Expr'])]", "If -> [('test', 'Compare'), ('body', ['Expr', 'Raise']), ('orelse', ['Return'])]", "If -> [('test', 'Call'), ('body', ['Assign', 'Expr', 'TryExcept']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Expr', 'Raise']), ('orelse', ['Assign', 'Expr', 'Raise'])]", "If -> [('test', 'Call'), ('body', ['If', 'Return']), ('orelse', ['Raise'])]", "If -> [('test', 'UnaryOp'), ('body', ['Assign']), ('orelse', ['Assign', 'Assign'])]", "If -> [('test', 'BoolOp'), ('body', ['Assign']), ('orelse', ['If', 'ClassDef'])]", "If -> [('test', 'UnaryOp'), ('body', ['FunctionDef', 'FunctionDef']), ('orelse', [])]", "If -> [('test', 'UnaryOp'), ('body', ['FunctionDef']), ('orelse', [])]", "If -> [('test', 'UnaryOp'), ('body', ['FunctionDef', 'Assign', 'FunctionDef']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['If', 'TryExcept']), ('orelse', ['Assign'])]", "If -> [('test', 'Name'), ('body', ['Assign', 'AugAssign']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'AugAssign']), ('orelse', ['If'])]", "If -> [('test', 'Name'), ('body', ['Assign', 'Assign', 'TryExcept', 'If', 'Assign', 'Expr', 'Assign', 'AugAssign']), ('orelse', ['AugAssign'])]", "If -> [('test', 'Name'), ('body', ['Assert', 'Assign']), ('orelse', [])]", "If -> [('test', 'BoolOp'), ('body', ['Assert', 'Assign']), ('orelse', ['If', 'Assign'])]", "If -> [('test', 'Call'), ('body', ['Expr']), ('orelse', ['Expr', 'Expr'])]", "If -> [('test', 'Call'), ('body', ['Assign', 'Assign', 'Assign']), ('orelse', ['Assign', 'Assign', 'Assign'])]", "If -> [('test', 'Call'), ('body', ['Pass']), ('orelse', ['Assign', 'Expr'])]", "If -> [('test', 'Compare'), ('body', ['Continue']), ('orelse', ['If', 'If', 'If'])]", "If -> [('test', 'Name'), ('body', ['If', 'If']), ('orelse', ['If', 'If', 'Assign'])]", "If -> [('test', 'Compare'), ('body', ['Assign']), ('orelse', ['Break'])]", "If -> [('test', 'Name'), ('body', ['Print']), ('orelse', ['If'])]", "If -> [('test', 'Compare'), ('body', ['If', 'Expr', 'Expr', 'Expr', 'Return']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['Expr', 'Expr', 'Expr', 'Return']), ('orelse', ['Expr', 'Expr', 'Expr', 'Return'])]", "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Expr']), ('orelse', ['Assign'])]", "If -> [('test', 'Call'), ('body', ['Expr']), ('orelse', ['Raise'])]", "If -> [('test', 'Compare'), ('body', ['ImportFrom', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'If', 'If', 'If', 'For', 'Expr']), ('orelse', [])]", "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Expr', 'Assign']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['FunctionDef']), ('orelse', [])]", "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign', 'If']), ('orelse', ['If'])]", "If -> [('test', 'Call'), ('body', ['Assign', 'For', 'If', 'Return']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'AugAssign']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['Import', 'Assign', 'Expr']), ('orelse', [])]", "If -> [('test', 'UnaryOp'), ('body', ['Import', 'If']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['Assign', 'TryExcept', 'Assign', 'Expr', 'For']), ('orelse', [])]", "If -> [('test', 'Attribute'), ('body', ['Expr', 'Assign', 'Expr', 'For']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'If', 'Assign', 'Assign', 'Assign', 'For']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Import', 'ClassDef', 'Expr']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['If', 'Delete']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['Expr', 'AugAssign']), ('orelse', [])]", "If -> [('test', 'Attribute'), ('body', ['If', 'Assign', 'Assign', 'If']), ('orelse', ['Assign'])]", "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'Assign', 'If', 'For']), ('orelse', [])]", "If -> [('test', 'UnaryOp'), ('body', ['If', 'Assign', 'For', 'Return']), ('orelse', [])]", "If -> [('test', 'Attribute'), ('body', ['Assign', 'Assign', 'For']), ('orelse', [])]", "If -> [('test', 'BoolOp'), ('body', ['Assign', 'FunctionDef', 'Expr']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['If']), ('orelse', ['Assign'])]", "If -> [('test', 'UnaryOp'), ('body', ['Return']), ('orelse', ['Assign'])]", "If -> [('test', 'Name'), ('body', ['Assign']), ('orelse', ['Assign', 'If'])]", "If -> [('test', 'Compare'), ('body', ['If', 'Assign', 'Assign', 'If', 'If']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['Assign']), ('orelse', ['Assign', 'Assign', 'If', 'If'])]", "If -> [('test', 'Subscript'), ('body', ['Delete']), ('orelse', [])]", "If -> [('test', 'Attribute'), ('body', ['Assign', 'If']), ('orelse', ['Expr'])]", "If -> [('test', 'Attribute'), ('body', ['Assign', 'Assign', 'Expr']), ('orelse', ['Assign', 'Assign', 'Expr'])]", "If -> [('test', 'Attribute'), ('body', ['Expr', 'Assign', 'If']), ('orelse', ['Assign', 'Expr'])]", "If -> [('test', 'UnaryOp'), ('body', ['Expr', 'Return']), ('orelse', ['Expr'])]", "If -> [('test', 'Attribute'), ('body', ['Assign']), ('orelse', ['Expr', 'Assign'])]", "If -> [('test', 'Name'), ('body', ['TryExcept', 'If']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Expr']), ('orelse', [])]", "If -> [('test', 'BoolOp'), ('body', ['Assign', 'For', 'Assign']), ('orelse', [])]", "If -> [('test', 'UnaryOp'), ('body', ['Expr', 'For']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['If']), ('orelse', ['Expr'])]", "If -> [('test', 'Name'), ('body', ['If', 'Assign', 'Assign', 'For', 'Assign', 'Break']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['Assign', 'Assign', 'AugAssign']), ('orelse', ['If'])]", "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Raise']), ('orelse', [])]", "If -> [('test', 'BoolOp'), ('body', ['If', 'Assign', 'Assign', 'Assign', 'Assign', 'TryFinally', 'Assign', 'Assign', 'If', 'If', 'Expr']), ('orelse', ['If'])]", "If -> [('test', 'Name'), ('body', ['Expr', 'If', 'Raise']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'Assign', 'TryFinally']), ('orelse', [])]", "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign', 'If', 'If', 'Assign', 'Assign', 'If', 'If', 'If']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'TryFinally']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['If', 'If', 'Raise']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['If', 'If', 'Assign', 'TryFinally']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['Assign', 'If', 'If', 'Assign', 'Assign', 'TryFinally', 'Expr', 'If']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['Assign', 'TryFinally', 'Assign', 'If']), ('orelse', ['If'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'AugAssign', 'Assign', 'Assign', 'If', 'Assign', 'Expr']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Expr', 'Print']), ('orelse', ['If'])]", "If -> [('test', 'Compare'), ('body', ['Expr']), ('orelse', ['Print', 'Raise'])]", "If -> [('test', 'Name'), ('body', ['If', 'For', 'Expr']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assert', 'For']), ('orelse', ['If'])]", "If -> [('test', 'Compare'), ('body', ['Expr', 'If', 'For']), ('orelse', ['If'])]", "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'Expr', 'Expr', 'Assign']), ('orelse', ['Assign'])]", "If -> [('test', 'Compare'), ('body', ['Assert', 'Expr', 'For']), ('orelse', ['Raise'])]", "If -> [('test', 'Name'), ('body', ['Expr', 'Assign']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['Assign', 'Assign', 'Assign', 'FunctionDef', 'For', 'Expr']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Import', 'TryExcept', 'Expr', 'Assign', 'Print']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'For']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['Assign', 'Assign', 'Break']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['While', 'If']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['Assign', 'Assign', 'For', 'Assign', 'Assign', 'If', 'Assign', 'Assign']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['Assign', 'Assign', 'If', 'Assign']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'For', 'Assign']), ('orelse', [])]", "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Assert', 'Assign', 'Expr']), ('orelse', ['Expr'])]", "If -> [('test', 'BoolOp'), ('body', ['Assign', 'For', 'Assign', 'Assert', 'Assign', 'Expr', 'Assign', 'Assign', 'For', 'Expr', 'Expr']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['Expr', 'Assign', 'For', 'Expr', 'Expr', 'Expr', 'Assign']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['Assign', 'Expr', 'Expr', 'If']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'Expr', 'Expr', 'Expr', 'If']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Assign']), ('orelse', [])]", "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'For']), ('orelse', [])]", "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'AugAssign', 'Assign', 'For']), ('orelse', [])]", "If -> [('test', 'Attribute'), ('body', ['Assert']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['If']), ('orelse', ['Expr', 'If', 'Return'])]", "If -> [('test', 'Name'), ('body', ['Expr', 'Expr', 'If', 'Return']), ('orelse', ['AugAssign', 'Assign', 'Assign', 'If', 'TryExcept', 'Expr', 'If'])]", "If -> [('test', 'Call'), ('body', ['AugAssign', 'Expr', 'Expr']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Expr', 'If', 'Return']), ('orelse', [])]", "If -> [('test', 'Subscript'), ('body', ['If', 'Assign']), ('orelse', [])]", "If -> [('test', 'Subscript'), ('body', ['If']), ('orelse', [])]", "If -> [('test', 'Subscript'), ('body', ['Expr', 'Return']), ('orelse', [])]", "If -> [('test', 'Subscript'), ('body', ['Expr', 'Return']), ('orelse', ['If'])]", "If -> [('test', 'Compare'), ('body', ['Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Expr', 'TryExcept']), ('orelse', [])]", "If -> [('test', 'BoolOp'), ('body', ['If', 'Expr']), ('orelse', ['For'])]", "If -> [('test', 'Call'), ('body', ['Assign', 'Assign', 'Expr', 'FunctionDef', 'Assign', 'If', 'If', 'Assign', 'For']), ('orelse', ['If'])]", "If -> [('test', 'Call'), ('body', ['Import', 'Assign']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['Expr']), ('orelse', ['TryExcept', 'TryExcept'])]", "If -> [('test', 'Compare'), ('body', ['For', 'Expr']), ('orelse', ['If'])]", "If -> [('test', 'Call'), ('body', ['Import', 'Expr', 'Return']), ('orelse', ['Print', 'Expr'])]", "If -> [('test', 'Name'), ('body', ['Expr', 'Expr', 'Print', 'Print', 'Print', 'Print', 'Print', 'While']), ('orelse', ['Expr'])]", "If -> [('test', 'Name'), ('body', ['If', 'TryExcept']), ('orelse', ['Break'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Expr', 'Assign', 'Print']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['Print', 'Print', 'Raise']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Expr']), ('orelse', [])]", "If -> [('test', 'BinOp'), ('body', ['AugAssign', 'AugAssign']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Import', 'FunctionDef', 'For', 'Expr']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assert', 'Assign', 'Expr']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Expr', 'For', 'Assign', 'If']), ('orelse', ['Assign'])]", "If -> [('test', 'Call'), ('body', ['Expr', 'Expr']), ('orelse', ['Expr', 'Expr'])]", "If -> [('test', 'Name'), ('body', ['Expr']), ('orelse', ['For'])]", "If -> [('test', 'Compare'), ('body', ['Expr', 'If', 'Assign', 'Expr']), ('orelse', [])]", "If -> [('test', 'BoolOp'), ('body', ['Import', 'If', 'Expr']), ('orelse', [])]", "If -> [('test', 'Attribute'), ('body', ['Assign', 'Expr', 'Expr', 'For', 'Expr']), ('orelse', [])]", "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Expr']), ('orelse', ['Expr', 'Expr', 'Expr'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'For', 'Assign', 'Assign', 'TryExcept', 'Expr']), ('orelse', ['Expr'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'If', 'Assign', 'Assign', 'Assign']), ('orelse', ['Raise'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['If', 'If', 'Assign', 'If', 'If']), ('orelse', [])]", "If -> [('test', 'BoolOp'), ('body', ['If', 'If']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['ImportFrom']), ('orelse', ['Assign'])]", "If -> [('test', 'BoolOp'), ('body', ['If', 'ClassDef', 'ClassDef', 'ClassDef']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['Assign', 'Assign', 'While', 'Expr']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['If', 'If']), ('orelse', ['Assert', 'Continue'])]", "If -> [('test', 'Compare'), ('body', ['Print', 'Print', 'Print', 'Print', 'Print']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Print']), ('orelse', ['Return'])]", "If -> [('test', 'BoolOp'), ('body', ['If']), ('orelse', ['Assign', 'TryFinally'])]", "If -> [('test', 'Call'), ('body', ['If']), ('orelse', ['TryExcept', 'If', 'Assign', 'TryFinally', 'Expr'])]", "If -> [('test', 'BoolOp'), ('body', ['ImportFrom', 'Expr']), ('orelse', ['Expr', 'Raise'])]", "If -> [('test', 'Call'), ('body', ['Expr']), ('orelse', ['Assert'])]", "If -> [('test', 'Compare'), ('body', ['If', 'Break']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Expr', 'Assign', 'If', 'If', 'Expr']), ('orelse', ['If'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'Assign', 'If']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'If', 'For', 'If', 'If']), ('orelse', ['Assign', 'Assign', 'Assign', 'Assign'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'If', 'If', 'If', 'If', 'Assign', 'Assign', 'Assign']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['Expr', 'Expr', 'Expr']), ('orelse', ['Expr', 'Expr'])]", "If -> [('test', 'Name'), ('body', ['Expr', 'Expr']), ('orelse', ['Expr', 'Expr'])]", "If -> [('test', 'Name'), ('body', ['Assign', 'Expr', 'If']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'While']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['Assign', 'Assign', 'While', 'Expr', 'If']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['Assign', 'Expr', 'AugAssign', 'Expr', 'If']), ('orelse', ['Assign', 'If'])]", "If -> [('test', 'Name'), ('body', ['Assign', 'Expr', 'Assign', 'Expr']), ('orelse', ['If'])]", "If -> [('test', 'Compare'), ('body', ['Expr', 'AugAssign', 'If']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['Assign', 'Print', 'Assign', 'Assign', 'Assign']), ('orelse', ['Assign'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'If', 'If', 'If']), ('orelse', ['Raise'])]", "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'Assign']), ('orelse', ['For', 'If'])]", "If -> [('test', 'Call'), ('body', ['Assign']), ('orelse', ['Assign', 'Expr', 'Assign'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign']), ('orelse', ['Assign', 'Assign', 'For'])]", "If -> [('test', 'UnaryOp'), ('body', ['If', 'AugAssign']), ('orelse', [])]", "If -> [('test', 'BinOp'), ('body', ['Assign', 'Assign']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'If', 'Assign', 'Assign', 'If', 'Assign', 'If', 'Assign', 'If', 'If']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['Assign', 'If', 'If']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['For', 'For', 'Break']), ('orelse', [])]", "If -> [('test', 'BoolOp'), ('body', ['Assign', 'TryExcept']), ('orelse', [])]", "If -> [('test', 'Attribute'), ('body', ['Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Expr', 'Expr']), ('orelse', ['Assign', 'Assign', 'Assign', 'Expr', 'Expr'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Expr', 'If', 'Assign', 'Expr']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Expr', 'Assign', 'Assign', 'Expr']), ('orelse', ['Assign', 'Expr', 'Expr'])]", "If -> [('test', 'Compare'), ('body', ['Expr', 'Assign', 'Assign']), ('orelse', ['Assign', 'Assign', 'Assign'])]", "If -> [('test', 'Compare'), ('body', ['If', 'If']), ('orelse', ['If', 'If'])]", "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['Expr', 'Expr', 'For', 'For', 'For', 'For', 'Expr']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['If', 'Expr', 'Expr']), ('orelse', [])]", "If -> [('test', 'Attribute'), ('body', ['If', 'Assign', 'Expr']), ('orelse', [])]", "If -> [('test', 'Attribute'), ('body', ['If', 'Assign', 'Assign']), ('orelse', [])]", "If -> [('test', 'Attribute'), ('body', ['Assign', 'Assign', 'Expr', 'Expr']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['Return']), ('orelse', ['Assign', 'If', 'Return'])]", "If -> [('test', 'BoolOp'), ('body', ['For', 'Delete', 'Delete', 'Delete', 'If', 'Assign', 'Expr']), ('orelse', ['AugAssign'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Return']), ('orelse', ['Assign'])]", "If -> [('test', 'Attribute'), ('body', ['Assign', 'For', 'Assign']), ('orelse', [])]", "If -> [('test', 'Attribute'), ('body', ['Expr', 'If', 'Expr']), ('orelse', [])]", "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign', 'Delete', 'Delete']), ('orelse', [])]", "If -> [('test', 'BoolOp'), ('body', ['Assign', 'For', 'Return']), ('orelse', ['Raise'])]", "If -> [('test', 'Compare'), ('body', ['If', 'AugAssign']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['TryExcept', 'TryExcept', 'ImportFrom']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['Assign', 'Expr']), ('orelse', ['For'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Expr', 'Return']), ('orelse', ['Assign', 'If'])]", "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'If', 'Import']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Return']), ('orelse', ['Assign', 'Assign', 'Expr', 'Assign', 'Return'])]", "If -> [('test', 'Compare'), ('body', ['Return']), ('orelse', ['Assign', 'If', 'Assign', 'For', 'Return'])]", "If -> [('test', 'Call'), ('body', ['Expr', 'Return']), ('orelse', ['Return'])]", "If -> [('test', 'Call'), ('body', ['Assign']), ('orelse', ['Return'])]", "If -> [('test', 'Compare'), ('body', ['If']), ('orelse', ['Assign', 'If'])]", "If -> [('test', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Return']), ('orelse', ['Assign', 'If', 'If', 'Assign', 'Return'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Return']), ('orelse', ['Assign', 'Return'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'Return']), ('orelse', ['If'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'If', 'Assign', 'Assign', 'Return']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'If']), ('orelse', ['Assign', 'Return'])]", "If -> [('test', 'Compare'), ('body', ['Expr', 'Assign', 'If', 'Expr']), ('orelse', ['Assign', 'Assign', 'Assign', 'Return'])]", "If -> [('test', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'If']), ('orelse', ['Return'])]", "If -> [('test', 'Compare'), ('body', ['Expr', 'Return']), ('orelse', ['Assign', 'Return'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'If', 'Expr', 'Expr']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'TryExcept', 'Expr', 'Expr']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'If', 'TryExcept']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['Assign', 'Assign']), ('orelse', ['Return'])]", "If -> [('test', 'Name'), ('body', ['Assign', 'Expr', 'Assign', 'Return']), ('orelse', ['Return'])]", "If -> [('test', 'Compare'), ('body', ['TryExcept', 'Assign', 'Assign']), ('orelse', ['If'])]", "If -> [('test', 'Name'), ('body', ['Assign', 'If', 'Assign', 'Return']), ('orelse', ['TryExcept', 'Assign', 'Assign', 'If', 'If', 'TryExcept'])]", "If -> [('test', 'Call'), ('body', ['Assign', 'Assign', 'TryExcept', 'If', 'Expr', 'Assign']), ('orelse', ['Assign'])]", "If -> [('test', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'Assign']), ('orelse', ['Return'])]", "If -> [('test', 'Name'), ('body', ['Assign', 'If', 'Assign', 'Return']), ('orelse', ['Return'])]", "If -> [('test', 'Name'), ('body', ['Expr', 'Expr']), ('orelse', ['Assign', 'Return'])]", "If -> [('test', 'BoolOp'), ('body', ['If', 'Return']), ('orelse', ['Return'])]", "If -> [('test', 'Compare'), ('body', ['Expr', 'For', 'Expr']), ('orelse', ['Raise'])]", "If -> [('test', 'Compare'), ('body', ['If', 'Expr', 'If']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Expr']), ('orelse', ['Pass'])]", "If -> [('test', 'Compare'), ('body', ['If']), ('orelse', ['If', 'Expr'])]", "If -> [('test', 'Compare'), ('body', ['If', 'Expr', 'AugAssign', 'Assign', 'If', 'If']), ('orelse', ['If'])]", "If -> [('test', 'BoolOp'), ('body', ['If', 'AugAssign']), ('orelse', ['Assign'])]", "If -> [('test', 'Name'), ('body', ['If', 'AugAssign']), ('orelse', ['Assign'])]", "If -> [('test', 'Subscript'), ('body', ['If']), ('orelse', ['Expr'])]", "If -> [('test', 'Subscript'), ('body', ['Expr']), ('orelse', ['If'])]", "If -> [('test', 'Subscript'), ('body', ['Expr']), ('orelse', ['Expr'])]", "If -> [('test', 'BoolOp'), ('body', ['Expr', 'Break']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['ImportFrom', 'If']), ('orelse', [])]", "If -> [('test', 'UnaryOp'), ('body', ['ImportFrom', 'TryExcept', 'TryExcept']), ('orelse', ['If'])]", "If -> [('test', 'BoolOp'), ('body', ['For', 'Assign']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'Expr']), ('orelse', ['If'])]", "If -> [('test', 'Compare'), ('body', ['Expr']), ('orelse', ['Assign', 'Assign', 'Assign', 'Expr', 'If'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Delete', 'Return']), ('orelse', ['If'])]", "If -> [('test', 'UnaryOp'), ('body', ['If', 'Expr', 'Return']), ('orelse', ['Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'If', 'If', 'Return'])]", "If -> [('test', 'Call'), ('body', ['Expr', 'Assign', 'Expr', 'If', 'If', 'Return']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['TryExcept', 'Return']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Return']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['Assign', 'If', 'Assign', 'If', 'If', 'Expr', 'Return']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Return']), ('orelse', ['Pass'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Return']), ('orelse', ['Pass'])]", "If -> [('test', 'Compare'), ('body', ['Assert', 'Assign']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['Expr']), ('orelse', ['Assert', 'Expr'])]", "If -> [('test', 'Compare'), ('body', ['Assign']), ('orelse', ['Assign', 'For'])]", "If -> [('test', 'Compare'), ('body', ['AugAssign']), ('orelse', ['Delete', 'Assign'])]", "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign', 'If']), ('orelse', ['Assign', 'If'])]", "If -> [('test', 'Name'), ('body', ['Expr']), ('orelse', ['If', 'Print'])]", "If -> [('test', 'Call'), ('body', ['Expr']), ('orelse', ['If', 'If'])]", "If -> [('test', 'Call'), ('body', ['Assign', 'FunctionDef']), ('orelse', ['FunctionDef'])]", "If -> [('test', 'Call'), ('body', ['Assign', 'Break']), ('orelse', ['If'])]", "If -> [('test', 'Call'), ('body', ['Expr']), ('orelse', ['Print'])]", "If -> [('test', 'UnaryOp'), ('body', ['If', 'Assign']), ('orelse', ['Assign', 'Assign', 'FunctionDef', 'FunctionDef', 'If', 'Assign'])]", "If -> [('test', 'UnaryOp'), ('body', ['If', 'Assign']), ('orelse', ['Assign'])]", "If -> [('test', 'Call'), ('body', ['Assign', 'Expr', 'Assign', 'Expr', 'For', 'For']), ('orelse', ['For'])]", "If -> [('test', 'Call'), ('body', ['If', 'Expr']), ('orelse', ['Assert', 'Expr'])]", "If -> [('test', 'Compare'), ('body', ['For', 'Return']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign']), ('orelse', ['For', 'Return'])]", "If -> [('test', 'Compare'), ('body', ['If', 'Expr', 'Return']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['Assign', 'Expr', 'For']), ('orelse', ['Expr'])]", "If -> [('test', 'Call'), ('body', ['Expr', 'AugAssign']), ('orelse', ['Expr'])]", "If -> [('test', 'Call'), ('body', ['Expr']), ('orelse', ['If', 'Expr'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Delete', 'If', 'For']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['Assign', 'If', 'For', 'Continue']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Expr', 'Expr', 'Break']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['If', 'Expr', 'Expr', 'Expr']), ('orelse', ['Expr', 'Expr'])]", "If -> [('test', 'Call'), ('body', ['Assign', 'Expr']), ('orelse', ['ImportFrom', 'Assert', 'Expr', 'Expr'])]", "If -> [('test', 'Call'), ('body', ['Assign', 'Assign', 'Expr', 'If']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'For', 'Assign']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'TryExcept', 'If', 'For', 'If']), ('orelse', [])]", "If -> [('test', 'BoolOp'), ('body', ['Return']), ('orelse', ['FunctionDef', 'Expr'])]", "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'Expr', 'Assign', 'Expr', 'Expr']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['TryExcept', 'TryExcept']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Import', 'Assign', 'If', 'Assign', 'Assign']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['ImportFrom', 'Raise']), ('orelse', [])]", "If -> [('test', 'UnaryOp'), ('body', ['Import', 'Assign']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['Assign', 'Assert', 'Assign', 'Assign', 'TryFinally']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'If', 'Assign', 'If']), ('orelse', ['Assign'])]", "If -> [('test', 'Call'), ('body', ['FunctionDef', 'Assign']), ('orelse', ['Assign'])]", "If -> [('test', 'Name'), ('body', ['Print', 'If']), ('orelse', [])]", "If -> [('test', 'BoolOp'), ('body', ['Pass']), ('orelse', ['Assign', 'Expr', 'Assign'])]", "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign', 'Assign', 'Return']), ('orelse', ['Return'])]", "If -> [('test', 'Name'), ('body', ['If']), ('orelse', ['Assign', 'Assign'])]", "If -> [('test', 'Name'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'If']), ('orelse', [])]", "If -> [('test', 'BoolOp'), ('body', ['Assign', 'For', 'Assign', 'Expr']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['Assign', 'If', 'Assign', 'Assign', 'Assign']), ('orelse', ['Assign', 'If', 'Assign', 'Assign', 'Assign'])]", "If -> [('test', 'UnaryOp'), ('body', ['AugAssign', 'Print']), ('orelse', ['Assign', 'Assign', 'Expr', 'Print'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Continue']), ('orelse', ['If'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Expr', 'If', 'If', 'If', 'Assign']), ('orelse', [])]", "If -> [('test', 'BoolOp'), ('body', ['ImportFrom', 'Expr']), ('orelse', [])]", "If -> [('test', 'Attribute'), ('body', ['Import', 'FunctionDef', 'Assign']), ('orelse', [])]", "If -> [('test', 'BoolOp'), ('body', ['Print', 'Expr']), ('orelse', ['If'])]", "If -> [('test', 'Attribute'), ('body', ['Print', 'Expr']), ('orelse', ['If'])]", "If -> [('test', 'Attribute'), ('body', ['Print', 'Assign', 'Expr']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['Assign', 'TryExcept', 'Expr', 'Expr']), ('orelse', ['Print'])]", "If -> [('test', 'Attribute'), ('body', ['Return']), ('orelse', ['Expr', 'Expr', 'If', 'Assign', 'Return'])]", "If -> [('test', 'BoolOp'), ('body', ['Assign']), ('orelse', ['Print', 'Return'])]", "If -> [('test', 'Compare'), ('body', ['Import', 'Assign', 'Assign', 'Assign', 'Expr']), ('orelse', [])]", "If -> [('test', 'Attribute'), ('body', ['ImportFrom', 'Assign']), ('orelse', ['Assign'])]", "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign', 'While', 'Assign']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['If', 'TryExcept', 'Expr', 'TryExcept', 'TryExcept', 'Expr', 'Expr']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'AugAssign', 'While', 'If']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'AugAssign', 'While', 'If', 'AugAssign', 'Assign', 'Assign', 'While', 'Expr', 'Assign', 'Return']), ('orelse', ['Assign', 'Assign', 'Assign', 'While', 'Expr', 'Assign', 'Return'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'If']), ('orelse', ['Assign', 'Assign', 'Assign', 'If', 'Assign', 'Expr', 'Expr'])]", "If -> [('test', 'Name'), ('body', ['TryExcept']), ('orelse', ['If'])]", "If -> [('test', 'Compare'), ('body', ['Raise']), ('orelse', ['Assign'])]", "If -> [('test', 'Attribute'), ('body', ['Global', 'If', 'If', 'Return']), ('orelse', ['Assign'])]", "If -> [('test', 'BoolOp'), ('body', ['If', 'Raise']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['Return']), ('orelse', ['FunctionDef', 'Return'])]", "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Return']), ('orelse', ['Raise'])]", "If -> [('test', 'UnaryOp'), ('body', ['ImportFrom', 'If', 'Assign']), ('orelse', [])]", "If -> [('test', 'UnaryOp'), ('body', ['Return']), ('orelse', ['Raise'])]", "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'For', 'Assign']), ('orelse', [])]", "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'Assign', 'For', 'If']), ('orelse', [])]", "If -> [('test', 'Attribute'), ('body', ['Assign', 'Assign', 'If', 'Return']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('orelse', ['If'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('orelse', ['If'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('orelse', ['If'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('orelse', ['Assign', 'Assign', 'Assign'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'Assign']), ('orelse', ['Print', 'Return'])]", "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Print', 'Assign']), ('orelse', ['If'])]", "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'If']), ('orelse', ['If'])]", "If -> [('test', 'BinOp'), ('body', ['Assign', 'Assign', 'Assign']), ('orelse', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign'])]", "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('orelse', ['If'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('orelse', ['Print', 'Return'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'If', 'Assign', 'Return']), ('orelse', ['If'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Return']), ('orelse', ['Raise'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'Return']), ('orelse', ['Raise'])]", "If -> [('test', 'Name'), ('body', ['Assign', 'Assign']), ('orelse', ['Assign', 'Assign', 'Assign', 'Assign'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Return']), ('orelse', ['If'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Return']), ('orelse', ['Raise'])]", "If -> [('test', 'BinOp'), ('body', ['AugAssign']), ('orelse', [])]", "If -> [('test', 'BinOp'), ('body', ['Assign', 'AugAssign']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Expr']), ('orelse', ['If', 'Expr', 'If'])]", "If -> [('test', 'Call'), ('body', ['Assign', 'Expr']), ('orelse', ['Expr'])]", "If -> [('test', 'BinOp'), ('body', ['Expr', 'Expr']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['Expr', 'Expr']), ('orelse', ['TryExcept'])]", "If -> [('test', 'Name'), ('body', ['Expr']), ('orelse', ['TryExcept'])]", "If -> [('test', 'Call'), ('body', ['Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign']), ('orelse', ['Expr', 'Expr', 'Assign', 'Assign', 'Assign'])]", "If -> [('test', 'Attribute'), ('body', ['Expr', 'Expr', 'Expr', 'Expr', 'For', 'Expr']), ('orelse', [])]", "If -> [('test', 'Attribute'), ('body', ['Assign', 'Assign', 'Expr', 'Expr', 'For']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['Expr', 'Expr', 'Expr']), ('orelse', ['If'])]", "If -> [('test', 'Call'), ('body', ['Assign', 'Expr', 'Expr', 'Expr', 'Expr']), ('orelse', ['Expr'])]", "If -> [('test', 'Attribute'), ('body', ['Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['Assign']), ('orelse', ['Assign', 'For', 'If'])]", "If -> [('test', 'UnaryOp'), ('body', ['If', 'Expr', 'Return']), ('orelse', [])]", "If -> [('test', 'Subscript'), ('body', ['Expr']), ('orelse', ['Expr', 'Expr'])]", "If -> [('test', 'Subscript'), ('body', ['Expr']), ('orelse', ['Expr', 'Assign', 'TryExcept', 'Expr'])]", "If -> [('test', 'Subscript'), ('body', ['Expr']), ('orelse', ['Expr', 'If'])]", "If -> [('test', 'Attribute'), ('body', ['Assign', 'TryExcept', 'Expr']), ('orelse', ['Assign', 'Expr'])]", "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Assign']), ('orelse', [])]", "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr']), ('orelse', [])]", "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'Assign', 'Expr', 'Assign', 'Expr']), ('orelse', [])]", "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'If', 'Assign', 'Assign']), ('orelse', [])]", "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Expr', 'Return']), ('orelse', [])]", "If -> [('test', 'UnaryOp'), ('body', ['ImportFrom', 'Raise']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['Assert']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'If', 'TryExcept']), ('orelse', ['Assign', 'Assign', 'If', 'TryExcept'])]", "If -> [('test', 'Compare'), ('body', ['Return', 'For']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['TryExcept', 'Expr']), ('orelse', [])]", "If -> [('test', 'Attribute'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'For']), ('orelse', [])]", "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'Expr']), ('orelse', [])]", "If -> [('test', 'Attribute'), ('body', ['Assign', 'For']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'AugAssign', 'Assign', 'Return']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['Assign', 'For', 'Assign', 'For', 'If', 'Return']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['AugAssign', 'Assign', 'If', 'For']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'If', 'ImportFrom', 'If', 'If', 'If']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['TryExcept']), ('orelse', ['Assign', 'Assign'])]", "If -> [('test', 'Call'), ('body', ['Return']), ('orelse', ['Assign', 'Assign', 'Return'])]", "If -> [('test', 'Subscript'), ('body', ['Expr', 'Assign']), ('orelse', [])]", "If -> [('test', 'Subscript'), ('body', ['Expr', 'Assign', 'Assign', 'Assign']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['Assign']), ('orelse', ['Assign', 'Expr'])]", "If -> [('test', 'Subscript'), ('body', ['Assign', 'If']), ('orelse', [])]", "If -> [('test', 'UnaryOp'), ('body', ['Assign']), ('orelse', ['Assign', 'Expr'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'If']), ('orelse', ['Assign', 'Expr'])]", "If -> [('test', 'Subscript'), ('body', ['ImportFrom', 'ImportFrom', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'TryExcept']), ('orelse', [])]", "If -> [('test', 'Attribute'), ('body', ['Assign', 'If', 'TryExcept', 'If']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['Assign', 'Return']), ('orelse', ['If'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'If', 'If', 'If', 'If', 'If', 'If']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['Expr', 'Expr', 'Return']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Return']), ('orelse', [])]", "If -> [('test', 'BoolOp'), ('body', ['Assign', 'If', 'If', 'Return']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['Assign', 'Assign', 'For', 'If', 'Return']), ('orelse', [])]", "If -> [('test', 'UnaryOp'), ('body', ['Assign']), ('orelse', ['If', 'If', 'If'])]", "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign', 'Expr', 'Assign']), ('orelse', ['Assign'])]", "If -> [('test', 'Compare'), ('body', ['If', 'Assign', 'Assign', 'Expr']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['Assign', 'For', 'If', 'If']), ('orelse', ['Assign', 'Assign', 'Assign'])]", "If -> [('test', 'Call'), ('body', ['Assign', 'Assign']), ('orelse', ['Assign', 'Assign', 'If'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Expr', 'For', 'Assign', 'Assign', 'Assign', 'Assign']), ('orelse', ['Assign', 'Assign'])]", "If -> [('test', 'Name'), ('body', ['Assign', 'Assign', 'Expr', 'For', 'Assign', 'If', 'Assign', 'Assign']), ('orelse', ['Assign', 'Assign', 'Assign'])]", "If -> [('test', 'Compare'), ('body', ['For', 'Expr', 'Return']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Expr', 'Assign', 'Return']), ('orelse', ['Assign'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Expr', 'Expr']), ('orelse', ['Expr'])]", "If -> [('test', 'Attribute'), ('body', ['Assign', 'Assign', 'Assign', 'Assign']), ('orelse', ['Assign'])]", "If -> [('test', 'Name'), ('body', ['Expr']), ('orelse', ['Assign', 'Expr', 'Assign', 'Expr'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Expr', 'Return']), ('orelse', ['Assign', 'Expr', 'Return'])]", "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign', 'Expr', 'Expr']), ('orelse', ['If'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Expr', 'Expr']), ('orelse', ['If', 'If', 'Assign', 'Expr', 'If', 'Expr'])]", "If -> [('test', 'Call'), ('body', ['Assign', 'If']), ('orelse', ['Expr', 'Expr'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Expr']), ('orelse', ['Assign', 'Expr'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign', 'Return']), ('orelse', ['Return'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Expr', 'Expr']), ('orelse', ['If', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'Assign', 'Expr'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Assign']), ('orelse', ['Assign'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Expr', 'Assign']), ('orelse', ['Assign'])]", "If -> [('test', 'Name'), ('body', ['Assign', 'For', 'If']), ('orelse', [])]", "If -> [('test', 'BoolOp'), ('body', ['Assign', 'For', 'Expr']), ('orelse', [])]", "If -> [('test', 'UnaryOp'), ('body', ['Expr', 'Expr', 'If']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['Assign', 'For', 'If', 'If', 'While', 'Expr']), ('orelse', [])]", "If -> [('test', 'Attribute'), ('body', ['Raise']), ('orelse', ['Continue'])]", "If -> [('test', 'UnaryOp'), ('body', ['While', 'If', 'Assign']), ('orelse', ['For', 'Expr'])]", "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'Assign', 'Expr']), ('orelse', ['Assign'])]", "If -> [('test', 'Name'), ('body', ['Assign', 'Assign', 'Return']), ('orelse', [])]", "If -> [('test', 'Attribute'), ('body', ['Assign', 'Assign', 'FunctionDef', 'Expr']), ('orelse', [])]", "If -> [('test', 'UnaryOp'), ('body', ['For']), ('orelse', ['For'])]", "If -> [('test', 'Call'), ('body', ['TryExcept']), ('orelse', ['TryExcept'])]", "If -> [('test', 'Attribute'), ('body', ['ImportFrom', 'Assign', 'For']), ('orelse', ['Assign'])]", "If -> [('test', 'BoolOp'), ('body', ['If', 'For', 'If']), ('orelse', [])]", "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'If', 'Expr']), ('orelse', [])]", "If -> [('test', 'BoolOp'), ('body', ['If', 'If', 'Assign', 'Assign', 'If', 'If']), ('orelse', [])]", "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['If', 'Expr']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Return']), ('orelse', ['Assign', 'Assign', 'Return'])]", "If -> [('test', 'UnaryOp'), ('body', ['Assert']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assert', 'Assert']), ('orelse', ['If'])]", "If -> [('test', 'Compare'), ('body', ['Assert', 'Assert']), ('orelse', ['Assert', 'Assert'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Expr']), ('orelse', ['Assign', 'Expr', 'Expr'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'If', 'Assign', 'If', 'Assign', 'Assign']), ('orelse', ['Assign', 'If', 'Assign', 'If', 'Assign', 'Assign'])]", "If -> [('test', 'Compare'), ('body', ['If', 'Assign', 'For']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['Assign', 'Expr', 'Assign']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['TryExcept', 'Raise']), ('orelse', [])]", "If -> [('test', 'Attribute'), ('body', ['ImportFrom', 'Assign']), ('orelse', ['TryExcept'])]", "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'Assign']), ('orelse', ['If', 'Assign', 'Assign', 'Assign'])]", "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Expr', 'Expr', 'Expr']), ('orelse', ['Raise'])]", "If -> [('test', 'BoolOp'), ('body', ['AugAssign']), ('orelse', ['Expr'])]", "If -> [('test', 'BoolOp'), ('body', ['Return']), ('orelse', ['Assign', 'For', 'Return'])]", "If -> [('test', 'Compare'), ('body', ['Continue']), ('orelse', ['Assign', 'If'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Print', 'Expr']), ('orelse', [])]", "If -> [('test', 'Attribute'), ('body', ['Assign', 'For', 'For', 'Assign', 'If', 'Assign', 'If', 'If']), ('orelse', ['Assign'])]", "If -> [('test', 'Attribute'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'Expr']), ('orelse', ['Assign', 'Expr'])]", "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'Assign']), ('orelse', ['If', 'Assign', 'For', 'Assign'])]", "If -> [('test', 'Compare'), ('body', ['Expr', 'For']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['Expr', 'Expr', 'Assign']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['ImportFrom', 'Assign', 'Expr', 'Expr', 'Assign']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Expr', 'Expr', 'Assign']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['If']), ('orelse', ['If', 'Assign'])]", "If -> [('test', 'Attribute'), ('body', ['If', 'For', 'Assign']), ('orelse', [])]", "If -> [('test', 'UnaryOp'), ('body', ['Expr', 'Print', 'Expr']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Expr', 'Print', 'Expr']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['Print', 'If', 'If']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Print']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['If', 'Assign', 'Expr', 'Assign', 'TryFinally']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['Assign', 'If', 'Assign', 'If']), ('orelse', ['Assign', 'Assign'])]", "If -> [('test', 'Name'), ('body', ['If', 'Expr', 'Return']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['Assign', 'TryExcept']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['Assign', 'For', 'Expr']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'If', 'Assign', 'Return']), ('orelse', ['If'])]", "If -> [('test', 'Name'), ('body', ['Assign', 'Assign', 'Assign', 'For']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'If', 'Print', 'Assign', 'Assign', 'Assign', 'Assign']), ('orelse', ['If'])]", "If -> [('test', 'BoolOp'), ('body', ['Print', 'Assign']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Print', 'Expr']), ('orelse', ['Print', 'Expr'])]", "If -> [('test', 'Name'), ('body', ['Assign']), ('orelse', ['If', 'Expr'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('orelse', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign'])]", "If -> [('test', 'Attribute'), ('body', ['Assign', 'Assign', 'If']), ('orelse', ['If', 'Expr'])]", "If -> [('test', 'Compare'), ('body', ['If', 'Expr', 'If']), ('orelse', ['Expr'])]", "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'Expr', 'Assign']), ('orelse', [])]", "If -> [('test', 'Attribute'), ('body', ['Import', 'Expr']), ('orelse', ['Expr'])]", "If -> [('test', 'Attribute'), ('body', ['Import', 'Assign']), ('orelse', ['Assign'])]", "If -> [('test', 'Name'), ('body', ['Assert']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['If', 'Assign', 'For', 'Assign']), ('orelse', ['If'])]", "If -> [('test', 'Name'), ('body', ['Print', 'Print', 'Print', 'Print', 'Print', 'Print']), ('orelse', [])]", "If -> [('test', 'Subscript'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['If', 'If', 'If', 'If', 'If']), ('orelse', [])]", "If -> [('test', 'BinOp'), ('body', ['Expr', 'Assign', 'Assign', 'Assign']), ('orelse', [])]", "If -> [('test', 'BinOp'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('orelse', [])]", "If -> [('test', 'Subscript'), ('body', ['Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('orelse', [])]", "If -> [('test', 'BinOp'), ('body', ['Expr', 'Expr', 'Expr']), ('orelse', [])]", "If -> [('test', 'BinOp'), ('body', ['Expr', 'Assign', 'Expr', 'Expr']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['Assign', 'Assign', 'If', 'If', 'Assign']), ('orelse', ['If', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'Assign'])]", "If -> [('test', 'Name'), ('body', ['Assign', 'If', 'Assign', 'If', 'Expr']), ('orelse', [])]", "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('orelse', ['Assign'])]", "If -> [('test', 'Name'), ('body', ['Assign', 'Assign']), ('orelse', ['Assign', 'Expr', 'Assign', 'Assign', 'Expr'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Expr', 'Assign', 'Assign']), ('orelse', ['If'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Expr', 'Assign', 'Assign']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Expr', 'Assign', 'Assign']), ('orelse', ['Assign', 'Assign', 'Assign', 'If', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign'])]", "If -> [('test', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'Assign', 'Expr', 'Return']), ('orelse', [])]", "If -> [('test', 'BoolOp'), ('body', ['If', 'Assign', 'Assign']), ('orelse', ['Assign', 'Assign'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('orelse', [])]", "If -> [('test', 'UnaryOp'), ('body', ['Assign']), ('orelse', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign'])]", "If -> [('test', 'Call'), ('body', ['Assign', 'Expr', 'Assign', 'If']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['Assign']), ('orelse', ['Import', 'Assign'])]", "If -> [('test', 'Compare'), ('body', ['Expr', 'Expr', 'If']), ('orelse', ['Raise'])]", "If -> [('test', 'Subscript'), ('body', ['Assign', 'Print', 'Expr']), ('orelse', [])]", "If -> [('test', 'Subscript'), ('body', ['Assign', 'Assign', 'If']), ('orelse', [])]", "If -> [('test', 'BoolOp'), ('body', ['Expr', 'Print']), ('orelse', ['Print'])]", "If -> [('test', 'Subscript'), ('body', ['Expr', 'Print', 'Expr', 'Print', 'Print', 'Print', 'Expr', 'Print', 'Print', 'Print', 'Expr', 'Print', 'Print', 'Print', 'Print', 'Expr']), ('orelse', [])]", "If -> [('test', 'Subscript'), ('body', ['Assign', 'Assign', 'Print', 'Print']), ('orelse', [])]", "If -> [('test', 'Subscript'), ('body', ['Print', 'Expr']), ('orelse', [])]", "If -> [('test', 'Subscript'), ('body', ['Assign', 'If', 'Expr']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['Assign', 'If', 'If', 'If', 'If', 'If', 'If', 'If']), ('orelse', [])]", "If -> [('test', 'UnaryOp'), ('body', ['Expr', 'Expr', 'AugAssign']), ('orelse', ['Expr', 'Expr', 'AugAssign'])]", "If -> [('test', 'BoolOp'), ('body', ['While', 'Expr']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['Assign', 'If', 'Expr', 'Assign', 'If', 'Expr']), ('orelse', ['Assign', 'Expr', 'For'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'For', 'Return']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'If', 'Assign', 'For']), ('orelse', ['If'])]", "If -> [('test', 'Call'), ('body', ['Expr', 'For']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Expr', 'Expr', 'Expr', 'Expr']), ('orelse', ['If'])]", "If -> [('test', 'Compare'), ('body', ['Expr', 'For', 'Return']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'If', 'Assign', 'For']), ('orelse', ['Expr', 'For'])]", "If -> [('test', 'Name'), ('body', ['Assign', 'If', 'Expr']), ('orelse', ['Assign', 'Expr', 'For'])]", "If -> [('test', 'Compare'), ('body', ['Expr', 'Expr', 'Return']), ('orelse', ['If'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'If', 'Expr', 'For', 'Return']), ('orelse', ['If'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'If', 'Expr', 'For', 'Return']), ('orelse', ['If'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'If', 'Expr', 'For', 'Return']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['Assign', 'For', 'Assign', 'Expr', 'Expr']), ('orelse', ['If'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Expr', 'AugAssign']), ('orelse', [])]", "If -> [('test', 'BinOp'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['If', 'If', 'Expr']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['ImportFrom', 'Expr', 'ImportFrom', 'Expr', 'Expr']), ('orelse', ['Expr'])]", "If -> [('test', 'Name'), ('body', ['Print', 'Assign']), ('orelse', ['Assign'])]", "If -> [('test', 'Subscript'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'Assign']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['Assign']), ('orelse', ['Assign', 'Expr'])]", "If -> [('test', 'Compare'), ('body', ['Expr', 'Expr', 'Assert']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['ClassDef']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['ClassDef', 'FunctionDef']), ('orelse', ['Assign'])]", "If -> [('test', 'Call'), ('body', ['FunctionDef', 'Return']), ('orelse', ['Return'])]", "If -> [('test', 'Compare'), ('body', ['Return', 'Pass']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['While', 'Return']), ('orelse', ['If'])]", "If -> [('test', 'Compare'), ('body', ['Print', 'Expr', 'Assign']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'Break']), ('orelse', ['While', 'Continue'])]", "If -> [('test', 'Compare'), ('body', ['Assign']), ('orelse', ['Assign', 'TryExcept', 'Assign', 'Assign'])]", "If -> [('test', 'Compare'), ('body', ['Print', 'Assert']), ('orelse', ['Print', 'Assert', 'Assert'])]", "If -> [('test', 'Name'), ('body', ['Assign', 'Assign', 'For', 'Return']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign']), ('orelse', ['Assign'])]", "If -> [('test', 'Attribute'), ('body', ['Assign', 'For']), ('orelse', ['If'])]", "If -> [('test', 'Attribute'), ('body', ['Print', 'For', 'Print', 'Print', 'For']), ('orelse', ['If'])]", "If -> [('test', 'Attribute'), ('body', ['Assign', 'If', 'Print']), ('orelse', ['If'])]", "If -> [('test', 'Attribute'), ('body', ['If', 'Print']), ('orelse', ['If'])]", "If -> [('test', 'Attribute'), ('body', ['For']), ('orelse', ['If', 'If', 'If'])]", "If -> [('test', 'Compare'), ('body', ['AugAssign', 'Break']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'If', 'If', 'If']), ('orelse', [])]", "If -> [('test', 'BoolOp'), ('body', ['AugAssign', 'If']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Expr', 'Assign', 'For']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Expr', 'If', 'Expr', 'Assign', 'Break']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['Expr', 'If', 'Expr', 'Assign', 'Break']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['If']), ('orelse', ['AugAssign', 'For'])]", "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'If', 'Assign', 'Expr', 'Assign']), ('orelse', [])]", "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'Assign', 'For', 'Assign', 'For', 'If']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['AugAssign']), ('orelse', ['Break'])]", "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'If', 'Assign', 'If']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'Assign', 'For', 'If', 'Expr', 'TryExcept']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['Assign', 'Assign', 'Expr', 'Return']), ('orelse', ['Expr', 'Return'])]", "If -> [('test', 'BoolOp'), ('body', ['Print', 'Print', 'Assign', 'Assign']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Import', 'Assign', 'Assign', 'Expr', 'Expr']), ('orelse', [])]", "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign', 'If']), ('orelse', ['Assign'])]", "If -> [('test', 'BoolOp'), ('body', ['Assign']), ('orelse', ['Assign', 'If', 'Assign'])]", "If -> [('test', 'Compare'), ('body', ['If', 'Assign', 'If', 'If', 'Assert', 'If', 'Assign']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['Assign', 'Continue']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Expr', 'Raise']), ('orelse', ['Expr'])]", "If -> [('test', 'Name'), ('body', ['Assign', 'If']), ('orelse', ['Assert'])]", "If -> [('test', 'BoolOp'), ('body', ['If', 'Expr', 'If', 'If']), ('orelse', ['If'])]", "If -> [('test', 'Call'), ('body', ['If', 'For']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['Expr', 'Assign', 'Expr']), ('orelse', ['If'])]", "If -> [('test', 'Call'), ('body', ['Assign', 'Assign', 'Expr', 'Assert', 'Expr', 'Assign', 'Expr']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['Assign', 'Expr', 'If']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['Assign', 'Assign', 'For', 'Expr', 'AugAssign', 'Expr']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Break']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['For', 'If']), ('orelse', [])]", "If -> [('test', 'UnaryOp'), ('body', ['Expr']), ('orelse', ['If', 'Assign', 'If'])]", "If -> [('test', 'Call'), ('body', ['Return']), ('orelse', ['Expr', 'Raise'])]", "If -> [('test', 'BoolOp'), ('body', ['Expr', 'If', 'If']), ('orelse', [])]", "If -> [('test', 'Attribute'), ('body', ['If', 'If', 'Expr', 'If']), ('orelse', ['If'])]", "If -> [('test', 'Attribute'), ('body', ['Expr', 'Expr']), ('orelse', ['Expr'])]", "If -> [('test', 'Compare'), ('body', ['Assign']), ('orelse', ['Assign', 'Assert'])]", "If -> [('test', 'Name'), ('body', ['TryExcept']), ('orelse', ['Assign'])]", "If -> [('test', 'Name'), ('body', ['Assign', 'Assign', 'If', 'Expr', 'If']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['Expr', 'For']), ('orelse', ['If'])]", "If -> [('test', 'Attribute'), ('body', ['Assign', 'If']), ('orelse', ['Assign', 'Expr', 'If', 'Expr', 'If'])]", "If -> [('test', 'BoolOp'), ('body', ['Expr', 'If', 'If']), ('orelse', ['Expr'])]", "If -> [('test', 'Call'), ('body', ['Return']), ('orelse', ['If', 'Return'])]", "If -> [('test', 'Attribute'), ('body', ['Expr', 'AugAssign', 'TryFinally']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['For', 'Assign', 'Assign', 'Expr', 'Break']), ('orelse', [])]", "If -> [('test', 'BoolOp'), ('body', ['If', 'If', 'For']), ('orelse', ['If'])]", "If -> [('test', 'BoolOp'), ('body', ['If', 'If']), ('orelse', ['If'])]", "If -> [('test', 'Call'), ('body', ['Assign', 'If']), ('orelse', ['Assign', 'If', 'Expr'])]", "If -> [('test', 'BoolOp'), ('body', ['If', 'Assign']), ('orelse', ['Assign'])]", "If -> [('test', 'Name'), ('body', ['Assign']), ('orelse', ['For', 'Assign'])]", "If -> [('test', 'Attribute'), ('body', ['Expr', 'For']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'For', 'For', 'Expr']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Expr', 'Assign', 'Assign']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['If', 'If', 'If', 'If', 'Raise']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'If', 'If', 'Return']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['If', 'If', 'Expr', 'If']), ('orelse', [])]", "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign']), ('orelse', ['Assign', 'If'])]", "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign', 'Print', 'Expr', 'Expr', 'If', 'Assign', 'Assign', 'Return']), ('orelse', ['Assign', 'TryExcept'])]", "If -> [('test', 'Num'), ('body', ['Print', 'Print', 'Print', 'Return']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['Print', 'Print', 'Expr', 'Print']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['Assign', 'If']), ('orelse', ['Assign', 'If'])]", "If -> [('test', 'Compare'), ('body', ['Assign']), ('orelse', ['Assign', 'Assign', 'Assign', 'Assign'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'If']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['Expr', 'Assign', 'Return']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'AugAssign', 'Expr']), ('orelse', ['Assign', 'Assign'])]", "If -> [('test', 'Subscript'), ('body', ['Assign', 'Assign', 'Return']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['If']), ('orelse', ['Assign', 'Assign', 'If'])]", "If -> [('test', 'Compare'), ('body', ['Import', 'Expr', 'Assign', 'Expr', 'Expr', 'Return']), ('orelse', ['If'])]", "If -> [('test', 'Compare'), ('body', ['Import', 'Assign', 'Assign', 'Expr', 'Expr', 'Return']), ('orelse', ['Return'])]", "If -> [('test', 'UnaryOp'), ('body', ['Return']), ('orelse', ['ImportFrom', 'Return'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Expr', 'Return']), ('orelse', ['Return'])]", "If -> [('test', 'Name'), ('body', ['Expr', 'Return']), ('orelse', ['Expr', 'Return'])]", "If -> [('test', 'BoolOp'), ('body', ['Expr', 'Expr', 'Return']), ('orelse', ['If'])]", "If -> [('test', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'Return']), ('orelse', ['Return'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Expr', 'Break']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'TryExcept', 'Assign', 'If', 'Assign']), ('orelse', [])]", "If -> [('test', 'BoolOp'), ('body', ['If', 'Assign', 'Assign', 'Assign', 'Assign', 'TryFinally', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'If', 'If', 'Expr']), ('orelse', ['If'])]", "If -> [('test', 'Name'), ('body', ['Assign', 'TryFinally']), ('orelse', [])]", "If -> [('test', 'BoolOp'), ('body', ['Assign', 'If', 'If', 'Assign', 'Assign', 'If', 'If', 'If', 'If', 'If']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'TryExcept']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['Assign', 'If', 'Assign', 'TryFinally', 'If', 'Assign', 'TryFinally', 'Expr']), ('orelse', [])]", "If -> [('test', 'BoolOp'), ('body', ['If', 'Assign', 'Assign']), ('orelse', ['If'])]", "If -> [('test', 'Call'), ('body', ['If', 'Assign', 'Assign']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['Expr', 'If', 'If']), ('orelse', ['If'])]", "If -> [('test', 'Name'), ('body', ['Expr', 'If', 'Expr']), ('orelse', ['If'])]", "If -> [('test', 'Name'), ('body', ['Assign']), ('orelse', ['AugAssign'])]", "If -> [('test', 'Call'), ('body', ['AugAssign', 'AugAssign']), ('orelse', ['If'])]", "If -> [('test', 'Call'), ('body', ['AugAssign', 'AugAssign', 'Assign']), ('orelse', ['If'])]", "If -> [('test', 'Call'), ('body', ['AugAssign', 'AugAssign', 'AugAssign']), ('orelse', ['If'])]", "If -> [('test', 'Call'), ('body', ['AugAssign', 'AugAssign', 'AugAssign', 'AugAssign', 'Assign']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['Assign', 'If', 'If', 'AugAssign', 'AugAssign']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['Assign', 'AugAssign', 'Return']), ('orelse', ['If'])]", "If -> [('test', 'Call'), ('body', ['If', 'AugAssign', 'AugAssign', 'AugAssign']), ('orelse', ['Assign'])]", "If -> [('test', 'UnaryOp'), ('body', ['Raise']), ('orelse', ['Raise'])]", "If -> [('test', 'Attribute'), ('body', ['Expr', 'Return']), ('orelse', ['Return'])]", "If -> [('test', 'Attribute'), ('body', ['TryExcept']), ('orelse', ['Assign', 'Return'])]", "If -> [('test', 'Call'), ('body', ['Raise']), ('orelse', ['Raise'])]", "If -> [('test', 'Compare'), ('body', ['If', 'Return']), ('orelse', ['Return'])]", "If -> [('test', 'Name'), ('body', ['Assign', 'If', 'Return']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Import', 'Assign']), ('orelse', ['Raise'])]", "If -> [('test', 'Compare'), ('body', ['Assign']), ('orelse', ['AugAssign', 'AugAssign'])]", "If -> [('test', 'Attribute'), ('body', ['Assign', 'Assign', 'Assign', 'For', 'Assign', 'Assign', 'Assign', 'For', 'If']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['Print', 'For', 'Print']), ('orelse', ['Print'])]", "If -> [('test', 'Name'), ('body', ['Assign', 'If', 'If']), ('orelse', ['Print'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('orelse', ['If'])]", "If -> [('test', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'Assign']), ('orelse', ['Assign', 'Assign'])]", "If -> [('test', 'Name'), ('body', ['Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'If']), ('orelse', ['Expr'])]", "If -> [('test', 'Name'), ('body', ['If']), ('orelse', ['Expr', 'Expr'])]", "If -> [('test', 'Name'), ('body', ['Assign', 'Assign', 'Expr', 'For']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['Expr', 'For', 'Expr']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['Pass']), ('orelse', ['Expr'])]", "If -> [('test', 'Name'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'Assign', 'If', 'Expr']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Import', 'Assign']), ('orelse', ['Import', 'Assign'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'For']), ('orelse', ['Assign', 'Assign', 'FunctionDef', 'For'])]", "If -> [('test', 'Compare'), ('body', ['Import', 'Assign', 'FunctionDef', 'FunctionDef', 'Assign', 'For', 'Expr', 'Expr', 'Expr', 'Expr', 'For', 'Assert']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Expr', 'Assert']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['TryExcept', 'Expr']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['Assign', 'Assign', 'Expr']), ('orelse', ['Assign'])]", "If -> [('test', 'Compare'), ('body', ['Expr', 'Assign', 'Assign', 'For', 'For', 'Expr']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Expr', 'Assign', 'Assign', 'If', 'Expr', 'Return']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Import', 'Assign', 'TryExcept', 'Assign', 'TryExcept']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Print', 'Import']), ('orelse', ['If'])]", "If -> [('test', 'Compare'), ('body', ['Print', 'Import']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'ImportFrom']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'If', 'If', 'If', 'Return']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr']), ('orelse', [])]", "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign', 'Expr', 'Assign', 'Expr']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['Assign', 'If', 'Expr', 'Expr', 'Return']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Expr', 'Expr', 'If', 'Break']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Expr', 'Return']), ('orelse', ['Expr', 'Return'])]", "If -> [('test', 'Compare'), ('body', ['Expr']), ('orelse', ['Assign', 'If', 'Assign', 'If', 'Expr'])]", "If -> [('test', 'Compare'), ('body', ['Expr', 'Expr', 'Assign', 'Expr']), ('orelse', ['Expr', 'Return'])]", "If -> [('test', 'Compare'), ('body', ['Expr']), ('orelse', ['Assign', 'Assign', 'Expr'])]", "If -> [('test', 'Name'), ('body', ['If']), ('orelse', ['If', 'Raise'])]", "If -> [('test', 'Attribute'), ('body', ['Assign']), ('orelse', ['Raise'])]", "If -> [('test', 'BoolOp'), ('body', ['TryExcept', 'Raise']), ('orelse', [])]", "If -> [('test', 'Subscript'), ('body', ['ImportFrom', 'TryExcept']), ('orelse', ['Assign'])]", "If -> [('test', 'Name'), ('body', ['If']), ('orelse', ['Assign', 'If'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Expr', 'If', 'Expr']), ('orelse', ['Assign', 'Expr', 'If'])]", "If -> [('test', 'Name'), ('body', ['TryExcept', 'If', 'Raise']), ('orelse', ['TryExcept', 'Raise'])]", "If -> [('test', 'Attribute'), ('body', ['Return']), ('orelse', ['Assign', 'Return'])]", "If -> [('test', 'Compare'), ('body', ['Expr', 'Assign', 'Expr', 'If', 'Expr', 'Expr']), ('orelse', ['Expr', 'Assign', 'Expr', 'If', 'Expr', 'Expr'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'If']), ('orelse', ['If'])]", "If -> [('test', 'Call'), ('body', ['Assign', 'For', 'Assign', 'If']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'If', 'Continue']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Print', 'If']), ('orelse', ['Return'])]", "If -> [('test', 'Call'), ('body', ['Raise']), ('orelse', ['Return'])]", "If -> [('test', 'Call'), ('body', ['Assign', 'For', 'Assign', 'Expr', 'Assign', 'For', 'Assign']), ('orelse', ['Assign'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Print', 'Assign']), ('orelse', ['Return'])]", "If -> [('test', 'Name'), ('body', ['If', 'Assign']), ('orelse', ['Assign', 'Assign'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Return']), ('orelse', ['Assign', 'Assign', 'Assign', 'Return'])]", "If -> [('test', 'BoolOp'), ('body', ['If', 'Expr', 'Return']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['If']), ('orelse', ['If', 'Expr'])]", "If -> [('test', 'Name'), ('body', ['Assign', 'If', 'Expr']), ('orelse', ['If', 'Expr'])]", "If -> [('test', 'Name'), ('body', ['If']), ('orelse', ['If', 'TryExcept', 'Expr'])]", "If -> [('test', 'Attribute'), ('body', ['Assign', 'TryExcept', 'Expr', 'If']), ('orelse', ['Assign', 'Expr', 'If'])]", "If -> [('test', 'UnaryOp'), ('body', ['Expr', 'Assign', 'Expr']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['ImportFrom', 'Assign', 'Expr']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Import', 'Expr']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('orelse', ['Continue'])]", "If -> [('test', 'Call'), ('body', ['Assign', 'Assign', 'Print', 'Expr']), ('orelse', ['If'])]", "If -> [('test', 'Call'), ('body', ['Assign', 'Print', 'Expr']), ('orelse', ['TryExcept'])]", "If -> [('test', 'Compare'), ('body', ['Expr', 'Expr', 'Delete', 'Assign', 'Expr']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Expr', 'Assign', 'Expr', 'Expr']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['For', 'Delete']), ('orelse', [])]", "If -> [('test', 'Attribute'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'If', 'Expr', 'Expr', 'For', 'Assign', 'If']), ('orelse', [])]", "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'Assign']), ('orelse', ['Assign'])]", "If -> [('test', 'Attribute'), ('body', ['Expr', 'Assign', 'If']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'If', 'Print']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['ImportFrom', 'If']), ('orelse', [])]", "If -> [('test', 'BoolOp'), ('body', ['TryExcept']), ('orelse', ['Print', 'Expr'])]", "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('orelse', ['If'])]", "If -> [('test', 'BoolOp'), ('body', ['AugAssign']), ('orelse', ['AugAssign'])]", "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Return']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['AugAssign']), ('orelse', ['For'])]", "If -> [('test', 'Call'), ('body', ['Assign', 'For', 'Expr', 'Print']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['AugAssign', 'Continue']), ('orelse', ['If'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign']), ('orelse', ['Assign', 'If', 'Assign'])]", "If -> [('test', 'Name'), ('body', ['AugAssign', 'Expr']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Print', 'Expr', 'Return']), ('orelse', ['If'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Expr', 'Continue']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['Print', 'Assign', 'Continue']), ('orelse', [])]", "If -> [('test', 'UnaryOp'), ('body', ['Expr', 'Exec']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Expr', 'Print']), ('orelse', [])]", "If -> [('test', 'BoolOp'), ('body', ['TryExcept', 'If', 'If']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['Assign', 'Expr', 'ClassDef', 'TryExcept']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Raise']), ('orelse', ['If'])]", "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'TryExcept', 'Expr']), ('orelse', [])]", "If -> [('test', 'BoolOp'), ('body', ['Import']), ('orelse', ['Import'])]", "If -> [('test', 'Name'), ('body', ['Assign', 'Assign', 'AugAssign', 'If']), ('orelse', [])]", "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign', 'Assign', 'AugAssign']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['For']), ('orelse', ['If', 'Return'])]", "If -> [('test', 'Call'), ('body', ['Assign', 'For', 'Expr', 'TryExcept', 'Assign', 'For']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['Assign', 'If', 'Assign', 'If']), ('orelse', ['Assign', 'If', 'Expr'])]", "If -> [('test', 'Compare'), ('body', ['Import', 'If', 'Expr']), ('orelse', ['Raise'])]", "If -> [('test', 'Call'), ('body', ['Assign', 'For', 'If']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('orelse', [])]", "If -> [('test', 'UnaryOp'), ('body', ['Assert', 'Assign', 'Assign', 'Assign']), ('orelse', ['Assign'])]", "If -> [('test', 'Compare'), ('body', ['With', 'Expr', 'Return']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'If', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr']), ('orelse', ['If'])]", "If -> [('test', 'BoolOp'), ('body', ['If']), ('orelse', ['Expr', 'Expr'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr']), ('orelse', ['If'])]", "If -> [('test', 'Name'), ('body', ['FunctionDef']), ('orelse', [])]", "If -> [('test', 'BoolOp'), ('body', ['ImportFrom', 'Assign', 'Assign']), ('orelse', ['Assign'])]", "If -> [('test', 'Compare'), ('body', ['If', 'Assign', 'Assign', 'Assign', 'Assign', 'TryExcept']), ('orelse', ['Assign', 'Assign', 'If', 'Assign', 'Assign', 'Return'])]", "If -> [('test', 'BoolOp'), ('body', ['Expr', 'Expr', 'Break']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Print', 'Break']), ('orelse', [])]", "If -> [('test', 'BoolOp'), ('body', ['Print', 'Continue']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Print', 'Assign', 'Break']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['If', 'Continue']), ('orelse', ['Expr', 'Break'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Expr', 'Assign', 'Expr', 'If']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'For']), ('orelse', ['Assign', 'Assign'])]", "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'Expr']), ('orelse', ['Assign'])]", "If -> [('test', 'Attribute'), ('body', ['Expr', 'Assign']), ('orelse', ['Expr', 'Assign'])]", "If -> [('test', 'Attribute'), ('body', ['Assign', 'Assign', 'Expr', 'Assign']), ('orelse', [])]", "If -> [('test', 'Attribute'), ('body', ['If', 'Assign', 'Assign']), ('orelse', ['Assign'])]", "If -> [('test', 'Attribute'), ('body', ['If']), ('orelse', ['Expr'])]", "If -> [('test', 'Compare'), ('body', ['For', 'Return']), ('orelse', ['Expr', 'Return'])]", "If -> [('test', 'Compare'), ('body', ['Assign']), ('orelse', ['Expr', 'Assign'])]", "If -> [('test', 'Compare'), ('body', ['If', 'If', 'Expr', 'Expr', 'Return']), ('orelse', ['If'])]", "If -> [('test', 'Compare'), ('body', ['Expr', 'Assign', 'Expr', 'Assign', 'Expr']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['If', 'Expr']), ('orelse', ['Assign', 'Assign'])]", "If -> [('test', 'Compare'), ('body', ['Expr', 'Return']), ('orelse', ['Expr', 'Expr', 'Expr', 'Assign', 'Assign'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'For']), ('orelse', ['If'])]", "If -> [('test', 'Compare'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Expr', 'For', 'For']), ('orelse', ['Expr', 'Assign'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign']), ('orelse', ['Expr', 'Return'])]", "If -> [('test', 'Compare'), ('body', ['If']), ('orelse', ['Expr', 'Return'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Expr', 'Expr', 'Assign', 'Expr', 'For']), ('orelse', ['If'])]", "If -> [('test', 'UnaryOp'), ('body', ['Return']), ('orelse', ['Expr'])]", "If -> [('test', 'Compare'), ('body', ['Expr', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'For']), ('orelse', ['Expr', 'If'])]", "If -> [('test', 'Subscript'), ('body', ['For']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'If']), ('orelse', [])]", "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'Assign', 'Expr', 'Expr']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Import', 'Import', 'Assign', 'Assign', 'Expr', 'Expr', 'Return']), ('orelse', ['If'])]", "If -> [('test', 'Compare'), ('body', ['Import', 'Return']), ('orelse', ['If'])]", "If -> [('test', 'Compare'), ('body', ['Import', 'Assign', 'If', 'Assign', 'Return']), ('orelse', ['If'])]", "If -> [('test', 'Compare'), ('body', ['Import', 'Return']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('orelse', ['Assign', 'Assign', 'Assign'])]", "If -> [('test', 'Compare'), ('body', ['Expr', 'Assign', 'Break']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['If', 'Print', 'Assign', 'Break']), ('orelse', [])]", "If -> [('test', 'BoolOp'), ('body', ['Assign', 'If', 'Assign', 'If', 'AugAssign', 'Assign', 'Assign', 'Assign', 'Assign', 'If']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Expr', 'Assign']), ('orelse', ['Assign', 'Expr', 'Assign'])]", "If -> [('test', 'Call'), ('body', ['Print', 'Print', 'Return']), ('orelse', [])]", "If -> [('test', 'UnaryOp'), ('body', ['Continue', 'Raise']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['If', 'Assign', 'Assign']), ('orelse', ['Expr', 'Assign', 'Assign', 'For', 'If'])]", "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['If', 'Expr', 'Assign', 'Expr', 'Assign', 'If']), ('orelse', [])]", "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'Print', 'Return']), ('orelse', ['Return'])]", "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign', 'Assign', 'Expr', 'If']), ('orelse', ['Return'])]", "If -> [('test', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('orelse', [])]", "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Expr']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['If']), ('orelse', ['AugAssign'])]", "If -> [('test', 'Attribute'), ('body', ['Assign']), ('orelse', ['Assign', 'Break'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'If']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Expr', 'Expr', 'Expr']), ('orelse', ['Assign', 'Expr'])]", "If -> [('test', 'Compare'), ('body', ['TryExcept', 'TryExcept', 'Print', 'For']), ('orelse', ['Raise'])]", "If -> [('test', 'Compare'), ('body', ['With']), ('orelse', ['Raise'])]", "If -> [('test', 'Name'), ('body', ['Assign']), ('orelse', ['Assign', 'Assign', 'Assign'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'AugAssign', 'While']), ('orelse', [])]", "If -> [('test', 'Subscript'), ('body', ['Assign', 'Assert', 'Return']), ('orelse', [])]", "If -> [('test', 'UnaryOp'), ('body', ['Pass']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'ImportFrom']), ('orelse', ['If'])]", "If -> [('test', 'Compare'), ('body', ['ImportFrom', 'FunctionDef']), ('orelse', ['Raise'])]", "If -> [('test', 'Compare'), ('body', ['Expr', 'Assign', 'Expr', 'Expr', 'Expr']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Return']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['Expr', 'ClassDef', 'Delete', 'Raise']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['Expr', 'Expr', 'Assign', 'Assign']), ('orelse', ['Expr'])]", "If -> [('test', 'Attribute'), ('body', ['Expr', 'Assign', 'Expr', 'Expr', 'Assign']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['If']), ('orelse', ['Assign', 'Assign', 'Expr', 'Expr', 'Assign'])]", "If -> [('test', 'UnaryOp'), ('body', ['Expr', 'Expr', 'Delete']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['Assign', 'TryExcept', 'Assign', 'TryExcept']), ('orelse', [])]", "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Expr', 'Expr', 'For', 'Expr', 'Expr']), ('orelse', [])]", "If -> [('test', 'Attribute'), ('body', ['Assign', 'Expr', 'Expr', 'For', 'Expr', 'Expr']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['TryExcept']), ('orelse', ['If'])]", "If -> [('test', 'Compare'), ('body', ['Continue']), ('orelse', ['If'])]", "If -> [('test', 'BoolOp'), ('body', ['FunctionDef', 'FunctionDef', 'Assign', 'Assign', 'Assign', 'Assign']), ('orelse', [])]", "If -> [('test', 'BoolOp'), ('body', ['FunctionDef', 'Assign']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'If', 'If', 'Assign']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['If', 'Assign', 'Raise']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['Assign', 'FunctionDef']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['TryExcept', 'Assign']), ('orelse', ['TryExcept'])]", "If -> [('test', 'BoolOp'), ('body', ['Expr', 'Expr']), ('orelse', ['Assign', 'For', 'Assign', 'Expr', 'Assign'])]", "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign', 'While', 'Expr', 'Return']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['FunctionDef']), ('orelse', ['Raise'])]", "If -> [('test', 'BoolOp'), ('body', ['Expr']), ('orelse', ['If', 'Expr', 'For', 'Expr', 'If'])]", "If -> [('test', 'Name'), ('body', ['Assign']), ('orelse', ['Assign', 'Assign', 'Assign', 'Expr'])]", "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['Assign', 'Assign', 'Assign']), ('orelse', ['Assign', 'Assign'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Return']), ('orelse', ['Assign', 'Return'])]", "If -> [('test', 'Subscript'), ('body', ['Assign', 'Assign']), ('orelse', ['Assign', 'Assign', 'Assign', 'Assign', 'If', 'If', 'Assign', 'If', 'If', 'Assign', 'If', 'Assign', 'Assign', 'If', 'Expr', 'Expr'])]", "If -> [('test', 'Name'), ('body', ['If', 'Assign']), ('orelse', ['Assert', 'Assign'])]", "If -> [('test', 'Call'), ('body', ['Expr', 'Pass']), ('orelse', ['If'])]", "If -> [('test', 'Name'), ('body', ['Expr', 'Pass']), ('orelse', ['Expr'])]", "If -> [('test', 'Name'), ('body', ['Assign', 'While', 'If']), ('orelse', ['If'])]", "If -> [('test', 'Call'), ('body', ['Assign', 'Expr', 'Assert']), ('orelse', ['Assert'])]", "If -> [('test', 'Call'), ('body', ['TryExcept']), ('orelse', ['If', 'Expr'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'If', 'Assign', 'Return']), ('orelse', ['If'])]", "If -> [('test', 'Call'), ('body', ['Assign', 'If', 'Assign', 'If', 'Assign']), ('orelse', ['If'])]", "If -> [('test', 'Call'), ('body', ['Assign', 'TryExcept']), ('orelse', ['Return'])]", "If -> [('test', 'Compare'), ('body', ['TryExcept', 'If', 'TryExcept']), ('orelse', ['Return'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'For', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign']), ('orelse', ['If', 'Assign', 'Assign'])]", "If -> [('test', 'Call'), ('body', ['TryExcept']), ('orelse', ['If'])]", "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'Expr', 'Break']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['Expr', 'Expr', 'Assign', 'Expr', 'If']), ('orelse', [])]", "If -> [('test', 'UnaryOp'), ('body', ['Expr']), ('orelse', ['Assign', 'Assign', 'Expr'])]", "If -> [('test', 'Compare'), ('body', ['Expr']), ('orelse', ['Expr', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'If'])]", "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign', 'Expr', 'If', 'Assign', 'Expr']), ('orelse', ['Assign', 'Assign', 'Assign', 'Assign', 'If', 'If', 'Assign', 'Assign'])]", "If -> [('test', 'Attribute'), ('body', ['Assign', 'If', 'Expr']), ('orelse', [])]", "If -> [('test', 'BoolOp'), ('body', ['If', 'Assign', 'If', 'Assign', 'Expr', 'Assign']), ('orelse', ['Assign'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assert', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assert', 'Assign', 'If', 'Assign', 'Expr']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Import', 'Assign']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Import', 'ClassDef', 'Assign']), ('orelse', [])]", "If -> [('test', 'Attribute'), ('body', ['Import', 'Return']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Expr', 'Expr', 'Assign']), ('orelse', [])]", "If -> [('test', 'BoolOp'), ('body', ['Raise']), ('orelse', ['Raise'])]", "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Raise']), ('orelse', ['Raise'])]", "If -> [('test', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'If', 'If']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign']), ('orelse', ['Assign', 'If', 'For', 'If'])]", "If -> [('test', 'Call'), ('body', ['Assign']), ('orelse', ['If', 'Assign'])]", "If -> [('test', 'Call'), ('body', ['Assign', 'Assign', 'With']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['Raise']), ('orelse', ['Assign', 'Assign'])]", "If -> [('test', 'Name'), ('body', ['Raise']), ('orelse', ['Assign'])]", "If -> [('test', 'BoolOp'), ('body', ['Assign']), ('orelse', ['TryExcept'])]", "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Continue']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['If', 'If', 'If']), ('orelse', ['If'])]", "If -> [('test', 'Call'), ('body', ['If', 'Assign', 'Assign', 'If', 'If', 'If', 'Return']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['If', 'Assign']), ('orelse', ['Assign', 'Assign'])]", "If -> [('test', 'Call'), ('body', ['Assign', 'If', 'Assign']), ('orelse', ['Assign'])]", "If -> [('test', 'Compare'), ('body', ['For', 'If']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['Expr', 'Expr', 'Expr', 'Assign']), ('orelse', [])]", "If -> [('test', 'BoolOp'), ('body', ['If', 'If', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Assign']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Expr', 'Expr', 'If', 'Return']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Delete', 'TryExcept', 'Return']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Raise']), ('orelse', ['Delete'])]", "If -> [('test', 'Compare'), ('body', ['Expr', 'If', 'AugAssign', 'Assign']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'Assign']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'ImportFrom', 'Expr']), ('orelse', [])]", "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'If']), ('orelse', ['If', 'Assign'])]", "If -> [('test', 'Compare'), ('body', ['ImportFrom', 'Expr', 'Assign', 'Assign', 'Expr']), ('orelse', [])]", "If -> [('test', 'BoolOp'), ('body', ['Pass']), ('orelse', [])]", "If -> [('test', 'BoolOp'), ('body', ['For', 'Delete', 'Delete', 'Delete', 'If', 'If', 'Assign', 'Expr']), ('orelse', ['AugAssign'])]", "If -> [('test', 'Call'), ('body', ['ImportFrom', 'Assign']), ('orelse', ['Assign'])]", "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'If', 'Assign', 'Assign']), ('orelse', [])]", "If -> [('test', 'Attribute'), ('body', ['If']), ('orelse', ['Return'])]", "If -> [('test', 'Call'), ('body', ['Print']), ('orelse', ['Expr'])]", "If -> [('test', 'Name'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'FunctionDef', 'Assign', 'AugAssign', 'AugAssign', 'AugAssign']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['Assign', 'Expr']), ('orelse', ['Print'])]", "If -> [('test', 'Name'), ('body', ['Expr', 'Assign', 'Assign', 'For', 'Assign', 'Assign', 'Assign', 'Assign', 'AugAssign', 'AugAssign']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['TryExcept', 'Assign', 'If', 'Expr']), ('orelse', ['Assign', 'Assign', 'If', 'Expr'])]", "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Expr', 'TryExcept']), ('orelse', [])]", "If -> [('test', 'BoolOp'), ('body', ['Expr', 'Expr', 'If', 'Return']), ('orelse', [])]", "If -> [('test', 'BoolOp'), ('body', ['Expr', 'Expr', 'If']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['FunctionDef']), ('orelse', ['Assign'])]", "If -> [('test', 'BoolOp'), ('body', ['Return']), ('orelse', ['For', 'Return'])]", "If -> [('test', 'Name'), ('body', ['Raise']), ('orelse', ['Expr'])]", "If -> [('test', 'BoolOp'), ('body', ['Continue']), ('orelse', ['Assign'])]", "If -> [('test', 'Compare'), ('body', ['Expr', 'Expr', 'For', 'Expr']), ('orelse', ['If'])]", "If -> [('test', 'Compare'), ('body', ['Expr', 'Expr', 'For', 'Expr']), ('orelse', ['Raise'])]", "If -> [('test', 'Call'), ('body', ['Assign', 'Assign', 'If', 'If']), ('orelse', [])]", "If -> [('test', 'Attribute'), ('body', ['Assign', 'Expr', 'Assign']), ('orelse', ['Expr', 'Assign', 'Assign'])]", "If -> [('test', 'Compare'), ('body', ['If', 'Expr']), ('orelse', ['If', 'Expr'])]", "If -> [('test', 'Compare'), ('body', ['If', 'Assign', 'If']), ('orelse', ['If', 'Assign', 'If'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'For', 'Assign', 'Assign', 'If']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'While', 'Assign', 'For']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Print', 'Assign', 'If', 'If']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Expr', 'Expr', 'If', 'Expr', 'Expr', 'Expr']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['Assign', 'Expr', 'If', 'Expr']), ('orelse', ['Expr', 'Expr', 'Expr'])]", "If -> [('test', 'UnaryOp'), ('body', ['Expr', 'Assign', 'Assign', 'Expr', 'Expr']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['If', 'Expr', 'Expr']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Print', 'Assign', 'Assign', 'Assign', 'If', 'If', 'If', 'If']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['Assign', 'Expr', 'If', 'If', 'Expr']), ('orelse', ['Expr', 'Expr'])]", "If -> [('test', 'Compare'), ('body', ['If']), ('orelse', ['Expr', 'Expr'])]", "If -> [('test', 'Compare'), ('body', ['Print', 'Assign', 'Assign', 'Assign', 'If', 'If', 'If', 'If', 'Expr']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'If']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Expr', 'Assign']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'AugAssign', 'Assign', 'Expr']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'AugAssign', 'Assign', 'Expr', 'Expr']), ('orelse', [])]", "If -> [('test', 'UnaryOp'), ('body', ['Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'AugAssign', 'AugAssign']), ('orelse', ['Expr', 'Expr', 'Expr', 'Expr'])]", "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign', 'For']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'Break']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Expr', 'Expr', 'Expr']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Print', 'Expr']), ('orelse', ['Raise'])]", "If -> [('test', 'Name'), ('body', ['Assign']), ('orelse', ['Assign', 'For', 'Assign'])]", "If -> [('test', 'Call'), ('body', ['Return']), ('orelse', ['TryExcept'])]", "If -> [('test', 'BoolOp'), ('body', ['For', 'Return']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['Return']), ('orelse', ['Assign', 'Return'])]", "If -> [('test', 'Call'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'If', 'Assert', 'Assign']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['Assign', 'Assert']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'For', 'If', 'For']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['Print', 'Assign', 'Expr', 'If']), ('orelse', [])]", "If -> [('test', 'BoolOp'), ('body', ['Import', 'Import', 'Import', 'Import', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Print', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr', 'For', 'Expr']), ('orelse', [])]", "If -> [('test', 'BoolOp'), ('body', ['Return']), ('orelse', ['Expr'])]", "If -> [('test', 'Attribute'), ('body', ['Assign']), ('orelse', ['Pass', 'Expr'])]", "If -> [('test', 'Compare'), ('body', ['Return']), ('orelse', ['For'])]", "If -> [('test', 'Call'), ('body', ['Assign', 'If', 'Assign', 'Continue']), ('orelse', [])]", "If -> [('test', 'BoolOp'), ('body', ['If', 'AugAssign', 'AugAssign', 'Assign', 'Expr', 'If']), ('orelse', [])]", "If -> [('test', 'BoolOp'), ('body', ['Return']), ('orelse', ['Assign', 'Assign', 'Assign', 'TryExcept'])]", "If -> [('test', 'Compare'), ('body', ['Return']), ('orelse', ['Assign', 'While', 'Return'])]", "If -> [('test', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'Return']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['If', 'Assign', 'If']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['AugAssign']), ('orelse', ['Return'])]", "If -> [('test', 'BinOp'), ('body', ['Assign', 'Return']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['Assign', 'For', 'Expr', 'Return']), ('orelse', ['Return'])]", "If -> [('test', 'Call'), ('body', ['ImportFrom', 'ImportFrom', 'If']), ('orelse', [])]", "If -> [('test', 'UnaryOp'), ('body', ['Print', 'Continue']), ('orelse', ['TryExcept'])]", "If -> [('test', 'Compare'), ('body', ['Expr']), ('orelse', ['Assign', 'Assign', 'Assign', 'Expr'])]", "If -> [('test', 'UnaryOp'), ('body', ['Expr', 'Assign', 'Expr', 'If']), ('orelse', [])]", "If -> [('test', 'BoolOp'), ('body', ['Expr', 'Assign', 'Expr', 'If']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['While']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['TryExcept']), ('orelse', ['TryExcept'])]", "If -> [('test', 'Subscript'), ('body', ['Assign', 'Assign', 'Expr', 'Assign']), ('orelse', ['Assign'])]", "If -> [('test', 'Call'), ('body', ['If', 'Expr', 'Expr']), ('orelse', ['Expr'])]", "If -> [('test', 'Call'), ('body', ['Assign', 'Assign', 'Assert']), ('orelse', [])]", "If -> [('test', 'BoolOp'), ('body', ['Assign', 'If', 'Return']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Expr', 'Expr', 'Expr', 'For']), ('orelse', ['Assign', 'Expr'])]", "If -> [('test', 'Name'), ('body', ['FunctionDef', 'While']), ('orelse', [])]", "If -> [('test', 'BoolOp'), ('body', ['Continue']), ('orelse', ['For'])]", "If -> [('test', 'Compare'), ('body', ['Print', 'Assign', 'If']), ('orelse', [])]", "If -> [('test', 'BoolOp'), ('body', ['Assign', 'If', 'If', 'Assign', 'Assign', 'Print']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['Assign', 'Expr', 'Assign', 'If', 'Assign', 'Expr', 'Assign']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign']), ('orelse', ['ImportFrom', 'Assign'])]", "If -> [('test', 'Attribute'), ('body', ['Assign', 'Assign', 'Assign', 'For', 'For']), ('orelse', [])]", "If -> [('test', 'Attribute'), ('body', ['Assign', 'If', 'TryExcept']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['Assign', 'Assign', 'If']), ('orelse', ['Assign', 'Assign', 'Assign'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'If', 'Assign', 'Assign']), ('orelse', ['Assign'])]", "If -> [('test', 'Attribute'), ('body', ['TryExcept', 'TryExcept']), ('orelse', [])]", "If -> [('test', 'UnaryOp'), ('body', ['Assign']), ('orelse', ['If', 'Expr'])]", "If -> [('test', 'UnaryOp'), ('body', ['Expr', 'Assign']), ('orelse', ['If'])]", "If -> [('test', 'Compare'), ('body', ['AugAssign']), ('orelse', ['Return'])]", "If -> [('test', 'BoolOp'), ('body', ['AugAssign']), ('orelse', ['Assign', 'Assign', 'If'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'If']), ('orelse', ['Raise'])]", "If -> [('test', 'UnaryOp'), ('body', ['ClassDef', 'Assign', 'Expr']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'TryExcept', 'Return']), ('orelse', ['If', 'Raise'])]", "If -> [('test', 'UnaryOp'), ('body', ['Print', 'Print']), ('orelse', [])]", "If -> [('test', 'Attribute'), ('body', ['Assign', 'Assign', 'Assign']), ('orelse', ['Assign', 'Assign'])]", "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'If', 'If', 'If', 'Expr']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Expr']), ('orelse', ['If', 'Assign'])]", "If -> [('test', 'Compare'), ('body', ['AugAssign', 'Expr']), ('orelse', ['If'])]", "If -> [('test', 'Name'), ('body', ['Assert', 'Expr']), ('orelse', ['If'])]", "If -> [('test', 'Name'), ('body', ['Assert', 'Expr']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'For', 'For']), ('orelse', [])]", "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'If', 'Return']), ('orelse', [])]", "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'If', 'Return']), ('orelse', ['Return'])]", "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'If', 'Assign', 'Assign']), ('orelse', ['Assign', 'Assign'])]", "If -> [('test', 'Name'), ('body', ['Assign', 'Assign', 'Assign', 'Delete']), ('orelse', [])]", "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'If']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['Assign', 'If', 'If', 'TryExcept', 'If', 'Assign', 'TryExcept', 'TryExcept']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Delete']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Expr', 'Raise']), ('orelse', ['If'])]", "If -> [('test', 'Subscript'), ('body', ['Expr']), ('orelse', ['Return'])]", "If -> [('test', 'Compare'), ('body', ['TryExcept', 'Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Assign', 'Expr', 'TryExcept']), ('orelse', ['Expr', 'Expr'])]", "If -> [('test', 'UnaryOp'), ('body', ['Expr', 'Expr', 'Expr', 'Return']), ('orelse', [])]", "If -> [('test', 'Subscript'), ('body', ['Assign', 'Expr']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr']), ('orelse', [])]", "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Delete', 'Assign', 'Assign', 'If']), ('orelse', ['If'])]", "If -> [('test', 'Call'), ('body', ['Assign', 'Assign', 'If']), ('orelse', ['Expr', 'Assign', 'Continue'])]", "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'Continue']), ('orelse', [])]", "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Delete', 'Return']), ('orelse', ['If'])]", "If -> [('test', 'Call'), ('body', ['Assign', 'If', 'Return']), ('orelse', ['Expr', 'Return'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'If']), ('orelse', ['Expr', 'Assign'])]", "If -> [('test', 'Name'), ('body', ['Expr', 'Assign', 'Assign']), ('orelse', [])]", "If -> [('test', 'UnaryOp'), ('body', ['Raise', 'Expr']), ('orelse', [])]", "If -> [('test', 'BoolOp'), ('body', ['Raise', 'Expr']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Import', 'ImportFrom', 'ImportFrom', 'If', 'Expr', 'Assign', 'Expr', 'Expr']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['If']), ('orelse', ['Assign', 'Return'])]", "If -> [('test', 'Attribute'), ('body', ['If', 'Expr', 'Assign', 'Return']), ('orelse', ['Assign', 'Return'])]", "If -> [('test', 'Call'), ('body', ['Assign', 'Assign', 'If', 'Expr', 'If']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['Assign', 'Assign', 'Expr', 'Return']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['ImportFrom', 'Assign', 'Expr', 'Expr']), ('orelse', [])]", "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['If', 'AugAssign']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['Expr']), ('orelse', ['Expr', 'Expr', 'Expr'])]", "If -> [('test', 'Call'), ('body', ['Assign', 'If', 'Expr', 'Assign', 'Assign', 'Assign', 'If']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['If', 'Expr']), ('orelse', ['If', 'Expr', 'Expr', 'Expr'])]", "If -> [('test', 'Call'), ('body', ['TryExcept']), ('orelse', ['Return'])]", "If -> [('test', 'Num'), ('body', ['Print', 'Print']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Expr', 'Assign', 'Expr', 'Return']), ('orelse', [])]", "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign', 'Assign', 'Print', 'Import', 'Expr', 'Expr', 'Return']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['Expr', 'Expr', 'Expr']), ('orelse', ['Expr'])]", "If -> [('test', 'Call'), ('body', ['Assign', 'Assign', 'TryExcept', 'Assign', 'Assign', 'Assert', 'Assign', 'Expr', 'Assign', 'Assign', 'Assign', 'For', 'Expr', 'Expr']), ('orelse', [])]", "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Return']), ('orelse', ['Assign', 'Assign', 'Assign', 'TryExcept', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Expr', 'Expr'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'If', 'If', 'Return']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['Assign', 'Assign', 'Expr', 'Return']), ('orelse', ['Return'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'For', 'Assign', 'Assign']), ('orelse', ['Assign'])]", "If -> [('test', 'Compare'), ('body', ['TryExcept', 'Assign']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'If', 'For']), ('orelse', ['If', 'Assign', 'For'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'AugAssign']), ('orelse', ['Assign', 'AugAssign'])]", "If -> [('test', 'BoolOp'), ('body', ['Assign']), ('orelse', ['For', 'Expr', 'If', 'If'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'AugAssign']), ('orelse', ['If'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'AugAssign', 'AugAssign']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['Assign', 'Assign', 'For', 'If', 'Assign', 'Assign', 'For']), ('orelse', [])]", "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'If']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'If', 'AugAssign', 'AugAssign']), ('orelse', [])]", "If -> [('test', 'BoolOp'), ('body', ['AugAssign']), ('orelse', ['If'])]", "If -> [('test', 'Name'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'While']), ('orelse', [])]", "If -> [('test', 'BoolOp'), ('body', ['Expr']), ('orelse', ['Break'])]", "If -> [('test', 'BoolOp'), ('body', ['Assign', 'If']), ('orelse', ['If'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'AugAssign', 'Assign', 'AugAssign']), ('orelse', [])]", "If -> [('test', 'BoolOp'), ('body', ['If', 'For', 'AugAssign']), ('orelse', ['AugAssign'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'If', 'AugAssign', 'Assign', 'If', 'Assign', 'AugAssign']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['For']), ('orelse', ['For'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'For']), ('orelse', ['Assign'])]", "If -> [('test', 'BoolOp'), ('body', ['Assign']), ('orelse', ['Assign', 'AugAssign', 'AugAssign'])]", "If -> [('test', 'BoolOp'), ('body', ['If', 'If', 'For']), ('orelse', ['Assign'])]", "If -> [('test', 'Compare'), ('body', ['Assign']), ('orelse', ['Assign', 'If', 'For'])]", "If -> [('test', 'BoolOp'), ('body', ['If', 'For']), ('orelse', ['Assign'])]", "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign', 'Assign', 'For', 'Assign']), ('orelse', ['Assign'])]", "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign', 'For', 'If']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['Expr', 'AugAssign', 'AugAssign']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['If']), ('orelse', ['Assign', 'Assign', 'For', 'Return'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Expr', 'Expr', 'Expr', 'Return']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['If']), ('orelse', ['Assign', 'For'])]", "If -> [('test', 'BoolOp'), ('body', ['Expr', 'Expr', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr']), ('orelse', ['If'])]", "If -> [('test', 'Call'), ('body', ['Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'Expr', 'If']), ('orelse', [])]", "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'Assign', 'Assign']), ('orelse', ['Assign'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'For']), ('orelse', ['Expr'])]", "If -> [('test', 'Compare'), ('body', ['Expr']), ('orelse', ['Assign', 'Expr', 'Expr', 'Expr'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Expr', 'Assign', 'If', 'Assign', 'Assign']), ('orelse', ['Expr', 'Assign', 'Assign', 'Assign', 'Expr', 'If', 'Assign', 'Expr'])]", "If -> [('test', 'Compare'), ('body', ['Expr']), ('orelse', ['Assign', 'AugAssign', 'Expr'])]", "If -> [('test', 'Attribute'), ('body', ['Expr', 'Assign', 'If']), ('orelse', ['If'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign']), ('orelse', ['Expr', 'Assign'])]", "If -> [('test', 'Call'), ('body', ['If', 'TryExcept']), ('orelse', [])]", "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign', 'Assign', 'Expr']), ('orelse', [])]", "If -> [('test', 'UnaryOp'), ('body', ['Assign', 'If', 'Assign', 'If', 'Assign', 'Assign', 'Expr']), ('orelse', [])]", "If -> [('test', 'BoolOp'), ('body', ['Assign', 'For', 'Expr', 'Assign']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['Assert', 'Assert', 'If']), ('orelse', ['If'])]", "If -> [('test', 'Attribute'), ('body', ['Assert', 'Assign', 'Expr', 'If']), ('orelse', [])]", "If -> [('test', 'Attribute'), ('body', ['Assign', 'AugAssign', 'AugAssign']), ('orelse', [])]", "If -> [('test', 'BoolOp'), ('body', ['Assign', 'For']), ('orelse', ['If'])]", "If -> [('test', 'Name'), ('body', ['Assign']), ('orelse', ['Assert'])]", "If -> [('test', 'Attribute'), ('body', ['Delete']), ('orelse', ['Raise'])]", "If -> [('test', 'Attribute'), ('body', ['Expr', 'Raise']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['Assign', 'If']), ('orelse', ['Raise'])]", "If -> [('test', 'Attribute'), ('body', ['Print']), ('orelse', ['Print', 'For'])]", "If -> [('test', 'BoolOp'), ('body', ['AugAssign', 'If', 'Continue']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['AugAssign', 'If', 'If']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Expr', 'Print', 'AugAssign']), ('orelse', [])]", "If -> [('test', 'Attribute'), ('body', ['Assign', 'Expr', 'Expr']), ('orelse', ['Expr'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'AugAssign', 'Expr']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Expr', 'Expr', 'Expr', 'AugAssign']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Import', 'TryExcept', 'Assign', 'Expr', 'Expr', 'Assign', 'Assign', 'Expr']), ('orelse', [])]", "If -> [('test', 'UnaryOp'), ('body', ['If', 'Assign', 'Assign', 'Assign', 'AugAssign']), ('orelse', ['If'])]", "If -> [('test', 'Call'), ('body', ['Assign', 'Assert', 'Assign', 'Assign']), ('orelse', [])]", "If -> [('test', 'UnaryOp'), ('body', ['Return']), ('orelse', ['Assign', 'Assign', 'Expr', 'Return'])]", "If -> [('test', 'UnaryOp'), ('body', ['Return']), ('orelse', ['Expr', 'Expr'])]", "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'If']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['If', 'Assign', 'Return']), ('orelse', ['Return'])]", "If -> [('test', 'Call'), ('body', ['Assign', 'Assign', 'For', 'If', 'Assign', 'For', 'Assign', 'If', 'Assign', 'Return']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['Expr', 'For', 'Expr', 'Return']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Import', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['Assign', 'Expr', 'Expr', 'Expr', 'TryFinally']), ('orelse', ['Return'])]", "If -> [('test', 'Call'), ('body', ['ImportFrom', 'Return']), ('orelse', ['ImportFrom', 'Return'])]", "If -> [('test', 'UnaryOp'), ('body', ['If', 'Assign', 'If', 'TryExcept']), ('orelse', [])]", "If -> [('test', 'Attribute'), ('body', ['Assign', 'Expr']), ('orelse', ['For'])]", "If -> [('test', 'Name'), ('body', ['If', 'Expr', 'If', 'Assign', 'If', 'Assign', 'Assign', 'If', 'If']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['If', 'Assign', 'Assign', 'If', 'If', 'AugAssign', 'Assign']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Expr']), ('orelse', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr', 'Expr', 'If'])]", "If -> [('test', 'Compare'), ('body', ['Print', 'If', 'Break']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['Assign', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'Assign', 'If', 'If', 'If', 'If', 'If', 'If', 'Assign', 'If', 'If', 'If', 'If', 'If', 'If', 'If', 'Assign', 'If', 'Return']), ('orelse', ['Raise'])]", "If -> [('test', 'Call'), ('body', ['Assign', 'Assign', 'Assign', 'While', 'Return']), ('orelse', ['Raise'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'If', 'If', 'If', 'If', 'If', 'TryExcept']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'TryExcept', 'For', 'Expr']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assign', 'For', 'Expr']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['Assign', 'TryExcept', 'For']), ('orelse', [])]", "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign', 'Assign', 'Assign']), ('orelse', ['Assign'])]", "If -> [('test', 'BoolOp'), ('body', ['Assert']), ('orelse', [])]", "If -> [('test', 'BoolOp'), ('body', ['Assert', 'Assign']), ('orelse', [])]", "If -> [('test', 'BoolOp'), ('body', ['Expr', 'AugAssign']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'For', 'If']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['AugAssign', 'AugAssign', 'AugAssign', 'AugAssign']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['If', 'Expr']), ('orelse', ['Expr'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'If', 'Assign', 'If']), ('orelse', ['For'])]", "If -> [('test', 'Name'), ('body', ['Return']), ('orelse', ['Assign', 'Expr', 'Return'])]", "If -> [('test', 'Call'), ('body', ['Assign', 'Assign', 'If', 'If', 'Expr']), ('orelse', [])]", "If -> [('test', 'Attribute'), ('body', ['Assign', 'If', 'Assign', 'Assign', 'Assign', 'Assign', 'Assign', 'For', 'Assign']), ('orelse', [])]", "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign', 'For']), ('orelse', ['For'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'If', 'Assign', 'Return']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['Assign', 'While', 'Return']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['TryExcept', 'Expr', 'Expr']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['Assign', 'Expr', 'Assign']), ('orelse', ['Assign'])]", "If -> [('test', 'Call'), ('body', ['Expr']), ('orelse', ['Assign', 'Expr'])]", "If -> [('test', 'Name'), ('body', ['Assign', 'If']), ('orelse', ['Assign', 'TryExcept', 'Assign'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'For']), ('orelse', ['For', 'Assign', 'Expr'])]", "If -> [('test', 'Compare'), ('body', ['Return']), ('orelse', ['Assign', 'Expr'])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'Assert', 'Assign', 'Assign']), ('orelse', ['Raise'])]", "If -> [('test', 'Name'), ('body', ['Assign', 'If', 'If']), ('orelse', ['Assign'])]", "If -> [('test', 'Compare'), ('body', ['Assign']), ('orelse', ['Assign', 'Raise'])]", "If -> [('test', 'Name'), ('body', ['If', 'Assign', 'Assign']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['Assign', 'Assign', 'Assign', 'Assign', 'Return']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['Return']), ('orelse', ['Assign'])]", "If -> [('test', 'Compare'), ('body', ['TryExcept', 'For', 'Assign', 'Assign', 'For', 'If', 'Expr', 'Assign', 'If', 'Assign', 'Assign', 'If', 'If', 'Expr', 'Expr', 'Expr']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['If', 'Print', 'If']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['Print', 'Print', 'Print']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['Assign', 'If', 'Expr']), ('orelse', [])]", "If -> [('test', 'Attribute'), ('body', ['Assign', 'Assign', 'Expr', 'Assign', 'Expr']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['Expr']), ('orelse', ['Assign', 'Assign', 'Assign', 'Assign', 'Expr'])]", "If -> [('test', 'Compare'), ('body', ['Expr', 'Assign', 'Expr', 'Print', 'Assign', 'Expr']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['Expr', 'Assign', 'If']), ('orelse', [])]", "If -> [('test', 'Name'), ('body', ['Assign', 'Assign', 'If']), ('orelse', ['Expr'])]", "If -> [('test', 'UnaryOp'), ('body', ['Expr', 'Expr', 'AugAssign']), ('orelse', [])]", "If -> [('test', 'Attribute'), ('body', ['Expr']), ('orelse', ['Assign', 'Assign', 'Assign', 'Expr', 'Assign', 'Expr', 'Expr', 'Expr'])]", "If -> [('test', 'Call'), ('body', ['Assign']), ('orelse', ['Continue'])]", "If -> [('test', 'Compare'), ('body', ['Expr', 'ImportFrom', 'ImportFrom', 'Expr', 'Expr']), ('orelse', ['Expr', 'ImportFrom', 'Expr', 'ImportFrom', 'Expr'])]", "If -> [('test', 'Attribute'), ('body', ['Expr']), ('orelse', ['If', 'Expr', 'Expr'])]", "If -> [('test', 'Name'), ('body', ['Assign', 'Assign', 'Assign', 'If', 'Expr']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Assign', 'If', 'Continue']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['Print', 'Print', 'Raise']), ('orelse', [])]", "If -> [('test', 'Compare'), ('body', ['ImportFrom', 'Expr', 'Assign', 'Expr', 'Expr', 'Assign', 'If', 'If', 'If', 'If', 'Assign', 'If', 'Expr']), ('orelse', [])]", "If -> [('test', 'Call'), ('body', ['Assign', 'TryExcept', 'AugAssign']), ('orelse', ['If'])]", "If -> [('test', 'BoolOp'), ('body', ['Assign', 'Assign', 'If', 'Assign', 'Assign', 'Assign', 'AugAssign']), ('orelse', [])]", "If -> [('test', 'UnaryOp'), ('body', ['If', 'If']), ('orelse', ['While'])]", "If -> [('test', 'Call'), ('body', ['Assign', 'AugAssign', 'Return']), ('orelse', [])]", "If -> [('test', 'BoolOp'), ('body', ['Assign', 'AugAssign']), ('orelse', ['If'])]", "If -> [('test', 'BoolOp'), ('body', ['AugAssign']), ('orelse', ['Break'])]"]}